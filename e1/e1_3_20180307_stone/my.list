     1                                  ; 程序源代码（stone.asm）
     2                                  ; 本程序在文本方式显示器上从左边射出一个*号,以45度向右下运动，撞到边框后反射,如此类推.
     3                                  ;  凌应标 2014/3
     4                                      Dn_Rt equ 1                  ;D-Down,U-Up,R-right,L-Left
     5                                      Up_Rt equ 2                  ;
     6                                      Up_Lt equ 3                  ;
     7                                      Dn_Lt equ 4                  ;
     8                                      delay equ 50000					; 计时器延迟计数,用于控制画框的速度
     9                                      ddelay equ 5					; 计时器延迟计数,用于控制画框的速度
    10                                      color equ 10
    11                                      org 7c00h	; 给相对偏移加上7c00h这一个偏移量
    12                                  start:
    13 00000000 B800B8                  	mov ax,0B800h				; 文本窗口显存起始地址
    14 00000003 8EE8                    	mov gs,ax					; GS = B800h
    15 00000005 E83001                      call clean_screen
    16 00000008 BE0700                      mov si, 7
    17 0000000B BF0000                      mov di, 0
    18                                  
    19                                  check_keyboard:
    20 0000000E E81A00                      call loop1
    21 00000011 E85701                  	call display_infomation
    22 00000014 B401                    	mov ah, 01
    23 00000016 CD16                    	int 16h
    24                                  	; 如果没有按， zf为0
    25                                  	; 如果有按，往下执行
    26 00000018 74F4                    	jz check_keyboard
    27                                  
    28                                  	; 从键盘读入字符,扫描码读进ah,ascII码读进al
    29 0000001A B400                    	mov ah, 00h
    30 0000001C CD16                    	int 16h
    31                                  
    32                                  	; 判断字符
    33 0000001E 3C63                    	cmp al, 'c'
    34 00000020 C706[D501]2007          	mov word [status], 0720h
    35 00000026 E80F01                  	call clean_screen
    36                                  	; cmp al, 'h'
    37                                  	; mov word [status], 0f65h
    38                                  	; je clean_screen
    39 00000029 EBE3                    	jmp check_keyboard
    40                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                                  ; si:x
    42                                  ; di:y
    43                                  loop1:
    44 0000002B FF0E[9901]              	dec word[count]			; 递减计数变量
    45 0000002F 75FA                    	jnz loop1					; >0：跳转;
    46 00000031 C706[9901]50C3          	mov word[count],delay
    47 00000037 FF0E[9B01]              	dec word[dcount]			; 递减计数变量
    48 0000003B 75EE                          jnz loop1
    49 0000003D C706[9901]50C3          	mov word[count],delay
    50 00000043 C706[9B01]0500          	mov word[dcount],ddelay
    51                                  
    52                                  
    53                                      ; mov cx, 0f20h     ; 调用函数  清除当前字母的图像,准备显示下一个字母
    54                                      ; call show
    55                                  ; clean_current_char: ; 清除当前字母所占显存位置,准备画下一个字母显存
    56                                  ;       xor ax,ax                 ; 计算显存地址
    57                                  ;       mov ax,si
    58                                  ; 	mov bx,80
    59                                  ; 	mul bx
    60                                  ; 	add ax,di
    61                                  ; 	mov bx,2
    62                                  ; 	mul bx
    63                                  ; 	mov bx,ax
    64                                  ; 	mov ah,07h				
    65                                  ; 	mov al,20h		
    66                                  ; 	mov [gs:bx],ax  		
    67                                  
    68 00000049 B001                          mov al,1
    69 0000004B 3A06[9D01]                    cmp al,byte[rdul]
    70 0000004F 741C                    	jz  DnRt
    71 00000051 B002                          mov al,2
    72 00000053 3A06[9D01]                    cmp al,byte[rdul]
    73 00000057 7440                    	jz  UpRt
    74 00000059 B003                          mov al,3
    75 0000005B 3A06[9D01]                    cmp al,byte[rdul]
    76 0000005F 7462                    	jz  UpLt
    77 00000061 B004                          mov al,4
    78 00000063 3A06[9D01]                    cmp al,byte[rdul]
    79 00000067 0F848200                	jz  DnLt
    80 0000006B EBFE                          jmp $	
    81                                  ;------------------------字母移动部分---------------------------------
    82                                  DnRt:
    83 0000006D 46                      	inc si 
    84 0000006E 47                      	inc di
    85 0000006F 89F3                    	mov bx,si
    86 00000071 B81900                  	mov ax,25
    87 00000074 29D8                    	sub ax,bx
    88 00000076 740C                          jz  dr2ur
    89 00000078 89FB                    	mov bx,di
    90 0000007A B85000                  	mov ax,80
    91 0000007D 29D8                    	sub ax,bx
    92 0000007F 740E                          jz  dr2dl
    93 00000081 E99300                  	jmp move_and_exit
    94                                  dr2ur:
    95 00000084 BE1700                        mov si,23
    96 00000087 C606[9D01]02                  mov byte[rdul],Up_Rt	
    97 0000008C E98800                        jmp move_and_exit
    98                                  dr2dl:
    99 0000008F BF4E00                        mov di,78
   100 00000092 C606[9D01]04                  mov byte[rdul],Dn_Lt	
   101 00000097 EB7E                          jmp move_and_exit
   102                                  
   103                                  UpRt:
   104 00000099 4E                      	dec si
   105 0000009A 47                      	inc di
   106 0000009B 89FB                    	mov bx,di
   107 0000009D B85000                  	mov ax,80
   108 000000A0 29D8                    	sub ax,bx
   109 000000A2 740B                          jz  ur2ul
   110 000000A4 89F3                    	mov bx,si
   111 000000A6 B8FFFF                  	mov ax,-1
   112 000000A9 29D8                    	sub ax,bx
   113 000000AB 740C                          jz  ur2dr
   114 000000AD EB68                    	jmp move_and_exit
   115                                  ur2ul:
   116 000000AF BF4E00                        mov di,78
   117 000000B2 C606[9D01]03                  mov byte[rdul],Up_Lt	
   118 000000B7 EB5E                          jmp move_and_exit
   119                                  ur2dr:
   120 000000B9 BE0100                        mov si,1
   121 000000BC C606[9D01]01                  mov byte[rdul],Dn_Rt	
   122 000000C1 EB54                          jmp move_and_exit
   123                                  UpLt:
   124 000000C3 4E                      	dec si
   125 000000C4 4F                      	dec di
   126 000000C5 89F3                    	mov bx,si
   127 000000C7 B8FFFF                  	mov ax,-1
   128 000000CA 29D8                    	sub ax,bx
   129 000000CC 740B                          jz  ul2dl
   130 000000CE 89FB                    	mov bx,di
   131 000000D0 B8FFFF                  	mov ax,-1
   132 000000D3 29D8                    	sub ax,bx
   133 000000D5 740C                          jz  ul2ur
   134 000000D7 EB3E                    	jmp move_and_exit
   135                                  
   136                                  
   137                                  ul2dl:
   138 000000D9 BE0100                        mov si,1
   139 000000DC C606[9D01]04                  mov byte[rdul],Dn_Lt	
   140 000000E1 EB34                          jmp move_and_exit
   141                                  ul2ur:
   142 000000E3 BF0100                        mov di,1
   143 000000E6 C606[9D01]02                  mov byte[rdul],Up_Rt	
   144 000000EB EB2A                          jmp move_and_exit
   145                                  DnLt:
   146 000000ED 46                      	inc si
   147 000000EE 4F                      	dec di
   148 000000EF 89FB                    	mov bx,di
   149 000000F1 B8FFFF                  	mov ax,-1
   150 000000F4 29D8                    	sub ax,bx
   151 000000F6 740B                          jz  dl2dr
   152 000000F8 89F3                    	mov bx,si
   153 000000FA B81900                  	mov ax,25
   154 000000FD 29D8                    	sub ax,bx
   155 000000FF 740C                          jz  dl2ul
   156 00000101 EB14                    	jmp move_and_exit
   157                                  
   158                                  dl2dr:
   159 00000103 BF0100                      mov di,1
   160 00000106 C606[9D01]01                mov byte[rdul],Dn_Rt	
   161 0000010B EB0A                        jmp move_and_exit
   162                                  	
   163                                  dl2ul:
   164 0000010D BE1700                      mov si,23
   165 00000110 C606[9D01]03                mov byte[rdul],Up_Lt	
   166 00000115 EB00                        jmp move_and_exit
   167                                  
   168                                  move_and_exit:
   169 00000117 89F1                        mov cx, si
   170 00000119 C1E108                      shl cx, 8 
   171 0000011C B102                        mov cl, 02h 
   172 0000011E E80100                      call show
   173 00000121 C3                          ret
   174                                  
   175                                  ;----------------------------字母移动部分----------------------------
   176                                  ; 显示字母函数
   177                                  ; 对外接口为ch, 控制显示格式
   178                                  ; 对外接口为cl, 控制显示字母
   179                                  show:	                ; 计算显存地址
   180 00000122 89F0                        mov ax, si
   181 00000124 BB5000                  	mov bx,80
   182 00000127 F7E3                    	mul bx
   183 00000129 01F8                    	add ax, di
   184 0000012B BB0200                  	mov bx,2
   185 0000012E F7E3                    	mul bx
   186 00000130 89C3                    	mov bx,ax
   187 00000132 89C8                    	mov ax,cx			;  AL = 显示字符值（默认值为20h=空格符）
   188 00000134 658907                  	mov [gs:bx],ax  		;  显示字符的ASCII码值
   189 00000137 C3                      	ret
   190                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   191                                  ; 清屏函数
   192                                  ; 被调用函数不保存任何寄存器,需要改进	
   193                                  clean_screen:
   194 00000138 31C9                    	xor cx, cx
   195                                  clean_screen_x_loop:
   196 0000013A 89CA                    	mov dx, cx
   197 0000013C 51                      	push cx
   198 0000013D 31C9                    	xor cx, cx
   199                                  clean_screen_y_loop:
   200 0000013F 31C0                    	xor ax, ax
   201 00000141 5A                      	pop dx      ; 为了能够在内循环里有一个与外循环相关联的量,并且不被内循环的add语句打乱,每次用到这个量的时候都从栈中拿出来
   202 00000142 52                      	push dx
   203 00000143 89D0                    	mov ax, dx  ; x
   204 00000145 BB5000                  	mov bx, 80
   205 00000148 F7E3                    	mul bx
   206 0000014A 01C8                    	add ax, cx  ; y ; 会修改dx
   207 0000014C BB0200                  	mov bx, 2
   208 0000014F F7E3                    	mul bx
   209 00000151 89C3                    	mov bx, ax
   210                                  	; mov ah, 07h ; 与默认相同
   211                                  	; mov al, 20h ; 显示空格,即将该格显示的内容清除
   212 00000153 A1[D501]                	mov ax, word [status]
   213 00000156 658907                  	mov [gs:bx], ax
   214 00000159 41                      	inc cx      
   215 0000015A 83F950                  	cmp cx, 80 ; 若y等于80,则该行清空完成,转到下一行
   216 0000015D 7402                    	jz clean_screen_next_x
   217 0000015F EBDE                    	jmp clean_screen_y_loop
   218                                  clean_screen_next_x:
   219 00000161 59                      	pop cx
   220 00000162 41                      	inc cx
   221 00000163 83F919                  	cmp cx, 25 ; 若x等于25,则所有列清空完成
   222 00000166 7402                    	jz clean_screen_exit
   223 00000168 EBD0                    	jmp clean_screen_x_loop
   224                                  clean_screen_exit:
   225 0000016A C3                          ret
   226                                  ;-------------展示名字-----------------------------
   227                                  display_infomation:
   228 0000016B 31C9                    	xor cx, cx                ; 计数器清零
   229 0000016D 31C0                          xor ax,ax                 ; 计算显存地址
   230 0000016F B81800                        mov ax, 24
   231 00000172 BB5000                  	mov bx,80
   232 00000175 F7E3                    	mul bx
   233 00000177 83C018                  	add ax,24
   234 0000017A BB0200                  	mov bx,2
   235 0000017D F7E3                    	mul bx
   236 0000017F 89C3                    	mov bx,ax
   237 00000181 56                          push si
   238                                  display_infomation_loop:
   239 00000182 B4AD                    	mov ah,10101101b				;  0000：黑底、1111：亮白字（默认值为07h）TODO:
   240 00000184 BD[9E01]                	mov bp,name		;  AL = 显示字符值（默认值为20h=空格符）
   241 00000187 89CE                    	mov si, cx
   242 00000189 8A02                    	mov al, byte [bp+si]
   243 0000018B 658907                  	mov [gs:bx],ax 
   244 0000018E 83C302                  	add bx, 2  		;  显示字符的ASCII码值
   245 00000191 41                      	inc cx
   246 00000192 83F937                  	cmp cx, 55  ; 个人信息长度
   247 00000195 75EB                    	jnz display_infomation_loop
   248 00000197 5E                          pop si
   249 00000198 C3                      	ret
   250                                  
   251                                  datadef:	
   252 00000199 50C3                        count dw delay
   253 0000019B 0500                        dcount dw ddelay
   254 0000019D 01                          rdul db Dn_Rt         ; 向右下运动
   255                                      ; x    db 7
   256                                      ; y    db 0
   257                                      ; char db 2
   258 0000019E 656E74657220432074-         name db 'enter C to clean the screen! By 16337237 wang yong feng'
   258 000001A7 6F20636C65616E2074-
   258 000001B0 68652073637265656E-
   258 000001B9 212042792031363333-
   258 000001C2 373233372077616E67-
   258 000001CB 20796F6E672066656E-
   258 000001D4 67                 
   259 000001D5 2007                        status dw 0720h
   260                                  ;     number db '16337237'
   261                                  
   262                                  
   263 000001D7 00<rept>                times 510-($-$$) db 0
   264 000001FE 55AA                    dw 0xaa55
   265                                  
   266                                  
