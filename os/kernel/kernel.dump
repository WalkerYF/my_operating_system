
kernel.debug:     file format elf32-i386


Disassembly of section .text:

00000000 <_start>:
_start():
       0:	e8 20 00             	call   23 <install_int40>
       3:	e8 b9 00             	call   bf <install_int33>
       6:	e8 ef 00             	call   f8 <install_int34>
       9:	e8 29 01             	call   135 <install_int35>
       c:	e8 61 01             	call   170 <install_int36>
       f:	66 e8 dd 0d 00 00    	calll  df2 <cstart>

00000015 <start_tty>:
start_tty():
      15:	66 e8 b4 11 00 00    	calll  11cf <tty>
      1b:	b4 02                	mov    $0x2,%ah
      1d:	cd 40                	int    $0x40
      1f:	eb fe                	jmp    1f <user3_bound_x_down+0x8>
      21:	eb fe                	jmp    21 <user3_bound_x_down+0xa>

00000023 <install_int40>:
install_int40():
      23:	50                   	push   %ax
      24:	53                   	push   %bx
      25:	1e                   	push   %ds
      26:	b8 00 00             	mov    $0x0,%ax
      29:	8e d8                	mov    %ax,%ds
      2b:	8c c8                	mov    %cs,%ax
      2d:	c7 06 00 01 3a 00    	movw   $0x3a,0x100
      33:	a3 02 01             	mov    %ax,0x102
      36:	1f                   	pop    %ds
      37:	5b                   	pop    %bx
      38:	58                   	pop    %ax
      39:	c3                   	ret    

0000003a <new_int40>:
new_int40():
      3a:	80 fc 4c             	cmp    $0x4c,%ah
      3d:	74 11                	je     50 <new_int40.return_kernel>
      3f:	88 e3                	mov    %ah,%bl
      41:	31 c0                	xor    %ax,%ax
      43:	b0 02                	mov    $0x2,%al
      45:	f6 e3                	mul    %bl
      47:	89 c6                	mov    %ax,%si
      49:	bb a0 2c             	mov    $0x2ca0,%bx
      4c:	66 ff 10             	calll  *(%bx,%si)
      4f:	cf                   	iret   

00000050 <new_int40.return_kernel>:
new_int40.return_kernel():
      50:	59                   	pop    %cx
      51:	59                   	pop    %cx
      52:	59                   	pop    %cx
      53:	b8 00 10             	mov    $0x1000,%ax
      56:	8e d8                	mov    %ax,%ds
      58:	8e c0                	mov    %ax,%es
      5a:	8e d0                	mov    %ax,%ss
      5c:	bc 00 50             	mov    $0x5000,%sp
      5f:	51                   	push   %cx
      60:	68 00 10             	push   $0x1000
      63:	68 15 00             	push   $0x15
      66:	fb                   	sti    
      67:	cf                   	iret   

00000068 <install_int8>:
install_int8():
      68:	53                   	push   %bx
      69:	51                   	push   %cx
      6a:	52                   	push   %dx
      6b:	56                   	push   %si
      6c:	57                   	push   %di
      6d:	55                   	push   %bp
      6e:	1e                   	push   %ds
      6f:	06                   	push   %es
      70:	16                   	push   %ss
      71:	b0 34                	mov    $0x34,%al
      73:	e6 43                	out    %al,$0x43
      75:	b8 ff ff             	mov    $0xffff,%ax
      78:	e6 40                	out    %al,$0x40
      7a:	88 e0                	mov    %ah,%al
      7c:	e6 40                	out    %al,$0x40
      7e:	b8 00 00             	mov    $0x0,%ax
      81:	8e d8                	mov    %ax,%ds
      83:	8c c8                	mov    %cs,%ax
      85:	a3 22 00             	mov    %ax,0x22
      88:	c7 06 20 00 98 00    	movw   $0x98,0x20
      8e:	17                   	pop    %ss
      8f:	07                   	pop    %es
      90:	1f                   	pop    %ds
      91:	5d                   	pop    %bp
      92:	5f                   	pop    %di
      93:	5e                   	pop    %si
      94:	5a                   	pop    %dx
      95:	59                   	pop    %cx
      96:	5b                   	pop    %bx
      97:	c3                   	ret    

00000098 <new_int8>:
new_int8():
      98:	50                   	push   %ax
      99:	53                   	push   %bx
      9a:	51                   	push   %cx
      9b:	52                   	push   %dx
      9c:	56                   	push   %si
      9d:	57                   	push   %di
      9e:	55                   	push   %bp
      9f:	1e                   	push   %ds
      a0:	06                   	push   %es
      a1:	16                   	push   %ss
      a2:	b8 00 b8             	mov    $0xb800,%ax
      a5:	8e d8                	mov    %ax,%ds
      a7:	66 e8 37 16 00 00    	calll  16e4 <move_name>
      ad:	b0 20                	mov    $0x20,%al
      af:	e6 20                	out    %al,$0x20
      b1:	e6 a0                	out    %al,$0xa0
      b3:	17                   	pop    %ss
      b4:	07                   	pop    %es
      b5:	1f                   	pop    %ds
      b6:	5d                   	pop    %bp
      b7:	5f                   	pop    %di
      b8:	5e                   	pop    %si
      b9:	5a                   	pop    %dx
      ba:	59                   	pop    %cx
      bb:	5b                   	pop    %bx
      bc:	58                   	pop    %ax
      bd:	fb                   	sti    
      be:	cf                   	iret   

000000bf <install_int33>:
install_int33():
      bf:	53                   	push   %bx
      c0:	51                   	push   %cx
      c1:	52                   	push   %dx
      c2:	56                   	push   %si
      c3:	57                   	push   %di
      c4:	55                   	push   %bp
      c5:	1e                   	push   %ds
      c6:	06                   	push   %es
      c7:	16                   	push   %ss
      c8:	b8 00 00             	mov    $0x0,%ax
      cb:	8e d8                	mov    %ax,%ds
      cd:	8c c8                	mov    %cs,%ax
      cf:	c7 06 cc 00 e2 00    	movw   $0xe2,0xcc
      d5:	a3 ce 00             	mov    %ax,0xce
      d8:	17                   	pop    %ss
      d9:	07                   	pop    %es
      da:	1f                   	pop    %ds
      db:	5d                   	pop    %bp
      dc:	5f                   	pop    %di
      dd:	5e                   	pop    %si
      de:	5a                   	pop    %dx
      df:	59                   	pop    %cx
      e0:	5b                   	pop    %bx
      e1:	c3                   	ret    

000000e2 <new_int33>:
new_int33():
      e2:	53                   	push   %bx
      e3:	51                   	push   %cx
      e4:	52                   	push   %dx
      e5:	56                   	push   %si
      e6:	57                   	push   %di
      e7:	55                   	push   %bp
      e8:	1e                   	push   %ds
      e9:	06                   	push   %es
      ea:	16                   	push   %ss
      eb:	89 c2                	mov    %ax,%dx
      ed:	ec                   	in     (%dx),%al
      ee:	17                   	pop    %ss
      ef:	07                   	pop    %es
      f0:	1f                   	pop    %ds
      f1:	5d                   	pop    %bp
      f2:	5f                   	pop    %di
      f3:	5e                   	pop    %si
      f4:	5a                   	pop    %dx
      f5:	59                   	pop    %cx
      f6:	5b                   	pop    %bx
      f7:	cf                   	iret   

000000f8 <install_int34>:
install_int34():
      f8:	53                   	push   %bx
      f9:	51                   	push   %cx
      fa:	52                   	push   %dx
      fb:	56                   	push   %si
      fc:	57                   	push   %di
      fd:	55                   	push   %bp
      fe:	1e                   	push   %ds
      ff:	06                   	push   %es
     100:	16                   	push   %ss
     101:	b8 00 00             	mov    $0x0,%ax
     104:	8e d8                	mov    %ax,%ds
     106:	8c c8                	mov    %cs,%ax
     108:	c7 06 d0 00 1b 01    	movw   $0x11b,0xd0
     10e:	a3 d2 00             	mov    %ax,0xd2
     111:	17                   	pop    %ss
     112:	07                   	pop    %es
     113:	1f                   	pop    %ds
     114:	5d                   	pop    %bp
     115:	5f                   	pop    %di
     116:	5e                   	pop    %si
     117:	5a                   	pop    %dx
     118:	59                   	pop    %cx
     119:	5b                   	pop    %bx
     11a:	c3                   	ret    

0000011b <new_int34>:
new_int34():
     11b:	50                   	push   %ax
     11c:	53                   	push   %bx
     11d:	51                   	push   %cx
     11e:	52                   	push   %dx
     11f:	56                   	push   %si
     120:	57                   	push   %di
     121:	55                   	push   %bp
     122:	1e                   	push   %ds
     123:	06                   	push   %es
     124:	16                   	push   %ss
     125:	89 da                	mov    %bx,%dx
     127:	88 c0                	mov    %al,%al
     129:	ee                   	out    %al,(%dx)
     12a:	17                   	pop    %ss
     12b:	07                   	pop    %es
     12c:	1f                   	pop    %ds
     12d:	5d                   	pop    %bp
     12e:	5f                   	pop    %di
     12f:	5e                   	pop    %si
     130:	5a                   	pop    %dx
     131:	59                   	pop    %cx
     132:	5b                   	pop    %bx
     133:	58                   	pop    %ax
     134:	cf                   	iret   

00000135 <install_int35>:
install_int35():
     135:	53                   	push   %bx
     136:	51                   	push   %cx
     137:	52                   	push   %dx
     138:	56                   	push   %si
     139:	57                   	push   %di
     13a:	55                   	push   %bp
     13b:	1e                   	push   %ds
     13c:	06                   	push   %es
     13d:	16                   	push   %ss
     13e:	b8 00 00             	mov    $0x0,%ax
     141:	8e d8                	mov    %ax,%ds
     143:	8c c8                	mov    %cs,%ax
     145:	c7 06 d4 00 58 01    	movw   $0x158,0xd4
     14b:	a3 d6 00             	mov    %ax,0xd6
     14e:	17                   	pop    %ss
     14f:	07                   	pop    %es
     150:	1f                   	pop    %ds
     151:	5d                   	pop    %bp
     152:	5f                   	pop    %di
     153:	5e                   	pop    %si
     154:	5a                   	pop    %dx
     155:	59                   	pop    %cx
     156:	5b                   	pop    %bx
     157:	c3                   	ret    

00000158 <new_int35>:
new_int35():
     158:	53                   	push   %bx
     159:	51                   	push   %cx
     15a:	52                   	push   %dx
     15b:	56                   	push   %si
     15c:	57                   	push   %di
     15d:	55                   	push   %bp
     15e:	1e                   	push   %ds
     15f:	06                   	push   %es
     160:	16                   	push   %ss
     161:	8e c0                	mov    %ax,%es
     163:	26 8a 07             	mov    %es:(%bx),%al
     166:	17                   	pop    %ss
     167:	07                   	pop    %es
     168:	1f                   	pop    %ds
     169:	5d                   	pop    %bp
     16a:	5f                   	pop    %di
     16b:	5e                   	pop    %si
     16c:	5a                   	pop    %dx
     16d:	59                   	pop    %cx
     16e:	5b                   	pop    %bx
     16f:	cf                   	iret   

00000170 <install_int36>:
install_int36():
     170:	53                   	push   %bx
     171:	51                   	push   %cx
     172:	52                   	push   %dx
     173:	56                   	push   %si
     174:	57                   	push   %di
     175:	55                   	push   %bp
     176:	1e                   	push   %ds
     177:	06                   	push   %es
     178:	16                   	push   %ss
     179:	b8 00 00             	mov    $0x0,%ax
     17c:	8e d8                	mov    %ax,%ds
     17e:	8c c8                	mov    %cs,%ax
     180:	c7 06 d8 00 93 01    	movw   $0x193,0xd8
     186:	a3 da 00             	mov    %ax,0xda
     189:	17                   	pop    %ss
     18a:	07                   	pop    %es
     18b:	1f                   	pop    %ds
     18c:	5d                   	pop    %bp
     18d:	5f                   	pop    %di
     18e:	5e                   	pop    %si
     18f:	5a                   	pop    %dx
     190:	59                   	pop    %cx
     191:	5b                   	pop    %bx
     192:	c3                   	ret    

00000193 <new_int36>:
new_int36():
     193:	50                   	push   %ax
     194:	53                   	push   %bx
     195:	51                   	push   %cx
     196:	52                   	push   %dx
     197:	56                   	push   %si
     198:	57                   	push   %di
     199:	55                   	push   %bp
     19a:	1e                   	push   %ds
     19b:	06                   	push   %es
     19c:	16                   	push   %ss
     19d:	8e c0                	mov    %ax,%es
     19f:	26 88 0f             	mov    %cl,%es:(%bx)
     1a2:	17                   	pop    %ss
     1a3:	07                   	pop    %es
     1a4:	1f                   	pop    %ds
     1a5:	5d                   	pop    %bp
     1a6:	5f                   	pop    %di
     1a7:	5e                   	pop    %si
     1a8:	5a                   	pop    %dx
     1a9:	59                   	pop    %cx
     1aa:	5b                   	pop    %bx
     1ab:	58                   	pop    %ax
     1ac:	cf                   	iret   

000001ad <_put_char>:
_put_char():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:5
#include "../include/basic.h"
#include "../include/type.h"
#include "../include/string.h"

void _put_char(char c, u16 cursor_index){
     1ad:	66 53                	push   %ebx
     1af:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:7
    int _address = 0xb8000;
    int _offset = cursor_index * 2;
     1b3:	67 66 0f b7 5c 24 1c 	movzwl 0x1c(%esp),%ebx
     1ba:	66 01 db             	add    %ebx,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:8
    write_memory_byte(_address+_offset, c);
     1bd:	67 66 8d 83 00 80 0b 	lea    0xb8000(%ebx),%eax
     1c4:	00 
     1c5:	67 66 0f b6 54 24 18 	movzbl 0x18(%esp),%edx
     1cc:	66 52                	push   %edx
     1ce:	66 50                	push   %eax
     1d0:	66 e8 96 09 00 00    	calll  b6c <write_memory_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:9
    write_memory_byte(_address+_offset+1, 0x1f);
     1d6:	66 81 c3 01 80 0b 00 	add    $0xb8001,%ebx
     1dd:	66 83 c4 08          	add    $0x8,%esp
     1e1:	66 6a 1f             	pushl  $0x1f
     1e4:	66 53                	push   %ebx
     1e6:	66 e8 80 09 00 00    	calll  b6c <write_memory_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:11
    return ;
}
     1ec:	66 83 c4 18          	add    $0x18,%esp
     1f0:	66 5b                	pop    %ebx
     1f2:	66 c3                	retl   

000001f4 <set_cursor>:
set_cursor():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:13

void set_cursor(u16 cursor_index){
     1f4:	66 56                	push   %esi
     1f6:	66 53                	push   %ebx
     1f8:	66 83 ec 0c          	sub    $0xc,%esp
     1fc:	67 66 8b 5c 24 18    	mov    0x18(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:16
    // short cursor_index = 80 * row + column;     // 计算光标寄存器的值
    u8 low_eight = cursor_index; // 取低八位，高位被截断
    u8 high_eight = cursor_index >> 8; // 取高八位
     202:	66 89 d8             	mov    %ebx,%eax
     205:	c1 e8 08             	shr    $0x8,%ax
     208:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:17
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     20b:	66 6a 0e             	pushl  $0xe
     20e:	66 68 d4 03 00 00    	pushl  $0x3d4
     214:	66 e8 06 09 00 00    	calll  b20 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:18
    write_port_byte(0x3d5, high_eight);// 将光标索引高八位写入端口
     21a:	66 83 c4 08          	add    $0x8,%esp
     21e:	66 89 f0             	mov    %esi,%eax
     221:	66 0f b6 f0          	movzbl %al,%esi
     225:	66 56                	push   %esi
     227:	66 68 d5 03 00 00    	pushl  $0x3d5
     22d:	66 e8 ed 08 00 00    	calll  b20 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:19
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     233:	66 83 c4 08          	add    $0x8,%esp
     237:	66 6a 0f             	pushl  $0xf
     23a:	66 68 d4 03 00 00    	pushl  $0x3d4
     240:	66 e8 da 08 00 00    	calll  b20 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:20
    write_port_byte(0x3d5, low_eight);// 将光标索引低八位写入端口
     246:	66 83 c4 08          	add    $0x8,%esp
     24a:	66 0f b6 db          	movzbl %bl,%ebx
     24e:	66 53                	push   %ebx
     250:	66 68 d5 03 00 00    	pushl  $0x3d5
     256:	66 e8 c4 08 00 00    	calll  b20 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:22
    return ;
}
     25c:	66 83 c4 14          	add    $0x14,%esp
     260:	66 5b                	pop    %ebx
     262:	66 5e                	pop    %esi
     264:	66 c3                	retl   

00000266 <get_cursor>:
get_cursor():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:24

u16 get_cursor(){
     266:	66 53                	push   %ebx
     268:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:27
    u8 low_eight = 0, high_eight = 0;
    u16 cursor_index = 0;
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     26c:	66 6a 0e             	pushl  $0xe
     26f:	66 68 d4 03 00 00    	pushl  $0x3d4
     275:	66 e8 a5 08 00 00    	calll  b20 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:28
    high_eight = read_port_byte(0x3d5);// 将光标索引高八位写入端口
     27b:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     282:	00 00 
     284:	66 e8 be 08 00 00    	calll  b48 <read_port_byte>
     28a:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:29
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     28d:	66 83 c4 08          	add    $0x8,%esp
     291:	66 6a 0f             	pushl  $0xf
     294:	66 68 d4 03 00 00    	pushl  $0x3d4
     29a:	66 e8 80 08 00 00    	calll  b20 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:30
    low_eight = read_port_byte(0x3d5);// 将光标索引低八位写入端口
     2a0:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     2a7:	00 00 
     2a9:	66 e8 99 08 00 00    	calll  b48 <read_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:32
    cursor_index = high_eight;
    cursor_index = (cursor_index << 8) + low_eight;
     2af:	66 c1 e3 08          	shl    $0x8,%ebx
     2b3:	66 0f b6 c0          	movzbl %al,%eax
     2b7:	66 01 d8             	add    %ebx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:34
    return cursor_index;
}
     2ba:	66 83 c4 18          	add    $0x18,%esp
     2be:	66 5b                	pop    %ebx
     2c0:	66 c3                	retl   

000002c2 <putc>:
putc():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:36

void putc(char c){
     2c2:	66 57                	push   %edi
     2c4:	66 56                	push   %esi
     2c6:	66 53                	push   %ebx
     2c8:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:37
    u16 cursor_index = get_cursor();
     2ce:	66 e8 92 ff ff ff    	calll  266 <get_cursor>
     2d4:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:38
    u16 row = cursor_index / 80;
     2d7:	66 0f b7 d8          	movzwl %ax,%ebx
     2db:	66 69 db cd cc 00 00 	imul   $0xcccd,%ebx,%ebx
     2e2:	66 c1 eb 10          	shr    $0x10,%ebx
     2e6:	c1 eb 06             	shr    $0x6,%bx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:40
    u16 col = cursor_index % 80;
    if (cursor_index >= 1920){
     2e9:	3d 7f 07             	cmp    $0x77f,%ax
     2ec:	76 0c                	jbe    2fa <putc+0x38>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:41
        scroll_screen();
     2ee:	66 e8 f8 08 00 00    	calll  bec <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:42
        cursor_index = 1840;
     2f4:	66 be 30 07 00 00    	mov    $0x730,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:44
    }
    switch (c) {
     2fa:	66 89 f8             	mov    %edi,%eax
     2fd:	3c 0a                	cmp    $0xa,%al
     2ff:	74 06                	je     307 <putc+0x45>
     301:	3c 0d                	cmp    $0xd,%al
     303:	74 25                	je     32a <putc+0x68>
     305:	eb 45                	jmp    34c <putc+0x8a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:46
        case '\n':
            set_cursor((row+1)*80); // 回车，移到下一行
     307:	66 83 ec 0c          	sub    $0xc,%esp
     30b:	67 66 8d 5c 9b 05    	lea    0x5(%ebx,%ebx,4),%ebx
     311:	66 89 d8             	mov    %ebx,%eax
     314:	66 c1 e0 04          	shl    $0x4,%eax
     318:	66 0f b7 c0          	movzwl %ax,%eax
     31c:	66 50                	push   %eax
     31e:	66 e8 d0 fe ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:47
            break;
     324:	66 83 c4 10          	add    $0x10,%esp
     328:	eb 52                	jmp    37c <putc+0xba>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:49
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     32a:	66 83 ec 0c          	sub    $0xc,%esp
     32e:	67 66 8d 1c 9b       	lea    (%ebx,%ebx,4),%ebx
     333:	66 89 d8             	mov    %ebx,%eax
     336:	66 c1 e0 04          	shl    $0x4,%eax
     33a:	66 0f b7 c0          	movzwl %ax,%eax
     33e:	66 50                	push   %eax
     340:	66 e8 ae fe ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:50
            break;
     346:	66 83 c4 10          	add    $0x10,%esp
     34a:	eb 30                	jmp    37c <putc+0xba>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:52
        default:
            _put_char(c, cursor_index);
     34c:	66 83 ec 08          	sub    $0x8,%esp
     350:	66 0f b7 c6          	movzwl %si,%eax
     354:	66 50                	push   %eax
     356:	66 89 f8             	mov    %edi,%eax
     359:	66 0f be f8          	movsbl %al,%edi
     35d:	66 57                	push   %edi
     35f:	66 e8 48 fe ff ff    	calll  1ad <_put_char>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:53
            set_cursor(cursor_index+1);
     365:	66 83 c6 01          	add    $0x1,%esi
     369:	66 0f b7 f6          	movzwl %si,%esi
     36d:	67 66 89 34 24       	mov    %esi,(%esp)
     372:	66 e8 7c fe ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:54
            break;
     378:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:57
    }
    return ;
}
     37c:	66 5b                	pop    %ebx
     37e:	66 5e                	pop    %esi
     380:	66 5f                	pop    %edi
     382:	66 c3                	retl   

00000384 <_putc>:
_putc():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:59

void _putc(char c){
     384:	66 56                	push   %esi
     386:	66 53                	push   %ebx
     388:	66 83 ec 04          	sub    $0x4,%esp
     38c:	67 66 8b 5c 24 10    	mov    0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:60
    u16 cursor_index = get_cursor();
     392:	66 e8 ce fe ff ff    	calll  266 <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:61
    u16 row = cursor_index / 80;
     398:	66 0f b7 d0          	movzwl %ax,%edx
     39c:	66 69 d2 cd cc 00 00 	imul   $0xcccd,%edx,%edx
     3a3:	66 c1 ea 10          	shr    $0x10,%edx
     3a7:	c1 ea 06             	shr    $0x6,%dx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:62
    u16 col = cursor_index % 80;
     3aa:	67 66 8d 34 92       	lea    (%edx,%edx,4),%esi
     3af:	66 c1 e6 04          	shl    $0x4,%esi
     3b3:	66 89 f1             	mov    %esi,%ecx
     3b6:	66 89 c6             	mov    %eax,%esi
     3b9:	66 29 ce             	sub    %ecx,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:63
    switch (c) {
     3bc:	80 fb 0a             	cmp    $0xa,%bl
     3bf:	74 07                	je     3c8 <_putc+0x44>
     3c1:	80 fb 0d             	cmp    $0xd,%bl
     3c4:	74 2b                	je     3f1 <_putc+0x6d>
     3c6:	eb 4b                	jmp    413 <_putc+0x8f>
     3c8:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:65
        case '\n':
            set_cursor((row+1)*80+col); // 回车，移到下一行
     3cb:	66 83 ec 0c          	sub    $0xc,%esp
     3cf:	67 66 8d 54 92 05    	lea    0x5(%edx,%edx,4),%edx
     3d5:	66 89 d0             	mov    %edx,%eax
     3d8:	66 c1 e0 04          	shl    $0x4,%eax
     3dc:	66 01 c1             	add    %eax,%ecx
     3df:	66 0f b7 c9          	movzwl %cx,%ecx
     3e3:	66 51                	push   %ecx
     3e5:	66 e8 09 fe ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:66
            break;
     3eb:	66 83 c4 10          	add    $0x10,%esp
     3ef:	eb 3c                	jmp    42d <_putc+0xa9>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:68
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     3f1:	66 83 ec 0c          	sub    $0xc,%esp
     3f5:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     3fa:	66 89 d0             	mov    %edx,%eax
     3fd:	66 c1 e0 04          	shl    $0x4,%eax
     401:	66 0f b7 c0          	movzwl %ax,%eax
     405:	66 50                	push   %eax
     407:	66 e8 e7 fd ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:69
            break;
     40d:	66 83 c4 10          	add    $0x10,%esp
     411:	eb 1a                	jmp    42d <_putc+0xa9>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:71
        default:
            _put_char(c, cursor_index);
     413:	66 83 ec 08          	sub    $0x8,%esp
     417:	66 0f b7 c0          	movzwl %ax,%eax
     41b:	66 50                	push   %eax
     41d:	66 0f be db          	movsbl %bl,%ebx
     421:	66 53                	push   %ebx
     423:	66 e8 84 fd ff ff    	calll  1ad <_put_char>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:73
            // set_cursor(cursor_index+1);
            break;
     429:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:76
    }
    return ;
}
     42d:	66 83 c4 04          	add    $0x4,%esp
     431:	66 5b                	pop    %ebx
     433:	66 5e                	pop    %esi
     435:	66 c3                	retl   

00000437 <puti>:
puti():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:78

void puti(u32 n){
     437:	66 56                	push   %esi
     439:	66 53                	push   %ebx
     43b:	66 83 ec 44          	sub    $0x44,%esp
     43f:	67 66 8b 4c 24 50    	mov    0x50(%esp),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:79
    int len = 0;
     445:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:81
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     44b:	eb 2d                	jmp    47a <puti+0x43>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:82
        num[len] = n % 10;
     44d:	66 ba cd cc cc cc    	mov    $0xcccccccd,%edx
     453:	66 89 c8             	mov    %ecx,%eax
     456:	66 f7 e2             	mul    %edx
     459:	66 c1 ea 03          	shr    $0x3,%edx
     45d:	66 89 d6             	mov    %edx,%esi
     460:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     465:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     46a:	66 29 c1             	sub    %eax,%ecx
     46d:	67 66 89 4c 9c 04    	mov    %ecx,0x4(%esp,%ebx,4)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:83
        n = n / 10;
     473:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:84
        len++;
     476:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:81
}

void puti(u32 n){
    int len = 0;
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     47a:	66 85 c9             	test   %ecx,%ecx
     47d:	75 ce                	jne    44d <puti+0x16>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:86
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     47f:	66 83 eb 01          	sub    $0x1,%ebx
     483:	eb 23                	jmp    4a8 <puti+0x71>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:87 (discriminator 3)
        putc(num[i]+'0');
     485:	66 83 ec 0c          	sub    $0xc,%esp
     489:	67 66 0f b6 44 9c 10 	movzbl 0x10(%esp,%ebx,4),%eax
     490:	66 83 c0 30          	add    $0x30,%eax
     494:	66 0f be c0          	movsbl %al,%eax
     498:	66 50                	push   %eax
     49a:	66 e8 22 fe ff ff    	calll  2c2 <putc>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:86 (discriminator 3)
    while (n != 0){
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     4a0:	66 83 eb 01          	sub    $0x1,%ebx
     4a4:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:86 (discriminator 1)
     4a8:	66 85 db             	test   %ebx,%ebx
     4ab:	79 d8                	jns    485 <puti+0x4e>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:90
        putc(num[i]+'0');
    }
    return ;
}
     4ad:	66 83 c4 44          	add    $0x44,%esp
     4b1:	66 5b                	pop    %ebx
     4b3:	66 5e                	pop    %esi
     4b5:	66 c3                	retl   

000004b7 <puts>:
puts():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:92

void puts(char * str, int size){
     4b7:	66 57                	push   %edi
     4b9:	66 56                	push   %esi
     4bb:	66 53                	push   %ebx
     4bd:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
     4c3:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:93
    int i = 0;
     4c9:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:94
    while (i < size){
     4cf:	eb 1a                	jmp    4eb <puts+0x34>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:95
        putc(str[i]);
     4d1:	66 83 ec 0c          	sub    $0xc,%esp
     4d5:	67 66 0f be 04 1f    	movsbl (%edi,%ebx,1),%eax
     4db:	66 50                	push   %eax
     4dd:	66 e8 df fd ff ff    	calll  2c2 <putc>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:96
        i++;
     4e3:	66 83 c3 01          	add    $0x1,%ebx
     4e7:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:94
    return ;
}

void puts(char * str, int size){
    int i = 0;
    while (i < size){
     4eb:	66 39 f3             	cmp    %esi,%ebx
     4ee:	7c e1                	jl     4d1 <puts+0x1a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:99
        putc(str[i]);
        i++;
    }
    return ;
}
     4f0:	66 5b                	pop    %ebx
     4f2:	66 5e                	pop    %esi
     4f4:	66 5f                	pop    %edi
     4f6:	66 c3                	retl   

000004f8 <sprintf>:
sprintf():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:103



void sprintf(char * dest , char * format, ...){
     4f8:	66 55                	push   %ebp
     4fa:	66 57                	push   %edi
     4fc:	66 56                	push   %esi
     4fe:	66 53                	push   %ebx
     500:	66 83 ec 5c          	sub    $0x5c,%esp
     504:	67 66 8b 6c 24 70    	mov    0x70(%esp),%ebp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:106
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     50a:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:105



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     510:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:104
}



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
     516:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:108
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     51c:	e9 33 01             	jmp    652 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:109
        if (format[src_index] == '%'){
     51f:	3c 25                	cmp    $0x25,%al
     521:	0f 85 1b 01          	jne    640 <sprintf+0x148>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:111
            src_index++;
            switch(format[src_index]){
     525:	67 66 0f b6 44 39 01 	movzbl 0x1(%ecx,%edi,1),%eax
     52c:	3c 64                	cmp    $0x64,%al
     52e:	74 28                	je     558 <sprintf+0x60>
     530:	3c 73                	cmp    $0x73,%al
     532:	0f 84 b5 00          	je     5eb <sprintf+0xf3>
     536:	3c 63                	cmp    $0x63,%al
     538:	0f 85 fe 00          	jne    63a <sprintf+0x142>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:113
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     53c:	67 66 8b 44 94 78    	mov    0x78(%esp,%edx,4),%eax
     542:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:114
                    src_index++;
     547:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:113
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     54b:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     550:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:115
                    src_index++;
                    break;
     555:	e9 fa 00             	jmp    652 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:118
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     558:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     55d:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     563:	67 66 8b 4c 94 78    	mov    0x78(%esp,%edx,4),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:119
                    int len = 0; 
     569:	66 be 00 00 00 00    	mov    $0x0,%esi
     56f:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:121
                    int num[INT_LENGTH];
                    while (n != 0){
     575:	eb 37                	jmp    5ae <sprintf+0xb6>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:122
                        num[len] = n % 10;
     577:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     57d:	66 89 c8             	mov    %ecx,%eax
     580:	66 f7 ea             	imul   %edx
     583:	66 c1 fa 02          	sar    $0x2,%edx
     587:	66 89 c8             	mov    %ecx,%eax
     58a:	66 c1 f8 1f          	sar    $0x1f,%eax
     58e:	66 29 c2             	sub    %eax,%edx
     591:	66 89 d7             	mov    %edx,%edi
     594:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     599:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     59e:	66 29 c1             	sub    %eax,%ecx
     5a1:	67 66 89 4c b4 14    	mov    %ecx,0x14(%esp,%esi,4)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:123
                        n = n / 10;
     5a7:	66 89 f9             	mov    %edi,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:124
                        len++;
     5aa:	66 83 c6 01          	add    $0x1,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:121
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     5ae:	66 85 c9             	test   %ecx,%ecx
     5b1:	75 c4                	jne    577 <sprintf+0x7f>
     5b3:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:126
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     5b9:	67 66 8d 46 ff       	lea    -0x1(%esi),%eax
     5be:	eb 1a                	jmp    5da <sprintf+0xe2>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     5c0:	67 66 0f b6 74 84 14 	movzbl 0x14(%esp,%eax,4),%esi
     5c7:	67 66 8d 56 30       	lea    0x30(%esi),%edx
     5cc:	67 88 54 1d 00       	mov    %dl,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:126 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     5d1:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     5d5:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:126 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     5da:	66 85 c0             	test   %eax,%eax
     5dd:	79 e1                	jns    5c0 <sprintf+0xc8>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:129
                        dest[des_index++] = num[i]+'0';
                    }
                    src_index++;
     5df:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:118
                    dest[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     5e3:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     5e9:	eb 67                	jmp    652 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     5eb:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     5f0:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     5f6:	67 66 8b 74 94 78    	mov    0x78(%esp,%edx,4),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:134
                    u32 str_len = strlen(str);
     5fc:	66 83 ec 0c          	sub    $0xc,%esp
     600:	66 56                	push   %esi
     602:	66 e8 84 06 00 00    	calll  c8c <strlen>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:136
                    u32 i = 0;
                    while (i < str_len){
     608:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:135
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
     60c:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:136
                    while (i < str_len){
     612:	eb 15                	jmp    629 <sprintf+0x131>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:137
                        dest[des_index++] = str[i++];
     614:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
     61a:	67 88 4c 1d 00       	mov    %cl,0x0(%ebp,%ebx,1)
     61f:	67 66 8d 52 01       	lea    0x1(%edx),%edx
     624:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:136
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
     629:	66 39 c2             	cmp    %eax,%edx
     62c:	72 e6                	jb     614 <sprintf+0x11c>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:139
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
     62e:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     632:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:140
                    u32 i = 0;
                    while (i < str_len){
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
     638:	eb 18                	jmp    652 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:143
                }
                default :
                    src_index++;
     63a:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:144
                    break;
     63e:	eb 12                	jmp    652 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:147
            }
        }
        else if (format[src_index] == '\\') {
     640:	3c 5c                	cmp    $0x5c,%al
     642:	74 0e                	je     652 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:166
                        break;
                }
            }
        }
        else {
            dest[des_index++] = format[src_index++];
     644:	66 83 c7 01          	add    $0x1,%edi
     648:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
     64d:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:108
void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     652:	67 66 8b 4c 24 74    	mov    0x74(%esp),%ecx
     658:	67 66 0f b6 04 39    	movzbl (%ecx,%edi,1),%eax
     65e:	84 c0                	test   %al,%al
     660:	0f 85 bb fe          	jne    51f <sprintf+0x27>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:169
        }
        else {
            dest[des_index++] = format[src_index++];
        }
    }
    dest[des_index] = 0;
     664:	67 c6 44 1d 00 00    	movb   $0x0,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:171
    return ;
}
     66a:	66 83 c4 5c          	add    $0x5c,%esp
     66e:	66 5b                	pop    %ebx
     670:	66 5e                	pop    %esi
     672:	66 5f                	pop    %edi
     674:	66 5d                	pop    %ebp
     676:	66 c3                	retl   

00000678 <vprintf>:
vprintf():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:174


void vprintf(char * format, va_list va){
     678:	66 55                	push   %ebp
     67a:	66 57                	push   %edi
     67c:	66 56                	push   %esi
     67e:	66 53                	push   %ebx
     680:	66 81 ec 5c 04 00 00 	sub    $0x45c,%esp
     687:	67 66 8b ac 24 70 04 	mov    0x470(%esp),%ebp
     68e:	00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:178
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     690:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:177


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     696:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:176
}


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
     69c:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:180
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     6a2:	e9 4c 01             	jmp    7f1 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:181
        if (format[src_index] == '%'){
     6a5:	3c 25                	cmp    $0x25,%al
     6a7:	0f 85 34 01          	jne    7df <vprintf+0x167>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:183
            src_index++;
            switch(format[src_index]){
     6ab:	67 66 0f b6 44 3d 01 	movzbl 0x1(%ebp,%edi,1),%eax
     6b2:	3c 64                	cmp    $0x64,%al
     6b4:	74 30                	je     6e6 <vprintf+0x6e>
     6b6:	3c 73                	cmp    $0x73,%al
     6b8:	0f 84 c6 00          	je     782 <vprintf+0x10a>
     6bc:	3c 63                	cmp    $0x63,%al
     6be:	0f 85 17 01          	jne    7d9 <vprintf+0x161>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:185
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
     6c2:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     6c9:	00 00 
     6cb:	67 66 8b 04 90       	mov    (%eax,%edx,4),%eax
     6d0:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:186
                    src_index++;
     6d5:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:185
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
     6d9:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     6de:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:187
                    src_index++;
                    break;
     6e3:	e9 0b 01             	jmp    7f1 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:190
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     6e6:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     6eb:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     6f1:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     6f8:	00 00 
     6fa:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:191
                    int len = 0; 
     6ff:	66 b9 00 00 00 00    	mov    $0x0,%ecx
     705:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:193
                    int num[INT_LENGTH];
                    while (n != 0){
     70b:	eb 3a                	jmp    747 <vprintf+0xcf>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:194
                        num[len] = n % 10;
     70d:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     713:	66 89 f0             	mov    %esi,%eax
     716:	66 f7 ea             	imul   %edx
     719:	66 c1 fa 02          	sar    $0x2,%edx
     71d:	66 89 f0             	mov    %esi,%eax
     720:	66 c1 f8 1f          	sar    $0x1f,%eax
     724:	66 29 c2             	sub    %eax,%edx
     727:	66 89 d7             	mov    %edx,%edi
     72a:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     72f:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     734:	66 89 f2             	mov    %esi,%edx
     737:	66 29 c2             	sub    %eax,%edx
     73a:	67 66 89 54 8c 14    	mov    %edx,0x14(%esp,%ecx,4)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:195
                        n = n / 10;
     740:	66 89 fe             	mov    %edi,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:196
                        len++;
     743:	66 83 c1 01          	add    $0x1,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:193
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     747:	66 85 f6             	test   %esi,%esi
     74a:	75 c1                	jne    70d <vprintf+0x95>
     74c:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:198
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     752:	66 83 e9 01          	sub    $0x1,%ecx
     756:	eb 19                	jmp    771 <vprintf+0xf9>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
     758:	67 66 0f b6 44 8c 14 	movzbl 0x14(%esp,%ecx,4),%eax
     75f:	66 83 c0 30          	add    $0x30,%eax
     763:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:198 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     768:	66 83 e9 01          	sub    $0x1,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
     76c:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:198 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     771:	66 85 c9             	test   %ecx,%ecx
     774:	79 e2                	jns    758 <vprintf+0xe0>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:201
                        buf[des_index++] = num[i]+'0';
                    }
                    src_index++;
     776:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:190
                    buf[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     77a:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     780:	eb 6f                	jmp    7f1 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     782:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     787:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     78d:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     794:	00 00 
     796:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:206
                    u32 str_len = strlen(str);
     79b:	66 83 ec 0c          	sub    $0xc,%esp
     79f:	66 56                	push   %esi
     7a1:	66 e8 e5 04 00 00    	calll  c8c <strlen>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:208
                    u32 i = 0;
                    while (i < str_len){
     7a7:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:207
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
     7ab:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:208
                    while (i < str_len){
     7b1:	eb 15                	jmp    7c8 <vprintf+0x150>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:209
                        buf[des_index++] = str[i++];
     7b3:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
     7b9:	67 88 4c 1c 50       	mov    %cl,0x50(%esp,%ebx,1)
     7be:	67 66 8d 52 01       	lea    0x1(%edx),%edx
     7c3:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:208
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
     7c8:	66 39 c2             	cmp    %eax,%edx
     7cb:	72 e6                	jb     7b3 <vprintf+0x13b>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:211
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
     7cd:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     7d1:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:212
                    u32 i = 0;
                    while (i < str_len){
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
     7d7:	eb 18                	jmp    7f1 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:215
                }
                default :
                    src_index++;
     7d9:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:216
                    break;
     7dd:	eb 12                	jmp    7f1 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:219
            }
        }
        else if (format[src_index] == '\\') {
     7df:	3c 5c                	cmp    $0x5c,%al
     7e1:	74 0e                	je     7f1 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:238
                        break;
                }
            }
        }
        else {
            buf[des_index++] = format[src_index++];
     7e3:	66 83 c7 01          	add    $0x1,%edi
     7e7:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
     7ec:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:180
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     7f1:	67 66 0f b6 44 3d 00 	movzbl 0x0(%ebp,%edi,1),%eax
     7f8:	84 c0                	test   %al,%al
     7fa:	0f 85 a7 fe          	jne    6a5 <vprintf+0x2d>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:241
        }
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
     7fe:	67 c6 44 1c 50 00    	movb   $0x0,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:242
    for (int i = 0; i < des_index; i++){
     804:	66 be 00 00 00 00    	mov    $0x0,%esi
     80a:	eb 1b                	jmp    827 <loader_code_segment+0x27>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:243 (discriminator 3)
        putc(buf[i]);
     80c:	66 83 ec 0c          	sub    $0xc,%esp
     810:	67 66 0f be 44 34 5c 	movsbl 0x5c(%esp,%esi,1),%eax
     817:	66 50                	push   %eax
     819:	66 e8 a3 fa ff ff    	calll  2c2 <putc>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:242 (discriminator 3)
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    for (int i = 0; i < des_index; i++){
     81f:	66 83 c6 01          	add    $0x1,%esi
     823:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:242 (discriminator 1)
     827:	66 39 f3             	cmp    %esi,%ebx
     82a:	7f e0                	jg     80c <loader_code_segment+0xc>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:246
        putc(buf[i]);
    }
    return ;
}
     82c:	66 81 c4 5c 04 00 00 	add    $0x45c,%esp
     833:	66 5b                	pop    %ebx
     835:	66 5e                	pop    %esi
     837:	66 5f                	pop    %edi
     839:	66 5d                	pop    %ebp
     83b:	66 c3                	retl   

0000083d <printf>:
printf():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:248

void printf(char * format, ...){
     83d:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:249
    vprintf(format, &format+1);// 其实这里由于format是个指针，是32位的，所以这里对format的地址+1，也会加4个字节。
     841:	67 66 8d 44 24 1c    	lea    0x1c(%esp),%eax
     847:	66 50                	push   %eax
     849:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     84f:	66 e8 23 fe ff ff    	calll  678 <vprintf>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:251
    return ;
}
     855:	66 83 c4 1c          	add    $0x1c,%esp
     859:	66 c3                	retl   

0000085b <isalpha>:
isalpha():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:270
//     return ;
// }



int isalpha (int ch){
     85b:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:271
    if ('a' <= ch && ch <= 'z')
     861:	67 66 8d 50 9f       	lea    -0x61(%eax),%edx
     866:	66 83 fa 19          	cmp    $0x19,%edx
     86a:	76 12                	jbe    87e <isalpha+0x23>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:273
        return 1;
    if ('A' <= ch && ch <= 'Z')
     86c:	66 83 e8 41          	sub    $0x41,%eax
     870:	66 83 f8 19          	cmp    $0x19,%eax
     874:	77 10                	ja     886 <isalpha+0x2b>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:274
        return 1;
     876:	66 b8 01 00 00 00    	mov    $0x1,%eax
     87c:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:272



int isalpha (int ch){
    if ('a' <= ch && ch <= 'z')
        return 1;
     87e:	66 b8 01 00 00 00    	mov    $0x1,%eax
     884:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:275
    if ('A' <= ch && ch <= 'Z')
        return 1;
    return 0;
     886:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:276
}
     88c:	66 c3                	retl   

0000088e <isdigit>:
isdigit():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:278
int isdigit (int ch){
    if ('0' <= ch && ch <= '9')
     88e:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
     894:	66 83 e8 30          	sub    $0x30,%eax
     898:	66 83 f8 09          	cmp    $0x9,%eax
     89c:	77 08                	ja     8a6 <isdigit+0x18>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:279
        return 1;
     89e:	66 b8 01 00 00 00    	mov    $0x1,%eax
     8a4:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:280
    return 0;
     8a6:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:281
}
     8ac:	66 c3                	retl   

000008ae <isalnum>:
isalnum():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:283

int isalnum (int ch){
     8ae:	66 53                	push   %ebx
     8b0:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:284
    if ( isalpha(ch) || isdigit(ch) ){
     8b6:	66 53                	push   %ebx
     8b8:	66 e8 9d ff ff ff    	calll  85b <isalpha>
     8be:	66 83 c4 04          	add    $0x4,%esp
     8c2:	66 85 c0             	test   %eax,%eax
     8c5:	75 13                	jne    8da <isalnum+0x2c>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:284 (discriminator 1)
     8c7:	66 53                	push   %ebx
     8c9:	66 e8 bf ff ff ff    	calll  88e <isdigit>
     8cf:	66 83 c4 04          	add    $0x4,%esp
     8d3:	66 85 c0             	test   %eax,%eax
     8d6:	75 0a                	jne    8e2 <isalnum+0x34>
     8d8:	eb 0e                	jmp    8e8 <isalnum+0x3a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:285
        return 1;
     8da:	66 b8 01 00 00 00    	mov    $0x1,%eax
     8e0:	eb 06                	jmp    8e8 <isalnum+0x3a>
     8e2:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:288
    }
    return 0;
}
     8e8:	66 5b                	pop    %ebx
     8ea:	66 c3                	retl   

000008ec <ispunct>:
ispunct():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:289
int ispunct (int ch){
     8ec:	66 83 ec 30          	sub    $0x30,%esp
     8f0:	67 66 8b 4c 24 34    	mov    0x34(%esp),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:290
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
     8f6:	67 66 c7 44 24 0e 21 	movl   $0x24232221,0xe(%esp)
     8fd:	22 23 24 
     900:	67 66 c7 44 24 12 25 	movl   $0x28272625,0x12(%esp)
     907:	26 27 28 
     90a:	67 66 c7 44 24 16 29 	movl   $0x2c2b2a29,0x16(%esp)
     911:	2a 2b 2c 
     914:	67 66 c7 44 24 1a 2d 	movl   $0x3a2f2e2d,0x1a(%esp)
     91b:	2e 2f 3a 
     91e:	67 66 c7 44 24 1e 3b 	movl   $0x3e3d3c3b,0x1e(%esp)
     925:	3c 3d 3e 
     928:	67 66 c7 44 24 22 3f 	movl   $0x5c5b403f,0x22(%esp)
     92f:	40 5b 5c 
     932:	67 66 c7 44 24 26 5d 	movl   $0x605f5e5d,0x26(%esp)
     939:	5e 5f 60 
     93c:	67 66 c7 44 24 2a 7b 	movl   $0x7e7d7c7b,0x2a(%esp)
     943:	7c 7d 7e 
     946:	67 c7 44 24 2e 00 00 	movw   $0x0,0x2e(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:291
    for (int i = 0; i < 33; i++){
     94d:	66 b8 00 00 00 00    	mov    $0x0,%eax
     953:	eb 10                	jmp    965 <ispunct+0x79>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:292
        if (ch == punct[i])
     955:	67 66 0f be 54 04 0e 	movsbl 0xe(%esp,%eax,1),%edx
     95c:	66 39 ca             	cmp    %ecx,%edx
     95f:	74 12                	je     973 <ispunct+0x87>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:291 (discriminator 2)
    }
    return 0;
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
     961:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:291 (discriminator 1)
     965:	66 83 f8 20          	cmp    $0x20,%eax
     969:	7e ea                	jle    955 <ispunct+0x69>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:295
        if (ch == punct[i])
            return 1;
    }
    return 0;
     96b:	66 b8 00 00 00 00    	mov    $0x0,%eax
     971:	eb 06                	jmp    979 <ispunct+0x8d>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:293
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
        if (ch == punct[i])
            return 1;
     973:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:296
    }
    return 0;
}
     979:	66 83 c4 30          	add    $0x30,%esp
     97d:	66 c3                	retl   

0000097f <isblank>:
isblank():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:298
int isblank (int ch){
    if (ch == ' ')
     97f:	67 66 83 7c 24 04 20 	cmpl   $0x20,0x4(%esp)
     986:	75 08                	jne    990 <isblank+0x11>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:299
        return 1;
     988:	66 b8 01 00 00 00    	mov    $0x1,%eax
     98e:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:300
    return 0;
     990:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:301
}
     996:	66 c3                	retl   

00000998 <isprint>:
isprint():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:302
int isprint (int ch){
     998:	66 53                	push   %ebx
     99a:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303
    if (isalpha(ch) || isdigit(ch) || isalnum(ch) || ispunct(ch) || isblank(ch)){
     9a0:	66 53                	push   %ebx
     9a2:	66 e8 b3 fe ff ff    	calll  85b <isalpha>
     9a8:	66 83 c4 04          	add    $0x4,%esp
     9ac:	66 85 c0             	test   %eax,%eax
     9af:	75 46                	jne    9f7 <isprint+0x5f>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 1)
     9b1:	66 53                	push   %ebx
     9b3:	66 e8 d5 fe ff ff    	calll  88e <isdigit>
     9b9:	66 83 c4 04          	add    $0x4,%esp
     9bd:	66 85 c0             	test   %eax,%eax
     9c0:	75 3d                	jne    9ff <isprint+0x67>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 2)
     9c2:	66 53                	push   %ebx
     9c4:	66 e8 e4 fe ff ff    	calll  8ae <isalnum>
     9ca:	66 83 c4 04          	add    $0x4,%esp
     9ce:	66 85 c0             	test   %eax,%eax
     9d1:	75 34                	jne    a07 <isprint+0x6f>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 3)
     9d3:	66 53                	push   %ebx
     9d5:	66 e8 11 ff ff ff    	calll  8ec <ispunct>
     9db:	66 83 c4 04          	add    $0x4,%esp
     9df:	66 85 c0             	test   %eax,%eax
     9e2:	75 2b                	jne    a0f <isprint+0x77>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 4)
     9e4:	66 53                	push   %ebx
     9e6:	66 e8 93 ff ff ff    	calll  97f <isblank>
     9ec:	66 83 c4 04          	add    $0x4,%esp
     9f0:	66 85 c0             	test   %eax,%eax
     9f3:	75 22                	jne    a17 <isprint+0x7f>
     9f5:	eb 26                	jmp    a1d <isprint+0x85>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:304
        return 1;
     9f7:	66 b8 01 00 00 00    	mov    $0x1,%eax
     9fd:	eb 1e                	jmp    a1d <isprint+0x85>
     9ff:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a05:	eb 16                	jmp    a1d <isprint+0x85>
     a07:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a0d:	eb 0e                	jmp    a1d <isprint+0x85>
     a0f:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a15:	eb 06                	jmp    a1d <isprint+0x85>
     a17:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:307
    }
    return 0;
}
     a1d:	66 5b                	pop    %ebx
     a1f:	66 c3                	retl   

00000a21 <iscntrl>:
iscntrl():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:308
int iscntrl (int ch){
     a21:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:310
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
     a27:	66 83 f8 1f          	cmp    $0x1f,%eax
     a2b:	76 0e                	jbe    a3b <iscntrl+0x1a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:312
        return 1;
    if (ch == 0x7f)
     a2d:	66 83 f8 7f          	cmp    $0x7f,%eax
     a31:	75 10                	jne    a43 <iscntrl+0x22>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:313
        return 1;
     a33:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a39:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:311
    return 0;
}
int iscntrl (int ch){
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
        return 1;
     a3b:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a41:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:314
    if (ch == 0x7f)
        return 1;
    return 0;
     a43:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:315
}
     a49:	66 c3                	retl   

00000a4b <read_n_sector>:
read_n_sector():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:321

/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
     a4b:	66 55                	push   %ebp
     a4d:	66 57                	push   %edi
     a4f:	66 56                	push   %esi
     a51:	66 53                	push   %ebx
     a53:	66 83 ec 1c          	sub    $0x1c,%esp
     a57:	67 66 0f b7 7c 24 30 	movzwl 0x30(%esp),%edi
     a5e:	67 66 0f b7 74 24 34 	movzwl 0x34(%esp),%esi
     a65:	67 66 0f b7 44 24 38 	movzwl 0x38(%esp),%eax
     a6c:	67 89 44 24 0c       	mov    %ax,0xc(%esp)
     a71:	67 66 0f b7 44 24 3c 	movzwl 0x3c(%esp),%eax
     a78:	67 89 44 24 0e       	mov    %ax,0xe(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:322
    for (int i = 0; i < number; i++){
     a7d:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     a83:	eb 7d                	jmp    b02 <read_n_sector+0xb7>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:323 (discriminator 3)
        int sector = (sector_code+i) % 18+1;
     a85:	66 0f b7 ef          	movzwl %di,%ebp
     a89:	66 01 dd             	add    %ebx,%ebp
     a8c:	66 ba 39 8e e3 38    	mov    $0x38e38e39,%edx
     a92:	66 89 e8             	mov    %ebp,%eax
     a95:	66 f7 ea             	imul   %edx
     a98:	66 c1 fa 02          	sar    $0x2,%edx
     a9c:	66 89 e8             	mov    %ebp,%eax
     a9f:	66 c1 f8 1f          	sar    $0x1f,%eax
     aa3:	66 29 c2             	sub    %eax,%edx
     aa6:	66 89 d1             	mov    %edx,%ecx
     aa9:	67 66 8d 14 d2       	lea    (%edx,%edx,8),%edx
     aae:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     ab3:	66 89 ea             	mov    %ebp,%edx
     ab6:	66 29 c2             	sub    %eax,%edx
     ab9:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:325 (discriminator 3)
        int mid = (sector_code+i) / 18;
        int cylinder = mid >> 1;
     abd:	66 89 cd             	mov    %ecx,%ebp
     ac0:	66 d1 fd             	sar    %ebp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:327 (discriminator 3)
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
     ac3:	66 83 ec 0c          	sub    $0xc,%esp
     ac7:	66 89 d8             	mov    %ebx,%eax
     aca:	66 c1 e0 09          	shl    $0x9,%eax
     ace:	67 03 44 24 1a       	add    0x1a(%esp),%ax
     ad3:	66 0f b7 c0          	movzwl %ax,%eax
     ad7:	66 50                	push   %eax
     ad9:	67 66 0f b7 44 24 1c 	movzwl 0x1c(%esp),%eax
     ae0:	66 50                	push   %eax
     ae2:	66 0f b7 d2          	movzwl %dx,%edx
     ae6:	66 52                	push   %edx
     ae8:	66 0f b7 ed          	movzwl %bp,%ebp
     aec:	66 55                	push   %ebp
     aee:	66 83 e1 01          	and    $0x1,%ecx
     af2:	66 51                	push   %ecx
     af4:	66 e8 22 01 00 00    	calll  c1c <read_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:322 (discriminator 3)
/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    for (int i = 0; i < number; i++){
     afa:	66 83 c3 01          	add    $0x1,%ebx
     afe:	66 83 c4 20          	add    $0x20,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:322 (discriminator 1)
     b02:	66 0f b7 c6          	movzwl %si,%eax
     b06:	66 39 c3             	cmp    %eax,%ebx
     b09:	0f 8c 78 ff          	jl     a85 <read_n_sector+0x3a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:330
        int cylinder = mid >> 1;
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    }
    return ;
}
     b0d:	66 83 c4 1c          	add    $0x1c,%esp
     b11:	66 5b                	pop    %ebx
     b13:	66 5e                	pop    %esi
     b15:	66 5f                	pop    %edi
     b17:	66 5d                	pop    %ebp
     b19:	66 c3                	retl   
     b1b:	66 90                	xchg   %eax,%eax
     b1d:	66 90                	xchg   %eax,%eax
     b1f:	90                   	nop

00000b20 <write_port_byte>:
write_port_byte():
     b20:	66 55                	push   %ebp
     b22:	66 89 e5             	mov    %esp,%ebp
     b25:	53                   	push   %bx
     b26:	51                   	push   %cx
     b27:	52                   	push   %dx
     b28:	56                   	push   %si
     b29:	57                   	push   %di
     b2a:	55                   	push   %bp
     b2b:	1e                   	push   %ds
     b2c:	06                   	push   %es
     b2d:	16                   	push   %ss
     b2e:	67 8b 5d 08          	mov    0x8(%ebp),%bx
     b32:	67 8a 45 0c          	mov    0xc(%ebp),%al
     b36:	cd 34                	int    $0x34
     b38:	17                   	pop    %ss
     b39:	07                   	pop    %es
     b3a:	1f                   	pop    %ds
     b3b:	5d                   	pop    %bp
     b3c:	5f                   	pop    %di
     b3d:	5e                   	pop    %si
     b3e:	5a                   	pop    %dx
     b3f:	59                   	pop    %cx
     b40:	5b                   	pop    %bx
     b41:	66 89 ec             	mov    %ebp,%esp
     b44:	66 5d                	pop    %ebp
     b46:	66 c3                	retl   

00000b48 <read_port_byte>:
read_port_byte():
     b48:	66 55                	push   %ebp
     b4a:	66 89 e5             	mov    %esp,%ebp
     b4d:	53                   	push   %bx
     b4e:	51                   	push   %cx
     b4f:	52                   	push   %dx
     b50:	56                   	push   %si
     b51:	57                   	push   %di
     b52:	55                   	push   %bp
     b53:	1e                   	push   %ds
     b54:	06                   	push   %es
     b55:	16                   	push   %ss
     b56:	67 8b 45 08          	mov    0x8(%ebp),%ax
     b5a:	cd 33                	int    $0x33
     b5c:	17                   	pop    %ss
     b5d:	07                   	pop    %es
     b5e:	1f                   	pop    %ds
     b5f:	5d                   	pop    %bp
     b60:	5f                   	pop    %di
     b61:	5e                   	pop    %si
     b62:	5a                   	pop    %dx
     b63:	59                   	pop    %cx
     b64:	5b                   	pop    %bx
     b65:	66 89 ec             	mov    %ebp,%esp
     b68:	66 5d                	pop    %ebp
     b6a:	66 c3                	retl   

00000b6c <write_memory_byte>:
write_memory_byte():
     b6c:	66 55                	push   %ebp
     b6e:	66 89 e5             	mov    %esp,%ebp
     b71:	50                   	push   %ax
     b72:	53                   	push   %bx
     b73:	52                   	push   %dx
     b74:	1e                   	push   %ds
     b75:	67 8b 5d 08          	mov    0x8(%ebp),%bx
     b79:	67 8b 45 0a          	mov    0xa(%ebp),%ax
     b7d:	c1 e0 0c             	shl    $0xc,%ax
     b80:	67 8a 4d 0c          	mov    0xc(%ebp),%cl
     b84:	cd 36                	int    $0x36
     b86:	1f                   	pop    %ds
     b87:	5a                   	pop    %dx
     b88:	5b                   	pop    %bx
     b89:	58                   	pop    %ax
     b8a:	66 89 ec             	mov    %ebp,%esp
     b8d:	66 5d                	pop    %ebp
     b8f:	66 c3                	retl   

00000b91 <read_memory_byte>:
read_memory_byte():
     b91:	66 55                	push   %ebp
     b93:	66 89 e5             	mov    %esp,%ebp
     b96:	53                   	push   %bx
     b97:	51                   	push   %cx
     b98:	52                   	push   %dx
     b99:	56                   	push   %si
     b9a:	57                   	push   %di
     b9b:	55                   	push   %bp
     b9c:	1e                   	push   %ds
     b9d:	06                   	push   %es
     b9e:	16                   	push   %ss
     b9f:	67 8b 5d 08          	mov    0x8(%ebp),%bx
     ba3:	67 8b 45 0a          	mov    0xa(%ebp),%ax
     ba7:	c1 e0 0c             	shl    $0xc,%ax
     baa:	cd 35                	int    $0x35
     bac:	17                   	pop    %ss
     bad:	07                   	pop    %es
     bae:	1f                   	pop    %ds
     baf:	5d                   	pop    %bp
     bb0:	5f                   	pop    %di
     bb1:	5e                   	pop    %si
     bb2:	5a                   	pop    %dx
     bb3:	59                   	pop    %cx
     bb4:	5b                   	pop    %bx
     bb5:	66 89 ec             	mov    %ebp,%esp
     bb8:	66 5d                	pop    %ebp
     bba:	66 c3                	retl   

00000bbc <check_keyboard>:
check_keyboard():
     bbc:	b4 01                	mov    $0x1,%ah
     bbe:	cd 16                	int    $0x16
     bc0:	74 05                	je     bc7 <check_keyboard.have_key>
     bc2:	b8 00 00             	mov    $0x0,%ax
     bc5:	eb 03                	jmp    bca <check_keyboard.check_keyboard_return>

00000bc7 <check_keyboard.have_key>:
check_keyboard.have_key():
     bc7:	b8 01 00             	mov    $0x1,%ax

00000bca <check_keyboard.check_keyboard_return>:
check_keyboard.check_keyboard_return():
     bca:	66 c3                	retl   

00000bcc <get_keyboard>:
get_keyboard():
     bcc:	b4 00                	mov    $0x0,%ah
     bce:	cd 16                	int    $0x16
     bd0:	66 c3                	retl   

00000bd2 <clean_screen>:
clean_screen():
     bd2:	50                   	push   %ax
     bd3:	53                   	push   %bx
     bd4:	51                   	push   %cx
     bd5:	52                   	push   %dx
     bd6:	b4 06                	mov    $0x6,%ah
     bd8:	b0 00                	mov    $0x0,%al
     bda:	b5 00                	mov    $0x0,%ch
     bdc:	b1 00                	mov    $0x0,%cl
     bde:	b6 17                	mov    $0x17,%dh
     be0:	b2 4f                	mov    $0x4f,%dl
     be2:	b7 1f                	mov    $0x1f,%bh
     be4:	cd 10                	int    $0x10
     be6:	5a                   	pop    %dx
     be7:	59                   	pop    %cx
     be8:	5b                   	pop    %bx
     be9:	58                   	pop    %ax
     bea:	66 c3                	retl   

00000bec <scroll_screen>:
scroll_screen():
     bec:	50                   	push   %ax
     bed:	53                   	push   %bx
     bee:	51                   	push   %cx
     bef:	52                   	push   %dx
     bf0:	b4 06                	mov    $0x6,%ah
     bf2:	b0 01                	mov    $0x1,%al
     bf4:	b5 00                	mov    $0x0,%ch
     bf6:	b1 00                	mov    $0x0,%cl
     bf8:	b6 17                	mov    $0x17,%dh
     bfa:	b2 4f                	mov    $0x4f,%dl
     bfc:	b7 10                	mov    $0x10,%bh
     bfe:	cd 10                	int    $0x10
     c00:	5a                   	pop    %dx
     c01:	59                   	pop    %cx
     c02:	5b                   	pop    %bx
     c03:	58                   	pop    %ax
     c04:	66 c3                	retl   

00000c06 <get_random>:
get_random():
     c06:	53                   	push   %bx
     c07:	b8 00 00             	mov    $0x0,%ax
     c0a:	e6 43                	out    %al,$0x43
     c0c:	e4 40                	in     $0x40,%al
     c0e:	b3 08                	mov    $0x8,%bl
     c10:	f6 f3                	div    %bl
     c12:	88 e0                	mov    %ah,%al
     c14:	b4 00                	mov    $0x0,%ah
     c16:	83 c0 72             	add    $0x72,%ax
     c19:	5b                   	pop    %bx
     c1a:	66 c3                	retl   

00000c1c <read_sector>:
read_sector():
     c1c:	66 55                	push   %ebp
     c1e:	66 89 e5             	mov    %esp,%ebp
     c21:	50                   	push   %ax
     c22:	53                   	push   %bx
     c23:	51                   	push   %cx
     c24:	52                   	push   %dx
     c25:	06                   	push   %es
     c26:	67 8b 45 14          	mov    0x14(%ebp),%ax
     c2a:	8e c0                	mov    %ax,%es
     c2c:	67 8b 5d 18          	mov    0x18(%ebp),%bx
     c30:	b4 02                	mov    $0x2,%ah
     c32:	b0 01                	mov    $0x1,%al
     c34:	b2 00                	mov    $0x0,%dl
     c36:	67 8a 75 08          	mov    0x8(%ebp),%dh
     c3a:	67 8a 6d 0c          	mov    0xc(%ebp),%ch
     c3e:	67 8a 4d 10          	mov    0x10(%ebp),%cl
     c42:	cd 13                	int    $0x13
     c44:	07                   	pop    %es
     c45:	5a                   	pop    %dx
     c46:	59                   	pop    %cx
     c47:	5b                   	pop    %bx
     c48:	58                   	pop    %ax
     c49:	66 89 ec             	mov    %ebp,%esp
     c4c:	66 5d                	pop    %ebp
     c4e:	66 c3                	retl   

00000c50 <print_my_name>:
print_my_name():
     c50:	50                   	push   %ax
     c51:	53                   	push   %bx
     c52:	51                   	push   %cx
     c53:	52                   	push   %dx
     c54:	1e                   	push   %ds
     c55:	06                   	push   %es
     c56:	55                   	push   %bp
     c57:	b8 00 10             	mov    $0x1000,%ax
     c5a:	8e c0                	mov    %ax,%es
     c5c:	b8 94 20             	mov    $0x2094,%ax
     c5f:	89 c5                	mov    %ax,%bp
     c61:	b4 13                	mov    $0x13,%ah
     c63:	b0 00                	mov    $0x0,%al
     c65:	b7 00                	mov    $0x0,%bh
     c67:	b3 0f                	mov    $0xf,%bl
     c69:	b9 19 00             	mov    $0x19,%cx
     c6c:	b6 18                	mov    $0x18,%dh
     c6e:	b2 01                	mov    $0x1,%dl
     c70:	cd 10                	int    $0x10
     c72:	5d                   	pop    %bp
     c73:	07                   	pop    %es
     c74:	1f                   	pop    %ds
     c75:	5a                   	pop    %dx
     c76:	59                   	pop    %cx
     c77:	5b                   	pop    %bx
     c78:	58                   	pop    %ax
     c79:	c3                   	ret    

00000c7a <reboot>:
reboot():
     c7a:	b4 06                	mov    $0x6,%ah
     c7c:	b0 00                	mov    $0x0,%al
     c7e:	b5 00                	mov    $0x0,%ch
     c80:	b1 00                	mov    $0x0,%cl
     c82:	b6 18                	mov    $0x18,%dh
     c84:	b2 4f                	mov    $0x4f,%dl
     c86:	b7 1f                	mov    $0x1f,%bh
     c88:	cd 10                	int    $0x10
     c8a:	cd 19                	int    $0x19

00000c8c <strlen>:
strlen():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:3
#include "../include/type.h"

size_t strlen(char * str){
     c8c:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:4
    u32 len = 0;
     c92:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:5
    while (str[len] != 0){
     c98:	eb 04                	jmp    c9e <strlen+0x12>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:6
        len++;
     c9a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:5
#include "../include/type.h"

size_t strlen(char * str){
    u32 len = 0;
    while (str[len] != 0){
     c9e:	67 80 3c 02 00       	cmpb   $0x0,(%edx,%eax,1)
     ca3:	75 f5                	jne    c9a <strlen+0xe>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:9
        len++;
    }
    return len;
}
     ca5:	66 f3 c3             	repz retl 

00000ca8 <strncpy>:
strncpy():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:11

void strncpy(char * dest, char * src, u32 size){
     ca8:	66 56                	push   %esi
     caa:	66 53                	push   %ebx
     cac:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
     cb2:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
     cb8:	67 66 8b 4c 24 14    	mov    0x14(%esp),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:12
    for (int i = 0; i < size; i++){
     cbe:	66 b8 00 00 00 00    	mov    $0x0,%eax
     cc4:	eb 0e                	jmp    cd4 <strncpy+0x2c>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:13 (discriminator 3)
        dest[i] = src[i];
     cc6:	67 66 0f b6 14 06    	movzbl (%esi,%eax,1),%edx
     ccc:	67 88 14 03          	mov    %dl,(%ebx,%eax,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:12 (discriminator 3)
    }
    return len;
}

void strncpy(char * dest, char * src, u32 size){
    for (int i = 0; i < size; i++){
     cd0:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:12 (discriminator 1)
     cd4:	66 39 c8             	cmp    %ecx,%eax
     cd7:	72 ed                	jb     cc6 <strncpy+0x1e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:15
        dest[i] = src[i];
    }
    dest[size] = '\0';
     cd9:	67 c6 04 0b 00       	movb   $0x0,(%ebx,%ecx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:16
}
     cde:	66 5b                	pop    %ebx
     ce0:	66 5e                	pop    %esi
     ce2:	66 c3                	retl   

00000ce4 <strcmp>:
strcmp():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:18

int strcmp(char * lhs, char * rhs){
     ce4:	66 57                	push   %edi
     ce6:	66 56                	push   %esi
     ce8:	66 53                	push   %ebx
     cea:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
     cf0:	67 66 8b 7c 24 14    	mov    0x14(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:19
    int lhs_len = strlen(lhs);
     cf6:	66 56                	push   %esi
     cf8:	66 e8 8e ff ff ff    	calll  c8c <strlen>
     cfe:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:20
    int rhs_len = strlen(rhs);
     d01:	67 66 89 3c 24       	mov    %edi,(%esp)
     d06:	66 e8 80 ff ff ff    	calll  c8c <strlen>
     d0c:	66 83 c4 04          	add    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:21
    if (lhs_len != rhs_len){
     d10:	66 39 c3             	cmp    %eax,%ebx
     d13:	75 25                	jne    d3a <strcmp+0x56>
     d15:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d1b:	eb 10                	jmp    d2d <strcmp+0x49>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:25
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
     d1d:	67 66 0f b6 14 07    	movzbl (%edi,%eax,1),%edx
     d23:	67 38 14 06          	cmp    %dl,(%esi,%eax,1)
     d27:	75 19                	jne    d42 <strcmp+0x5e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:24 (discriminator 2)
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
     d29:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:24 (discriminator 1)
     d2d:	66 39 d8             	cmp    %ebx,%eax
     d30:	7c eb                	jl     d1d <strcmp+0x39>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:28
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
     d32:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d38:	eb 0e                	jmp    d48 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:22

int strcmp(char * lhs, char * rhs){
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
     d3a:	66 b8 01 00 00 00    	mov    $0x1,%eax
     d40:	eb 06                	jmp    d48 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:26
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
            return 1;
     d42:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:29
    }
    return 0;
}
     d48:	66 5b                	pop    %ebx
     d4a:	66 5e                	pop    %esi
     d4c:	66 5f                	pop    %edi
     d4e:	66 c3                	retl   

00000d50 <strncmp>:
strncmp():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:31

int strncmp(char * lhs, char * rhs, int size){
     d50:	66 56                	push   %esi
     d52:	66 53                	push   %ebx
     d54:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
     d5a:	67 66 8b 4c 24 10    	mov    0x10(%esp),%ecx
     d60:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:32
    for (int i = 0; i < size; i++){
     d66:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d6c:	eb 10                	jmp    d7e <strncmp+0x2e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:33
        if (lhs[i] != rhs[i])
     d6e:	67 66 0f b6 14 01    	movzbl (%ecx,%eax,1),%edx
     d74:	67 38 14 03          	cmp    %dl,(%ebx,%eax,1)
     d78:	75 11                	jne    d8b <strncmp+0x3b>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:32 (discriminator 2)
    }
    return 0;
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
     d7a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:32 (discriminator 1)
     d7e:	66 39 f0             	cmp    %esi,%eax
     d81:	7c eb                	jl     d6e <strncmp+0x1e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:36
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
     d83:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d89:	eb 06                	jmp    d91 <strncmp+0x41>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:34
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
        if (lhs[i] != rhs[i])
            return 1;
     d8b:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:37
    }
    return 0;
     d91:	66 5b                	pop    %ebx
     d93:	66 5e                	pop    %esi
     d95:	66 c3                	retl   

00000d97 <install_system_call>:
install_system_call():
/mnt/e/code/my_operating_system/os/kernel/../lib/system_call.c:6
#include "../include/type.h"
#include "../include/stdio.h"
#include "../include/global.h"

void install_system_call(int system_call_number, void (*function)() ){
    system_call[system_call_number] = (u16) function;
     d97:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     d9d:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
     da3:	67 89 94 00 a0 2c 00 	mov    %dx,0x2ca0(%eax,%eax,1)
     daa:	00 
     dab:	66 c3                	retl   

00000dad <test_system_call>:
test_system_call():
/mnt/e/code/my_operating_system/os/kernel/start.c:42
    // (*my_program)();

    return 0;
}

void test_system_call(){
     dad:	66 53                	push   %ebx
     daf:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:43
    int origin = get_cursor();
     db3:	66 e8 ad f4 ff ff    	calll  266 <get_cursor>
     db9:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/start.c:44
    set_cursor(1800);
     dbc:	66 83 ec 0c          	sub    $0xc,%esp
     dc0:	66 68 08 07 00 00    	pushl  $0x708
     dc6:	66 e8 28 f4 ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:45
    printf("test custom system call!!! ");
     dcc:	67 66 c7 04 24 fc 1e 	movl   $0x1efc,(%esp)
     dd3:	00 00 
     dd5:	66 e8 62 fa ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/start.c:46
    set_cursor(origin);
     ddb:	66 0f b7 db          	movzwl %bx,%ebx
     ddf:	67 66 89 1c 24       	mov    %ebx,(%esp)
     de4:	66 e8 0a f4 ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:47
}
     dea:	66 83 c4 18          	add    $0x18,%esp
     dee:	66 5b                	pop    %ebx
     df0:	66 c3                	retl   

00000df2 <cstart>:
cstart():
/mnt/e/code/my_operating_system/os/kernel/start.c:12
#include "../include/fsystem.h"

void (**my_program)();
void test_system_call();
int a;
int cstart(){
     df2:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:13
    install_system_call(2, test_system_call);
     df6:	66 68 ad 0d 00 00    	pushl  $0xdad
     dfc:	66 6a 02             	pushl  $0x2
     dff:	66 e8 92 ff ff ff    	calll  d97 <install_system_call>
/mnt/e/code/my_operating_system/os/kernel/start.c:14
    clean_screen();
     e05:	66 e8 c7 fd ff ff    	calll  bd2 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/start.c:15
    set_cursor(0);
     e0b:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
     e12:	00 00 
     e14:	66 e8 da f3 ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:17

    a = get_cursor();
     e1a:	66 e8 46 f4 ff ff    	calll  266 <get_cursor>
     e20:	66 0f b7 c0          	movzwl %ax,%eax
     e24:	66 a3 cc 20          	mov    %eax,0x20cc
/mnt/e/code/my_operating_system/os/kernel/start.c:19

    set_cursor(0);
     e28:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
     e2f:	00 00 
     e31:	66 e8 bd f3 ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:20
    set_cursor(1);
     e37:	67 66 c7 04 24 01 00 	movl   $0x1,(%esp)
     e3e:	00 00 
     e40:	66 e8 ae f3 ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:21
    set_cursor(2);
     e46:	67 66 c7 04 24 02 00 	movl   $0x2,(%esp)
     e4d:	00 00 
     e4f:	66 e8 9f f3 ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:22
    set_cursor(3);
     e55:	67 66 c7 04 24 03 00 	movl   $0x3,(%esp)
     e5c:	00 00 
     e5e:	66 e8 90 f3 ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:23
    set_cursor(4);
     e64:	67 66 c7 04 24 04 00 	movl   $0x4,(%esp)
     e6b:	00 00 
     e6d:	66 e8 81 f3 ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:24
    set_cursor(345);
     e73:	67 66 c7 04 24 59 01 	movl   $0x159,(%esp)
     e7a:	00 00 
     e7c:	66 e8 72 f3 ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:30


    // while (1){}


    init_fsystem();
     e82:	66 e8 0c 05 00 00    	calll  1394 <init_fsystem>
/mnt/e/code/my_operating_system/os/kernel/start.c:32

    fs_show_root_file_table();
     e88:	66 e8 c9 07 00 00    	calll  1657 <fs_show_root_file_table>
/mnt/e/code/my_operating_system/os/kernel/start.c:40
    // *my_program = 0x2000;
    // fs_load_by_name("stone1.bin", *my_program);
    // (*my_program)();

    return 0;
}
     e8e:	66 b8 00 00 00 00    	mov    $0x0,%eax
     e94:	66 83 c4 1c          	add    $0x1c,%esp
     e98:	66 c3                	retl   

00000e9a <parser>:
parser():
/mnt/e/code/my_operating_system/os/kernel/tty.c:89
    }
    return ;
}


void parser(){
     e9a:	66 56                	push   %esi
     e9c:	66 53                	push   %ebx
     e9e:	66 83 ec 74          	sub    $0x74,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:93
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
     ea2:	66 be 00 00 00 00    	mov    $0x0,%esi
/mnt/e/code/my_operating_system/os/kernel/tty.c:92


void parser(){
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
     ea8:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:91
}


void parser(){
    char arguments[10][10];
    int input_start = 0;
     eae:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     eb4:	eb 64                	jmp    f1a <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:96
        if(input_buf[input_end] == ' ' || input_buf[input_end] == '\0'){
     eb6:	67 66 0f b6 83 e0 20 	movzbl 0x20e0(%ebx),%eax
     ebd:	00 00 
     ebf:	3c 20                	cmp    $0x20,%al
     ec1:	0f 94 c1             	sete   %cl
     ec4:	84 c0                	test   %al,%al
     ec6:	0f 94 c0             	sete   %al
     ec9:	08 c1                	or     %al,%cl
     ecb:	74 49                	je     f16 <parser+0x7c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:97
            if (input_start == input_end){ // 如果并没有参数，那么继续
     ecd:	66 39 da             	cmp    %ebx,%edx
     ed0:	75 0a                	jne    edc <parser+0x42>
/mnt/e/code/my_operating_system/os/kernel/tty.c:98
                input_start++;
     ed2:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:99
                input_end++;
     ed6:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:100
                continue;
     eda:	eb 3e                	jmp    f1a <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:103
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
     edc:	66 89 d9             	mov    %ebx,%ecx
     edf:	66 29 d1             	sub    %edx,%ecx
     ee2:	67 66 8d 04 b6       	lea    (%esi,%esi,4),%eax
     ee7:	67 66 8d 44 44 0c    	lea    0xc(%esp,%eax,2),%eax
     eed:	66 83 ec 04          	sub    $0x4,%esp
     ef1:	66 51                	push   %ecx
     ef3:	66 81 c2 e0 20 00 00 	add    $0x20e0,%edx
     efa:	66 52                	push   %edx
     efc:	66 50                	push   %eax
     efe:	66 e8 a4 fd ff ff    	calll  ca8 <strncpy>
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
     f04:	67 66 8d 53 01       	lea    0x1(%ebx),%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:106
                input_start = input_end;
                arguments_num++;
     f09:	66 83 c6 01          	add    $0x1,%esi
     f0d:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
                continue;
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
                input_end++;
     f11:	66 89 d3             	mov    %edx,%ebx
     f14:	eb 04                	jmp    f1a <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:110
                input_start = input_end;
                arguments_num++;
            }
        }
        else {// 有参数，还没有读到末尾
            input_end++;
     f16:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     f1a:	66 3b 1e c0 20       	cmp    0x20c0,%ebx
     f1f:	7e 95                	jle    eb6 <parser+0x1c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:117
        }
    }

    // 完成分词，开始进行解析。

    if(!strcmp(arguments[0],"run")){// 如果返回0，就是相等了
     f21:	66 83 ec 08          	sub    $0x8,%esp
     f25:	66 68 18 1f 00 00    	pushl  $0x1f18
     f2b:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     f31:	66 50                	push   %eax
     f33:	66 e8 ab fd ff ff    	calll  ce4 <strcmp>
     f39:	66 83 c4 10          	add    $0x10,%esp
     f3d:	66 85 c0             	test   %eax,%eax
     f40:	75 31                	jne    f73 <parser+0xd9>
/mnt/e/code/my_operating_system/os/kernel/tty.c:122
        // 运行一个用户程序。
        // 先从软盘中加载一个指定程序到内存处，然后开始执行。
        // 考虑维护一个空闲空间的指针，然后每加载一个程序，如果可行的话。
        void (**my_program)();
        *my_program = 0x4000;
     f42:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     f48:	67 66 c7 03 00 40 00 	movl   $0x4000,(%ebx)
     f4f:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:123
        fs_load_by_name(arguments[1],*my_program);
     f50:	66 83 ec 08          	sub    $0x8,%esp
     f54:	66 68 00 40 00 00    	pushl  $0x4000
     f5a:	67 66 8d 44 24 22    	lea    0x22(%esp),%eax
     f60:	66 50                	push   %eax
     f62:	66 e8 89 06 00 00    	calll  15f1 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/tty.c:124
        (*my_program)();
     f68:	67 66 ff 13          	calll  *(%ebx)
     f6c:	66 83 c4 10          	add    $0x10,%esp
     f70:	e9 1b 01             	jmp    108e <core_header_data_segment+0x8e>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     f73:	66 83 ec 08          	sub    $0x8,%esp
     f77:	66 68 1c 1f 00 00    	pushl  $0x1f1c
     f7d:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     f83:	66 50                	push   %eax
     f85:	66 e8 59 fd ff ff    	calll  ce4 <strcmp>
     f8b:	66 83 c4 10          	add    $0x10,%esp
     f8f:	66 85 c0             	test   %eax,%eax
     f92:	75 23                	jne    fb7 <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126 (discriminator 1)
     f94:	66 83 fe 01          	cmp    $0x1,%esi
     f98:	75 1d                	jne    fb7 <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:127
        printf("\n\n");
     f9a:	66 83 ec 0c          	sub    $0xc,%esp
     f9e:	66 68 1f 1f 00 00    	pushl  $0x1f1f
     fa4:	66 e8 93 f8 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:128
        fs_show_root_file_table();
     faa:	66 e8 a7 06 00 00    	calll  1657 <fs_show_root_file_table>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
        void (**my_program)();
        *my_program = 0x4000;
        fs_load_by_name(arguments[1],*my_program);
        (*my_program)();
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     fb0:	66 83 c4 10          	add    $0x10,%esp
     fb4:	e9 d7 00             	jmp    108e <core_header_data_segment+0x8e>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     fb7:	66 83 ec 08          	sub    $0x8,%esp
     fbb:	66 68 22 1f 00 00    	pushl  $0x1f22
     fc1:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     fc7:	66 50                	push   %eax
     fc9:	66 e8 15 fd ff ff    	calll  ce4 <strcmp>
     fcf:	66 83 c4 10          	add    $0x10,%esp
     fd3:	66 85 c0             	test   %eax,%eax
     fd6:	75 23                	jne    ffb <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130 (discriminator 1)
     fd8:	66 83 fe 01          	cmp    $0x1,%esi
     fdc:	75 1d                	jne    ffb <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:131
        printf("\n\n");
     fde:	66 83 ec 0c          	sub    $0xc,%esp
     fe2:	66 68 1f 1f 00 00    	pushl  $0x1f1f
     fe8:	66 e8 4f f8 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:132
        reboot();
     fee:	66 e8 86 fc ff ff    	calll  c7a <reboot>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     ff4:	66 83 c4 10          	add    $0x10,%esp
     ff8:	e9 93 00             	jmp    108e <core_header_data_segment+0x8e>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134
        printf("\n\n");
        reboot();
    }
    else if(!strcmp(arguments[0],"help") && arguments_num == 1){
     ffb:	66 83 ec 08          	sub    $0x8,%esp
     fff:	66 68 29 1f 00 00    	pushl  $0x1f29
    1005:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
    100b:	66 50                	push   %eax
    100d:	66 e8 d1 fc ff ff    	calll  ce4 <strcmp>
    1013:	66 83 c4 10          	add    $0x10,%esp
    1017:	66 85 c0             	test   %eax,%eax
    101a:	75 58                	jne    1074 <core_header_data_segment+0x74>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134 (discriminator 1)
    101c:	66 83 fe 01          	cmp    $0x1,%esi
    1020:	75 52                	jne    1074 <core_header_data_segment+0x74>
/mnt/e/code/my_operating_system/os/kernel/tty.c:135
        printf("\n\n");
    1022:	66 83 ec 0c          	sub    $0xc,%esp
    1026:	66 68 1f 1f 00 00    	pushl  $0x1f1f
    102c:	66 e8 0b f8 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:136
        printf("ls        : show the file in the root folder.\n");
    1032:	67 66 c7 04 24 9c 1f 	movl   $0x1f9c,(%esp)
    1039:	00 00 
    103b:	66 e8 fc f7 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:137
        printf("run [name]: run the file in the root folder.\n");
    1041:	67 66 c7 04 24 cc 1f 	movl   $0x1fcc,(%esp)
    1048:	00 00 
    104a:	66 e8 ed f7 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:138
        printf("help      : show the help message.\n");
    1050:	67 66 c7 04 24 fc 1f 	movl   $0x1ffc,(%esp)
    1057:	00 00 
    1059:	66 e8 de f7 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:139
        printf("reboot    : reboot the machine.\n");
    105f:	67 66 c7 04 24 20 20 	movl   $0x2020,(%esp)
    1066:	00 00 
    1068:	66 e8 cf f7 ff ff    	calll  83d <printf>
    106e:	66 83 c4 10          	add    $0x10,%esp
    1072:	eb 1a                	jmp    108e <core_header_data_segment+0x8e>
/mnt/e/code/my_operating_system/os/kernel/tty.c:142
    }
    else {
        printf("\n%s : command not found! \n", input_buf);
    1074:	66 83 ec 08          	sub    $0x8,%esp
    1078:	66 68 e0 20 00 00    	pushl  $0x20e0
    107e:	66 68 2e 1f 00 00    	pushl  $0x1f2e
    1084:	66 e8 b3 f7 ff ff    	calll  83d <printf>
    108a:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:144
    }
    int current_cursor = get_cursor();
    108e:	66 e8 d2 f1 ff ff    	calll  266 <get_cursor>
    1094:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:145
    command_line_row = (current_cursor / 80);
    1098:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    109e:	66 f7 ea             	imul   %edx
    10a1:	66 c1 fa 05          	sar    $0x5,%edx
    10a5:	66 89 16 90 20       	mov    %edx,0x2090
/mnt/e/code/my_operating_system/os/kernel/tty.c:148
    // printf("arguments: %d|%s|%s|",arguments_num, arguments[0],arguments[1]);
    return ;
}
    10aa:	66 83 c4 74          	add    $0x74,%esp
    10ae:	66 5b                	pop    %ebx
    10b0:	66 5e                	pop    %esi
    10b2:	66 c3                	retl   

000010b4 <create_a_line>:
create_a_line():
/mnt/e/code/my_operating_system/os/kernel/tty.c:151

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    10b4:	66 83 ec 2c          	sub    $0x2c,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:152
    char message[30] = "walker@walker-pc ~ $ \0";
    10b8:	66 a1 6c 20          	mov    0x206c,%eax
    10bc:	67 66 89 44 24 02    	mov    %eax,0x2(%esp)
    10c2:	66 a1 70 20          	mov    0x2070,%eax
    10c6:	67 66 89 44 24 06    	mov    %eax,0x6(%esp)
    10cc:	66 a1 74 20          	mov    0x2074,%eax
    10d0:	67 66 89 44 24 0a    	mov    %eax,0xa(%esp)
    10d6:	66 a1 78 20          	mov    0x2078,%eax
    10da:	67 66 89 44 24 0e    	mov    %eax,0xe(%esp)
    10e0:	66 a1 7c 20          	mov    0x207c,%eax
    10e4:	67 66 89 44 24 12    	mov    %eax,0x12(%esp)
    10ea:	66 0f b7 06 80 20    	movzwl 0x2080,%eax
    10f0:	67 89 44 24 16       	mov    %ax,0x16(%esp)
    10f5:	66 0f b6 06 82 20    	movzbl 0x2082,%eax
    10fb:	67 88 44 24 18       	mov    %al,0x18(%esp)
    1100:	67 66 c7 44 24 19 00 	movl   $0x0,0x19(%esp)
    1107:	00 00 00 
    110a:	67 c7 44 24 1d 00 00 	movw   $0x0,0x1d(%esp)
    1111:	67 c6 44 24 1f 00    	movb   $0x0,0x1f(%esp)
/mnt/e/code/my_operating_system/os/kernel/tty.c:153
    for (int i = 0; i < MAX_BUF; i++){
    1117:	66 b8 00 00 00 00    	mov    $0x0,%eax
    111d:	eb 0c                	jmp    112b <create_a_line+0x77>
/mnt/e/code/my_operating_system/os/kernel/tty.c:154 (discriminator 3)
        input_buf[i] = 0;
    111f:	67 c6 80 e0 20 00 00 	movb   $0x0,0x20e0(%eax)
    1126:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 3)
}

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    char message[30] = "walker@walker-pc ~ $ \0";
    for (int i = 0; i < MAX_BUF; i++){
    1127:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 1)
    112b:	66 83 f8 63          	cmp    $0x63,%eax
    112f:	7e ee                	jle    111f <create_a_line+0x6b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:156
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    1131:	66 83 ec 0c          	sub    $0xc,%esp
    1135:	67 66 8d 44 24 0e    	lea    0xe(%esp),%eax
    113b:	66 50                	push   %eax
    113d:	66 e8 49 fb ff ff    	calll  c8c <strlen>
    1143:	66 a3 c4 20          	mov    %eax,0x20c4
/mnt/e/code/my_operating_system/os/kernel/tty.c:157
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    1147:	66 03 06 c0 20       	add    0x20c0,%eax
    114c:	66 89 c1             	mov    %eax,%ecx
    114f:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    1155:	66 f7 ea             	imul   %edx
    1158:	66 c1 fa 05          	sar    $0x5,%edx
    115c:	66 c1 f9 1f          	sar    $0x1f,%ecx
    1160:	66 29 ca             	sub    %ecx,%edx
    1163:	66 89 d0             	mov    %edx,%eax
    1166:	66 03 06 90 20       	add    0x2090,%eax
    116b:	66 83 c0 01          	add    $0x1,%eax
    116f:	66 a3 90 20          	mov    %eax,0x2090
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    while(command_line_row > 23){
    1173:	66 83 c4 10          	add    $0x10,%esp
    1177:	eb 0c                	jmp    1185 <create_a_line+0xd1>
/mnt/e/code/my_operating_system/os/kernel/tty.c:159
        scroll_screen();
    1179:	66 e8 6d fa ff ff    	calll  bec <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:160
        command_line_row--;
    117f:	66 83 2e 90 20 01    	subl   $0x1,0x2090
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    for (int i = 0; i < MAX_BUF; i++){
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    while(command_line_row > 23){
    1185:	66 a1 90 20          	mov    0x2090,%eax
    1189:	66 83 f8 17          	cmp    $0x17,%eax
    118d:	7f ea                	jg     1179 <create_a_line+0xc5>
/mnt/e/code/my_operating_system/os/kernel/tty.c:162
        scroll_screen();
        command_line_row--;
    }
    command_line_cursor = 0;
    118f:	66 c7 06 c0 20 00 00 	movl   $0x0,0x20c0
    1196:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:163
    set_cursor(command_line_row * 80);
    1198:	66 83 ec 0c          	sub    $0xc,%esp
    119c:	67 66 8d 04 80       	lea    (%eax,%eax,4),%eax
    11a1:	66 c1 e0 04          	shl    $0x4,%eax
    11a5:	66 0f b7 d0          	movzwl %ax,%edx
    11a9:	66 52                	push   %edx
    11ab:	66 e8 43 f0 ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:165
    // printf("%d", command_line_row);
    printf("%s", message);
    11b1:	66 83 c4 08          	add    $0x8,%esp
    11b5:	67 66 8d 44 24 0a    	lea    0xa(%esp),%eax
    11bb:	66 50                	push   %eax
    11bd:	66 68 49 1f 00 00    	pushl  $0x1f49
    11c3:	66 e8 74 f6 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:166
}
    11c9:	66 83 c4 3c          	add    $0x3c,%esp
    11cd:	66 c3                	retl   

000011cf <tty>:
tty():
/mnt/e/code/my_operating_system/os/kernel/tty.c:19
int message_length = 0;
int command_line_cursor = 0; // 光标在输入区的偏移量
char input_buf[MAX_BUF]; // 输入缓存区


void tty(){
    11cf:	66 56                	push   %esi
    11d1:	66 53                	push   %ebx
    11d3:	66 83 ec 04          	sub    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:21
    int keyboard_flag = 0;
    new_line_flag = 1;
    11d7:	66 c7 06 8c 20 01 00 	movl   $0x1,0x208c
    11de:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:22
    command_line_row = -1;
    11e0:	66 c7 06 90 20 ff ff 	movl   $0xffffffff,0x2090
    11e7:	ff ff 
/mnt/e/code/my_operating_system/os/kernel/tty.c:23
    clean_screen();
    11e9:	66 e8 e3 f9 ff ff    	calll  bd2 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:24
    set_cursor(1974);
    11ef:	66 83 ec 0c          	sub    $0xc,%esp
    11f3:	66 68 b6 07 00 00    	pushl  $0x7b6
    11f9:	66 e8 f5 ef ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:25
    set_cursor(0);
    11ff:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
    1206:	00 00 
    1208:	66 e8 e6 ef ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:26
    print_my_name();
    120e:	66 e8 3c fa ff ff    	calll  c50 <print_my_name>
    1214:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:29
    while (1){
        // 使用缓冲区数据更新
        if (new_line_flag){
    1218:	66 83 3e 8c 20 00    	cmpl   $0x0,0x208c
    121e:	74 0f                	je     122f <tty+0x60>
/mnt/e/code/my_operating_system/os/kernel/tty.c:30
            create_a_line();
    1220:	66 e8 8e fe ff ff    	calll  10b4 <create_a_line>
/mnt/e/code/my_operating_system/os/kernel/tty.c:31
            new_line_flag = 0;
    1226:	66 c7 06 8c 20 00 00 	movl   $0x0,0x208c
    122d:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:34
        }

        if(command_line_row == 23 && message_length + command_line_cursor > 80){
    122f:	66 83 3e 90 20 17    	cmpl   $0x17,0x2090
    1235:	75 2f                	jne    1266 <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:34 (discriminator 1)
    1237:	66 a1 c0 20          	mov    0x20c0,%eax
    123b:	66 03 06 c4 20       	add    0x20c4,%eax
    1240:	66 83 f8 50          	cmp    $0x50,%eax
    1244:	7e 20                	jle    1266 <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:35
            scroll_screen();
    1246:	66 e8 a0 f9 ff ff    	calll  bec <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:36
            command_line_row--;
    124c:	66 83 2e 90 20 01    	subl   $0x1,0x2090
/mnt/e/code/my_operating_system/os/kernel/tty.c:37
            set_cursor(1840);
    1252:	66 83 ec 0c          	sub    $0xc,%esp
    1256:	66 68 30 07 00 00    	pushl  $0x730
    125c:	66 e8 92 ef ff ff    	calll  1f4 <set_cursor>
    1262:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:39
        }
        putc(' ');// 用来删除光标处的文字，与输入退格的时候光标-1配合使用
    1266:	66 83 ec 0c          	sub    $0xc,%esp
    126a:	66 6a 20             	pushl  $0x20
    126d:	66 e8 4f f0 ff ff    	calll  2c2 <putc>
/mnt/e/code/my_operating_system/os/kernel/tty.c:42

        // command_line_row = get_cursor() / 80;
        set_cursor(80*command_line_row + message_length);
    1273:	66 8b 16 90 20       	mov    0x2090,%edx
    1278:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
    127d:	66 89 d0             	mov    %edx,%eax
    1280:	66 c1 e0 04          	shl    $0x4,%eax
    1284:	03 06 c4 20          	add    0x20c4,%ax
    1288:	66 0f b7 c0          	movzwl %ax,%eax
    128c:	67 66 89 04 24       	mov    %eax,(%esp)
    1291:	66 e8 5d ef ff ff    	calll  1f4 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:43
        puts(input_buf, command_line_cursor);
    1297:	66 83 c4 08          	add    $0x8,%esp
    129b:	66 ff 36 c0 20       	pushl  0x20c0
    12a0:	66 68 e0 20 00 00    	pushl  $0x20e0
    12a6:	66 e8 0b f2 ff ff    	calll  4b7 <puts>
/mnt/e/code/my_operating_system/os/kernel/tty.c:46

        // 更新完了 检测键盘
        keyboard_flag = check_keyboard();
    12ac:	66 e8 0a f9 ff ff    	calll  bbc <check_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:49

        // 如果返回1，则有输入，处理输入信息，否则继续循环。
        if (keyboard_flag){
    12b2:	66 83 c4 10          	add    $0x10,%esp
    12b6:	85 c0                	test   %ax,%ax
    12b8:	0f 84 5c ff          	je     1218 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:51
            // 处理键盘事件
            u16 keyboard_code =  get_keyboard();
    12bc:	66 e8 0a f9 ff ff    	calll  bcc <get_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:52
            u8 ascii_code = keyboard_code;
    12c2:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:54
            u8 scan_code = keyboard_code >> 8;
            if (isprint(ascii_code)){
    12c5:	66 83 ec 0c          	sub    $0xc,%esp
    12c9:	66 0f b6 c0          	movzbl %al,%eax
    12cd:	66 50                	push   %eax
    12cf:	66 e8 c3 f6 ff ff    	calll  998 <isprint>
    12d5:	66 83 c4 10          	add    $0x10,%esp
    12d9:	66 85 c0             	test   %eax,%eax
    12dc:	74 20                	je     12fe <tty+0x12f>
/mnt/e/code/my_operating_system/os/kernel/tty.c:55
                if (command_line_cursor <= MAX_BUF){
    12de:	66 a1 c0 20          	mov    0x20c0,%eax
    12e2:	66 83 f8 64          	cmp    $0x64,%eax
    12e6:	0f 8f 2e ff          	jg     1218 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:56
                    input_buf[command_line_cursor++] = ascii_code;
    12ea:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    12ef:	66 89 16 c0 20       	mov    %edx,0x20c0
    12f4:	67 88 98 e0 20 00 00 	mov    %bl,0x20e0(%eax)
    12fb:	e9 1a ff             	jmp    1218 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:59
                }
            }
            else if (ascii_code == 13){
    12fe:	80 fb 0d             	cmp    $0xd,%bl
    1301:	75 1e                	jne    1321 <tty+0x152>
/mnt/e/code/my_operating_system/os/kernel/tty.c:60
                new_line_flag = 1;
    1303:	66 c7 06 8c 20 01 00 	movl   $0x1,0x208c
    130a:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:61
                input_buf[command_line_cursor] = '\0';
    130c:	66 a1 c0 20          	mov    0x20c0,%eax
    1310:	67 c6 80 e0 20 00 00 	movb   $0x0,0x20e0(%eax)
    1317:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:62
                parser();
    1318:	66 e8 7c fb ff ff    	calll  e9a <parser>
    131e:	e9 f7 fe             	jmp    1218 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:64
            }
            else if (ascii_code == 8){
    1321:	80 fb 08             	cmp    $0x8,%bl
    1324:	75 3e                	jne    1364 <tty+0x195>
/mnt/e/code/my_operating_system/os/kernel/tty.c:65
                if(command_line_cursor){
    1326:	66 a1 c0 20          	mov    0x20c0,%eax
    132a:	66 85 c0             	test   %eax,%eax
    132d:	0f 84 e7 fe          	je     1218 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:66
                    input_buf[--command_line_cursor] = 0;
    1331:	67 66 8d 50 ff       	lea    -0x1(%eax),%edx
    1336:	66 89 16 c0 20       	mov    %edx,0x20c0
    133b:	67 c6 80 df 20 00 00 	movb   $0x0,0x20df(%eax)
    1342:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:68
                    // 将光标设置为前一个位置，方便删除
                    int cur_cursor = get_cursor();
    1343:	66 e8 1d ef ff ff    	calll  266 <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:69
                    set_cursor(cur_cursor-1);
    1349:	66 83 ec 0c          	sub    $0xc,%esp
    134d:	66 83 e8 01          	sub    $0x1,%eax
    1351:	66 0f b7 c0          	movzwl %ax,%eax
    1355:	66 50                	push   %eax
    1357:	66 e8 97 ee ff ff    	calll  1f4 <set_cursor>
    135d:	66 83 c4 10          	add    $0x10,%esp
    1361:	e9 b4 fe             	jmp    1218 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:72
                }
            }
            else if (ascii_code == 27){
    1364:	80 fb 1b             	cmp    $0x1b,%bl
    1367:	0f 85 ad fe          	jne    1218 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:73
                __asm__("mov $0x4c00, %ax");
    136b:	b8 00 4c             	mov    $0x4c00,%ax
/mnt/e/code/my_operating_system/os/kernel/tty.c:74
                __asm__("int $0x40");
    136e:	cd 40                	int    $0x40
    1370:	e9 a5 fe             	jmp    1218 <tty+0x49>

00001373 <tty_scroll_screen>:
tty_scroll_screen():
/mnt/e/code/my_operating_system/os/kernel/tty.c:169
    // printf("%d", command_line_row);
    printf("%s", message);
}


void tty_scroll_screen(){
    1373:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:170
    if (get_cursor()/80 > 24){
    1377:	66 e8 e9 ee ff ff    	calll  266 <get_cursor>
    137d:	3d cf 07             	cmp    $0x7cf,%ax
    1380:	76 0c                	jbe    138e <tty_scroll_screen+0x1b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:171
        scroll_screen();
    1382:	66 e8 64 f8 ff ff    	calll  bec <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:172
        command_line_row--;
    1388:	66 83 2e 90 20 01    	subl   $0x1,0x2090
/mnt/e/code/my_operating_system/os/kernel/tty.c:175
    }
    return ;
    138e:	66 83 c4 0c          	add    $0xc,%esp
    1392:	66 c3                	retl   

00001394 <init_fsystem>:
init_fsystem():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:14
FileDescriptor root[56];
u16 root_sector;
u16 first_cluster_by_sector;
u16 cluster2sector;

void init_fsystem(){
    1394:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:15
    cluster2sector = 1;
    1398:	c7 06 80 2c 01 00    	movw   $0x1,0x2c80
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:16
    root_sector = 37;
    139e:	c7 06 60 21 25 00    	movw   $0x25,0x2160
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:17
    first_cluster_by_sector = root_sector + 1;  
    13a4:	c7 06 82 2c 26 00    	movw   $0x26,0x2c82
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:18
    read_n_sector(root_sector,1, 0x1000, root);
    13aa:	66 b8 80 25 00 00    	mov    $0x2580,%eax
    13b0:	66 0f b7 c0          	movzwl %ax,%eax
    13b4:	66 50                	push   %eax
    13b6:	66 68 00 10 00 00    	pushl  $0x1000
    13bc:	66 6a 01             	pushl  $0x1
    13bf:	66 6a 25             	pushl  $0x25
    13c2:	66 e8 83 f6 ff ff    	calll  a4b <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:19
    read_n_sector(1,2,0x1000, FAT_table);// 这个会覆盖掉root吗？
    13c8:	66 b8 80 21 00 00    	mov    $0x2180,%eax
    13ce:	66 0f b7 c0          	movzwl %ax,%eax
    13d2:	66 50                	push   %eax
    13d4:	66 68 00 10 00 00    	pushl  $0x1000
    13da:	66 6a 02             	pushl  $0x2
    13dd:	66 6a 01             	pushl  $0x1
    13e0:	66 e8 65 f6 ff ff    	calll  a4b <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:27
    // puti(FAT_table[0]);
    // puti(root[0].cluster_number);
    // puts(&root[0], 10);
    // puts(&root[1], 10);
    // puts(&root[2], 10);
}
    13e6:	66 83 c4 2c          	add    $0x2c,%esp
    13ea:	66 c3                	retl   

000013ec <_fs_find_descriptor_number_by_name>:
_fs_find_descriptor_number_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:29

u16 _fs_find_descriptor_number_by_name(char * file_name){
    13ec:	66 57                	push   %edi
    13ee:	66 56                	push   %esi
    13f0:	66 53                	push   %ebx
    13f2:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:30
    int file_name_length = strlen(file_name);
    13f8:	66 83 ec 0c          	sub    $0xc,%esp
    13fc:	66 57                	push   %edi
    13fe:	66 e8 88 f8 ff ff    	calll  c8c <strlen>
    1404:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:31
    if (file_name_length >= 11) file_name_length = 11;
    1407:	66 83 c4 10          	add    $0x10,%esp
    140b:	66 83 f8 0a          	cmp    $0xa,%eax
    140f:	7e 06                	jle    1417 <_fs_find_descriptor_number_by_name+0x2b>
    1411:	66 be 0b 00 00 00    	mov    $0xb,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
    1417:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    141d:	eb 2f                	jmp    144e <_fs_find_descriptor_number_by_name+0x62>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:34
        if (!strncmp(&root[i], file_name, file_name_length)){
    141f:	66 89 d8             	mov    %ebx,%eax
    1422:	66 c1 e0 05          	shl    $0x5,%eax
    1426:	66 05 80 25 00 00    	add    $0x2580,%eax
    142c:	66 83 ec 04          	sub    $0x4,%esp
    1430:	66 56                	push   %esi
    1432:	66 57                	push   %edi
    1434:	66 50                	push   %eax
    1436:	66 e8 14 f9 ff ff    	calll  d50 <strncmp>
    143c:	66 83 c4 10          	add    $0x10,%esp
    1440:	66 85 c0             	test   %eax,%eax
    1443:	75 05                	jne    144a <_fs_find_descriptor_number_by_name+0x5e>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:35
            return i;
    1445:	66 89 d8             	mov    %ebx,%eax
    1448:	eb 10                	jmp    145a <_fs_find_descriptor_number_by_name+0x6e>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33 (discriminator 2)

u16 _fs_find_descriptor_number_by_name(char * file_name){
    int file_name_length = strlen(file_name);
    if (file_name_length >= 11) file_name_length = 11;
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
    144a:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33 (discriminator 1)
    144e:	66 83 fb 09          	cmp    $0x9,%ebx
    1452:	7e cb                	jle    141f <_fs_find_descriptor_number_by_name+0x33>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:38
        if (!strncmp(&root[i], file_name, file_name_length)){
            return i;
        }
    }
    return -1;
    1454:	66 b8 ff ff ff ff    	mov    $0xffffffff,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:39
}
    145a:	66 5b                	pop    %ebx
    145c:	66 5e                	pop    %esi
    145e:	66 5f                	pop    %edi
    1460:	66 c3                	retl   

00001462 <_fs_find_cluster_code_by_name>:
_fs_find_cluster_code_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:41

u16 _fs_find_cluster_code_by_name(char * file_name){
    1462:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:42
    int index = _fs_find_descriptor_number_by_name(file_name);
    1466:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    146c:	66 e8 7a ff ff ff    	calll  13ec <_fs_find_descriptor_number_by_name>
    1472:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:44
    if (index != -1)
        return root[index].cluster_code;
    1476:	66 c1 e0 05          	shl    $0x5,%eax
    147a:	67 66 0f b7 80 9a 25 	movzwl 0x259a(%eax),%eax
    1481:	00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:46
    return 0;
}
    1483:	66 83 c4 1c          	add    $0x1c,%esp
    1487:	66 c3                	retl   

00001489 <_fs_get_file_size_by_cluster_code>:
_fs_get_file_size_by_cluster_code():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:48

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    1489:	67 66 0f b7 54 24 04 	movzwl 0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:49
    int size = 0;
    1490:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:50
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    1496:	eb 1b                	jmp    14b3 <_fs_get_file_size_by_cluster_code+0x2a>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:51
        size += 512*cluster2sector;
    1498:	66 0f b7 0e 80 2c    	movzwl 0x2c80,%ecx
    149e:	66 c1 e1 09          	shl    $0x9,%ecx
    14a2:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:52
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
    14a5:	66 0f b7 d2          	movzwl %dx,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:53
        cluster_code = FAT_table[cluster_code];
    14a9:	67 66 0f b7 94 12 80 	movzwl 0x2180(%edx,%edx,1),%edx
    14b0:	21 00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:50
    return 0;
}

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    14b3:	67 66 8d 4a fe       	lea    -0x2(%edx),%ecx
    14b8:	83 f9 ed             	cmp    $0xffed,%cx
    14bb:	76 db                	jbe    1498 <_fs_get_file_size_by_cluster_code+0xf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:56
        size += 512*cluster2sector;
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
    14bd:	66 f3 c3             	repz retl 

000014c0 <_fs_show_file_by_descriptor_number>:
_fs_show_file_by_descriptor_number():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:58

void _fs_show_file_by_descriptor_number(u16 index){
    14c0:	66 56                	push   %esi
    14c2:	66 53                	push   %ebx
    14c4:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:59
    int cluster_code = root[index].cluster_code;
    14c8:	67 66 0f b7 44 24 14 	movzwl 0x14(%esp),%eax
    14cf:	66 89 c6             	mov    %eax,%esi
    14d2:	66 c1 e6 05          	shl    $0x5,%esi
    14d6:	67 66 0f b7 9e 9a 25 	movzwl 0x259a(%esi),%ebx
    14dd:	00 00 
    14df:	66 81 c6 80 25 00 00 	add    $0x2580,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:60
    printf("%d, %d\n" , index,cluster_code);
    14e6:	66 53                	push   %ebx
    14e8:	66 50                	push   %eax
    14ea:	66 68 4c 1f 00 00    	pushl  $0x1f4c
    14f0:	66 e8 47 f3 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:62
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    14f6:	67 66 89 1c 24       	mov    %ebx,(%esp)
    14fb:	66 e8 88 ff ff ff    	calll  1489 <_fs_get_file_size_by_cluster_code>
    1501:	66 83 c4 0c          	add    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:61
}

void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
    1505:	66 0f b7 c0          	movzwl %ax,%eax
    1509:	66 50                	push   %eax
    150b:	66 56                	push   %esi
    150d:	66 68 54 1f 00 00    	pushl  $0x1f54
    1513:	66 e8 24 f3 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:63
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    1519:	66 83 c4 10          	add    $0x10,%esp
    151d:	eb 20                	jmp    153f <_fs_show_file_by_descriptor_number+0x7f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:64
        printf("-%d", cluster_code);
    151f:	66 83 ec 08          	sub    $0x8,%esp
    1523:	66 53                	push   %ebx
    1525:	66 68 65 1f 00 00    	pushl  $0x1f65
    152b:	66 e8 0c f3 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:65
        cluster_code = FAT_table[cluster_code];
    1531:	67 66 0f b7 9c 1b 80 	movzwl 0x2180(%ebx,%ebx,1),%ebx
    1538:	21 00 00 
    153b:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:63
void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    153f:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
    1544:	66 3d ed ff 00 00    	cmp    $0xffed,%eax
    154a:	76 d3                	jbe    151f <_fs_show_file_by_descriptor_number+0x5f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:67
        printf("-%d", cluster_code);
        cluster_code = FAT_table[cluster_code];
    }
    printf("-|\n");
    154c:	66 83 ec 0c          	sub    $0xc,%esp
    1550:	66 68 69 1f 00 00    	pushl  $0x1f69
    1556:	66 e8 e1 f2 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:69
    return ;
}
    155c:	66 83 c4 14          	add    $0x14,%esp
    1560:	66 5b                	pop    %ebx
    1562:	66 5e                	pop    %esi
    1564:	66 c3                	retl   

00001566 <_fs_load_by_cluster_code>:
_fs_load_by_cluster_code():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:71

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
    1566:	66 57                	push   %edi
    1568:	66 56                	push   %esi
    156a:	66 53                	push   %ebx
    156c:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
    1572:	67 66 0f b7 5c 24 10 	movzwl 0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:72
    int size = 0;
    1579:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:73
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    157f:	eb 5b                	jmp    15dc <_fs_load_by_cluster_code+0x76>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:74
        size += 512*cluster2sector;
    1581:	66 0f b7 16 80 2c    	movzwl 0x2c80,%edx
    1587:	66 89 d0             	mov    %edx,%eax
    158a:	66 c1 e0 09          	shl    $0x9,%eax
    158e:	66 01 c7             	add    %eax,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:75
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
    1591:	66 0f b7 0e 82 2c    	movzwl 0x2c82,%ecx
    1597:	66 0f b7 db          	movzwl %bx,%ebx
    159b:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
    15a0:	66 0f af c2          	imul   %edx,%eax
    15a4:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:76
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
    15a7:	66 0f b7 ce          	movzwl %si,%ecx
    15ab:	66 51                	push   %ecx
    15ad:	66 68 00 10 00 00    	pushl  $0x1000
    15b3:	66 52                	push   %edx
    15b5:	66 0f b7 c0          	movzwl %ax,%eax
    15b9:	66 50                	push   %eax
    15bb:	66 e8 8a f4 ff ff    	calll  a4b <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:77
        program = program+cluster2sector*512;
    15c1:	66 0f b7 06 80 2c    	movzwl 0x2c80,%eax
    15c7:	66 c1 e0 09          	shl    $0x9,%eax
    15cb:	66 01 c6             	add    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:78
        cluster_code = FAT_table[cluster_code];
    15ce:	67 66 0f b7 9c 1b 80 	movzwl 0x2180(%ebx,%ebx,1),%ebx
    15d5:	21 00 00 
    15d8:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:73
    return ;
}

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    15dc:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
    15e1:	83 f8 ed             	cmp    $0xffed,%ax
    15e4:	76 9b                	jbe    1581 <_fs_load_by_cluster_code+0x1b>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:81
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
        program = program+cluster2sector*512;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
    15e6:	66 89 f8             	mov    %edi,%eax
    15e9:	66 5b                	pop    %ebx
    15eb:	66 5e                	pop    %esi
    15ed:	66 5f                	pop    %edi
    15ef:	66 c3                	retl   

000015f1 <fs_load_by_name>:
fs_load_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:84


u16 fs_load_by_name(char * file_name, void (*program)()){
    15f1:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:85
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
    15f5:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    15fb:	66 e8 61 fe ff ff    	calll  1462 <_fs_find_cluster_code_by_name>
    1601:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:86
    if (cluster_code){
    1605:	66 83 c4 10          	add    $0x10,%esp
    1609:	66 85 c0             	test   %eax,%eax
    160c:	74 18                	je     1626 <fs_load_by_name+0x35>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:87
        return _fs_load_by_cluster_code(cluster_code, program);
    160e:	66 83 ec 08          	sub    $0x8,%esp
    1612:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    1618:	66 50                	push   %eax
    161a:	66 e8 46 ff ff ff    	calll  1566 <_fs_load_by_cluster_code>
    1620:	66 83 c4 10          	add    $0x10,%esp
    1624:	eb 06                	jmp    162c <fs_load_by_name+0x3b>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:90
    }
    else {
        return 0;
    1626:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:92
    }
}
    162c:	66 83 c4 0c          	add    $0xc,%esp
    1630:	66 c3                	retl   

00001632 <fs_get_file_size>:
fs_get_file_size():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:95


u16 fs_get_file_size(char * file_name){
    1632:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:96
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
    1636:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    163c:	66 e8 20 fe ff ff    	calll  1462 <_fs_find_cluster_code_by_name>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:97
    return _fs_get_file_size_by_cluster_code(cluster_code);
    1642:	66 0f b7 c0          	movzwl %ax,%eax
    1646:	67 66 89 04 24       	mov    %eax,(%esp)
    164b:	66 e8 38 fe ff ff    	calll  1489 <_fs_get_file_size_by_cluster_code>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:98
}
    1651:	66 83 c4 1c          	add    $0x1c,%esp
    1655:	66 c3                	retl   

00001657 <fs_show_root_file_table>:
fs_show_root_file_table():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:100

void fs_show_root_file_table(){
    1657:	66 53                	push   %ebx
    1659:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:101
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    165d:	66 68 6d 1f 00 00    	pushl  $0x1f6d
    1663:	66 68 75 1f 00 00    	pushl  $0x1f75
    1669:	66 68 7f 1f 00 00    	pushl  $0x1f7f
    166f:	66 68 8a 1f 00 00    	pushl  $0x1f8a
    1675:	66 e8 c2 f1 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:102
    printf("------------------------------------\n\r");
    167b:	67 66 c7 04 24 44 20 	movl   $0x2044,(%esp)
    1682:	00 00 
    1684:	66 e8 b3 f1 ff ff    	calll  83d <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104
    int file_number = 7;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
    168a:	66 83 c4 10          	add    $0x10,%esp
    168e:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    1694:	eb 18                	jmp    16ae <fs_show_root_file_table+0x57>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:105 (discriminator 3)
        _fs_show_file_by_descriptor_number(i);
    1696:	66 83 ec 0c          	sub    $0xc,%esp
    169a:	66 0f b7 c3          	movzwl %bx,%eax
    169e:	66 50                	push   %eax
    16a0:	66 e8 1a fe ff ff    	calll  14c0 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104 (discriminator 3)

void fs_show_root_file_table(){
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    printf("------------------------------------\n\r");
    int file_number = 7;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
    16a6:	66 83 c3 01          	add    $0x1,%ebx
    16aa:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104 (discriminator 1)
    16ae:	66 83 fb 06          	cmp    $0x6,%ebx
    16b2:	7e e2                	jle    1696 <fs_show_root_file_table+0x3f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:108
        _fs_show_file_by_descriptor_number(i);
    }
    return ;
}
    16b4:	66 83 c4 08          	add    $0x8,%esp
    16b8:	66 5b                	pop    %ebx
    16ba:	66 c3                	retl   

000016bc <fs_show_file_by_name>:
fs_show_file_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:110

void fs_show_file_by_name(char * file_name){
    16bc:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:111
    int descriptor_index = _fs_find_descriptor_number_by_name(file_name);
    16c0:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    16c6:	66 e8 20 fd ff ff    	calll  13ec <_fs_find_descriptor_number_by_name>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:112
    _fs_show_file_by_descriptor_number(descriptor_index);
    16cc:	66 0f b7 c0          	movzwl %ax,%eax
    16d0:	67 66 89 04 24       	mov    %eax,(%esp)
    16d5:	66 e8 e5 fd ff ff    	calll  14c0 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:114
    return ;
}
    16db:	66 83 c4 1c          	add    $0x1c,%esp
    16df:	66 c3                	retl   

000016e1 <fs_show_floppy_infomation>:
fs_show_floppy_infomation():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:117


void fs_show_floppy_infomation(){
    16e1:	66 f3 c3             	repz retl 

000016e4 <move_name>:
move_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:9

void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    16e4:	66 0f b7 0e 9e 0f    	movzwl 0xf9e,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10
    for (int i =78; i >= 0; i--){
    16ea:	66 b8 4e 00 00 00    	mov    $0x4e,%eax
    16f0:	eb 16                	jmp    1708 <move_name+0x24>
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:11 (discriminator 3)
        text_line[i+1] = text_line[i];
    16f2:	67 66 0f b7 94 00 00 	movzwl 0xf00(%eax,%eax,1),%edx
    16f9:	0f 00 00 
    16fc:	67 89 94 00 02 0f 00 	mov    %dx,0xf02(%eax,%eax,1)
    1703:	00 
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10 (discriminator 3)
void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    for (int i =78; i >= 0; i--){
    1704:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10 (discriminator 1)
    1708:	66 85 c0             	test   %eax,%eax
    170b:	79 e5                	jns    16f2 <move_name+0xe>
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:13
        text_line[i+1] = text_line[i];
    }
    text_line[0] = last_char;
    170d:	89 0e 00 0f          	mov    %cx,0xf00
    1711:	66 c3                	retl   
