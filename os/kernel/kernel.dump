
kernel.debug:     file format elf32-i386


Disassembly of section .text:

00000000 <_start>:
_start():
       0:	e8 04 01             	call   107 <install_int33>
       3:	e8 3a 01             	call   140 <install_int34>
       6:	e8 74 01             	call   17d <install_int35>
       9:	e8 ac 01             	call   1b8 <install_int36>
       c:	e8 a7 00             	call   b6 <install_int40>
       f:	66 e8 e0 01 00 00    	calll  1f5 <cstart>
      15:	e8 11 00             	call   29 <install_int8>
      18:	e8 72 00             	call   8d <restart>

0000001b <start_tty>:
start_tty():
      1b:	66 e8 ac 0a 00 00    	calll  acd <tty>
      21:	b4 02                	mov    $0x2,%ah
      23:	cd 40                	int    $0x40
      25:	eb fe                	jmp    25 <start_tty+0xa>
      27:	eb fe                	jmp    27 <user1_bound_y_right>

00000029 <install_int8>:
install_int8():
      29:	53                   	push   %bx
      2a:	51                   	push   %cx
      2b:	52                   	push   %dx
      2c:	56                   	push   %si
      2d:	57                   	push   %di
      2e:	55                   	push   %bp
      2f:	1e                   	push   %ds
      30:	06                   	push   %es
      31:	16                   	push   %ss
      32:	b0 34                	mov    $0x34,%al
      34:	e6 43                	out    %al,$0x43
      36:	b8 ff ff             	mov    $0xffff,%ax
      39:	e6 40                	out    %al,$0x40
      3b:	88 e0                	mov    %ah,%al
      3d:	e6 40                	out    %al,$0x40
      3f:	b8 00 00             	mov    $0x0,%ax
      42:	8e d8                	mov    %ax,%ds
      44:	8c c8                	mov    %cs,%ax
      46:	a3 22 00             	mov    %ax,0x22
      49:	c7 06 20 00 59 00    	movw   $0x59,0x20
      4f:	17                   	pop    %ss
      50:	07                   	pop    %es
      51:	1f                   	pop    %ds
      52:	5d                   	pop    %bp
      53:	5f                   	pop    %di
      54:	5e                   	pop    %si
      55:	5a                   	pop    %dx
      56:	59                   	pop    %cx
      57:	5b                   	pop    %bx
      58:	c3                   	ret    

00000059 <new_int8>:
new_int8():
      59:	fa                   	cli    
      5a:	66 60                	pushal 
      5c:	06                   	push   %es
      5d:	1e                   	push   %ds
      5e:	54                   	push   %sp
      5f:	16                   	push   %ss
      60:	89 e6                	mov    %sp,%si
      62:	b8 00 10             	mov    $0x1000,%ax
      65:	8e c0                	mov    %ax,%es
      67:	8b 3e 84 9f          	mov    -0x607c,%di
      6b:	b9 2e 00             	mov    $0x2e,%cx
      6e:	fc                   	cld    
      6f:	f3 a4                	rep movsb %ds:(%si),%es:(%di)
      71:	b8 00 10             	mov    $0x1000,%ax
      74:	8e c0                	mov    %ax,%es
      76:	8e d8                	mov    %ax,%ds
      78:	8e d0                	mov    %ax,%ss
      7a:	bc 00 50             	mov    $0x5000,%sp
      7d:	66 e8 1a 06 00 00    	calll  69d <schedule_process>
      83:	b0 20                	mov    $0x20,%al
      85:	e6 20                	out    %al,$0x20
      87:	e6 a0                	out    %al,$0xa0
      89:	e8 01 00             	call   8d <restart>
      8c:	cf                   	iret   

0000008d <restart>:
restart():
      8d:	8b 2e 84 9f          	mov    -0x607c,%bp
      91:	89 ee                	mov    %bp,%si
      93:	83 c6 04             	add    $0x4,%si
      96:	3e 8e 46 00          	mov    %ds:0x0(%bp),%es
      9a:	3e 8b 7e 02          	mov    %ds:0x2(%bp),%di
      9e:	b9 2a 00             	mov    $0x2a,%cx
      a1:	83 ef 2a             	sub    $0x2a,%di
      a4:	fc                   	cld    
      a5:	f3 a4                	rep movsb %ds:(%si),%es:(%di)
      a7:	8c c0                	mov    %es,%ax
      a9:	83 ef 2a             	sub    $0x2a,%di
      ac:	8e d0                	mov    %ax,%ss
      ae:	89 fc                	mov    %di,%sp
      b0:	1f                   	pop    %ds
      b1:	07                   	pop    %es
      b2:	66 61                	popal  
      b4:	fb                   	sti    
      b5:	cf                   	iret   

000000b6 <install_int40>:
install_int40():
      b6:	53                   	push   %bx
      b7:	51                   	push   %cx
      b8:	52                   	push   %dx
      b9:	56                   	push   %si
      ba:	57                   	push   %di
      bb:	55                   	push   %bp
      bc:	1e                   	push   %ds
      bd:	06                   	push   %es
      be:	16                   	push   %ss
      bf:	b8 00 00             	mov    $0x0,%ax
      c2:	8e d8                	mov    %ax,%ds
      c4:	8c c8                	mov    %cs,%ax
      c6:	c7 06 00 01 d9 00    	movw   $0xd9,0x100
      cc:	a3 02 01             	mov    %ax,0x102
      cf:	17                   	pop    %ss
      d0:	07                   	pop    %es
      d1:	1f                   	pop    %ds
      d2:	5d                   	pop    %bp
      d3:	5f                   	pop    %di
      d4:	5e                   	pop    %si
      d5:	5a                   	pop    %dx
      d6:	59                   	pop    %cx
      d7:	5b                   	pop    %bx
      d8:	c3                   	ret    

000000d9 <new_int40>:
new_int40():
      d9:	80 fc 4c             	cmp    $0x4c,%ah
      dc:	74 11                	je     ef <new_int40.return_kernel>
      de:	88 e3                	mov    %ah,%bl
      e0:	31 c0                	xor    %ax,%ax
      e2:	b0 02                	mov    $0x2,%al
      e4:	f6 e3                	mul    %bl
      e6:	89 c6                	mov    %ax,%si
      e8:	bb a0 9f             	mov    $0x9fa0,%bx
      eb:	66 ff 10             	calll  *(%bx,%si)
      ee:	cf                   	iret   

000000ef <new_int40.return_kernel>:
new_int40.return_kernel():
      ef:	59                   	pop    %cx
      f0:	59                   	pop    %cx
      f1:	59                   	pop    %cx
      f2:	b8 00 10             	mov    $0x1000,%ax
      f5:	8e d8                	mov    %ax,%ds
      f7:	8e c0                	mov    %ax,%es
      f9:	8e d0                	mov    %ax,%ss
      fb:	bc 00 50             	mov    $0x5000,%sp
      fe:	51                   	push   %cx
      ff:	68 00 10             	push   $0x1000
     102:	68 1b 00             	push   $0x1b
     105:	fb                   	sti    
     106:	cf                   	iret   

00000107 <install_int33>:
install_int33():
     107:	53                   	push   %bx
     108:	51                   	push   %cx
     109:	52                   	push   %dx
     10a:	56                   	push   %si
     10b:	57                   	push   %di
     10c:	55                   	push   %bp
     10d:	1e                   	push   %ds
     10e:	06                   	push   %es
     10f:	16                   	push   %ss
     110:	b8 00 00             	mov    $0x0,%ax
     113:	8e d8                	mov    %ax,%ds
     115:	8c c8                	mov    %cs,%ax
     117:	c7 06 cc 00 2a 01    	movw   $0x12a,0xcc
     11d:	a3 ce 00             	mov    %ax,0xce
     120:	17                   	pop    %ss
     121:	07                   	pop    %es
     122:	1f                   	pop    %ds
     123:	5d                   	pop    %bp
     124:	5f                   	pop    %di
     125:	5e                   	pop    %si
     126:	5a                   	pop    %dx
     127:	59                   	pop    %cx
     128:	5b                   	pop    %bx
     129:	c3                   	ret    

0000012a <new_int33>:
new_int33():
     12a:	53                   	push   %bx
     12b:	51                   	push   %cx
     12c:	52                   	push   %dx
     12d:	56                   	push   %si
     12e:	57                   	push   %di
     12f:	55                   	push   %bp
     130:	1e                   	push   %ds
     131:	06                   	push   %es
     132:	16                   	push   %ss
     133:	89 c2                	mov    %ax,%dx
     135:	ec                   	in     (%dx),%al
     136:	17                   	pop    %ss
     137:	07                   	pop    %es
     138:	1f                   	pop    %ds
     139:	5d                   	pop    %bp
     13a:	5f                   	pop    %di
     13b:	5e                   	pop    %si
     13c:	5a                   	pop    %dx
     13d:	59                   	pop    %cx
     13e:	5b                   	pop    %bx
     13f:	cf                   	iret   

00000140 <install_int34>:
install_int34():
     140:	53                   	push   %bx
     141:	51                   	push   %cx
     142:	52                   	push   %dx
     143:	56                   	push   %si
     144:	57                   	push   %di
     145:	55                   	push   %bp
     146:	1e                   	push   %ds
     147:	06                   	push   %es
     148:	16                   	push   %ss
     149:	b8 00 00             	mov    $0x0,%ax
     14c:	8e d8                	mov    %ax,%ds
     14e:	8c c8                	mov    %cs,%ax
     150:	c7 06 d0 00 63 01    	movw   $0x163,0xd0
     156:	a3 d2 00             	mov    %ax,0xd2
     159:	17                   	pop    %ss
     15a:	07                   	pop    %es
     15b:	1f                   	pop    %ds
     15c:	5d                   	pop    %bp
     15d:	5f                   	pop    %di
     15e:	5e                   	pop    %si
     15f:	5a                   	pop    %dx
     160:	59                   	pop    %cx
     161:	5b                   	pop    %bx
     162:	c3                   	ret    

00000163 <new_int34>:
new_int34():
     163:	50                   	push   %ax
     164:	53                   	push   %bx
     165:	51                   	push   %cx
     166:	52                   	push   %dx
     167:	56                   	push   %si
     168:	57                   	push   %di
     169:	55                   	push   %bp
     16a:	1e                   	push   %ds
     16b:	06                   	push   %es
     16c:	16                   	push   %ss
     16d:	89 da                	mov    %bx,%dx
     16f:	88 c0                	mov    %al,%al
     171:	ee                   	out    %al,(%dx)
     172:	17                   	pop    %ss
     173:	07                   	pop    %es
     174:	1f                   	pop    %ds
     175:	5d                   	pop    %bp
     176:	5f                   	pop    %di
     177:	5e                   	pop    %si
     178:	5a                   	pop    %dx
     179:	59                   	pop    %cx
     17a:	5b                   	pop    %bx
     17b:	58                   	pop    %ax
     17c:	cf                   	iret   

0000017d <install_int35>:
install_int35():
     17d:	53                   	push   %bx
     17e:	51                   	push   %cx
     17f:	52                   	push   %dx
     180:	56                   	push   %si
     181:	57                   	push   %di
     182:	55                   	push   %bp
     183:	1e                   	push   %ds
     184:	06                   	push   %es
     185:	16                   	push   %ss
     186:	b8 00 00             	mov    $0x0,%ax
     189:	8e d8                	mov    %ax,%ds
     18b:	8c c8                	mov    %cs,%ax
     18d:	c7 06 d4 00 a0 01    	movw   $0x1a0,0xd4
     193:	a3 d6 00             	mov    %ax,0xd6
     196:	17                   	pop    %ss
     197:	07                   	pop    %es
     198:	1f                   	pop    %ds
     199:	5d                   	pop    %bp
     19a:	5f                   	pop    %di
     19b:	5e                   	pop    %si
     19c:	5a                   	pop    %dx
     19d:	59                   	pop    %cx
     19e:	5b                   	pop    %bx
     19f:	c3                   	ret    

000001a0 <new_int35>:
new_int35():
     1a0:	53                   	push   %bx
     1a1:	51                   	push   %cx
     1a2:	52                   	push   %dx
     1a3:	56                   	push   %si
     1a4:	57                   	push   %di
     1a5:	55                   	push   %bp
     1a6:	1e                   	push   %ds
     1a7:	06                   	push   %es
     1a8:	16                   	push   %ss
     1a9:	8e c0                	mov    %ax,%es
     1ab:	26 8a 07             	mov    %es:(%bx),%al
     1ae:	17                   	pop    %ss
     1af:	07                   	pop    %es
     1b0:	1f                   	pop    %ds
     1b1:	5d                   	pop    %bp
     1b2:	5f                   	pop    %di
     1b3:	5e                   	pop    %si
     1b4:	5a                   	pop    %dx
     1b5:	59                   	pop    %cx
     1b6:	5b                   	pop    %bx
     1b7:	cf                   	iret   

000001b8 <install_int36>:
install_int36():
     1b8:	53                   	push   %bx
     1b9:	51                   	push   %cx
     1ba:	52                   	push   %dx
     1bb:	56                   	push   %si
     1bc:	57                   	push   %di
     1bd:	55                   	push   %bp
     1be:	1e                   	push   %ds
     1bf:	06                   	push   %es
     1c0:	16                   	push   %ss
     1c1:	b8 00 00             	mov    $0x0,%ax
     1c4:	8e d8                	mov    %ax,%ds
     1c6:	8c c8                	mov    %cs,%ax
     1c8:	c7 06 d8 00 db 01    	movw   $0x1db,0xd8
     1ce:	a3 da 00             	mov    %ax,0xda
     1d1:	17                   	pop    %ss
     1d2:	07                   	pop    %es
     1d3:	1f                   	pop    %ds
     1d4:	5d                   	pop    %bp
     1d5:	5f                   	pop    %di
     1d6:	5e                   	pop    %si
     1d7:	5a                   	pop    %dx
     1d8:	59                   	pop    %cx
     1d9:	5b                   	pop    %bx
     1da:	c3                   	ret    

000001db <new_int36>:
new_int36():
     1db:	50                   	push   %ax
     1dc:	53                   	push   %bx
     1dd:	51                   	push   %cx
     1de:	52                   	push   %dx
     1df:	56                   	push   %si
     1e0:	57                   	push   %di
     1e1:	55                   	push   %bp
     1e2:	1e                   	push   %ds
     1e3:	06                   	push   %es
     1e4:	16                   	push   %ss
     1e5:	8e c0                	mov    %ax,%es
     1e7:	26 88 0f             	mov    %cl,%es:(%bx)
     1ea:	17                   	pop    %ss
     1eb:	07                   	pop    %es
     1ec:	1f                   	pop    %ds
     1ed:	5d                   	pop    %bp
     1ee:	5f                   	pop    %di
     1ef:	5e                   	pop    %si
     1f0:	5a                   	pop    %dx
     1f1:	59                   	pop    %cx
     1f2:	5b                   	pop    %bx
     1f3:	58                   	pop    %ax
     1f4:	cf                   	iret   

000001f5 <cstart>:
cstart():
/mnt/e/code/my_operating_system/os/kernel/start.c:10
#include "../include/global.h"
#include "../include/system_call.h"
#include "../include/fsystem.h"
#include "../include/proc.h"

int cstart(){
     1f5:	66 53                	push   %ebx
     1f7:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:12
    // 初始化文件系统
    init_fsystem();
     1fb:	66 e8 1e 01 00 00    	calll  31f <init_fsystem>
/mnt/e/code/my_operating_system/os/kernel/start.c:14
    // 清屏
    clean_screen();
     201:	66 e8 ab 14 00 00    	calll  16b2 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/start.c:16
    // 将光标设置为0 TODO:
    set_cursor(0);
     207:	66 83 ec 0c          	sub    $0xc,%esp
     20b:	66 6a 00             	pushl  $0x0
     20e:	66 e8 c5 0a 00 00    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:20


    // 加载文件到内存指定位置
    fs_load_by_name("test_a.bin", 0x2000, 0x0000);
     214:	66 83 c4 0c          	add    $0xc,%esp
     218:	66 6a 00             	pushl  $0x0
     21b:	66 68 00 20 00 00    	pushl  $0x2000
     221:	66 68 9f 18 00 00    	pushl  $0x189f
     227:	66 e8 63 03 00 00    	calll  590 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:21
    fs_load_by_name("test_b.bin", 0x3000, 0x0000);
     22d:	66 83 c4 0c          	add    $0xc,%esp
     231:	66 6a 00             	pushl  $0x0
     234:	66 68 00 30 00 00    	pushl  $0x3000
     23a:	66 68 aa 18 00 00    	pushl  $0x18aa
     240:	66 e8 4a 03 00 00    	calll  590 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:22
    fs_load_by_name("ouch.bin", 0x4000, 0x0000);
     246:	66 83 c4 0c          	add    $0xc,%esp
     24a:	66 6a 00             	pushl  $0x0
     24d:	66 68 00 40 00 00    	pushl  $0x4000
     253:	66 68 b5 18 00 00    	pushl  $0x18b5
     259:	66 e8 31 03 00 00    	calll  590 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:25
    // 初始化进程控制块

    for (int i = 0; i < CUR_PROCESS_NUM ; i++){
     25f:	66 83 c4 10          	add    $0x10,%esp
     263:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     269:	eb 23                	jmp    28e <cstart+0x99>
/mnt/e/code/my_operating_system/os/kernel/start.c:26 (discriminator 3)
        init_process(i, 0x2000 + i * 0x1000);
     26b:	67 66 8d 43 02       	lea    0x2(%ebx),%eax
     270:	66 83 ec 08          	sub    $0x8,%esp
     274:	66 c1 e0 0c          	shl    $0xc,%eax
     278:	66 0f b7 c0          	movzwl %ax,%eax
     27c:	66 50                	push   %eax
     27e:	66 53                	push   %ebx
     280:	66 e8 53 04 00 00    	calll  6d9 <init_process>
/mnt/e/code/my_operating_system/os/kernel/start.c:25 (discriminator 3)
    fs_load_by_name("test_a.bin", 0x2000, 0x0000);
    fs_load_by_name("test_b.bin", 0x3000, 0x0000);
    fs_load_by_name("ouch.bin", 0x4000, 0x0000);
    // 初始化进程控制块

    for (int i = 0; i < CUR_PROCESS_NUM ; i++){
     286:	66 83 c3 01          	add    $0x1,%ebx
     28a:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:25 (discriminator 1)
     28e:	66 83 fb 02          	cmp    $0x2,%ebx
     292:	7e d7                	jle    26b <cstart+0x76>
/mnt/e/code/my_operating_system/os/kernel/start.c:29
        init_process(i, 0x2000 + i * 0x1000);
    }
    // 初始化启动进程
    cur_process_index = 0;
     294:	c7 06 80 9f 00 00    	movw   $0x0,-0x6080
/mnt/e/code/my_operating_system/os/kernel/start.c:30
    cur_process = (PCB_t*)(&process_table[cur_process_index]);
     29a:	66 c7 06 84 9f 80 5b 	movl   $0x5b80,-0x607c
     2a1:	00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:33

    // 初始化 系统调用表
    install_system_call(2, test_system_call);
     2a3:	66 83 ec 08          	sub    $0x8,%esp
     2a7:	66 68 da 02 00 00    	pushl  $0x2da
     2ad:	66 6a 02             	pushl  $0x2
     2b0:	66 e8 0e 00 00 00    	calll  2c4 <install_system_call>
/mnt/e/code/my_operating_system/os/kernel/start.c:35
    return 0;
}
     2b6:	66 b8 00 00 00 00    	mov    $0x0,%eax
     2bc:	66 83 c4 18          	add    $0x18,%esp
     2c0:	66 5b                	pop    %ebx
     2c2:	66 c3                	retl   

000002c4 <install_system_call>:
install_system_call():
/mnt/e/code/my_operating_system/os/service/system_call.c:6
#include "../include/type.h"
#include "../include/stdio.h"
#include "../include/global.h"

void install_system_call(int system_call_number, void (*function)() ){
    system_call[system_call_number] = (u16) function;
     2c4:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     2ca:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
     2d0:	67 89 94 00 a0 9f 00 	mov    %dx,0x9fa0(%eax,%eax,1)
     2d7:	00 
     2d8:	66 c3                	retl   

000002da <test_system_call>:
test_system_call():
/mnt/e/code/my_operating_system/os/service/system_call.c:12
    return ;
}



void test_system_call(){
     2da:	66 53                	push   %ebx
     2dc:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/system_call.c:13
    int origin = get_cursor();
     2e0:	66 e8 65 0a 00 00    	calll  d4b <get_cursor>
     2e6:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/system_call.c:14
    set_cursor(1800);
     2e9:	66 83 ec 0c          	sub    $0xc,%esp
     2ed:	66 68 08 07 00 00    	pushl  $0x708
     2f3:	66 e8 e0 09 00 00    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/system_call.c:15
    printf("test custom system call!!! ");
     2f9:	67 66 c7 04 24 be 18 	movl   $0x18be,(%esp)
     300:	00 00 
     302:	66 e8 1a 10 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/system_call.c:16
    set_cursor(origin);
     308:	66 0f b7 db          	movzwl %bx,%ebx
     30c:	67 66 89 1c 24       	mov    %ebx,(%esp)
     311:	66 e8 c2 09 00 00    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/system_call.c:17
}
     317:	66 83 c4 18          	add    $0x18,%esp
     31b:	66 5b                	pop    %ebx
     31d:	66 c3                	retl   

0000031f <init_fsystem>:
init_fsystem():
/mnt/e/code/my_operating_system/os/service/fsystem.c:14
FileDescriptor root[56];
u16 root_sector;
u16 first_cluster_by_sector;
u16 cluster2sector;

void init_fsystem(){
     31f:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:15
    cluster2sector = 1;
     323:	c7 06 40 5b 01 00    	movw   $0x1,0x5b40
/mnt/e/code/my_operating_system/os/service/fsystem.c:16
    root_sector = 37;
     329:	c7 06 20 50 25 00    	movw   $0x25,0x5020
/mnt/e/code/my_operating_system/os/service/fsystem.c:17
    first_cluster_by_sector = root_sector + 1;  
     32f:	c7 06 42 5b 26 00    	movw   $0x26,0x5b42
/mnt/e/code/my_operating_system/os/service/fsystem.c:18
    read_n_sector(root_sector,1, 0x1000, (u16)&root);
     335:	66 b8 40 54 00 00    	mov    $0x5440,%eax
     33b:	66 0f b7 c0          	movzwl %ax,%eax
     33f:	66 50                	push   %eax
     341:	66 68 00 10 00 00    	pushl  $0x1000
     347:	66 6a 01             	pushl  $0x1
     34a:	66 6a 25             	pushl  $0x25
     34d:	66 e8 dd 11 00 00    	calll  1530 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:19
    read_n_sector(1,2,0x1000, (u16)&FAT_table);// 这个会覆盖掉root吗？
     353:	66 b8 40 50 00 00    	mov    $0x5040,%eax
     359:	66 0f b7 c0          	movzwl %ax,%eax
     35d:	66 50                	push   %eax
     35f:	66 68 00 10 00 00    	pushl  $0x1000
     365:	66 6a 02             	pushl  $0x2
     368:	66 6a 01             	pushl  $0x1
     36b:	66 e8 bf 11 00 00    	calll  1530 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:27
    // puti(FAT_table[0]);
    // puti(root[0].cluster_number);
    // puts(&root[0], 10);
    // puts(&root[1], 10);
    // puts(&root[2], 10);
}
     371:	66 83 c4 2c          	add    $0x2c,%esp
     375:	66 c3                	retl   

00000377 <_fs_find_descriptor_number_by_name>:
_fs_find_descriptor_number_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:29

u16 _fs_find_descriptor_number_by_name(char * file_name){
     377:	66 57                	push   %edi
     379:	66 56                	push   %esi
     37b:	66 53                	push   %ebx
     37d:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:30
    int file_name_length = strlen(file_name);
     383:	66 83 ec 0c          	sub    $0xc,%esp
     387:	66 57                	push   %edi
     389:	66 e8 d6 13 00 00    	calll  1765 <strlen>
     38f:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:31
    if (file_name_length >= 11) file_name_length = 11;
     392:	66 83 c4 10          	add    $0x10,%esp
     396:	66 83 f8 0a          	cmp    $0xa,%eax
     39a:	7e 06                	jle    3a2 <_fs_find_descriptor_number_by_name+0x2b>
     39c:	66 be 0b 00 00 00    	mov    $0xb,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:33
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     3a2:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     3a8:	eb 2f                	jmp    3d9 <_fs_find_descriptor_number_by_name+0x62>
/mnt/e/code/my_operating_system/os/service/fsystem.c:34
        if (!strncmp((char *)&root[i], file_name, file_name_length)){
     3aa:	66 89 d8             	mov    %ebx,%eax
     3ad:	66 c1 e0 05          	shl    $0x5,%eax
     3b1:	66 05 40 54 00 00    	add    $0x5440,%eax
     3b7:	66 83 ec 04          	sub    $0x4,%esp
     3bb:	66 56                	push   %esi
     3bd:	66 57                	push   %edi
     3bf:	66 50                	push   %eax
     3c1:	66 e8 62 14 00 00    	calll  1829 <strncmp>
     3c7:	66 83 c4 10          	add    $0x10,%esp
     3cb:	66 85 c0             	test   %eax,%eax
     3ce:	75 05                	jne    3d5 <_fs_find_descriptor_number_by_name+0x5e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:35
            return i;
     3d0:	66 89 d8             	mov    %ebx,%eax
     3d3:	eb 10                	jmp    3e5 <_fs_find_descriptor_number_by_name+0x6e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 2)

u16 _fs_find_descriptor_number_by_name(char * file_name){
    int file_name_length = strlen(file_name);
    if (file_name_length >= 11) file_name_length = 11;
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     3d5:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 1)
     3d9:	66 83 fb 09          	cmp    $0x9,%ebx
     3dd:	7e cb                	jle    3aa <_fs_find_descriptor_number_by_name+0x33>
/mnt/e/code/my_operating_system/os/service/fsystem.c:38
        if (!strncmp((char *)&root[i], file_name, file_name_length)){
            return i;
        }
    }
    return -1;
     3df:	66 b8 ff ff ff ff    	mov    $0xffffffff,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:39
}
     3e5:	66 5b                	pop    %ebx
     3e7:	66 5e                	pop    %esi
     3e9:	66 5f                	pop    %edi
     3eb:	66 c3                	retl   

000003ed <_fs_find_cluster_code_by_name>:
_fs_find_cluster_code_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:41

u16 _fs_find_cluster_code_by_name(char * file_name){
     3ed:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:42
    int index = _fs_find_descriptor_number_by_name(file_name);
     3f1:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     3f7:	66 e8 7a ff ff ff    	calll  377 <_fs_find_descriptor_number_by_name>
     3fd:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:44
    if (index != -1)
        return root[index].cluster_code;
     401:	66 c1 e0 05          	shl    $0x5,%eax
     405:	67 66 0f b7 80 5a 54 	movzwl 0x545a(%eax),%eax
     40c:	00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:46
    return 0;
}
     40e:	66 83 c4 1c          	add    $0x1c,%esp
     412:	66 c3                	retl   

00000414 <_fs_get_file_size_by_cluster_code>:
_fs_get_file_size_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:48

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
     414:	67 66 0f b7 54 24 04 	movzwl 0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:49
    int size = 0;
     41b:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     421:	eb 1b                	jmp    43e <_fs_get_file_size_by_cluster_code+0x2a>
/mnt/e/code/my_operating_system/os/service/fsystem.c:51
        size += 512*cluster2sector;
     423:	66 0f b7 0e 40 5b    	movzwl 0x5b40,%ecx
     429:	66 c1 e1 09          	shl    $0x9,%ecx
     42d:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:52
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     430:	66 0f b7 d2          	movzwl %dx,%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:53
        cluster_code = FAT_table[cluster_code];
     434:	67 66 0f b7 94 12 40 	movzwl 0x5040(%edx,%edx,1),%edx
     43b:	50 00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    return 0;
}

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     43e:	67 66 8d 4a fe       	lea    -0x2(%edx),%ecx
     443:	83 f9 ed             	cmp    $0xffed,%cx
     446:	76 db                	jbe    423 <_fs_get_file_size_by_cluster_code+0xf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:56
        size += 512*cluster2sector;
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     448:	66 f3 c3             	repz retl 

0000044b <_fs_show_file_by_descriptor_number>:
_fs_show_file_by_descriptor_number():
/mnt/e/code/my_operating_system/os/service/fsystem.c:58

void _fs_show_file_by_descriptor_number(u16 index){
     44b:	66 56                	push   %esi
     44d:	66 53                	push   %ebx
     44f:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:59
    int cluster_code = root[index].cluster_code;
     453:	67 66 0f b7 44 24 14 	movzwl 0x14(%esp),%eax
     45a:	66 89 c6             	mov    %eax,%esi
     45d:	66 c1 e6 05          	shl    $0x5,%esi
     461:	67 66 0f b7 9e 5a 54 	movzwl 0x545a(%esi),%ebx
     468:	00 00 
     46a:	66 81 c6 40 54 00 00 	add    $0x5440,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:60
    printf("%d, %d\n" , index,cluster_code);
     471:	66 53                	push   %ebx
     473:	66 50                	push   %eax
     475:	66 68 da 18 00 00    	pushl  $0x18da
     47b:	66 e8 a1 0e 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:62
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
     481:	67 66 89 1c 24       	mov    %ebx,(%esp)
     486:	66 e8 88 ff ff ff    	calll  414 <_fs_get_file_size_by_cluster_code>
     48c:	66 83 c4 0c          	add    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:61
}

void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
     490:	66 0f b7 c0          	movzwl %ax,%eax
     494:	66 50                	push   %eax
     496:	66 56                	push   %esi
     498:	66 68 e2 18 00 00    	pushl  $0x18e2
     49e:	66 e8 7e 0e 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     4a4:	66 83 c4 10          	add    $0x10,%esp
     4a8:	eb 20                	jmp    4ca <_fs_show_file_by_descriptor_number+0x7f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:64
        printf("-%d", cluster_code);
     4aa:	66 83 ec 08          	sub    $0x8,%esp
     4ae:	66 53                	push   %ebx
     4b0:	66 68 f3 18 00 00    	pushl  $0x18f3
     4b6:	66 e8 66 0e 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:65
        cluster_code = FAT_table[cluster_code];
     4bc:	67 66 0f b7 9c 1b 40 	movzwl 0x5040(%ebx,%ebx,1),%ebx
     4c3:	50 00 00 
     4c6:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     4ca:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     4cf:	66 3d ed ff 00 00    	cmp    $0xffed,%eax
     4d5:	76 d3                	jbe    4aa <_fs_show_file_by_descriptor_number+0x5f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:67
        printf("-%d", cluster_code);
        cluster_code = FAT_table[cluster_code];
    }
    printf("-|\n");
     4d7:	66 83 ec 0c          	sub    $0xc,%esp
     4db:	66 68 f7 18 00 00    	pushl  $0x18f7
     4e1:	66 e8 3b 0e 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:69
    return ;
}
     4e7:	66 83 c4 14          	add    $0x14,%esp
     4eb:	66 5b                	pop    %ebx
     4ed:	66 5e                	pop    %esi
     4ef:	66 c3                	retl   

000004f1 <_fs_load_by_cluster_code>:
_fs_load_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:71

u16 _fs_load_by_cluster_code(u16 cluster_code, u16 segment, u16 offset){
     4f1:	66 55                	push   %ebp
     4f3:	66 57                	push   %edi
     4f5:	66 56                	push   %esi
     4f7:	66 53                	push   %ebx
     4f9:	66 83 ec 0c          	sub    $0xc,%esp
     4fd:	67 66 0f b7 5c 24 20 	movzwl 0x20(%esp),%ebx
     504:	67 66 0f b7 6c 24 24 	movzwl 0x24(%esp),%ebp
     50b:	67 66 0f b7 74 24 28 	movzwl 0x28(%esp),%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:72
    int size = 0;
     512:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     518:	eb 5b                	jmp    575 <_fs_load_by_cluster_code+0x84>
/mnt/e/code/my_operating_system/os/service/fsystem.c:74
        size += 512*cluster2sector;
     51a:	66 0f b7 16 40 5b    	movzwl 0x5b40,%edx
     520:	66 89 d0             	mov    %edx,%eax
     523:	66 c1 e0 09          	shl    $0x9,%eax
     527:	66 01 c7             	add    %eax,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:75
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     52a:	66 0f b7 0e 42 5b    	movzwl 0x5b42,%ecx
     530:	66 0f b7 db          	movzwl %bx,%ebx
     534:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     539:	66 0f af c2          	imul   %edx,%eax
     53d:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:76
        read_n_sector(sector_number, cluster2sector, segment, offset);
     540:	66 0f b7 ce          	movzwl %si,%ecx
     544:	66 51                	push   %ecx
     546:	66 0f b7 cd          	movzwl %bp,%ecx
     54a:	66 51                	push   %ecx
     54c:	66 52                	push   %edx
     54e:	66 0f b7 c0          	movzwl %ax,%eax
     552:	66 50                	push   %eax
     554:	66 e8 d6 0f 00 00    	calll  1530 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:77
        offset = offset+cluster2sector*512;
     55a:	66 0f b7 06 40 5b    	movzwl 0x5b40,%eax
     560:	66 c1 e0 09          	shl    $0x9,%eax
     564:	66 01 c6             	add    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:78
        cluster_code = FAT_table[cluster_code];
     567:	67 66 0f b7 9c 1b 40 	movzwl 0x5040(%ebx,%ebx,1),%ebx
     56e:	50 00 00 
     571:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    return ;
}

u16 _fs_load_by_cluster_code(u16 cluster_code, u16 segment, u16 offset){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     575:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     57a:	83 f8 ed             	cmp    $0xffed,%ax
     57d:	76 9b                	jbe    51a <_fs_load_by_cluster_code+0x29>
/mnt/e/code/my_operating_system/os/service/fsystem.c:81
        read_n_sector(sector_number, cluster2sector, segment, offset);
        offset = offset+cluster2sector*512;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     57f:	66 89 f8             	mov    %edi,%eax
     582:	66 83 c4 0c          	add    $0xc,%esp
     586:	66 5b                	pop    %ebx
     588:	66 5e                	pop    %esi
     58a:	66 5f                	pop    %edi
     58c:	66 5d                	pop    %ebp
     58e:	66 c3                	retl   

00000590 <fs_load_by_name>:
fs_load_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:84


u16 fs_load_by_name(char * file_name, u16 segment, u16 offset){
     590:	66 56                	push   %esi
     592:	66 53                	push   %ebx
     594:	66 83 ec 10          	sub    $0x10,%esp
     598:	67 66 8b 5c 24 20    	mov    0x20(%esp),%ebx
     59e:	67 66 8b 74 24 24    	mov    0x24(%esp),%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:85
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     5a4:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     5aa:	66 e8 3d fe ff ff    	calll  3ed <_fs_find_cluster_code_by_name>
     5b0:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:86
    if (cluster_code){
     5b4:	66 83 c4 10          	add    $0x10,%esp
     5b8:	66 85 c0             	test   %eax,%eax
     5bb:	74 1e                	je     5db <fs_load_by_name+0x4b>
/mnt/e/code/my_operating_system/os/service/fsystem.c:87
        return _fs_load_by_cluster_code(cluster_code, segment, offset);
     5bd:	66 83 ec 04          	sub    $0x4,%esp
     5c1:	66 0f b7 f6          	movzwl %si,%esi
     5c5:	66 56                	push   %esi
     5c7:	66 0f b7 db          	movzwl %bx,%ebx
     5cb:	66 53                	push   %ebx
     5cd:	66 50                	push   %eax
     5cf:	66 e8 1c ff ff ff    	calll  4f1 <_fs_load_by_cluster_code>
     5d5:	66 83 c4 10          	add    $0x10,%esp
     5d9:	eb 06                	jmp    5e1 <fs_load_by_name+0x51>
/mnt/e/code/my_operating_system/os/service/fsystem.c:90
    }
    else {
        return 0;
     5db:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:92
    }
}
     5e1:	66 83 c4 04          	add    $0x4,%esp
     5e5:	66 5b                	pop    %ebx
     5e7:	66 5e                	pop    %esi
     5e9:	66 c3                	retl   

000005eb <fs_get_file_size>:
fs_get_file_size():
/mnt/e/code/my_operating_system/os/service/fsystem.c:95


u16 fs_get_file_size(char * file_name){
     5eb:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:96
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     5ef:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     5f5:	66 e8 f2 fd ff ff    	calll  3ed <_fs_find_cluster_code_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:97
    return _fs_get_file_size_by_cluster_code(cluster_code);
     5fb:	66 0f b7 c0          	movzwl %ax,%eax
     5ff:	67 66 89 04 24       	mov    %eax,(%esp)
     604:	66 e8 0a fe ff ff    	calll  414 <_fs_get_file_size_by_cluster_code>
/mnt/e/code/my_operating_system/os/service/fsystem.c:98
}
     60a:	66 83 c4 1c          	add    $0x1c,%esp
     60e:	66 c3                	retl   

00000610 <fs_show_root_file_table>:
fs_show_root_file_table():
/mnt/e/code/my_operating_system/os/service/fsystem.c:100

void fs_show_root_file_table(){
     610:	66 53                	push   %ebx
     612:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:101
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
     616:	66 68 fb 18 00 00    	pushl  $0x18fb
     61c:	66 68 03 19 00 00    	pushl  $0x1903
     622:	66 68 0d 19 00 00    	pushl  $0x190d
     628:	66 68 18 19 00 00    	pushl  $0x1918
     62e:	66 e8 ee 0c 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:102
    printf("------------------------------------\n\r");
     634:	67 66 c7 04 24 e0 21 	movl   $0x21e0,(%esp)
     63b:	00 00 
     63d:	66 e8 df 0c 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     643:	66 83 c4 10          	add    $0x10,%esp
     647:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     64d:	eb 18                	jmp    667 <fs_show_root_file_table+0x57>
/mnt/e/code/my_operating_system/os/service/fsystem.c:105 (discriminator 3)
        _fs_show_file_by_descriptor_number(i);
     64f:	66 83 ec 0c          	sub    $0xc,%esp
     653:	66 0f b7 c3          	movzwl %bx,%eax
     657:	66 50                	push   %eax
     659:	66 e8 ec fd ff ff    	calll  44b <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 3)

void fs_show_root_file_table(){
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    printf("------------------------------------\n\r");
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     65f:	66 83 c3 01          	add    $0x1,%ebx
     663:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 1)
     667:	66 83 fb 08          	cmp    $0x8,%ebx
     66b:	7e e2                	jle    64f <fs_show_root_file_table+0x3f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:108
        _fs_show_file_by_descriptor_number(i);
    }
    return ;
}
     66d:	66 83 c4 08          	add    $0x8,%esp
     671:	66 5b                	pop    %ebx
     673:	66 c3                	retl   

00000675 <fs_show_file_by_name>:
fs_show_file_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:110

void fs_show_file_by_name(char * file_name){
     675:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:111
    int descriptor_index = _fs_find_descriptor_number_by_name(file_name);
     679:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     67f:	66 e8 f2 fc ff ff    	calll  377 <_fs_find_descriptor_number_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:112
    _fs_show_file_by_descriptor_number(descriptor_index);
     685:	66 0f b7 c0          	movzwl %ax,%eax
     689:	67 66 89 04 24       	mov    %eax,(%esp)
     68e:	66 e8 b7 fd ff ff    	calll  44b <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:114
    return ;
}
     694:	66 83 c4 1c          	add    $0x1c,%esp
     698:	66 c3                	retl   

0000069a <fs_show_floppy_infomation>:
fs_show_floppy_infomation():
/mnt/e/code/my_operating_system/os/service/fsystem.c:117


void fs_show_floppy_infomation(){
     69a:	66 f3 c3             	repz retl 

0000069d <schedule_process>:
schedule_process():
/mnt/e/code/my_operating_system/os/service/proc.c:11
#include "../include/system_call.h"
#include "../include/fsystem.h"
#include "../include/proc.h"

void schedule_process(){
    cur_process_index = (cur_process_index + 1) % CUR_PROCESS_NUM;
     69d:	66 0f b7 0e 80 9f    	movzwl -0x6080,%ecx
     6a3:	66 83 c1 01          	add    $0x1,%ecx
     6a7:	66 ba 56 55 55 55    	mov    $0x55555556,%edx
     6ad:	66 89 c8             	mov    %ecx,%eax
     6b0:	66 f7 ea             	imul   %edx
     6b3:	67 66 8d 04 52       	lea    (%edx,%edx,2),%eax
     6b8:	66 29 c1             	sub    %eax,%ecx
     6bb:	89 0e 80 9f          	mov    %cx,-0x6080
/mnt/e/code/my_operating_system/os/service/proc.c:12
    cur_process = &process_table[cur_process_index];
     6bf:	66 0f b7 d1          	movzwl %cx,%edx
     6c3:	66 89 d0             	mov    %edx,%eax
     6c6:	66 c1 e0 06          	shl    $0x6,%eax
     6ca:	67 66 8d 84 90 80 5b 	lea    0x5b80(%eax,%edx,4),%eax
     6d1:	00 00 
     6d3:	66 a3 84 9f          	mov    %eax,0x9f84
     6d7:	66 c3                	retl   

000006d9 <init_process>:
init_process():
/mnt/e/code/my_operating_system/os/service/proc.c:16
}


void init_process(int process_index, u16 segment){
     6d9:	66 53                	push   %ebx
     6db:	67 66 8b 4c 24 08    	mov    0x8(%esp),%ecx
     6e1:	67 66 8b 54 24 0c    	mov    0xc(%esp),%edx
/mnt/e/code/my_operating_system/os/service/proc.c:18
    PCB_t* this_process = &process_table[process_index];
    this_process->regs.ss = segment;
     6e7:	66 89 c8             	mov    %ecx,%eax
     6ea:	66 c1 e0 06          	shl    $0x6,%eax
     6ee:	67 66 8d 1c 88       	lea    (%eax,%ecx,4),%ebx
     6f3:	67 89 93 80 5b 00 00 	mov    %dx,0x5b80(%ebx)
/mnt/e/code/my_operating_system/os/service/proc.c:19
    this_process->regs.sp = 0x5000;
     6fa:	67 c7 83 82 5b 00 00 	movw   $0x5000,0x5b82(%ebx)
     701:	00 50 
/mnt/e/code/my_operating_system/os/service/proc.c:20
    this_process->regs.ds = segment;
     703:	67 89 93 84 5b 00 00 	mov    %dx,0x5b84(%ebx)
/mnt/e/code/my_operating_system/os/service/proc.c:21
    this_process->regs.es = segment;
     70a:	67 89 93 86 5b 00 00 	mov    %dx,0x5b86(%ebx)
/mnt/e/code/my_operating_system/os/service/proc.c:22
    this_process->regs.edi = 0;
     711:	67 66 c7 83 88 5b 00 	movl   $0x0,0x5b88(%ebx)
     718:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:23
    this_process->regs.esi = 0;
     71d:	67 66 c7 83 8c 5b 00 	movl   $0x0,0x5b8c(%ebx)
     724:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:24
    this_process->regs.ebp = 0x5000;
     729:	67 66 c7 83 90 5b 00 	movl   $0x5000,0x5b90(%ebx)
     730:	00 00 50 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:25
    this_process->regs.kernel_esp = 0;
     735:	67 66 c7 83 94 5b 00 	movl   $0x0,0x5b94(%ebx)
     73c:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:26
    this_process->regs.ebx = 0;
     741:	67 66 c7 83 98 5b 00 	movl   $0x0,0x5b98(%ebx)
     748:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:27
    this_process->regs.edx = 0;
     74d:	67 66 c7 83 9c 5b 00 	movl   $0x0,0x5b9c(%ebx)
     754:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:28
    this_process->regs.ecx = 0;
     759:	67 66 c7 83 a0 5b 00 	movl   $0x0,0x5ba0(%ebx)
     760:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:29
    this_process->regs.eax = 0;
     765:	67 66 c7 83 a4 5b 00 	movl   $0x0,0x5ba4(%ebx)
     76c:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:30
    this_process->regs.ip = 0x0000;
     771:	67 c7 83 a8 5b 00 00 	movw   $0x0,0x5ba8(%ebx)
     778:	00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:31
    this_process->regs.cs = segment;
     77a:	67 89 93 aa 5b 00 00 	mov    %dx,0x5baa(%ebx)
/mnt/e/code/my_operating_system/os/service/proc.c:32
    this_process->regs.flags = 0x1202;
     781:	67 c7 83 ac 5b 00 00 	movw   $0x1202,0x5bac(%ebx)
     788:	02 12 
/mnt/e/code/my_operating_system/os/service/proc.c:33
    this_process->pid = process_index;
     78a:	67 66 89 8b b0 5b 00 	mov    %ecx,0x5bb0(%ebx)
     791:	00 
/mnt/e/code/my_operating_system/os/service/proc.c:35
    // this_process->p_name = 0;TODO:实现strcpy函数再说。
}
     792:	66 5b                	pop    %ebx
     794:	66 c3                	retl   

00000796 <parser>:
parser():
/mnt/e/code/my_operating_system/os/service/tty.c:90
    }
    return ;
}


void parser(){
     796:	66 56                	push   %esi
     798:	66 53                	push   %ebx
     79a:	66 83 ec 74          	sub    $0x74,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:94
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
     79e:	66 be 00 00 00 00    	mov    $0x0,%esi
/mnt/e/code/my_operating_system/os/service/tty.c:93


void parser(){
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
     7a4:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/tty.c:92
}


void parser(){
    char arguments[10][10];
    int input_start = 0;
     7aa:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/tty.c:96
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     7b0:	eb 63                	jmp    815 <loader_code_segment+0x15>
/mnt/e/code/my_operating_system/os/service/tty.c:97
        if(input_buf[input_end] == ' ' || input_buf[input_end] == '\0'){
     7b2:	67 66 0f b6 83 a0 a1 	movzbl 0xa1a0(%ebx),%eax
     7b9:	00 00 
     7bb:	3c 20                	cmp    $0x20,%al
     7bd:	0f 94 c1             	sete   %cl
     7c0:	84 c0                	test   %al,%al
     7c2:	0f 94 c0             	sete   %al
     7c5:	08 c1                	or     %al,%cl
     7c7:	74 48                	je     811 <loader_code_segment+0x11>
/mnt/e/code/my_operating_system/os/service/tty.c:98
            if (input_start == input_end){ // 如果并没有参数，那么继续
     7c9:	66 39 da             	cmp    %ebx,%edx
     7cc:	75 0a                	jne    7d8 <parser+0x42>
/mnt/e/code/my_operating_system/os/service/tty.c:99
                input_start++;
     7ce:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/service/tty.c:100
                input_end++;
     7d2:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/tty.c:101
                continue;
     7d6:	eb 3d                	jmp    815 <loader_code_segment+0x15>
/mnt/e/code/my_operating_system/os/service/tty.c:104
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
     7d8:	66 89 d9             	mov    %ebx,%ecx
     7db:	66 29 d1             	sub    %edx,%ecx
     7de:	67 66 8d 04 b6       	lea    (%esi,%esi,4),%eax
     7e3:	67 66 8d 44 44 0c    	lea    0xc(%esp,%eax,2),%eax
     7e9:	66 83 ec 04          	sub    $0x4,%esp
     7ed:	66 51                	push   %ecx
     7ef:	66 81 c2 a0 a1 00 00 	add    $0xa1a0,%edx
     7f6:	66 52                	push   %edx
     7f8:	66 50                	push   %eax
     7fa:	66 e8 81 0f 00 00    	calll  1781 <strncpy>
/mnt/e/code/my_operating_system/os/service/tty.c:105
                input_end++;
     800:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/tty.c:107
                input_start = input_end;
                arguments_num++;
     804:	66 83 c6 01          	add    $0x1,%esi
     808:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:106
                continue;
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
                input_end++;
                input_start = input_end;
     80c:	66 89 da             	mov    %ebx,%edx
     80f:	eb 04                	jmp    815 <loader_code_segment+0x15>
/mnt/e/code/my_operating_system/os/service/tty.c:111
                arguments_num++;
            }
        }
        else {// 有参数，还没有读到末尾
            input_end++;
     811:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/tty.c:96
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     815:	66 3b 1e 00 50       	cmp    0x5000,%ebx
     81a:	7e 96                	jle    7b2 <parser+0x1c>
/mnt/e/code/my_operating_system/os/service/tty.c:118
        }
    }

    // 完成分词，开始进行解析。

    if(!strcmp(arguments[0],"run")){// 如果返回0，就是相等了
     81c:	66 83 ec 08          	sub    $0x8,%esp
     820:	66 68 28 19 00 00    	pushl  $0x1928
     826:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     82c:	66 50                	push   %eax
     82e:	66 e8 89 0f 00 00    	calll  17bd <strcmp>
     834:	66 83 c4 10          	add    $0x10,%esp
     838:	66 85 c0             	test   %eax,%eax
     83b:	75 34                	jne    871 <loader_code_segment+0x71>
/mnt/e/code/my_operating_system/os/service/tty.c:123
        // 运行一个用户程序。
        // 先从软盘中加载一个指定程序到内存处，然后开始执行。
        // 考虑维护一个空闲空间的指针，然后每加载一个程序，如果可行的话。
        void (**my_program)();
        *my_program = 0x4000;
     83d:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     843:	67 66 c7 03 00 40 00 	movl   $0x4000,(%ebx)
     84a:	00 
/mnt/e/code/my_operating_system/os/service/tty.c:124
        fs_load_by_name(arguments[1],0x1000,(u16)my_program);
     84b:	66 83 ec 04          	sub    $0x4,%esp
     84f:	66 6a 00             	pushl  $0x0
     852:	66 68 00 10 00 00    	pushl  $0x1000
     858:	67 66 8d 44 24 22    	lea    0x22(%esp),%eax
     85e:	66 50                	push   %eax
     860:	66 e8 2a fd ff ff    	calll  590 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/service/tty.c:125
        (*my_program)();
     866:	67 66 ff 13          	calll  *(%ebx)
     86a:	66 83 c4 10          	add    $0x10,%esp
     86e:	e9 1b 01             	jmp    98c <loader_code_segment+0x18c>
/mnt/e/code/my_operating_system/os/service/tty.c:127
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     871:	66 83 ec 08          	sub    $0x8,%esp
     875:	66 68 2c 19 00 00    	pushl  $0x192c
     87b:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     881:	66 50                	push   %eax
     883:	66 e8 34 0f 00 00    	calll  17bd <strcmp>
     889:	66 83 c4 10          	add    $0x10,%esp
     88d:	66 85 c0             	test   %eax,%eax
     890:	75 23                	jne    8b5 <loader_code_segment+0xb5>
/mnt/e/code/my_operating_system/os/service/tty.c:127 (discriminator 1)
     892:	66 83 fe 01          	cmp    $0x1,%esi
     896:	75 1d                	jne    8b5 <loader_code_segment+0xb5>
/mnt/e/code/my_operating_system/os/service/tty.c:128
        printf("\n\n");
     898:	66 83 ec 0c          	sub    $0xc,%esp
     89c:	66 68 2f 19 00 00    	pushl  $0x192f
     8a2:	66 e8 7a 0a 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:129
        fs_show_root_file_table();
     8a8:	66 e8 62 fd ff ff    	calll  610 <fs_show_root_file_table>
     8ae:	66 83 c4 10          	add    $0x10,%esp
     8b2:	e9 d7 00             	jmp    98c <loader_code_segment+0x18c>
/mnt/e/code/my_operating_system/os/service/tty.c:131
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     8b5:	66 83 ec 08          	sub    $0x8,%esp
     8b9:	66 68 32 19 00 00    	pushl  $0x1932
     8bf:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     8c5:	66 50                	push   %eax
     8c7:	66 e8 f0 0e 00 00    	calll  17bd <strcmp>
     8cd:	66 83 c4 10          	add    $0x10,%esp
     8d1:	66 85 c0             	test   %eax,%eax
     8d4:	75 23                	jne    8f9 <loader_code_segment+0xf9>
/mnt/e/code/my_operating_system/os/service/tty.c:131 (discriminator 1)
     8d6:	66 83 fe 01          	cmp    $0x1,%esi
     8da:	75 1d                	jne    8f9 <loader_code_segment+0xf9>
/mnt/e/code/my_operating_system/os/service/tty.c:132
        printf("\n\n");
     8dc:	66 83 ec 0c          	sub    $0xc,%esp
     8e0:	66 68 2f 19 00 00    	pushl  $0x192f
     8e6:	66 e8 36 0a 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:133
        reboot();
     8ec:	66 e8 61 0e 00 00    	calll  1753 <reboot>
/mnt/e/code/my_operating_system/os/service/tty.c:131
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     8f2:	66 83 c4 10          	add    $0x10,%esp
     8f6:	e9 93 00             	jmp    98c <loader_code_segment+0x18c>
/mnt/e/code/my_operating_system/os/service/tty.c:135
        printf("\n\n");
        reboot();
    }
    else if(!strcmp(arguments[0],"help") && arguments_num == 1){
     8f9:	66 83 ec 08          	sub    $0x8,%esp
     8fd:	66 68 39 19 00 00    	pushl  $0x1939
     903:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     909:	66 50                	push   %eax
     90b:	66 e8 ac 0e 00 00    	calll  17bd <strcmp>
     911:	66 83 c4 10          	add    $0x10,%esp
     915:	66 85 c0             	test   %eax,%eax
     918:	75 58                	jne    972 <loader_code_segment+0x172>
/mnt/e/code/my_operating_system/os/service/tty.c:135 (discriminator 1)
     91a:	66 83 fe 01          	cmp    $0x1,%esi
     91e:	75 52                	jne    972 <loader_code_segment+0x172>
/mnt/e/code/my_operating_system/os/service/tty.c:136
        printf("\n\n");
     920:	66 83 ec 0c          	sub    $0xc,%esp
     924:	66 68 2f 19 00 00    	pushl  $0x192f
     92a:	66 e8 f2 09 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:137
        printf("ls        : show the file in the root folder.\n");
     930:	67 66 c7 04 24 08 22 	movl   $0x2208,(%esp)
     937:	00 00 
     939:	66 e8 e3 09 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:138
        printf("run [name]: run the file in the root folder.\n");
     93f:	67 66 c7 04 24 38 22 	movl   $0x2238,(%esp)
     946:	00 00 
     948:	66 e8 d4 09 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:139
        printf("help      : show the help message.\n");
     94e:	67 66 c7 04 24 68 22 	movl   $0x2268,(%esp)
     955:	00 00 
     957:	66 e8 c5 09 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:140
        printf("reboot    : reboot the machine.\n");
     95d:	67 66 c7 04 24 8c 22 	movl   $0x228c,(%esp)
     964:	00 00 
     966:	66 e8 b6 09 00 00    	calll  1322 <printf>
     96c:	66 83 c4 10          	add    $0x10,%esp
     970:	eb 1a                	jmp    98c <loader_code_segment+0x18c>
/mnt/e/code/my_operating_system/os/service/tty.c:143
    }
    else {
        printf("\n%s : command not found! \n", input_buf);
     972:	66 83 ec 08          	sub    $0x8,%esp
     976:	66 68 a0 a1 00 00    	pushl  $0xa1a0
     97c:	66 68 3e 19 00 00    	pushl  $0x193e
     982:	66 e8 9a 09 00 00    	calll  1322 <printf>
     988:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:145
    }
    int current_cursor = get_cursor();
     98c:	66 e8 b9 03 00 00    	calll  d4b <get_cursor>
     992:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/tty.c:146
    command_line_row = (current_cursor / 80);
     996:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     99c:	66 f7 ea             	imul   %edx
     99f:	66 c1 fa 05          	sar    $0x5,%edx
     9a3:	66 89 16 04 40       	mov    %edx,0x4004
/mnt/e/code/my_operating_system/os/service/tty.c:149
    // printf("arguments: %d|%s|%s|",arguments_num, arguments[0],arguments[1]);
    return ;
}
     9a8:	66 83 c4 74          	add    $0x74,%esp
     9ac:	66 5b                	pop    %ebx
     9ae:	66 5e                	pop    %esi
     9b0:	66 c3                	retl   

000009b2 <create_a_line>:
create_a_line():
/mnt/e/code/my_operating_system/os/service/tty.c:152

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
     9b2:	66 83 ec 2c          	sub    $0x2c,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:153
    char message[30] = "walker@walker-pc ~ $ \0";
     9b6:	66 a1 b0 22          	mov    0x22b0,%eax
     9ba:	67 66 89 44 24 02    	mov    %eax,0x2(%esp)
     9c0:	66 a1 b4 22          	mov    0x22b4,%eax
     9c4:	67 66 89 44 24 06    	mov    %eax,0x6(%esp)
     9ca:	66 a1 b8 22          	mov    0x22b8,%eax
     9ce:	67 66 89 44 24 0a    	mov    %eax,0xa(%esp)
     9d4:	66 a1 bc 22          	mov    0x22bc,%eax
     9d8:	67 66 89 44 24 0e    	mov    %eax,0xe(%esp)
     9de:	66 a1 c0 22          	mov    0x22c0,%eax
     9e2:	67 66 89 44 24 12    	mov    %eax,0x12(%esp)
     9e8:	66 0f b7 06 c4 22    	movzwl 0x22c4,%eax
     9ee:	67 89 44 24 16       	mov    %ax,0x16(%esp)
     9f3:	66 0f b6 06 c6 22    	movzbl 0x22c6,%eax
     9f9:	67 88 44 24 18       	mov    %al,0x18(%esp)
     9fe:	67 66 c7 44 24 19 00 	movl   $0x0,0x19(%esp)
     a05:	00 00 00 
     a08:	67 c7 44 24 1d 00 00 	movw   $0x0,0x1d(%esp)
     a0f:	67 c6 44 24 1f 00    	movb   $0x0,0x1f(%esp)
/mnt/e/code/my_operating_system/os/service/tty.c:154
    for (int i = 0; i < MAX_BUF; i++){
     a15:	66 b8 00 00 00 00    	mov    $0x0,%eax
     a1b:	eb 0c                	jmp    a29 <create_a_line+0x77>
/mnt/e/code/my_operating_system/os/service/tty.c:155 (discriminator 3)
        input_buf[i] = 0;
     a1d:	67 c6 80 a0 a1 00 00 	movb   $0x0,0xa1a0(%eax)
     a24:	00 
/mnt/e/code/my_operating_system/os/service/tty.c:154 (discriminator 3)
}

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    char message[30] = "walker@walker-pc ~ $ \0";
    for (int i = 0; i < MAX_BUF; i++){
     a25:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/tty.c:154 (discriminator 1)
     a29:	66 83 f8 63          	cmp    $0x63,%eax
     a2d:	7e ee                	jle    a1d <create_a_line+0x6b>
/mnt/e/code/my_operating_system/os/service/tty.c:157
        input_buf[i] = 0;
    }
    message_length = strlen(message);
     a2f:	66 83 ec 0c          	sub    $0xc,%esp
     a33:	67 66 8d 44 24 0e    	lea    0xe(%esp),%eax
     a39:	66 50                	push   %eax
     a3b:	66 e8 24 0d 00 00    	calll  1765 <strlen>
     a41:	66 a3 04 50          	mov    %eax,0x5004
/mnt/e/code/my_operating_system/os/service/tty.c:158
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
     a45:	66 03 06 00 50       	add    0x5000,%eax
     a4a:	66 89 c1             	mov    %eax,%ecx
     a4d:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     a53:	66 f7 ea             	imul   %edx
     a56:	66 c1 fa 05          	sar    $0x5,%edx
     a5a:	66 c1 f9 1f          	sar    $0x1f,%ecx
     a5e:	66 29 ca             	sub    %ecx,%edx
     a61:	66 89 d0             	mov    %edx,%eax
     a64:	66 03 06 04 40       	add    0x4004,%eax
     a69:	66 83 c0 01          	add    $0x1,%eax
     a6d:	66 a3 04 40          	mov    %eax,0x4004
/mnt/e/code/my_operating_system/os/service/tty.c:159
    while(command_line_row > 23){
     a71:	66 83 c4 10          	add    $0x10,%esp
     a75:	eb 0c                	jmp    a83 <create_a_line+0xd1>
/mnt/e/code/my_operating_system/os/service/tty.c:160
        scroll_screen();
     a77:	66 e8 4f 0c 00 00    	calll  16cc <scroll_screen>
/mnt/e/code/my_operating_system/os/service/tty.c:161
        command_line_row--;
     a7d:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/service/tty.c:159
    for (int i = 0; i < MAX_BUF; i++){
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    while(command_line_row > 23){
     a83:	66 a1 04 40          	mov    0x4004,%eax
     a87:	66 83 f8 17          	cmp    $0x17,%eax
     a8b:	7f ea                	jg     a77 <create_a_line+0xc5>
/mnt/e/code/my_operating_system/os/service/tty.c:163
        scroll_screen();
        command_line_row--;
    }
    command_line_cursor = 0;
     a8d:	66 c7 06 00 50 00 00 	movl   $0x0,0x5000
     a94:	00 00 
/mnt/e/code/my_operating_system/os/service/tty.c:164
    set_cursor(command_line_row * 80);
     a96:	66 83 ec 0c          	sub    $0xc,%esp
     a9a:	67 66 8d 04 80       	lea    (%eax,%eax,4),%eax
     a9f:	66 c1 e0 04          	shl    $0x4,%eax
     aa3:	66 0f b7 d0          	movzwl %ax,%edx
     aa7:	66 52                	push   %edx
     aa9:	66 e8 2a 02 00 00    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/tty.c:166
    // printf("%d", command_line_row);
    printf("%s", message);
     aaf:	66 83 c4 08          	add    $0x8,%esp
     ab3:	67 66 8d 44 24 0a    	lea    0xa(%esp),%eax
     ab9:	66 50                	push   %eax
     abb:	66 68 59 19 00 00    	pushl  $0x1959
     ac1:	66 e8 5b 08 00 00    	calll  1322 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:167
}
     ac7:	66 83 c4 3c          	add    $0x3c,%esp
     acb:	66 c3                	retl   

00000acd <tty>:
tty():
/mnt/e/code/my_operating_system/os/service/tty.c:20
int message_length = 0;
int command_line_cursor = 0; // 光标在输入区的偏移量
char input_buf[MAX_BUF]; // 输入缓存区


void tty(){
     acd:	66 56                	push   %esi
     acf:	66 53                	push   %ebx
     ad1:	66 83 ec 04          	sub    $0x4,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:22
    int keyboard_flag = 0;
    new_line_flag = 1;
     ad5:	66 c7 06 00 40 01 00 	movl   $0x1,0x4000
     adc:	00 00 
/mnt/e/code/my_operating_system/os/service/tty.c:23
    command_line_row = -1;
     ade:	66 c7 06 04 40 ff ff 	movl   $0xffffffff,0x4004
     ae5:	ff ff 
/mnt/e/code/my_operating_system/os/service/tty.c:24
    clean_screen();
     ae7:	66 e8 c5 0b 00 00    	calll  16b2 <clean_screen>
/mnt/e/code/my_operating_system/os/service/tty.c:25
    set_cursor(1974);
     aed:	66 83 ec 0c          	sub    $0xc,%esp
     af1:	66 68 b6 07 00 00    	pushl  $0x7b6
     af7:	66 e8 dc 01 00 00    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/tty.c:26
    set_cursor(0);
     afd:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
     b04:	00 00 
     b06:	66 e8 cd 01 00 00    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/tty.c:27
    print_my_name();
     b0c:	66 e8 17 0c 00 00    	calll  1729 <print_my_name>
     b12:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:30
    while (1){
        // 使用缓冲区数据更新
        if (new_line_flag){
     b16:	66 83 3e 00 40 00    	cmpl   $0x0,0x4000
     b1c:	74 0f                	je     b2d <tty+0x60>
/mnt/e/code/my_operating_system/os/service/tty.c:31
            create_a_line();
     b1e:	66 e8 8e fe ff ff    	calll  9b2 <create_a_line>
/mnt/e/code/my_operating_system/os/service/tty.c:32
            new_line_flag = 0;
     b24:	66 c7 06 00 40 00 00 	movl   $0x0,0x4000
     b2b:	00 00 
/mnt/e/code/my_operating_system/os/service/tty.c:35
        }

        if(command_line_row == 23 && message_length + command_line_cursor > 80){
     b2d:	66 83 3e 04 40 17    	cmpl   $0x17,0x4004
     b33:	75 2f                	jne    b64 <tty+0x97>
/mnt/e/code/my_operating_system/os/service/tty.c:35 (discriminator 1)
     b35:	66 a1 00 50          	mov    0x5000,%eax
     b39:	66 03 06 04 50       	add    0x5004,%eax
     b3e:	66 83 f8 50          	cmp    $0x50,%eax
     b42:	7e 20                	jle    b64 <tty+0x97>
/mnt/e/code/my_operating_system/os/service/tty.c:36
            scroll_screen();
     b44:	66 e8 82 0b 00 00    	calll  16cc <scroll_screen>
/mnt/e/code/my_operating_system/os/service/tty.c:37
            command_line_row--;
     b4a:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/service/tty.c:38
            set_cursor(1840);
     b50:	66 83 ec 0c          	sub    $0xc,%esp
     b54:	66 68 30 07 00 00    	pushl  $0x730
     b5a:	66 e8 79 01 00 00    	calll  cd9 <set_cursor>
     b60:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:40
        }
        putc(' ');// 用来删除光标处的文字，与输入退格的时候光标-1配合使用
     b64:	66 83 ec 0c          	sub    $0xc,%esp
     b68:	66 6a 20             	pushl  $0x20
     b6b:	66 e8 36 02 00 00    	calll  da7 <putc>
/mnt/e/code/my_operating_system/os/service/tty.c:43

        // command_line_row = get_cursor() / 80;
        set_cursor(80*command_line_row + message_length);
     b71:	66 8b 16 04 40       	mov    0x4004,%edx
     b76:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     b7b:	66 89 d0             	mov    %edx,%eax
     b7e:	66 c1 e0 04          	shl    $0x4,%eax
     b82:	03 06 04 50          	add    0x5004,%ax
     b86:	66 0f b7 c0          	movzwl %ax,%eax
     b8a:	67 66 89 04 24       	mov    %eax,(%esp)
     b8f:	66 e8 44 01 00 00    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/tty.c:44
        puts(input_buf, command_line_cursor);
     b95:	66 83 c4 08          	add    $0x8,%esp
     b99:	66 ff 36 00 50       	pushl  0x5000
     b9e:	66 68 a0 a1 00 00    	pushl  $0xa1a0
     ba4:	66 e8 f2 03 00 00    	calll  f9c <puts>
/mnt/e/code/my_operating_system/os/service/tty.c:47

        // 更新完了 检测键盘
        keyboard_flag = check_keyboard();
     baa:	66 e8 ec 0a 00 00    	calll  169c <check_keyboard>
/mnt/e/code/my_operating_system/os/service/tty.c:50

        // 如果返回1，则有输入，处理输入信息，否则继续循环。
        if (keyboard_flag){
     bb0:	66 83 c4 10          	add    $0x10,%esp
     bb4:	85 c0                	test   %ax,%ax
     bb6:	0f 84 5c ff          	je     b16 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:52
            // 处理键盘事件
            u16 keyboard_code =  get_keyboard();
     bba:	66 e8 ec 0a 00 00    	calll  16ac <get_keyboard>
/mnt/e/code/my_operating_system/os/service/tty.c:53
            u8 ascii_code = keyboard_code;
     bc0:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/tty.c:55
            u8 scan_code = keyboard_code >> 8;
            if (isprint(ascii_code)){
     bc3:	66 83 ec 0c          	sub    $0xc,%esp
     bc7:	66 0f b6 c0          	movzbl %al,%eax
     bcb:	66 50                	push   %eax
     bcd:	66 e8 aa 08 00 00    	calll  147d <isprint>
     bd3:	66 83 c4 10          	add    $0x10,%esp
     bd7:	66 85 c0             	test   %eax,%eax
     bda:	74 20                	je     bfc <tty+0x12f>
/mnt/e/code/my_operating_system/os/service/tty.c:56
                if (command_line_cursor <= MAX_BUF){
     bdc:	66 a1 00 50          	mov    0x5000,%eax
     be0:	66 83 f8 64          	cmp    $0x64,%eax
     be4:	0f 8f 2e ff          	jg     b16 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:57
                    input_buf[command_line_cursor++] = ascii_code;
     be8:	67 66 8d 50 01       	lea    0x1(%eax),%edx
     bed:	66 89 16 00 50       	mov    %edx,0x5000
     bf2:	67 88 98 a0 a1 00 00 	mov    %bl,0xa1a0(%eax)
     bf9:	e9 1a ff             	jmp    b16 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:60
                }
            }
            else if (ascii_code == 13){
     bfc:	80 fb 0d             	cmp    $0xd,%bl
     bff:	75 1e                	jne    c1f <tty+0x152>
/mnt/e/code/my_operating_system/os/service/tty.c:61
                new_line_flag = 1;
     c01:	66 c7 06 00 40 01 00 	movl   $0x1,0x4000
     c08:	00 00 
/mnt/e/code/my_operating_system/os/service/tty.c:62
                input_buf[command_line_cursor] = '\0';
     c0a:	66 a1 00 50          	mov    0x5000,%eax
     c0e:	67 c6 80 a0 a1 00 00 	movb   $0x0,0xa1a0(%eax)
     c15:	00 
/mnt/e/code/my_operating_system/os/service/tty.c:63
                parser();
     c16:	66 e8 7a fb ff ff    	calll  796 <parser>
     c1c:	e9 f7 fe             	jmp    b16 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:65
            }
            else if (ascii_code == 8){
     c1f:	80 fb 08             	cmp    $0x8,%bl
     c22:	75 3e                	jne    c62 <tty+0x195>
/mnt/e/code/my_operating_system/os/service/tty.c:66
                if(command_line_cursor){
     c24:	66 a1 00 50          	mov    0x5000,%eax
     c28:	66 85 c0             	test   %eax,%eax
     c2b:	0f 84 e7 fe          	je     b16 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:67
                    input_buf[--command_line_cursor] = 0;
     c2f:	67 66 8d 50 ff       	lea    -0x1(%eax),%edx
     c34:	66 89 16 00 50       	mov    %edx,0x5000
     c39:	67 c6 80 9f a1 00 00 	movb   $0x0,0xa19f(%eax)
     c40:	00 
/mnt/e/code/my_operating_system/os/service/tty.c:69
                    // 将光标设置为前一个位置，方便删除
                    int cur_cursor = get_cursor();
     c41:	66 e8 04 01 00 00    	calll  d4b <get_cursor>
/mnt/e/code/my_operating_system/os/service/tty.c:70
                    set_cursor(cur_cursor-1);
     c47:	66 83 ec 0c          	sub    $0xc,%esp
     c4b:	66 83 e8 01          	sub    $0x1,%eax
     c4f:	66 0f b7 c0          	movzwl %ax,%eax
     c53:	66 50                	push   %eax
     c55:	66 e8 7e 00 00 00    	calll  cd9 <set_cursor>
     c5b:	66 83 c4 10          	add    $0x10,%esp
     c5f:	e9 b4 fe             	jmp    b16 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:73
                }
            }
            else if (ascii_code == 27){
     c62:	80 fb 1b             	cmp    $0x1b,%bl
     c65:	0f 85 ad fe          	jne    b16 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:74
                __asm__("mov $0x4c00, %ax");
     c69:	b8 00 4c             	mov    $0x4c00,%ax
/mnt/e/code/my_operating_system/os/service/tty.c:75
                __asm__("int $0x40");
     c6c:	cd 40                	int    $0x40
     c6e:	e9 a5 fe             	jmp    b16 <tty+0x49>

00000c71 <tty_scroll_screen>:
tty_scroll_screen():
/mnt/e/code/my_operating_system/os/service/tty.c:170
    // printf("%d", command_line_row);
    printf("%s", message);
}


void tty_scroll_screen(){
     c71:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:171
    if (get_cursor()/80 > 24){
     c75:	66 e8 d0 00 00 00    	calll  d4b <get_cursor>
     c7b:	3d cf 07             	cmp    $0x7cf,%ax
     c7e:	76 0c                	jbe    c8c <tty_scroll_screen+0x1b>
/mnt/e/code/my_operating_system/os/service/tty.c:172
        scroll_screen();
     c80:	66 e8 46 0a 00 00    	calll  16cc <scroll_screen>
/mnt/e/code/my_operating_system/os/service/tty.c:173
        command_line_row--;
     c86:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/service/tty.c:176
    }
    return ;
     c8c:	66 83 c4 0c          	add    $0xc,%esp
     c90:	66 c3                	retl   

00000c92 <_put_char>:
_put_char():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:5
#include "../include/basic.h"
#include "../include/type.h"
#include "../include/string.h"

void _put_char(char c, u16 cursor_index){
     c92:	66 53                	push   %ebx
     c94:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:7
    int _address = 0xb8000;
    int _offset = cursor_index * 2;
     c98:	67 66 0f b7 5c 24 1c 	movzwl 0x1c(%esp),%ebx
     c9f:	66 01 db             	add    %ebx,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:8
    write_memory_byte(_address+_offset, c);
     ca2:	67 66 8d 83 00 80 0b 	lea    0xb8000(%ebx),%eax
     ca9:	00 
     caa:	67 66 0f b6 54 24 18 	movzbl 0x18(%esp),%edx
     cb1:	66 52                	push   %edx
     cb3:	66 50                	push   %eax
     cb5:	66 e8 91 09 00 00    	calll  164c <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:9
    write_memory_byte(_address+_offset+1, 0x1f);
     cbb:	66 81 c3 01 80 0b 00 	add    $0xb8001,%ebx
     cc2:	66 83 c4 08          	add    $0x8,%esp
     cc6:	66 6a 1f             	pushl  $0x1f
     cc9:	66 53                	push   %ebx
     ccb:	66 e8 7b 09 00 00    	calll  164c <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:11
    return ;
}
     cd1:	66 83 c4 18          	add    $0x18,%esp
     cd5:	66 5b                	pop    %ebx
     cd7:	66 c3                	retl   

00000cd9 <set_cursor>:
set_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:13

void set_cursor(u16 cursor_index){
     cd9:	66 56                	push   %esi
     cdb:	66 53                	push   %ebx
     cdd:	66 83 ec 0c          	sub    $0xc,%esp
     ce1:	67 66 8b 5c 24 18    	mov    0x18(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:16
    // short cursor_index = 80 * row + column;     // 计算光标寄存器的值
    u8 low_eight = cursor_index; // 取低八位，高位被截断
    u8 high_eight = cursor_index >> 8; // 取高八位
     ce7:	66 89 d8             	mov    %ebx,%eax
     cea:	c1 e8 08             	shr    $0x8,%ax
     ced:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:17
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     cf0:	66 6a 0e             	pushl  $0xe
     cf3:	66 68 d4 03 00 00    	pushl  $0x3d4
     cf9:	66 e8 01 09 00 00    	calll  1600 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:18
    write_port_byte(0x3d5, high_eight);// 将光标索引高八位写入端口
     cff:	66 83 c4 08          	add    $0x8,%esp
     d03:	66 89 f0             	mov    %esi,%eax
     d06:	66 0f b6 f0          	movzbl %al,%esi
     d0a:	66 56                	push   %esi
     d0c:	66 68 d5 03 00 00    	pushl  $0x3d5
     d12:	66 e8 e8 08 00 00    	calll  1600 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:19
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     d18:	66 83 c4 08          	add    $0x8,%esp
     d1c:	66 6a 0f             	pushl  $0xf
     d1f:	66 68 d4 03 00 00    	pushl  $0x3d4
     d25:	66 e8 d5 08 00 00    	calll  1600 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:20
    write_port_byte(0x3d5, low_eight);// 将光标索引低八位写入端口
     d2b:	66 83 c4 08          	add    $0x8,%esp
     d2f:	66 0f b6 db          	movzbl %bl,%ebx
     d33:	66 53                	push   %ebx
     d35:	66 68 d5 03 00 00    	pushl  $0x3d5
     d3b:	66 e8 bf 08 00 00    	calll  1600 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:22
    return ;
}
     d41:	66 83 c4 14          	add    $0x14,%esp
     d45:	66 5b                	pop    %ebx
     d47:	66 5e                	pop    %esi
     d49:	66 c3                	retl   

00000d4b <get_cursor>:
get_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:24

u16 get_cursor(){
     d4b:	66 53                	push   %ebx
     d4d:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:27
    u8 low_eight = 0, high_eight = 0;
    u16 cursor_index = 0;
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     d51:	66 6a 0e             	pushl  $0xe
     d54:	66 68 d4 03 00 00    	pushl  $0x3d4
     d5a:	66 e8 a0 08 00 00    	calll  1600 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:28
    high_eight = read_port_byte(0x3d5);// 将光标索引高八位写入端口
     d60:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     d67:	00 00 
     d69:	66 e8 b9 08 00 00    	calll  1628 <read_port_byte>
     d6f:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:29
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     d72:	66 83 c4 08          	add    $0x8,%esp
     d76:	66 6a 0f             	pushl  $0xf
     d79:	66 68 d4 03 00 00    	pushl  $0x3d4
     d7f:	66 e8 7b 08 00 00    	calll  1600 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:30
    low_eight = read_port_byte(0x3d5);// 将光标索引低八位写入端口
     d85:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     d8c:	00 00 
     d8e:	66 e8 94 08 00 00    	calll  1628 <read_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:32
    cursor_index = high_eight;
    cursor_index = (cursor_index << 8) + low_eight;
     d94:	66 c1 e3 08          	shl    $0x8,%ebx
     d98:	66 0f b6 c0          	movzbl %al,%eax
     d9c:	66 01 d8             	add    %ebx,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:34
    return cursor_index;
}
     d9f:	66 83 c4 18          	add    $0x18,%esp
     da3:	66 5b                	pop    %ebx
     da5:	66 c3                	retl   

00000da7 <putc>:
putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:36

void putc(char c){
     da7:	66 57                	push   %edi
     da9:	66 56                	push   %esi
     dab:	66 53                	push   %ebx
     dad:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:37
    u16 cursor_index = get_cursor();
     db3:	66 e8 92 ff ff ff    	calll  d4b <get_cursor>
     db9:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:38
    u16 row = cursor_index / 80;
     dbc:	66 0f b7 d8          	movzwl %ax,%ebx
     dc0:	66 69 db cd cc 00 00 	imul   $0xcccd,%ebx,%ebx
     dc7:	66 c1 eb 10          	shr    $0x10,%ebx
     dcb:	c1 eb 06             	shr    $0x6,%bx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:40
    u16 col = cursor_index % 80;
    if (cursor_index >= 1920){
     dce:	3d 7f 07             	cmp    $0x77f,%ax
     dd1:	76 0c                	jbe    ddf <putc+0x38>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:41
        scroll_screen();
     dd3:	66 e8 f3 08 00 00    	calll  16cc <scroll_screen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:42
        cursor_index = 1840;
     dd9:	66 be 30 07 00 00    	mov    $0x730,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:44
    }
    switch (c) {
     ddf:	66 89 f8             	mov    %edi,%eax
     de2:	3c 0a                	cmp    $0xa,%al
     de4:	74 06                	je     dec <putc+0x45>
     de6:	3c 0d                	cmp    $0xd,%al
     de8:	74 25                	je     e0f <putc+0x68>
     dea:	eb 45                	jmp    e31 <putc+0x8a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:46
        case '\n':
            set_cursor((row+1)*80); // 回车，移到下一行
     dec:	66 83 ec 0c          	sub    $0xc,%esp
     df0:	67 66 8d 5c 9b 05    	lea    0x5(%ebx,%ebx,4),%ebx
     df6:	66 89 d8             	mov    %ebx,%eax
     df9:	66 c1 e0 04          	shl    $0x4,%eax
     dfd:	66 0f b7 c0          	movzwl %ax,%eax
     e01:	66 50                	push   %eax
     e03:	66 e8 d0 fe ff ff    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:47
            break;
     e09:	66 83 c4 10          	add    $0x10,%esp
     e0d:	eb 52                	jmp    e61 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:49
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     e0f:	66 83 ec 0c          	sub    $0xc,%esp
     e13:	67 66 8d 1c 9b       	lea    (%ebx,%ebx,4),%ebx
     e18:	66 89 d8             	mov    %ebx,%eax
     e1b:	66 c1 e0 04          	shl    $0x4,%eax
     e1f:	66 0f b7 c0          	movzwl %ax,%eax
     e23:	66 50                	push   %eax
     e25:	66 e8 ae fe ff ff    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:50
            break;
     e2b:	66 83 c4 10          	add    $0x10,%esp
     e2f:	eb 30                	jmp    e61 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:52
        default:
            _put_char(c, cursor_index);
     e31:	66 83 ec 08          	sub    $0x8,%esp
     e35:	66 0f b7 c6          	movzwl %si,%eax
     e39:	66 50                	push   %eax
     e3b:	66 89 f8             	mov    %edi,%eax
     e3e:	66 0f be f8          	movsbl %al,%edi
     e42:	66 57                	push   %edi
     e44:	66 e8 48 fe ff ff    	calll  c92 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:53
            set_cursor(cursor_index+1);
     e4a:	66 83 c6 01          	add    $0x1,%esi
     e4e:	66 0f b7 f6          	movzwl %si,%esi
     e52:	67 66 89 34 24       	mov    %esi,(%esp)
     e57:	66 e8 7c fe ff ff    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:54
            break;
     e5d:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:57
    }
    return ;
}
     e61:	66 5b                	pop    %ebx
     e63:	66 5e                	pop    %esi
     e65:	66 5f                	pop    %edi
     e67:	66 c3                	retl   

00000e69 <_putc>:
_putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:59

void _putc(char c){
     e69:	66 56                	push   %esi
     e6b:	66 53                	push   %ebx
     e6d:	66 83 ec 04          	sub    $0x4,%esp
     e71:	67 66 8b 5c 24 10    	mov    0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:60
    u16 cursor_index = get_cursor();
     e77:	66 e8 ce fe ff ff    	calll  d4b <get_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:61
    u16 row = cursor_index / 80;
     e7d:	66 0f b7 d0          	movzwl %ax,%edx
     e81:	66 69 d2 cd cc 00 00 	imul   $0xcccd,%edx,%edx
     e88:	66 c1 ea 10          	shr    $0x10,%edx
     e8c:	c1 ea 06             	shr    $0x6,%dx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:62
    u16 col = cursor_index % 80;
     e8f:	67 66 8d 34 92       	lea    (%edx,%edx,4),%esi
     e94:	66 c1 e6 04          	shl    $0x4,%esi
     e98:	66 89 f1             	mov    %esi,%ecx
     e9b:	66 89 c6             	mov    %eax,%esi
     e9e:	66 29 ce             	sub    %ecx,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:63
    switch (c) {
     ea1:	80 fb 0a             	cmp    $0xa,%bl
     ea4:	74 07                	je     ead <_putc+0x44>
     ea6:	80 fb 0d             	cmp    $0xd,%bl
     ea9:	74 2b                	je     ed6 <_putc+0x6d>
     eab:	eb 4b                	jmp    ef8 <_putc+0x8f>
     ead:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:65
        case '\n':
            set_cursor((row+1)*80+col); // 回车，移到下一行
     eb0:	66 83 ec 0c          	sub    $0xc,%esp
     eb4:	67 66 8d 54 92 05    	lea    0x5(%edx,%edx,4),%edx
     eba:	66 89 d0             	mov    %edx,%eax
     ebd:	66 c1 e0 04          	shl    $0x4,%eax
     ec1:	66 01 c1             	add    %eax,%ecx
     ec4:	66 0f b7 c9          	movzwl %cx,%ecx
     ec8:	66 51                	push   %ecx
     eca:	66 e8 09 fe ff ff    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:66
            break;
     ed0:	66 83 c4 10          	add    $0x10,%esp
     ed4:	eb 3c                	jmp    f12 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:68
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     ed6:	66 83 ec 0c          	sub    $0xc,%esp
     eda:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     edf:	66 89 d0             	mov    %edx,%eax
     ee2:	66 c1 e0 04          	shl    $0x4,%eax
     ee6:	66 0f b7 c0          	movzwl %ax,%eax
     eea:	66 50                	push   %eax
     eec:	66 e8 e7 fd ff ff    	calll  cd9 <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:69
            break;
     ef2:	66 83 c4 10          	add    $0x10,%esp
     ef6:	eb 1a                	jmp    f12 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:71
        default:
            _put_char(c, cursor_index);
     ef8:	66 83 ec 08          	sub    $0x8,%esp
     efc:	66 0f b7 c0          	movzwl %ax,%eax
     f00:	66 50                	push   %eax
     f02:	66 0f be db          	movsbl %bl,%ebx
     f06:	66 53                	push   %ebx
     f08:	66 e8 84 fd ff ff    	calll  c92 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:73
            // set_cursor(cursor_index+1);
            break;
     f0e:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:76
    }
    return ;
}
     f12:	66 83 c4 04          	add    $0x4,%esp
     f16:	66 5b                	pop    %ebx
     f18:	66 5e                	pop    %esi
     f1a:	66 c3                	retl   

00000f1c <puti>:
puti():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:78

void puti(u32 n){
     f1c:	66 56                	push   %esi
     f1e:	66 53                	push   %ebx
     f20:	66 83 ec 44          	sub    $0x44,%esp
     f24:	67 66 8b 4c 24 50    	mov    0x50(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:79
    int len = 0;
     f2a:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     f30:	eb 2d                	jmp    f5f <puti+0x43>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:82
        num[len] = n % 10;
     f32:	66 ba cd cc cc cc    	mov    $0xcccccccd,%edx
     f38:	66 89 c8             	mov    %ecx,%eax
     f3b:	66 f7 e2             	mul    %edx
     f3e:	66 c1 ea 03          	shr    $0x3,%edx
     f42:	66 89 d6             	mov    %edx,%esi
     f45:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     f4a:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     f4f:	66 29 c1             	sub    %eax,%ecx
     f52:	67 66 89 4c 9c 04    	mov    %ecx,0x4(%esp,%ebx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:83
        n = n / 10;
     f58:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:84
        len++;
     f5b:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
}

void puti(u32 n){
    int len = 0;
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     f5f:	66 85 c9             	test   %ecx,%ecx
     f62:	75 ce                	jne    f32 <puti+0x16>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     f64:	66 83 eb 01          	sub    $0x1,%ebx
     f68:	eb 23                	jmp    f8d <puti+0x71>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:87 (discriminator 3)
        putc(num[i]+'0');
     f6a:	66 83 ec 0c          	sub    $0xc,%esp
     f6e:	67 66 0f b6 44 9c 10 	movzbl 0x10(%esp,%ebx,4),%eax
     f75:	66 83 c0 30          	add    $0x30,%eax
     f79:	66 0f be c0          	movsbl %al,%eax
     f7d:	66 50                	push   %eax
     f7f:	66 e8 22 fe ff ff    	calll  da7 <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 3)
    while (n != 0){
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     f85:	66 83 eb 01          	sub    $0x1,%ebx
     f89:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 1)
     f8d:	66 85 db             	test   %ebx,%ebx
     f90:	79 d8                	jns    f6a <puti+0x4e>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:90
        putc(num[i]+'0');
    }
    return ;
}
     f92:	66 83 c4 44          	add    $0x44,%esp
     f96:	66 5b                	pop    %ebx
     f98:	66 5e                	pop    %esi
     f9a:	66 c3                	retl   

00000f9c <puts>:
puts():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:92

void puts(char * str, int size){
     f9c:	66 57                	push   %edi
     f9e:	66 56                	push   %esi
     fa0:	66 53                	push   %ebx
     fa2:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
     fa8:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:93
    int i = 0;
     fae:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    while (i < size){
     fb4:	eb 1a                	jmp    fd0 <puts+0x34>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:95
        putc(str[i]);
     fb6:	66 83 ec 0c          	sub    $0xc,%esp
     fba:	67 66 0f be 04 1f    	movsbl (%edi,%ebx,1),%eax
     fc0:	66 50                	push   %eax
     fc2:	66 e8 df fd ff ff    	calll  da7 <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:96
        i++;
     fc8:	66 83 c3 01          	add    $0x1,%ebx
     fcc:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    return ;
}

void puts(char * str, int size){
    int i = 0;
    while (i < size){
     fd0:	66 39 f3             	cmp    %esi,%ebx
     fd3:	7c e1                	jl     fb6 <puts+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:99
        putc(str[i]);
        i++;
    }
    return ;
}
     fd5:	66 5b                	pop    %ebx
     fd7:	66 5e                	pop    %esi
     fd9:	66 5f                	pop    %edi
     fdb:	66 c3                	retl   

00000fdd <sprintf>:
sprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:103



void sprintf(char * dest , char * format, ...){
     fdd:	66 55                	push   %ebp
     fdf:	66 57                	push   %edi
     fe1:	66 56                	push   %esi
     fe3:	66 53                	push   %ebx
     fe5:	66 83 ec 5c          	sub    $0x5c,%esp
     fe9:	67 66 8b 6c 24 70    	mov    0x70(%esp),%ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:106
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     fef:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:105



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     ff5:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:104
}



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
     ffb:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    1001:	e9 33 01             	jmp    1137 <core_header_data_segment+0x137>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:109
        if (format[src_index] == '%'){
    1004:	3c 25                	cmp    $0x25,%al
    1006:	0f 85 1b 01          	jne    1125 <core_header_data_segment+0x125>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:111
            src_index++;
            switch(format[src_index]){
    100a:	67 66 0f b6 44 39 01 	movzbl 0x1(%ecx,%edi,1),%eax
    1011:	3c 64                	cmp    $0x64,%al
    1013:	74 28                	je     103d <core_header_data_segment+0x3d>
    1015:	3c 73                	cmp    $0x73,%al
    1017:	0f 84 b5 00          	je     10d0 <core_header_data_segment+0xd0>
    101b:	3c 63                	cmp    $0x63,%al
    101d:	0f 85 fe 00          	jne    111f <core_header_data_segment+0x11f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
    1021:	67 66 8b 44 94 78    	mov    0x78(%esp,%edx,4),%eax
    1027:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:114
                    src_index++;
    102c:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
    1030:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
    1035:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:115
                    src_index++;
                    break;
    103a:	e9 fa 00             	jmp    1137 <core_header_data_segment+0x137>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    103d:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1042:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    1048:	67 66 8b 4c 94 78    	mov    0x78(%esp,%edx,4),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:119
                    int len = 0; 
    104e:	66 be 00 00 00 00    	mov    $0x0,%esi
    1054:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                    int num[INT_LENGTH];
                    while (n != 0){
    105a:	eb 37                	jmp    1093 <core_header_data_segment+0x93>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:122
                        num[len] = n % 10;
    105c:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    1062:	66 89 c8             	mov    %ecx,%eax
    1065:	66 f7 ea             	imul   %edx
    1068:	66 c1 fa 02          	sar    $0x2,%edx
    106c:	66 89 c8             	mov    %ecx,%eax
    106f:	66 c1 f8 1f          	sar    $0x1f,%eax
    1073:	66 29 c2             	sub    %eax,%edx
    1076:	66 89 d7             	mov    %edx,%edi
    1079:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
    107e:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    1083:	66 29 c1             	sub    %eax,%ecx
    1086:	67 66 89 4c b4 14    	mov    %ecx,0x14(%esp,%esi,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:123
                        n = n / 10;
    108c:	66 89 f9             	mov    %edi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:124
                        len++;
    108f:	66 83 c6 01          	add    $0x1,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
    1093:	66 85 c9             	test   %ecx,%ecx
    1096:	75 c4                	jne    105c <core_header_data_segment+0x5c>
    1098:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    109e:	67 66 8d 46 ff       	lea    -0x1(%esi),%eax
    10a3:	eb 1a                	jmp    10bf <core_header_data_segment+0xbf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
    10a5:	67 66 0f b6 74 84 14 	movzbl 0x14(%esp,%eax,4),%esi
    10ac:	67 66 8d 56 30       	lea    0x30(%esi),%edx
    10b1:	67 88 54 1d 00       	mov    %dl,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    10b6:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
    10ba:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    10bf:	66 85 c0             	test   %eax,%eax
    10c2:	79 e1                	jns    10a5 <core_header_data_segment+0xa5>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:129
                        dest[des_index++] = num[i]+'0';
                    }
                    src_index++;
    10c4:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                    dest[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    10c8:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    10ce:	eb 67                	jmp    1137 <core_header_data_segment+0x137>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
    10d0:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    10d5:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    10db:	67 66 8b 74 94 78    	mov    0x78(%esp,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:134
                    u32 str_len = strlen(str);
    10e1:	66 83 ec 0c          	sub    $0xc,%esp
    10e5:	66 56                	push   %esi
    10e7:	66 e8 78 06 00 00    	calll  1765 <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    u32 i = 0;
                    while (i < str_len){
    10ed:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:135
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    10f1:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    while (i < str_len){
    10f7:	eb 15                	jmp    110e <core_header_data_segment+0x10e>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:137
                        dest[des_index++] = str[i++];
    10f9:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    10ff:	67 88 4c 1d 00       	mov    %cl,0x0(%ebp,%ebx,1)
    1104:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    1109:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    110e:	66 39 c2             	cmp    %eax,%edx
    1111:	72 e6                	jb     10f9 <core_header_data_segment+0xf9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:139
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
    1113:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
    1117:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:140
                    u32 i = 0;
                    while (i < str_len){
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    111d:	eb 18                	jmp    1137 <core_header_data_segment+0x137>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:143
                }
                default :
                    src_index++;
    111f:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:144
                    break;
    1123:	eb 12                	jmp    1137 <core_header_data_segment+0x137>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:147
            }
        }
        else if (format[src_index] == '\\') {
    1125:	3c 5c                	cmp    $0x5c,%al
    1127:	74 0e                	je     1137 <core_header_data_segment+0x137>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:166
                        break;
                }
            }
        }
        else {
            dest[des_index++] = format[src_index++];
    1129:	66 83 c7 01          	add    $0x1,%edi
    112d:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
    1132:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    1137:	67 66 8b 4c 24 74    	mov    0x74(%esp),%ecx
    113d:	67 66 0f b6 04 39    	movzbl (%ecx,%edi,1),%eax
    1143:	84 c0                	test   %al,%al
    1145:	0f 85 bb fe          	jne    1004 <core_header_data_segment+0x4>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:169
        }
        else {
            dest[des_index++] = format[src_index++];
        }
    }
    dest[des_index] = 0;
    1149:	67 c6 44 1d 00 00    	movb   $0x0,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:171
    return ;
}
    114f:	66 83 c4 5c          	add    $0x5c,%esp
    1153:	66 5b                	pop    %ebx
    1155:	66 5e                	pop    %esi
    1157:	66 5f                	pop    %edi
    1159:	66 5d                	pop    %ebp
    115b:	66 c3                	retl   

0000115d <vprintf>:
vprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:174


void vprintf(char * format, va_list va){
    115d:	66 55                	push   %ebp
    115f:	66 57                	push   %edi
    1161:	66 56                	push   %esi
    1163:	66 53                	push   %ebx
    1165:	66 81 ec 5c 04 00 00 	sub    $0x45c,%esp
    116c:	67 66 8b ac 24 70 04 	mov    0x470(%esp),%ebp
    1173:	00 00 
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:178
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    1175:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:177


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    117b:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:176
}


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    1181:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    1187:	e9 4c 01             	jmp    12d6 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:181
        if (format[src_index] == '%'){
    118a:	3c 25                	cmp    $0x25,%al
    118c:	0f 85 34 01          	jne    12c4 <vprintf+0x167>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:183
            src_index++;
            switch(format[src_index]){
    1190:	67 66 0f b6 44 3d 01 	movzbl 0x1(%ebp,%edi,1),%eax
    1197:	3c 64                	cmp    $0x64,%al
    1199:	74 30                	je     11cb <vprintf+0x6e>
    119b:	3c 73                	cmp    $0x73,%al
    119d:	0f 84 c6 00          	je     1267 <vprintf+0x10a>
    11a1:	3c 63                	cmp    $0x63,%al
    11a3:	0f 85 17 01          	jne    12be <vprintf+0x161>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
    11a7:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    11ae:	00 00 
    11b0:	67 66 8b 04 90       	mov    (%eax,%edx,4),%eax
    11b5:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:186
                    src_index++;
    11ba:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
    11be:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
    11c3:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:187
                    src_index++;
                    break;
    11c8:	e9 0b 01             	jmp    12d6 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    11cb:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    11d0:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    11d6:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    11dd:	00 00 
    11df:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:191
                    int len = 0; 
    11e4:	66 b9 00 00 00 00    	mov    $0x0,%ecx
    11ea:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                    int num[INT_LENGTH];
                    while (n != 0){
    11f0:	eb 3a                	jmp    122c <vprintf+0xcf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:194
                        num[len] = n % 10;
    11f2:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    11f8:	66 89 f0             	mov    %esi,%eax
    11fb:	66 f7 ea             	imul   %edx
    11fe:	66 c1 fa 02          	sar    $0x2,%edx
    1202:	66 89 f0             	mov    %esi,%eax
    1205:	66 c1 f8 1f          	sar    $0x1f,%eax
    1209:	66 29 c2             	sub    %eax,%edx
    120c:	66 89 d7             	mov    %edx,%edi
    120f:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
    1214:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    1219:	66 89 f2             	mov    %esi,%edx
    121c:	66 29 c2             	sub    %eax,%edx
    121f:	67 66 89 54 8c 14    	mov    %edx,0x14(%esp,%ecx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:195
                        n = n / 10;
    1225:	66 89 fe             	mov    %edi,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:196
                        len++;
    1228:	66 83 c1 01          	add    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
    122c:	66 85 f6             	test   %esi,%esi
    122f:	75 c1                	jne    11f2 <vprintf+0x95>
    1231:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1237:	66 83 e9 01          	sub    $0x1,%ecx
    123b:	eb 19                	jmp    1256 <vprintf+0xf9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    123d:	67 66 0f b6 44 8c 14 	movzbl 0x14(%esp,%ecx,4),%eax
    1244:	66 83 c0 30          	add    $0x30,%eax
    1248:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    124d:	66 83 e9 01          	sub    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    1251:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1256:	66 85 c9             	test   %ecx,%ecx
    1259:	79 e2                	jns    123d <vprintf+0xe0>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:201
                        buf[des_index++] = num[i]+'0';
                    }
                    src_index++;
    125b:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                    buf[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    125f:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    1265:	eb 6f                	jmp    12d6 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
    1267:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    126c:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    1272:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    1279:	00 00 
    127b:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:206
                    u32 str_len = strlen(str);
    1280:	66 83 ec 0c          	sub    $0xc,%esp
    1284:	66 56                	push   %esi
    1286:	66 e8 d9 04 00 00    	calll  1765 <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    u32 i = 0;
                    while (i < str_len){
    128c:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:207
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    1290:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    while (i < str_len){
    1296:	eb 15                	jmp    12ad <vprintf+0x150>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:209
                        buf[des_index++] = str[i++];
    1298:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    129e:	67 88 4c 1c 50       	mov    %cl,0x50(%esp,%ebx,1)
    12a3:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    12a8:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    12ad:	66 39 c2             	cmp    %eax,%edx
    12b0:	72 e6                	jb     1298 <vprintf+0x13b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:211
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
    12b2:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
    12b6:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:212
                    u32 i = 0;
                    while (i < str_len){
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    12bc:	eb 18                	jmp    12d6 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:215
                }
                default :
                    src_index++;
    12be:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:216
                    break;
    12c2:	eb 12                	jmp    12d6 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:219
            }
        }
        else if (format[src_index] == '\\') {
    12c4:	3c 5c                	cmp    $0x5c,%al
    12c6:	74 0e                	je     12d6 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:238
                        break;
                }
            }
        }
        else {
            buf[des_index++] = format[src_index++];
    12c8:	66 83 c7 01          	add    $0x1,%edi
    12cc:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
    12d1:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    12d6:	67 66 0f b6 44 3d 00 	movzbl 0x0(%ebp,%edi,1),%eax
    12dd:	84 c0                	test   %al,%al
    12df:	0f 85 a7 fe          	jne    118a <vprintf+0x2d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:241
        }
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    12e3:	67 c6 44 1c 50 00    	movb   $0x0,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242
    for (int i = 0; i < des_index; i++){
    12e9:	66 be 00 00 00 00    	mov    $0x0,%esi
    12ef:	eb 1b                	jmp    130c <vprintf+0x1af>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:243 (discriminator 3)
        putc(buf[i]);
    12f1:	66 83 ec 0c          	sub    $0xc,%esp
    12f5:	67 66 0f be 44 34 5c 	movsbl 0x5c(%esp,%esi,1),%eax
    12fc:	66 50                	push   %eax
    12fe:	66 e8 a3 fa ff ff    	calll  da7 <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 3)
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    for (int i = 0; i < des_index; i++){
    1304:	66 83 c6 01          	add    $0x1,%esi
    1308:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 1)
    130c:	66 39 f3             	cmp    %esi,%ebx
    130f:	7f e0                	jg     12f1 <vprintf+0x194>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:246
        putc(buf[i]);
    }
    return ;
}
    1311:	66 81 c4 5c 04 00 00 	add    $0x45c,%esp
    1318:	66 5b                	pop    %ebx
    131a:	66 5e                	pop    %esi
    131c:	66 5f                	pop    %edi
    131e:	66 5d                	pop    %ebp
    1320:	66 c3                	retl   

00001322 <printf>:
printf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:248

void printf(char * format, ...){
    1322:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:249
    vprintf(format, &format+1);// 其实这里由于format是个指针，是32位的，所以这里对format的地址+1，也会加4个字节。
    1326:	67 66 8d 44 24 1c    	lea    0x1c(%esp),%eax
    132c:	66 50                	push   %eax
    132e:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    1334:	66 e8 23 fe ff ff    	calll  115d <vprintf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:251
    return ;
}
    133a:	66 83 c4 1c          	add    $0x1c,%esp
    133e:	66 c3                	retl   

00001340 <isalpha>:
isalpha():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:270
//     return ;
// }



int isalpha (int ch){
    1340:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:271
    if ('a' <= ch && ch <= 'z')
    1346:	67 66 8d 50 9f       	lea    -0x61(%eax),%edx
    134b:	66 83 fa 19          	cmp    $0x19,%edx
    134f:	76 12                	jbe    1363 <isalpha+0x23>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:273
        return 1;
    if ('A' <= ch && ch <= 'Z')
    1351:	66 83 e8 41          	sub    $0x41,%eax
    1355:	66 83 f8 19          	cmp    $0x19,%eax
    1359:	77 10                	ja     136b <isalpha+0x2b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:274
        return 1;
    135b:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1361:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:272



int isalpha (int ch){
    if ('a' <= ch && ch <= 'z')
        return 1;
    1363:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1369:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:275
    if ('A' <= ch && ch <= 'Z')
        return 1;
    return 0;
    136b:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:276
}
    1371:	66 c3                	retl   

00001373 <isdigit>:
isdigit():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:278
int isdigit (int ch){
    if ('0' <= ch && ch <= '9')
    1373:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
    1379:	66 83 e8 30          	sub    $0x30,%eax
    137d:	66 83 f8 09          	cmp    $0x9,%eax
    1381:	77 08                	ja     138b <isdigit+0x18>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:279
        return 1;
    1383:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1389:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:280
    return 0;
    138b:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:281
}
    1391:	66 c3                	retl   

00001393 <isalnum>:
isalnum():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:283

int isalnum (int ch){
    1393:	66 53                	push   %ebx
    1395:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284
    if ( isalpha(ch) || isdigit(ch) ){
    139b:	66 53                	push   %ebx
    139d:	66 e8 9d ff ff ff    	calll  1340 <isalpha>
    13a3:	66 83 c4 04          	add    $0x4,%esp
    13a7:	66 85 c0             	test   %eax,%eax
    13aa:	75 13                	jne    13bf <isalnum+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284 (discriminator 1)
    13ac:	66 53                	push   %ebx
    13ae:	66 e8 bf ff ff ff    	calll  1373 <isdigit>
    13b4:	66 83 c4 04          	add    $0x4,%esp
    13b8:	66 85 c0             	test   %eax,%eax
    13bb:	75 0a                	jne    13c7 <isalnum+0x34>
    13bd:	eb 0e                	jmp    13cd <isalnum+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:285
        return 1;
    13bf:	66 b8 01 00 00 00    	mov    $0x1,%eax
    13c5:	eb 06                	jmp    13cd <isalnum+0x3a>
    13c7:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:288
    }
    return 0;
}
    13cd:	66 5b                	pop    %ebx
    13cf:	66 c3                	retl   

000013d1 <ispunct>:
ispunct():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:289
int ispunct (int ch){
    13d1:	66 83 ec 30          	sub    $0x30,%esp
    13d5:	67 66 8b 4c 24 34    	mov    0x34(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:290
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    13db:	67 66 c7 44 24 0e 21 	movl   $0x24232221,0xe(%esp)
    13e2:	22 23 24 
    13e5:	67 66 c7 44 24 12 25 	movl   $0x28272625,0x12(%esp)
    13ec:	26 27 28 
    13ef:	67 66 c7 44 24 16 29 	movl   $0x2c2b2a29,0x16(%esp)
    13f6:	2a 2b 2c 
    13f9:	67 66 c7 44 24 1a 2d 	movl   $0x3a2f2e2d,0x1a(%esp)
    1400:	2e 2f 3a 
    1403:	67 66 c7 44 24 1e 3b 	movl   $0x3e3d3c3b,0x1e(%esp)
    140a:	3c 3d 3e 
    140d:	67 66 c7 44 24 22 3f 	movl   $0x5c5b403f,0x22(%esp)
    1414:	40 5b 5c 
    1417:	67 66 c7 44 24 26 5d 	movl   $0x605f5e5d,0x26(%esp)
    141e:	5e 5f 60 
    1421:	67 66 c7 44 24 2a 7b 	movl   $0x7e7d7c7b,0x2a(%esp)
    1428:	7c 7d 7e 
    142b:	67 c7 44 24 2e 00 00 	movw   $0x0,0x2e(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291
    for (int i = 0; i < 33; i++){
    1432:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1438:	eb 10                	jmp    144a <ispunct+0x79>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:292
        if (ch == punct[i])
    143a:	67 66 0f be 54 04 0e 	movsbl 0xe(%esp,%eax,1),%edx
    1441:	66 39 ca             	cmp    %ecx,%edx
    1444:	74 12                	je     1458 <ispunct+0x87>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 2)
    }
    return 0;
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
    1446:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 1)
    144a:	66 83 f8 20          	cmp    $0x20,%eax
    144e:	7e ea                	jle    143a <ispunct+0x69>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:295
        if (ch == punct[i])
            return 1;
    }
    return 0;
    1450:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1456:	eb 06                	jmp    145e <ispunct+0x8d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:293
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
        if (ch == punct[i])
            return 1;
    1458:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:296
    }
    return 0;
}
    145e:	66 83 c4 30          	add    $0x30,%esp
    1462:	66 c3                	retl   

00001464 <isblank>:
isblank():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:298
int isblank (int ch){
    if (ch == ' ')
    1464:	67 66 83 7c 24 04 20 	cmpl   $0x20,0x4(%esp)
    146b:	75 08                	jne    1475 <isblank+0x11>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:299
        return 1;
    146d:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1473:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:300
    return 0;
    1475:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:301
}
    147b:	66 c3                	retl   

0000147d <isprint>:
isprint():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:302
int isprint (int ch){
    147d:	66 53                	push   %ebx
    147f:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303
    if (isalpha(ch) || isdigit(ch) || isalnum(ch) || ispunct(ch) || isblank(ch)){
    1485:	66 53                	push   %ebx
    1487:	66 e8 b3 fe ff ff    	calll  1340 <isalpha>
    148d:	66 83 c4 04          	add    $0x4,%esp
    1491:	66 85 c0             	test   %eax,%eax
    1494:	75 46                	jne    14dc <isprint+0x5f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 1)
    1496:	66 53                	push   %ebx
    1498:	66 e8 d5 fe ff ff    	calll  1373 <isdigit>
    149e:	66 83 c4 04          	add    $0x4,%esp
    14a2:	66 85 c0             	test   %eax,%eax
    14a5:	75 3d                	jne    14e4 <isprint+0x67>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 2)
    14a7:	66 53                	push   %ebx
    14a9:	66 e8 e4 fe ff ff    	calll  1393 <isalnum>
    14af:	66 83 c4 04          	add    $0x4,%esp
    14b3:	66 85 c0             	test   %eax,%eax
    14b6:	75 34                	jne    14ec <isprint+0x6f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 3)
    14b8:	66 53                	push   %ebx
    14ba:	66 e8 11 ff ff ff    	calll  13d1 <ispunct>
    14c0:	66 83 c4 04          	add    $0x4,%esp
    14c4:	66 85 c0             	test   %eax,%eax
    14c7:	75 2b                	jne    14f4 <isprint+0x77>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 4)
    14c9:	66 53                	push   %ebx
    14cb:	66 e8 93 ff ff ff    	calll  1464 <isblank>
    14d1:	66 83 c4 04          	add    $0x4,%esp
    14d5:	66 85 c0             	test   %eax,%eax
    14d8:	75 22                	jne    14fc <isprint+0x7f>
    14da:	eb 26                	jmp    1502 <isprint+0x85>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:304
        return 1;
    14dc:	66 b8 01 00 00 00    	mov    $0x1,%eax
    14e2:	eb 1e                	jmp    1502 <isprint+0x85>
    14e4:	66 b8 01 00 00 00    	mov    $0x1,%eax
    14ea:	eb 16                	jmp    1502 <isprint+0x85>
    14ec:	66 b8 01 00 00 00    	mov    $0x1,%eax
    14f2:	eb 0e                	jmp    1502 <isprint+0x85>
    14f4:	66 b8 01 00 00 00    	mov    $0x1,%eax
    14fa:	eb 06                	jmp    1502 <isprint+0x85>
    14fc:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:307
    }
    return 0;
}
    1502:	66 5b                	pop    %ebx
    1504:	66 c3                	retl   

00001506 <iscntrl>:
iscntrl():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:308
int iscntrl (int ch){
    1506:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:310
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
    150c:	66 83 f8 1f          	cmp    $0x1f,%eax
    1510:	76 0e                	jbe    1520 <iscntrl+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:312
        return 1;
    if (ch == 0x7f)
    1512:	66 83 f8 7f          	cmp    $0x7f,%eax
    1516:	75 10                	jne    1528 <iscntrl+0x22>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:313
        return 1;
    1518:	66 b8 01 00 00 00    	mov    $0x1,%eax
    151e:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:311
    return 0;
}
int iscntrl (int ch){
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
        return 1;
    1520:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1526:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:314
    if (ch == 0x7f)
        return 1;
    return 0;
    1528:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:315
}
    152e:	66 c3                	retl   

00001530 <read_n_sector>:
read_n_sector():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:321

/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    1530:	66 55                	push   %ebp
    1532:	66 57                	push   %edi
    1534:	66 56                	push   %esi
    1536:	66 53                	push   %ebx
    1538:	66 83 ec 1c          	sub    $0x1c,%esp
    153c:	67 66 0f b7 7c 24 30 	movzwl 0x30(%esp),%edi
    1543:	67 66 0f b7 74 24 34 	movzwl 0x34(%esp),%esi
    154a:	67 66 0f b7 44 24 38 	movzwl 0x38(%esp),%eax
    1551:	67 89 44 24 0c       	mov    %ax,0xc(%esp)
    1556:	67 66 0f b7 44 24 3c 	movzwl 0x3c(%esp),%eax
    155d:	67 89 44 24 0e       	mov    %ax,0xe(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322
    for (int i = 0; i < number; i++){
    1562:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    1568:	eb 7d                	jmp    15e7 <read_n_sector+0xb7>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:323 (discriminator 3)
        int sector = (sector_code+i) % 18+1;
    156a:	66 0f b7 ef          	movzwl %di,%ebp
    156e:	66 01 dd             	add    %ebx,%ebp
    1571:	66 ba 39 8e e3 38    	mov    $0x38e38e39,%edx
    1577:	66 89 e8             	mov    %ebp,%eax
    157a:	66 f7 ea             	imul   %edx
    157d:	66 c1 fa 02          	sar    $0x2,%edx
    1581:	66 89 e8             	mov    %ebp,%eax
    1584:	66 c1 f8 1f          	sar    $0x1f,%eax
    1588:	66 29 c2             	sub    %eax,%edx
    158b:	66 89 d1             	mov    %edx,%ecx
    158e:	67 66 8d 14 d2       	lea    (%edx,%edx,8),%edx
    1593:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    1598:	66 89 ea             	mov    %ebp,%edx
    159b:	66 29 c2             	sub    %eax,%edx
    159e:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:325 (discriminator 3)
        int mid = (sector_code+i) / 18;
        int cylinder = mid >> 1;
    15a2:	66 89 cd             	mov    %ecx,%ebp
    15a5:	66 d1 fd             	sar    %ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:327 (discriminator 3)
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    15a8:	66 83 ec 0c          	sub    $0xc,%esp
    15ac:	66 89 d8             	mov    %ebx,%eax
    15af:	66 c1 e0 09          	shl    $0x9,%eax
    15b3:	67 03 44 24 1a       	add    0x1a(%esp),%ax
    15b8:	66 0f b7 c0          	movzwl %ax,%eax
    15bc:	66 50                	push   %eax
    15be:	67 66 0f b7 44 24 1c 	movzwl 0x1c(%esp),%eax
    15c5:	66 50                	push   %eax
    15c7:	66 0f b7 d2          	movzwl %dx,%edx
    15cb:	66 52                	push   %edx
    15cd:	66 0f b7 ed          	movzwl %bp,%ebp
    15d1:	66 55                	push   %ebp
    15d3:	66 83 e1 01          	and    $0x1,%ecx
    15d7:	66 51                	push   %ecx
    15d9:	66 e8 16 01 00 00    	calll  16f5 <read_sector>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 3)
/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    for (int i = 0; i < number; i++){
    15df:	66 83 c3 01          	add    $0x1,%ebx
    15e3:	66 83 c4 20          	add    $0x20,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 1)
    15e7:	66 0f b7 c6          	movzwl %si,%eax
    15eb:	66 39 c3             	cmp    %eax,%ebx
    15ee:	0f 8c 78 ff          	jl     156a <read_n_sector+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:330
        int cylinder = mid >> 1;
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    }
    return ;
}
    15f2:	66 83 c4 1c          	add    $0x1c,%esp
    15f6:	66 5b                	pop    %ebx
    15f8:	66 5e                	pop    %esi
    15fa:	66 5f                	pop    %edi
    15fc:	66 5d                	pop    %ebp
    15fe:	66 c3                	retl   

00001600 <write_port_byte>:
write_port_byte():
    1600:	66 55                	push   %ebp
    1602:	66 89 e5             	mov    %esp,%ebp
    1605:	53                   	push   %bx
    1606:	51                   	push   %cx
    1607:	52                   	push   %dx
    1608:	56                   	push   %si
    1609:	57                   	push   %di
    160a:	55                   	push   %bp
    160b:	1e                   	push   %ds
    160c:	06                   	push   %es
    160d:	16                   	push   %ss
    160e:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1612:	67 8a 45 0c          	mov    0xc(%ebp),%al
    1616:	cd 34                	int    $0x34
    1618:	17                   	pop    %ss
    1619:	07                   	pop    %es
    161a:	1f                   	pop    %ds
    161b:	5d                   	pop    %bp
    161c:	5f                   	pop    %di
    161d:	5e                   	pop    %si
    161e:	5a                   	pop    %dx
    161f:	59                   	pop    %cx
    1620:	5b                   	pop    %bx
    1621:	66 89 ec             	mov    %ebp,%esp
    1624:	66 5d                	pop    %ebp
    1626:	66 c3                	retl   

00001628 <read_port_byte>:
read_port_byte():
    1628:	66 55                	push   %ebp
    162a:	66 89 e5             	mov    %esp,%ebp
    162d:	53                   	push   %bx
    162e:	51                   	push   %cx
    162f:	52                   	push   %dx
    1630:	56                   	push   %si
    1631:	57                   	push   %di
    1632:	55                   	push   %bp
    1633:	1e                   	push   %ds
    1634:	06                   	push   %es
    1635:	16                   	push   %ss
    1636:	67 8b 45 08          	mov    0x8(%ebp),%ax
    163a:	cd 33                	int    $0x33
    163c:	17                   	pop    %ss
    163d:	07                   	pop    %es
    163e:	1f                   	pop    %ds
    163f:	5d                   	pop    %bp
    1640:	5f                   	pop    %di
    1641:	5e                   	pop    %si
    1642:	5a                   	pop    %dx
    1643:	59                   	pop    %cx
    1644:	5b                   	pop    %bx
    1645:	66 89 ec             	mov    %ebp,%esp
    1648:	66 5d                	pop    %ebp
    164a:	66 c3                	retl   

0000164c <write_memory_byte>:
write_memory_byte():
    164c:	66 55                	push   %ebp
    164e:	66 89 e5             	mov    %esp,%ebp
    1651:	50                   	push   %ax
    1652:	53                   	push   %bx
    1653:	52                   	push   %dx
    1654:	1e                   	push   %ds
    1655:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1659:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    165d:	c1 e0 0c             	shl    $0xc,%ax
    1660:	67 8a 4d 0c          	mov    0xc(%ebp),%cl
    1664:	cd 36                	int    $0x36
    1666:	1f                   	pop    %ds
    1667:	5a                   	pop    %dx
    1668:	5b                   	pop    %bx
    1669:	58                   	pop    %ax
    166a:	66 89 ec             	mov    %ebp,%esp
    166d:	66 5d                	pop    %ebp
    166f:	66 c3                	retl   

00001671 <read_memory_byte>:
read_memory_byte():
    1671:	66 55                	push   %ebp
    1673:	66 89 e5             	mov    %esp,%ebp
    1676:	53                   	push   %bx
    1677:	51                   	push   %cx
    1678:	52                   	push   %dx
    1679:	56                   	push   %si
    167a:	57                   	push   %di
    167b:	55                   	push   %bp
    167c:	1e                   	push   %ds
    167d:	06                   	push   %es
    167e:	16                   	push   %ss
    167f:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1683:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    1687:	c1 e0 0c             	shl    $0xc,%ax
    168a:	cd 35                	int    $0x35
    168c:	17                   	pop    %ss
    168d:	07                   	pop    %es
    168e:	1f                   	pop    %ds
    168f:	5d                   	pop    %bp
    1690:	5f                   	pop    %di
    1691:	5e                   	pop    %si
    1692:	5a                   	pop    %dx
    1693:	59                   	pop    %cx
    1694:	5b                   	pop    %bx
    1695:	66 89 ec             	mov    %ebp,%esp
    1698:	66 5d                	pop    %ebp
    169a:	66 c3                	retl   

0000169c <check_keyboard>:
check_keyboard():
    169c:	b4 01                	mov    $0x1,%ah
    169e:	cd 16                	int    $0x16
    16a0:	74 05                	je     16a7 <check_keyboard.have_key>
    16a2:	b8 00 00             	mov    $0x0,%ax
    16a5:	eb 03                	jmp    16aa <check_keyboard.check_keyboard_return>

000016a7 <check_keyboard.have_key>:
check_keyboard.have_key():
    16a7:	b8 01 00             	mov    $0x1,%ax

000016aa <check_keyboard.check_keyboard_return>:
check_keyboard.check_keyboard_return():
    16aa:	66 c3                	retl   

000016ac <get_keyboard>:
get_keyboard():
    16ac:	b4 00                	mov    $0x0,%ah
    16ae:	cd 16                	int    $0x16
    16b0:	66 c3                	retl   

000016b2 <clean_screen>:
clean_screen():
    16b2:	50                   	push   %ax
    16b3:	53                   	push   %bx
    16b4:	51                   	push   %cx
    16b5:	52                   	push   %dx
    16b6:	b4 06                	mov    $0x6,%ah
    16b8:	b0 00                	mov    $0x0,%al
    16ba:	b5 00                	mov    $0x0,%ch
    16bc:	b1 00                	mov    $0x0,%cl
    16be:	b6 17                	mov    $0x17,%dh
    16c0:	b2 4f                	mov    $0x4f,%dl
    16c2:	b7 1f                	mov    $0x1f,%bh
    16c4:	cd 10                	int    $0x10
    16c6:	5a                   	pop    %dx
    16c7:	59                   	pop    %cx
    16c8:	5b                   	pop    %bx
    16c9:	58                   	pop    %ax
    16ca:	66 c3                	retl   

000016cc <scroll_screen>:
scroll_screen():
    16cc:	50                   	push   %ax
    16cd:	53                   	push   %bx
    16ce:	51                   	push   %cx
    16cf:	52                   	push   %dx
    16d0:	b4 06                	mov    $0x6,%ah
    16d2:	b0 01                	mov    $0x1,%al
    16d4:	b5 00                	mov    $0x0,%ch
    16d6:	b1 00                	mov    $0x0,%cl
    16d8:	b6 17                	mov    $0x17,%dh
    16da:	b2 4f                	mov    $0x4f,%dl
    16dc:	b7 10                	mov    $0x10,%bh
    16de:	cd 10                	int    $0x10
    16e0:	5a                   	pop    %dx
    16e1:	59                   	pop    %cx
    16e2:	5b                   	pop    %bx
    16e3:	58                   	pop    %ax
    16e4:	66 c3                	retl   

000016e6 <get_random>:
get_random():
    16e6:	53                   	push   %bx
    16e7:	b8 00 00             	mov    $0x0,%ax
    16ea:	e6 43                	out    %al,$0x43
    16ec:	e4 40                	in     $0x40,%al
    16ee:	b3 08                	mov    $0x8,%bl
    16f0:	f6 e3                	mul    %bl
    16f2:	5b                   	pop    %bx
    16f3:	66 c3                	retl   

000016f5 <read_sector>:
read_sector():
    16f5:	66 55                	push   %ebp
    16f7:	66 89 e5             	mov    %esp,%ebp
    16fa:	50                   	push   %ax
    16fb:	53                   	push   %bx
    16fc:	51                   	push   %cx
    16fd:	52                   	push   %dx
    16fe:	06                   	push   %es
    16ff:	67 8b 45 14          	mov    0x14(%ebp),%ax
    1703:	8e c0                	mov    %ax,%es
    1705:	67 8b 5d 18          	mov    0x18(%ebp),%bx
    1709:	b4 02                	mov    $0x2,%ah
    170b:	b0 01                	mov    $0x1,%al
    170d:	b2 00                	mov    $0x0,%dl
    170f:	67 8a 75 08          	mov    0x8(%ebp),%dh
    1713:	67 8a 6d 0c          	mov    0xc(%ebp),%ch
    1717:	67 8a 4d 10          	mov    0x10(%ebp),%cl
    171b:	cd 13                	int    $0x13
    171d:	07                   	pop    %es
    171e:	5a                   	pop    %dx
    171f:	59                   	pop    %cx
    1720:	5b                   	pop    %bx
    1721:	58                   	pop    %ax
    1722:	66 89 ec             	mov    %ebp,%esp
    1725:	66 5d                	pop    %ebp
    1727:	66 c3                	retl   

00001729 <print_my_name>:
print_my_name():
    1729:	50                   	push   %ax
    172a:	53                   	push   %bx
    172b:	51                   	push   %cx
    172c:	52                   	push   %dx
    172d:	1e                   	push   %ds
    172e:	06                   	push   %es
    172f:	55                   	push   %bp
    1730:	b8 00 10             	mov    $0x1000,%ax
    1733:	8e c0                	mov    %ax,%es
    1735:	b8 08 40             	mov    $0x4008,%ax
    1738:	89 c5                	mov    %ax,%bp
    173a:	b4 13                	mov    $0x13,%ah
    173c:	b0 00                	mov    $0x0,%al
    173e:	b7 00                	mov    $0x0,%bh
    1740:	b3 0f                	mov    $0xf,%bl
    1742:	b9 19 00             	mov    $0x19,%cx
    1745:	b6 18                	mov    $0x18,%dh
    1747:	b2 01                	mov    $0x1,%dl
    1749:	cd 10                	int    $0x10
    174b:	5d                   	pop    %bp
    174c:	07                   	pop    %es
    174d:	1f                   	pop    %ds
    174e:	5a                   	pop    %dx
    174f:	59                   	pop    %cx
    1750:	5b                   	pop    %bx
    1751:	58                   	pop    %ax
    1752:	c3                   	ret    

00001753 <reboot>:
reboot():
    1753:	b4 06                	mov    $0x6,%ah
    1755:	b0 00                	mov    $0x0,%al
    1757:	b5 00                	mov    $0x0,%ch
    1759:	b1 00                	mov    $0x0,%cl
    175b:	b6 18                	mov    $0x18,%dh
    175d:	b2 4f                	mov    $0x4f,%dl
    175f:	b7 1f                	mov    $0x1f,%bh
    1761:	cd 10                	int    $0x10
    1763:	cd 19                	int    $0x19

00001765 <strlen>:
strlen():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:3
#include "../include/type.h"

size_t strlen(char * str){
    1765:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:4
    u32 len = 0;
    176b:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
    while (str[len] != 0){
    1771:	eb 04                	jmp    1777 <strlen+0x12>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:6
        len++;
    1773:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
#include "../include/type.h"

size_t strlen(char * str){
    u32 len = 0;
    while (str[len] != 0){
    1777:	67 80 3c 02 00       	cmpb   $0x0,(%edx,%eax,1)
    177c:	75 f5                	jne    1773 <strlen+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:9
        len++;
    }
    return len;
}
    177e:	66 f3 c3             	repz retl 

00001781 <strncpy>:
strncpy():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:11

void strncpy(char * dest, char * src, u32 size){
    1781:	66 56                	push   %esi
    1783:	66 53                	push   %ebx
    1785:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    178b:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    1791:	67 66 8b 4c 24 14    	mov    0x14(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12
    for (int i = 0; i < size; i++){
    1797:	66 b8 00 00 00 00    	mov    $0x0,%eax
    179d:	eb 0e                	jmp    17ad <strncpy+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:13 (discriminator 3)
        dest[i] = src[i];
    179f:	67 66 0f b6 14 06    	movzbl (%esi,%eax,1),%edx
    17a5:	67 88 14 03          	mov    %dl,(%ebx,%eax,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 3)
    }
    return len;
}

void strncpy(char * dest, char * src, u32 size){
    for (int i = 0; i < size; i++){
    17a9:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 1)
    17ad:	66 39 c8             	cmp    %ecx,%eax
    17b0:	72 ed                	jb     179f <strncpy+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:15
        dest[i] = src[i];
    }
    dest[size] = '\0';
    17b2:	67 c6 04 0b 00       	movb   $0x0,(%ebx,%ecx,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:16
}
    17b7:	66 5b                	pop    %ebx
    17b9:	66 5e                	pop    %esi
    17bb:	66 c3                	retl   

000017bd <strcmp>:
strcmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:18

int strcmp(char * lhs, char * rhs){
    17bd:	66 57                	push   %edi
    17bf:	66 56                	push   %esi
    17c1:	66 53                	push   %ebx
    17c3:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    17c9:	67 66 8b 7c 24 14    	mov    0x14(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:19
    int lhs_len = strlen(lhs);
    17cf:	66 56                	push   %esi
    17d1:	66 e8 8e ff ff ff    	calll  1765 <strlen>
    17d7:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:20
    int rhs_len = strlen(rhs);
    17da:	67 66 89 3c 24       	mov    %edi,(%esp)
    17df:	66 e8 80 ff ff ff    	calll  1765 <strlen>
    17e5:	66 83 c4 04          	add    $0x4,%esp
/mnt/e/code/my_operating_system/os/service/../lib/string.c:21
    if (lhs_len != rhs_len){
    17e9:	66 39 c3             	cmp    %eax,%ebx
    17ec:	75 25                	jne    1813 <strcmp+0x56>
    17ee:	66 b8 00 00 00 00    	mov    $0x0,%eax
    17f4:	eb 10                	jmp    1806 <strcmp+0x49>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:25
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
    17f6:	67 66 0f b6 14 07    	movzbl (%edi,%eax,1),%edx
    17fc:	67 38 14 06          	cmp    %dl,(%esi,%eax,1)
    1800:	75 19                	jne    181b <strcmp+0x5e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 2)
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
    1802:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 1)
    1806:	66 39 d8             	cmp    %ebx,%eax
    1809:	7c eb                	jl     17f6 <strcmp+0x39>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:28
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    180b:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1811:	eb 0e                	jmp    1821 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:22

int strcmp(char * lhs, char * rhs){
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    1813:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1819:	eb 06                	jmp    1821 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:26
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
            return 1;
    181b:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:29
    }
    return 0;
}
    1821:	66 5b                	pop    %ebx
    1823:	66 5e                	pop    %esi
    1825:	66 5f                	pop    %edi
    1827:	66 c3                	retl   

00001829 <strncmp>:
strncmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:31

int strncmp(char * lhs, char * rhs, int size){
    1829:	66 56                	push   %esi
    182b:	66 53                	push   %ebx
    182d:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    1833:	67 66 8b 4c 24 10    	mov    0x10(%esp),%ecx
    1839:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32
    for (int i = 0; i < size; i++){
    183f:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1845:	eb 10                	jmp    1857 <strncmp+0x2e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:33
        if (lhs[i] != rhs[i])
    1847:	67 66 0f b6 14 01    	movzbl (%ecx,%eax,1),%edx
    184d:	67 38 14 03          	cmp    %dl,(%ebx,%eax,1)
    1851:	75 11                	jne    1864 <strncmp+0x3b>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 2)
    }
    return 0;
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
    1853:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 1)
    1857:	66 39 f0             	cmp    %esi,%eax
    185a:	7c eb                	jl     1847 <strncmp+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:36
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    185c:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1862:	eb 06                	jmp    186a <strncmp+0x41>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:34
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
        if (lhs[i] != rhs[i])
            return 1;
    1864:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:37
    }
    return 0;
    186a:	66 5b                	pop    %ebx
    186c:	66 5e                	pop    %esi
    186e:	66 c3                	retl   

00001870 <move_name>:
move_name():
/mnt/e/code/my_operating_system/os/service/../lib/style.c:9

void move_name(){
    u16 *text_line = (u16*)(1920*2);
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    1870:	66 0f b7 0e 9e 0f    	movzwl 0xf9e,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10
    for (int i =78; i >= 0; i--){
    1876:	66 b8 4e 00 00 00    	mov    $0x4e,%eax
    187c:	eb 16                	jmp    1894 <move_name+0x24>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:11 (discriminator 3)
        text_line[i+1] = text_line[i];
    187e:	67 66 0f b7 94 00 00 	movzwl 0xf00(%eax,%eax,1),%edx
    1885:	0f 00 00 
    1888:	67 89 94 00 02 0f 00 	mov    %dx,0xf02(%eax,%eax,1)
    188f:	00 
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 3)
void move_name(){
    u16 *text_line = (u16*)(1920*2);
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    for (int i =78; i >= 0; i--){
    1890:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 1)
    1894:	66 85 c0             	test   %eax,%eax
    1897:	79 e5                	jns    187e <move_name+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:13
        text_line[i+1] = text_line[i];
    }
    text_line[0] = last_char;
    1899:	89 0e 00 0f          	mov    %cx,0xf00
    189d:	66 c3                	retl   
