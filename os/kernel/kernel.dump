
kernel.debug:     file format elf32-i386


Disassembly of section .text:

00000000 <_start>:
_start():
       0:	e8 05 01             	call   108 <install_int33>
       3:	e8 3b 01             	call   141 <install_int34>
       6:	e8 75 01             	call   17e <install_int35>
       9:	e8 ad 01             	call   1b9 <install_int36>
       c:	e8 a8 00             	call   b7 <install_int40>
       f:	66 e8 9e 02 00 00    	calll  2b3 <cstart>
      15:	e8 14 00             	call   2c <install_int8>
      18:	e8 74 00             	call   8f <restart>

0000001b <start_tty>:
start_tty():
      1b:	ea 00 00 00 15       	ljmp   $0x1500,$0x0
      20:	66 e8 52 06 00 00    	calll  678 <tty>
      26:	b4 02                	mov    $0x2,%ah
      28:	cd 40                	int    $0x40
      2a:	eb fe                	jmp    2a <core_code_entry_header_offset>

0000002c <install_int8>:
install_int8():
      2c:	53                   	push   %bx
      2d:	51                   	push   %cx
      2e:	52                   	push   %dx
      2f:	56                   	push   %si
      30:	57                   	push   %di
      31:	55                   	push   %bp
      32:	1e                   	push   %ds
      33:	06                   	push   %es
      34:	16                   	push   %ss
      35:	b0 34                	mov    $0x34,%al
      37:	e6 43                	out    %al,$0x43
      39:	b8 ff ff             	mov    $0xffff,%ax
      3c:	e6 40                	out    %al,$0x40
      3e:	88 e0                	mov    %ah,%al
      40:	e6 40                	out    %al,$0x40
      42:	b8 00 00             	mov    $0x0,%ax
      45:	8e d8                	mov    %ax,%ds
      47:	8c c8                	mov    %cs,%ax
      49:	a3 22 00             	mov    %ax,0x22
      4c:	c7 06 20 00 5c 00    	movw   $0x5c,0x20
      52:	17                   	pop    %ss
      53:	07                   	pop    %es
      54:	1f                   	pop    %ds
      55:	5d                   	pop    %bp
      56:	5f                   	pop    %di
      57:	5e                   	pop    %si
      58:	5a                   	pop    %dx
      59:	59                   	pop    %cx
      5a:	5b                   	pop    %bx
      5b:	c3                   	ret    

0000005c <new_int8>:
new_int8():
      5c:	66 60                	pushal 
      5e:	06                   	push   %es
      5f:	1e                   	push   %ds
      60:	54                   	push   %sp
      61:	16                   	push   %ss
      62:	89 e6                	mov    %sp,%si
      64:	b8 00 10             	mov    $0x1000,%ax
      67:	8e c0                	mov    %ax,%es
      69:	8b 3e 04 a0          	mov    -0x5ffc,%di
      6d:	b9 2e 00             	mov    $0x2e,%cx
      70:	fc                   	cld    
      71:	f3 a4                	rep movsb %ds:(%si),%es:(%di)
      73:	b8 00 10             	mov    $0x1000,%ax
      76:	8e c0                	mov    %ax,%es
      78:	8e d8                	mov    %ax,%ds
      7a:	8e d0                	mov    %ax,%ss
      7c:	bc 00 50             	mov    $0x5000,%sp
      7f:	66 e8 36 0b 00 00    	calll  bbb <schedule_process>
      85:	b0 20                	mov    $0x20,%al
      87:	e6 20                	out    %al,$0x20
      89:	e6 a0                	out    %al,$0xa0
      8b:	e8 01 00             	call   8f <restart>
      8e:	cf                   	iret   

0000008f <restart>:
restart():
      8f:	8b 2e 04 a0          	mov    -0x5ffc,%bp
      93:	89 ee                	mov    %bp,%si
      95:	83 c6 04             	add    $0x4,%si
      98:	3e 8e 46 00          	mov    %ds:0x0(%bp),%es
      9c:	3e 8b 7e 02          	mov    %ds:0x2(%bp),%di
      a0:	b9 2a 00             	mov    $0x2a,%cx
      a3:	83 ef 2a             	sub    $0x2a,%di
      a6:	fc                   	cld    
      a7:	f3 a4                	rep movsb %ds:(%si),%es:(%di)
      a9:	8c c0                	mov    %es,%ax
      ab:	83 ef 2a             	sub    $0x2a,%di
      ae:	8e d0                	mov    %ax,%ss
      b0:	89 fc                	mov    %di,%sp
      b2:	1f                   	pop    %ds
      b3:	07                   	pop    %es
      b4:	66 61                	popal  
      b6:	cf                   	iret   

000000b7 <install_int40>:
install_int40():
      b7:	53                   	push   %bx
      b8:	51                   	push   %cx
      b9:	52                   	push   %dx
      ba:	56                   	push   %si
      bb:	57                   	push   %di
      bc:	55                   	push   %bp
      bd:	1e                   	push   %ds
      be:	06                   	push   %es
      bf:	16                   	push   %ss
      c0:	b8 00 00             	mov    $0x0,%ax
      c3:	8e d8                	mov    %ax,%ds
      c5:	8c c8                	mov    %cs,%ax
      c7:	c7 06 00 01 da 00    	movw   $0xda,0x100
      cd:	a3 02 01             	mov    %ax,0x102
      d0:	17                   	pop    %ss
      d1:	07                   	pop    %es
      d2:	1f                   	pop    %ds
      d3:	5d                   	pop    %bp
      d4:	5f                   	pop    %di
      d5:	5e                   	pop    %si
      d6:	5a                   	pop    %dx
      d7:	59                   	pop    %cx
      d8:	5b                   	pop    %bx
      d9:	c3                   	ret    

000000da <new_int40>:
new_int40():
      da:	80 fc 4c             	cmp    $0x4c,%ah
      dd:	74 11                	je     f0 <new_int40.return_kernel>
      df:	88 e3                	mov    %ah,%bl
      e1:	31 c0                	xor    %ax,%ax
      e3:	b0 02                	mov    $0x2,%al
      e5:	f6 e3                	mul    %bl
      e7:	89 c6                	mov    %ax,%si
      e9:	bb 20 a0             	mov    $0xa020,%bx
      ec:	66 ff 10             	calll  *(%bx,%si)
      ef:	cf                   	iret   

000000f0 <new_int40.return_kernel>:
new_int40.return_kernel():
      f0:	59                   	pop    %cx
      f1:	59                   	pop    %cx
      f2:	59                   	pop    %cx
      f3:	b8 00 10             	mov    $0x1000,%ax
      f6:	8e d8                	mov    %ax,%ds
      f8:	8e c0                	mov    %ax,%es
      fa:	8e d0                	mov    %ax,%ss
      fc:	bc 00 50             	mov    $0x5000,%sp
      ff:	51                   	push   %cx
     100:	68 00 10             	push   $0x1000
     103:	68 1b 00             	push   $0x1b
     106:	fb                   	sti    
     107:	cf                   	iret   

00000108 <install_int33>:
install_int33():
     108:	53                   	push   %bx
     109:	51                   	push   %cx
     10a:	52                   	push   %dx
     10b:	56                   	push   %si
     10c:	57                   	push   %di
     10d:	55                   	push   %bp
     10e:	1e                   	push   %ds
     10f:	06                   	push   %es
     110:	16                   	push   %ss
     111:	b8 00 00             	mov    $0x0,%ax
     114:	8e d8                	mov    %ax,%ds
     116:	8c c8                	mov    %cs,%ax
     118:	c7 06 cc 00 2b 01    	movw   $0x12b,0xcc
     11e:	a3 ce 00             	mov    %ax,0xce
     121:	17                   	pop    %ss
     122:	07                   	pop    %es
     123:	1f                   	pop    %ds
     124:	5d                   	pop    %bp
     125:	5f                   	pop    %di
     126:	5e                   	pop    %si
     127:	5a                   	pop    %dx
     128:	59                   	pop    %cx
     129:	5b                   	pop    %bx
     12a:	c3                   	ret    

0000012b <new_int33>:
new_int33():
     12b:	53                   	push   %bx
     12c:	51                   	push   %cx
     12d:	52                   	push   %dx
     12e:	56                   	push   %si
     12f:	57                   	push   %di
     130:	55                   	push   %bp
     131:	1e                   	push   %ds
     132:	06                   	push   %es
     133:	16                   	push   %ss
     134:	89 c2                	mov    %ax,%dx
     136:	ec                   	in     (%dx),%al
     137:	17                   	pop    %ss
     138:	07                   	pop    %es
     139:	1f                   	pop    %ds
     13a:	5d                   	pop    %bp
     13b:	5f                   	pop    %di
     13c:	5e                   	pop    %si
     13d:	5a                   	pop    %dx
     13e:	59                   	pop    %cx
     13f:	5b                   	pop    %bx
     140:	cf                   	iret   

00000141 <install_int34>:
install_int34():
     141:	53                   	push   %bx
     142:	51                   	push   %cx
     143:	52                   	push   %dx
     144:	56                   	push   %si
     145:	57                   	push   %di
     146:	55                   	push   %bp
     147:	1e                   	push   %ds
     148:	06                   	push   %es
     149:	16                   	push   %ss
     14a:	b8 00 00             	mov    $0x0,%ax
     14d:	8e d8                	mov    %ax,%ds
     14f:	8c c8                	mov    %cs,%ax
     151:	c7 06 d0 00 64 01    	movw   $0x164,0xd0
     157:	a3 d2 00             	mov    %ax,0xd2
     15a:	17                   	pop    %ss
     15b:	07                   	pop    %es
     15c:	1f                   	pop    %ds
     15d:	5d                   	pop    %bp
     15e:	5f                   	pop    %di
     15f:	5e                   	pop    %si
     160:	5a                   	pop    %dx
     161:	59                   	pop    %cx
     162:	5b                   	pop    %bx
     163:	c3                   	ret    

00000164 <new_int34>:
new_int34():
     164:	50                   	push   %ax
     165:	53                   	push   %bx
     166:	51                   	push   %cx
     167:	52                   	push   %dx
     168:	56                   	push   %si
     169:	57                   	push   %di
     16a:	55                   	push   %bp
     16b:	1e                   	push   %ds
     16c:	06                   	push   %es
     16d:	16                   	push   %ss
     16e:	89 da                	mov    %bx,%dx
     170:	88 c0                	mov    %al,%al
     172:	ee                   	out    %al,(%dx)
     173:	17                   	pop    %ss
     174:	07                   	pop    %es
     175:	1f                   	pop    %ds
     176:	5d                   	pop    %bp
     177:	5f                   	pop    %di
     178:	5e                   	pop    %si
     179:	5a                   	pop    %dx
     17a:	59                   	pop    %cx
     17b:	5b                   	pop    %bx
     17c:	58                   	pop    %ax
     17d:	cf                   	iret   

0000017e <install_int35>:
install_int35():
     17e:	53                   	push   %bx
     17f:	51                   	push   %cx
     180:	52                   	push   %dx
     181:	56                   	push   %si
     182:	57                   	push   %di
     183:	55                   	push   %bp
     184:	1e                   	push   %ds
     185:	06                   	push   %es
     186:	16                   	push   %ss
     187:	b8 00 00             	mov    $0x0,%ax
     18a:	8e d8                	mov    %ax,%ds
     18c:	8c c8                	mov    %cs,%ax
     18e:	c7 06 d4 00 a1 01    	movw   $0x1a1,0xd4
     194:	a3 d6 00             	mov    %ax,0xd6
     197:	17                   	pop    %ss
     198:	07                   	pop    %es
     199:	1f                   	pop    %ds
     19a:	5d                   	pop    %bp
     19b:	5f                   	pop    %di
     19c:	5e                   	pop    %si
     19d:	5a                   	pop    %dx
     19e:	59                   	pop    %cx
     19f:	5b                   	pop    %bx
     1a0:	c3                   	ret    

000001a1 <new_int35>:
new_int35():
     1a1:	53                   	push   %bx
     1a2:	51                   	push   %cx
     1a3:	52                   	push   %dx
     1a4:	56                   	push   %si
     1a5:	57                   	push   %di
     1a6:	55                   	push   %bp
     1a7:	1e                   	push   %ds
     1a8:	06                   	push   %es
     1a9:	16                   	push   %ss
     1aa:	8e c0                	mov    %ax,%es
     1ac:	26 8a 07             	mov    %es:(%bx),%al
     1af:	17                   	pop    %ss
     1b0:	07                   	pop    %es
     1b1:	1f                   	pop    %ds
     1b2:	5d                   	pop    %bp
     1b3:	5f                   	pop    %di
     1b4:	5e                   	pop    %si
     1b5:	5a                   	pop    %dx
     1b6:	59                   	pop    %cx
     1b7:	5b                   	pop    %bx
     1b8:	cf                   	iret   

000001b9 <install_int36>:
install_int36():
     1b9:	53                   	push   %bx
     1ba:	51                   	push   %cx
     1bb:	52                   	push   %dx
     1bc:	56                   	push   %si
     1bd:	57                   	push   %di
     1be:	55                   	push   %bp
     1bf:	1e                   	push   %ds
     1c0:	06                   	push   %es
     1c1:	16                   	push   %ss
     1c2:	b8 00 00             	mov    $0x0,%ax
     1c5:	8e d8                	mov    %ax,%ds
     1c7:	8c c8                	mov    %cs,%ax
     1c9:	c7 06 d8 00 dc 01    	movw   $0x1dc,0xd8
     1cf:	a3 da 00             	mov    %ax,0xda
     1d2:	17                   	pop    %ss
     1d3:	07                   	pop    %es
     1d4:	1f                   	pop    %ds
     1d5:	5d                   	pop    %bp
     1d6:	5f                   	pop    %di
     1d7:	5e                   	pop    %si
     1d8:	5a                   	pop    %dx
     1d9:	59                   	pop    %cx
     1da:	5b                   	pop    %bx
     1db:	c3                   	ret    

000001dc <new_int36>:
new_int36():
     1dc:	50                   	push   %ax
     1dd:	53                   	push   %bx
     1de:	51                   	push   %cx
     1df:	52                   	push   %dx
     1e0:	56                   	push   %si
     1e1:	57                   	push   %di
     1e2:	55                   	push   %bp
     1e3:	1e                   	push   %ds
     1e4:	06                   	push   %es
     1e5:	16                   	push   %ss
     1e6:	8e c0                	mov    %ax,%es
     1e8:	26 88 0f             	mov    %cl,%es:(%bx)
     1eb:	17                   	pop    %ss
     1ec:	07                   	pop    %es
     1ed:	1f                   	pop    %ds
     1ee:	5d                   	pop    %bp
     1ef:	5f                   	pop    %di
     1f0:	5e                   	pop    %si
     1f1:	5a                   	pop    %dx
     1f2:	59                   	pop    %cx
     1f3:	5b                   	pop    %bx
     1f4:	58                   	pop    %ax
     1f5:	cf                   	iret   

000001f6 <init_process>:
init_process():
/mnt/e/code/my_operating_system/os/kernel/start.c:29
    cur_process_index = 0;
    cur_process = &process_table[cur_process_index];
    return 0;
}

void init_process(int process_index, u16 segment){
     1f6:	66 53                	push   %ebx
     1f8:	67 66 8b 4c 24 08    	mov    0x8(%esp),%ecx
     1fe:	67 66 8b 54 24 0c    	mov    0xc(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/start.c:31
    PCB_t* this_process = &process_table[process_index];
    this_process->regs.ss = segment;
     204:	66 89 c8             	mov    %ecx,%eax
     207:	66 c1 e0 06          	shl    $0x6,%eax
     20b:	67 66 8d 1c 88       	lea    (%eax,%ecx,4),%ebx
     210:	67 89 93 00 5c 00 00 	mov    %dx,0x5c00(%ebx)
/mnt/e/code/my_operating_system/os/kernel/start.c:32
    this_process->regs.sp = 0x5000;
     217:	67 c7 83 02 5c 00 00 	movw   $0x5000,0x5c02(%ebx)
     21e:	00 50 
/mnt/e/code/my_operating_system/os/kernel/start.c:33
    this_process->regs.ds = segment;
     220:	67 89 93 04 5c 00 00 	mov    %dx,0x5c04(%ebx)
/mnt/e/code/my_operating_system/os/kernel/start.c:34
    this_process->regs.es = segment;
     227:	67 89 93 06 5c 00 00 	mov    %dx,0x5c06(%ebx)
/mnt/e/code/my_operating_system/os/kernel/start.c:35
    this_process->regs.edi = 0;
     22e:	67 66 c7 83 08 5c 00 	movl   $0x0,0x5c08(%ebx)
     235:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:36
    this_process->regs.esi = 0;
     23a:	67 66 c7 83 0c 5c 00 	movl   $0x0,0x5c0c(%ebx)
     241:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:37
    this_process->regs.ebp = 0x5000;
     246:	67 66 c7 83 10 5c 00 	movl   $0x5000,0x5c10(%ebx)
     24d:	00 00 50 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:38
    this_process->regs.kernel_esp = 0;
     252:	67 66 c7 83 14 5c 00 	movl   $0x0,0x5c14(%ebx)
     259:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:39
    this_process->regs.ebx = 0;
     25e:	67 66 c7 83 18 5c 00 	movl   $0x0,0x5c18(%ebx)
     265:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:40
    this_process->regs.edx = 0;
     26a:	67 66 c7 83 1c 5c 00 	movl   $0x0,0x5c1c(%ebx)
     271:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:41
    this_process->regs.ecx = 0;
     276:	67 66 c7 83 20 5c 00 	movl   $0x0,0x5c20(%ebx)
     27d:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:42
    this_process->regs.eax = 0;
     282:	67 66 c7 83 24 5c 00 	movl   $0x0,0x5c24(%ebx)
     289:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:43
    this_process->regs.ip = 0x0000;
     28e:	67 c7 83 28 5c 00 00 	movw   $0x0,0x5c28(%ebx)
     295:	00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:44
    this_process->regs.cs = segment;
     297:	67 89 93 2a 5c 00 00 	mov    %dx,0x5c2a(%ebx)
/mnt/e/code/my_operating_system/os/kernel/start.c:45
    this_process->regs.flags = 0x1202;
     29e:	67 c7 83 2c 5c 00 00 	movw   $0x1202,0x5c2c(%ebx)
     2a5:	02 12 
/mnt/e/code/my_operating_system/os/kernel/start.c:46
    this_process->pid = process_index;
     2a7:	67 66 89 8b 30 5c 00 	mov    %ecx,0x5c30(%ebx)
     2ae:	00 
/mnt/e/code/my_operating_system/os/kernel/start.c:48
    // this_process->p_name = 0;TODO:实现strcpy函数再说。
};
     2af:	66 5b                	pop    %ebx
     2b1:	66 c3                	retl   

000002b3 <cstart>:
cstart():
/mnt/e/code/my_operating_system/os/kernel/start.c:11
#include "../include/system_call.h"
#include "../include/fsystem.h"
#include "../include/proc.h"

void test_system_call();
int cstart(){
     2b3:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:13
    // 初始化文件系统
    init_fsystem();
     2b7:	66 e8 80 05 00 00    	calll  83d <init_fsystem>
/mnt/e/code/my_operating_system/os/kernel/start.c:15
    // 清屏
    clean_screen();
     2bd:	66 e8 4f 13 00 00    	calll  1612 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/start.c:17
    // 将光标设置为0 TODO:
    set_cursor(0);
     2c3:	66 83 ec 0c          	sub    $0xc,%esp
     2c7:	66 6a 00             	pushl  $0x0
     2ca:	66 e8 5d 09 00 00    	calll  c2d <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:19
    // install_system_call(2, test_system_call);
    fs_load_by_name("test_a.bin", 0x2000, 0x0000);
     2d0:	66 83 c4 0c          	add    $0xc,%esp
     2d4:	66 6a 00             	pushl  $0x0
     2d7:	66 68 00 20 00 00    	pushl  $0x2000
     2dd:	66 68 06 18 00 00    	pushl  $0x1806
     2e3:	66 e8 c5 07 00 00    	calll  aae <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:20
    fs_load_by_name("test_b.bin", 0x3000, 0x0000);
     2e9:	66 83 c4 0c          	add    $0xc,%esp
     2ed:	66 6a 00             	pushl  $0x0
     2f0:	66 68 00 30 00 00    	pushl  $0x3000
     2f6:	66 68 11 18 00 00    	pushl  $0x1811
     2fc:	66 e8 ac 07 00 00    	calll  aae <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:22
    // while (1){}
    init_process(0, 0x2000);
     302:	66 83 c4 08          	add    $0x8,%esp
     306:	66 68 00 20 00 00    	pushl  $0x2000
     30c:	66 6a 00             	pushl  $0x0
     30f:	66 e8 e1 fe ff ff    	calll  1f6 <init_process>
/mnt/e/code/my_operating_system/os/kernel/start.c:23
    init_process(1, 0x3000);
     315:	66 83 c4 08          	add    $0x8,%esp
     319:	66 68 00 30 00 00    	pushl  $0x3000
     31f:	66 6a 01             	pushl  $0x1
     322:	66 e8 ce fe ff ff    	calll  1f6 <init_process>
/mnt/e/code/my_operating_system/os/kernel/start.c:24
    cur_process_index = 0;
     328:	c7 06 00 a0 00 00    	movw   $0x0,-0x6000
/mnt/e/code/my_operating_system/os/kernel/start.c:25
    cur_process = &process_table[cur_process_index];
     32e:	66 c7 06 04 a0 00 5c 	movl   $0x5c00,-0x5ffc
     335:	00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:27
    return 0;
}
     337:	66 b8 00 00 00 00    	mov    $0x0,%eax
     33d:	66 83 c4 1c          	add    $0x1c,%esp
     341:	66 c3                	retl   

00000343 <parser>:
parser():
/mnt/e/code/my_operating_system/os/kernel/tty.c:89
    }
    return ;
}


void parser(){
     343:	66 56                	push   %esi
     345:	66 53                	push   %ebx
     347:	66 83 ec 74          	sub    $0x74,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:93
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
     34b:	66 be 00 00 00 00    	mov    $0x0,%esi
/mnt/e/code/my_operating_system/os/kernel/tty.c:92


void parser(){
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
     351:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:91
}


void parser(){
    char arguments[10][10];
    int input_start = 0;
     357:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     35d:	eb 64                	jmp    3c3 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:96
        if(input_buf[input_end] == ' ' || input_buf[input_end] == '\0'){
     35f:	67 66 0f b6 83 20 50 	movzbl 0x5020(%ebx),%eax
     366:	00 00 
     368:	3c 20                	cmp    $0x20,%al
     36a:	0f 94 c1             	sete   %cl
     36d:	84 c0                	test   %al,%al
     36f:	0f 94 c0             	sete   %al
     372:	08 c1                	or     %al,%cl
     374:	74 49                	je     3bf <parser+0x7c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:97
            if (input_start == input_end){ // 如果并没有参数，那么继续
     376:	66 39 da             	cmp    %ebx,%edx
     379:	75 0a                	jne    385 <parser+0x42>
/mnt/e/code/my_operating_system/os/kernel/tty.c:98
                input_start++;
     37b:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:99
                input_end++;
     37f:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:100
                continue;
     383:	eb 3e                	jmp    3c3 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:103
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
     385:	66 89 d9             	mov    %ebx,%ecx
     388:	66 29 d1             	sub    %edx,%ecx
     38b:	67 66 8d 04 b6       	lea    (%esi,%esi,4),%eax
     390:	67 66 8d 44 44 0c    	lea    0xc(%esp,%eax,2),%eax
     396:	66 83 ec 04          	sub    $0x4,%esp
     39a:	66 51                	push   %ecx
     39c:	66 81 c2 20 50 00 00 	add    $0x5020,%edx
     3a3:	66 52                	push   %edx
     3a5:	66 50                	push   %eax
     3a7:	66 e8 3b 13 00 00    	calll  16e8 <strncpy>
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
     3ad:	67 66 8d 53 01       	lea    0x1(%ebx),%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:106
                input_start = input_end;
                arguments_num++;
     3b2:	66 83 c6 01          	add    $0x1,%esi
     3b6:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
                continue;
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
                input_end++;
     3ba:	66 89 d3             	mov    %edx,%ebx
     3bd:	eb 04                	jmp    3c3 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:110
                input_start = input_end;
                arguments_num++;
            }
        }
        else {// 有参数，还没有读到末尾
            input_end++;
     3bf:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     3c3:	66 3b 1e 00 50       	cmp    0x5000,%ebx
     3c8:	7e 95                	jle    35f <parser+0x1c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:117
        }
    }

    // 完成分词，开始进行解析。

    if(!strcmp(arguments[0],"run")){// 如果返回0，就是相等了
     3ca:	66 83 ec 08          	sub    $0x8,%esp
     3ce:	66 68 1c 18 00 00    	pushl  $0x181c
     3d4:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     3da:	66 50                	push   %eax
     3dc:	66 e8 42 13 00 00    	calll  1724 <strcmp>
     3e2:	66 83 c4 10          	add    $0x10,%esp
     3e6:	66 85 c0             	test   %eax,%eax
     3e9:	75 31                	jne    41c <parser+0xd9>
/mnt/e/code/my_operating_system/os/kernel/tty.c:122
        // 运行一个用户程序。
        // 先从软盘中加载一个指定程序到内存处，然后开始执行。
        // 考虑维护一个空闲空间的指针，然后每加载一个程序，如果可行的话。
        void (**my_program)();
        *my_program = 0x4000;
     3eb:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     3f1:	67 66 c7 03 00 40 00 	movl   $0x4000,(%ebx)
     3f8:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:123
        fs_load_by_name(arguments[1],*my_program);
     3f9:	66 83 ec 08          	sub    $0x8,%esp
     3fd:	66 68 00 40 00 00    	pushl  $0x4000
     403:	67 66 8d 44 24 22    	lea    0x22(%esp),%eax
     409:	66 50                	push   %eax
     40b:	66 e8 9d 06 00 00    	calll  aae <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/tty.c:124
        (*my_program)();
     411:	67 66 ff 13          	calll  *(%ebx)
     415:	66 83 c4 10          	add    $0x10,%esp
     419:	e9 1b 01             	jmp    537 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     41c:	66 83 ec 08          	sub    $0x8,%esp
     420:	66 68 20 18 00 00    	pushl  $0x1820
     426:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     42c:	66 50                	push   %eax
     42e:	66 e8 f0 12 00 00    	calll  1724 <strcmp>
     434:	66 83 c4 10          	add    $0x10,%esp
     438:	66 85 c0             	test   %eax,%eax
     43b:	75 23                	jne    460 <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126 (discriminator 1)
     43d:	66 83 fe 01          	cmp    $0x1,%esi
     441:	75 1d                	jne    460 <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:127
        printf("\n\n");
     443:	66 83 ec 0c          	sub    $0xc,%esp
     447:	66 68 23 18 00 00    	pushl  $0x1823
     44d:	66 e8 23 0e 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:128
        fs_show_root_file_table();
     453:	66 e8 d5 06 00 00    	calll  b2e <fs_show_root_file_table>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
        void (**my_program)();
        *my_program = 0x4000;
        fs_load_by_name(arguments[1],*my_program);
        (*my_program)();
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     459:	66 83 c4 10          	add    $0x10,%esp
     45d:	e9 d7 00             	jmp    537 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     460:	66 83 ec 08          	sub    $0x8,%esp
     464:	66 68 26 18 00 00    	pushl  $0x1826
     46a:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     470:	66 50                	push   %eax
     472:	66 e8 ac 12 00 00    	calll  1724 <strcmp>
     478:	66 83 c4 10          	add    $0x10,%esp
     47c:	66 85 c0             	test   %eax,%eax
     47f:	75 23                	jne    4a4 <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130 (discriminator 1)
     481:	66 83 fe 01          	cmp    $0x1,%esi
     485:	75 1d                	jne    4a4 <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:131
        printf("\n\n");
     487:	66 83 ec 0c          	sub    $0xc,%esp
     48b:	66 68 23 18 00 00    	pushl  $0x1823
     491:	66 e8 df 0d 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:132
        reboot();
     497:	66 e8 1d 12 00 00    	calll  16ba <reboot>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     49d:	66 83 c4 10          	add    $0x10,%esp
     4a1:	e9 93 00             	jmp    537 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134
        printf("\n\n");
        reboot();
    }
    else if(!strcmp(arguments[0],"help") && arguments_num == 1){
     4a4:	66 83 ec 08          	sub    $0x8,%esp
     4a8:	66 68 2d 18 00 00    	pushl  $0x182d
     4ae:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     4b4:	66 50                	push   %eax
     4b6:	66 e8 68 12 00 00    	calll  1724 <strcmp>
     4bc:	66 83 c4 10          	add    $0x10,%esp
     4c0:	66 85 c0             	test   %eax,%eax
     4c3:	75 58                	jne    51d <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134 (discriminator 1)
     4c5:	66 83 fe 01          	cmp    $0x1,%esi
     4c9:	75 52                	jne    51d <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:135
        printf("\n\n");
     4cb:	66 83 ec 0c          	sub    $0xc,%esp
     4cf:	66 68 23 18 00 00    	pushl  $0x1823
     4d5:	66 e8 9b 0d 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:136
        printf("ls        : show the file in the root folder.\n");
     4db:	67 66 c7 04 24 c8 20 	movl   $0x20c8,(%esp)
     4e2:	00 00 
     4e4:	66 e8 8c 0d 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:137
        printf("run [name]: run the file in the root folder.\n");
     4ea:	67 66 c7 04 24 f8 20 	movl   $0x20f8,(%esp)
     4f1:	00 00 
     4f3:	66 e8 7d 0d 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:138
        printf("help      : show the help message.\n");
     4f9:	67 66 c7 04 24 28 21 	movl   $0x2128,(%esp)
     500:	00 00 
     502:	66 e8 6e 0d 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:139
        printf("reboot    : reboot the machine.\n");
     508:	67 66 c7 04 24 4c 21 	movl   $0x214c,(%esp)
     50f:	00 00 
     511:	66 e8 5f 0d 00 00    	calll  1276 <printf>
     517:	66 83 c4 10          	add    $0x10,%esp
     51b:	eb 1a                	jmp    537 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:142
    }
    else {
        printf("\n%s : command not found! \n", input_buf);
     51d:	66 83 ec 08          	sub    $0x8,%esp
     521:	66 68 20 50 00 00    	pushl  $0x5020
     527:	66 68 32 18 00 00    	pushl  $0x1832
     52d:	66 e8 43 0d 00 00    	calll  1276 <printf>
     533:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:144
    }
    int current_cursor = get_cursor();
     537:	66 e8 62 07 00 00    	calll  c9f <get_cursor>
     53d:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:145
    command_line_row = (current_cursor / 80);
     541:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     547:	66 f7 ea             	imul   %edx
     54a:	66 c1 fa 05          	sar    $0x5,%edx
     54e:	66 89 16 04 40       	mov    %edx,0x4004
/mnt/e/code/my_operating_system/os/kernel/tty.c:148
    // printf("arguments: %d|%s|%s|",arguments_num, arguments[0],arguments[1]);
    return ;
}
     553:	66 83 c4 74          	add    $0x74,%esp
     557:	66 5b                	pop    %ebx
     559:	66 5e                	pop    %esi
     55b:	66 c3                	retl   

0000055d <create_a_line>:
create_a_line():
/mnt/e/code/my_operating_system/os/kernel/tty.c:151

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
     55d:	66 83 ec 2c          	sub    $0x2c,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:152
    char message[30] = "walker@walker-pc ~ $ \0";
     561:	66 a1 98 21          	mov    0x2198,%eax
     565:	67 66 89 44 24 02    	mov    %eax,0x2(%esp)
     56b:	66 a1 9c 21          	mov    0x219c,%eax
     56f:	67 66 89 44 24 06    	mov    %eax,0x6(%esp)
     575:	66 a1 a0 21          	mov    0x21a0,%eax
     579:	67 66 89 44 24 0a    	mov    %eax,0xa(%esp)
     57f:	66 a1 a4 21          	mov    0x21a4,%eax
     583:	67 66 89 44 24 0e    	mov    %eax,0xe(%esp)
     589:	66 a1 a8 21          	mov    0x21a8,%eax
     58d:	67 66 89 44 24 12    	mov    %eax,0x12(%esp)
     593:	66 0f b7 06 ac 21    	movzwl 0x21ac,%eax
     599:	67 89 44 24 16       	mov    %ax,0x16(%esp)
     59e:	66 0f b6 06 ae 21    	movzbl 0x21ae,%eax
     5a4:	67 88 44 24 18       	mov    %al,0x18(%esp)
     5a9:	67 66 c7 44 24 19 00 	movl   $0x0,0x19(%esp)
     5b0:	00 00 00 
     5b3:	67 c7 44 24 1d 00 00 	movw   $0x0,0x1d(%esp)
     5ba:	67 c6 44 24 1f 00    	movb   $0x0,0x1f(%esp)
/mnt/e/code/my_operating_system/os/kernel/tty.c:153
    for (int i = 0; i < MAX_BUF; i++){
     5c0:	66 b8 00 00 00 00    	mov    $0x0,%eax
     5c6:	eb 0c                	jmp    5d4 <create_a_line+0x77>
/mnt/e/code/my_operating_system/os/kernel/tty.c:154 (discriminator 3)
        input_buf[i] = 0;
     5c8:	67 c6 80 20 50 00 00 	movb   $0x0,0x5020(%eax)
     5cf:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 3)
}

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    char message[30] = "walker@walker-pc ~ $ \0";
    for (int i = 0; i < MAX_BUF; i++){
     5d0:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 1)
     5d4:	66 83 f8 63          	cmp    $0x63,%eax
     5d8:	7e ee                	jle    5c8 <create_a_line+0x6b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:156
        input_buf[i] = 0;
    }
    message_length = strlen(message);
     5da:	66 83 ec 0c          	sub    $0xc,%esp
     5de:	67 66 8d 44 24 0e    	lea    0xe(%esp),%eax
     5e4:	66 50                	push   %eax
     5e6:	66 e8 e0 10 00 00    	calll  16cc <strlen>
     5ec:	66 a3 04 50          	mov    %eax,0x5004
/mnt/e/code/my_operating_system/os/kernel/tty.c:157
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
     5f0:	66 03 06 00 50       	add    0x5000,%eax
     5f5:	66 89 c1             	mov    %eax,%ecx
     5f8:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     5fe:	66 f7 ea             	imul   %edx
     601:	66 c1 fa 05          	sar    $0x5,%edx
     605:	66 c1 f9 1f          	sar    $0x1f,%ecx
     609:	66 29 ca             	sub    %ecx,%edx
     60c:	66 89 d0             	mov    %edx,%eax
     60f:	66 03 06 04 40       	add    0x4004,%eax
     614:	66 83 c0 01          	add    $0x1,%eax
     618:	66 a3 04 40          	mov    %eax,0x4004
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    while(command_line_row > 23){
     61c:	66 83 c4 10          	add    $0x10,%esp
     620:	eb 0c                	jmp    62e <create_a_line+0xd1>
/mnt/e/code/my_operating_system/os/kernel/tty.c:159
        scroll_screen();
     622:	66 e8 04 10 00 00    	calll  162c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:160
        command_line_row--;
     628:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    for (int i = 0; i < MAX_BUF; i++){
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    while(command_line_row > 23){
     62e:	66 a1 04 40          	mov    0x4004,%eax
     632:	66 83 f8 17          	cmp    $0x17,%eax
     636:	7f ea                	jg     622 <create_a_line+0xc5>
/mnt/e/code/my_operating_system/os/kernel/tty.c:162
        scroll_screen();
        command_line_row--;
    }
    command_line_cursor = 0;
     638:	66 c7 06 00 50 00 00 	movl   $0x0,0x5000
     63f:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:163
    set_cursor(command_line_row * 80);
     641:	66 83 ec 0c          	sub    $0xc,%esp
     645:	67 66 8d 04 80       	lea    (%eax,%eax,4),%eax
     64a:	66 c1 e0 04          	shl    $0x4,%eax
     64e:	66 0f b7 d0          	movzwl %ax,%edx
     652:	66 52                	push   %edx
     654:	66 e8 d3 05 00 00    	calll  c2d <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:165
    // printf("%d", command_line_row);
    printf("%s", message);
     65a:	66 83 c4 08          	add    $0x8,%esp
     65e:	67 66 8d 44 24 0a    	lea    0xa(%esp),%eax
     664:	66 50                	push   %eax
     666:	66 68 4d 18 00 00    	pushl  $0x184d
     66c:	66 e8 04 0c 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:166
}
     672:	66 83 c4 3c          	add    $0x3c,%esp
     676:	66 c3                	retl   

00000678 <tty>:
tty():
/mnt/e/code/my_operating_system/os/kernel/tty.c:19
int message_length = 0;
int command_line_cursor = 0; // 光标在输入区的偏移量
char input_buf[MAX_BUF]; // 输入缓存区


void tty(){
     678:	66 56                	push   %esi
     67a:	66 53                	push   %ebx
     67c:	66 83 ec 04          	sub    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:21
    int keyboard_flag = 0;
    new_line_flag = 1;
     680:	66 c7 06 00 40 01 00 	movl   $0x1,0x4000
     687:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:22
    command_line_row = -1;
     689:	66 c7 06 04 40 ff ff 	movl   $0xffffffff,0x4004
     690:	ff ff 
/mnt/e/code/my_operating_system/os/kernel/tty.c:23
    clean_screen();
     692:	66 e8 7a 0f 00 00    	calll  1612 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:24
    set_cursor(1974);
     698:	66 83 ec 0c          	sub    $0xc,%esp
     69c:	66 68 b6 07 00 00    	pushl  $0x7b6
     6a2:	66 e8 85 05 00 00    	calll  c2d <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:25
    set_cursor(0);
     6a8:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
     6af:	00 00 
     6b1:	66 e8 76 05 00 00    	calll  c2d <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:26
    print_my_name();
     6b7:	66 e8 d3 0f 00 00    	calll  1690 <print_my_name>
     6bd:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:29
    while (1){
        // 使用缓冲区数据更新
        if (new_line_flag){
     6c1:	66 83 3e 00 40 00    	cmpl   $0x0,0x4000
     6c7:	74 0f                	je     6d8 <tty+0x60>
/mnt/e/code/my_operating_system/os/kernel/tty.c:30
            create_a_line();
     6c9:	66 e8 8e fe ff ff    	calll  55d <create_a_line>
/mnt/e/code/my_operating_system/os/kernel/tty.c:31
            new_line_flag = 0;
     6cf:	66 c7 06 00 40 00 00 	movl   $0x0,0x4000
     6d6:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:34
        }

        if(command_line_row == 23 && message_length + command_line_cursor > 80){
     6d8:	66 83 3e 04 40 17    	cmpl   $0x17,0x4004
     6de:	75 2f                	jne    70f <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:34 (discriminator 1)
     6e0:	66 a1 00 50          	mov    0x5000,%eax
     6e4:	66 03 06 04 50       	add    0x5004,%eax
     6e9:	66 83 f8 50          	cmp    $0x50,%eax
     6ed:	7e 20                	jle    70f <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:35
            scroll_screen();
     6ef:	66 e8 37 0f 00 00    	calll  162c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:36
            command_line_row--;
     6f5:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/kernel/tty.c:37
            set_cursor(1840);
     6fb:	66 83 ec 0c          	sub    $0xc,%esp
     6ff:	66 68 30 07 00 00    	pushl  $0x730
     705:	66 e8 22 05 00 00    	calll  c2d <set_cursor>
     70b:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:39
        }
        putc(' ');// 用来删除光标处的文字，与输入退格的时候光标-1配合使用
     70f:	66 83 ec 0c          	sub    $0xc,%esp
     713:	66 6a 20             	pushl  $0x20
     716:	66 e8 df 05 00 00    	calll  cfb <putc>
/mnt/e/code/my_operating_system/os/kernel/tty.c:42

        // command_line_row = get_cursor() / 80;
        set_cursor(80*command_line_row + message_length);
     71c:	66 8b 16 04 40       	mov    0x4004,%edx
     721:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     726:	66 89 d0             	mov    %edx,%eax
     729:	66 c1 e0 04          	shl    $0x4,%eax
     72d:	03 06 04 50          	add    0x5004,%ax
     731:	66 0f b7 c0          	movzwl %ax,%eax
     735:	67 66 89 04 24       	mov    %eax,(%esp)
     73a:	66 e8 ed 04 00 00    	calll  c2d <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:43
        puts(input_buf, command_line_cursor);
     740:	66 83 c4 08          	add    $0x8,%esp
     744:	66 ff 36 00 50       	pushl  0x5000
     749:	66 68 20 50 00 00    	pushl  $0x5020
     74f:	66 e8 9b 07 00 00    	calll  ef0 <puts>
/mnt/e/code/my_operating_system/os/kernel/tty.c:46

        // 更新完了 检测键盘
        keyboard_flag = check_keyboard();
     755:	66 e8 a1 0e 00 00    	calll  15fc <check_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:49

        // 如果返回1，则有输入，处理输入信息，否则继续循环。
        if (keyboard_flag){
     75b:	66 83 c4 10          	add    $0x10,%esp
     75f:	85 c0                	test   %ax,%ax
     761:	0f 84 5c ff          	je     6c1 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:51
            // 处理键盘事件
            u16 keyboard_code =  get_keyboard();
     765:	66 e8 a1 0e 00 00    	calll  160c <get_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:52
            u8 ascii_code = keyboard_code;
     76b:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:54
            u8 scan_code = keyboard_code >> 8;
            if (isprint(ascii_code)){
     76e:	66 83 ec 0c          	sub    $0xc,%esp
     772:	66 0f b6 c0          	movzbl %al,%eax
     776:	66 50                	push   %eax
     778:	66 e8 53 0c 00 00    	calll  13d1 <isprint>
     77e:	66 83 c4 10          	add    $0x10,%esp
     782:	66 85 c0             	test   %eax,%eax
     785:	74 20                	je     7a7 <tty+0x12f>
/mnt/e/code/my_operating_system/os/kernel/tty.c:55
                if (command_line_cursor <= MAX_BUF){
     787:	66 a1 00 50          	mov    0x5000,%eax
     78b:	66 83 f8 64          	cmp    $0x64,%eax
     78f:	0f 8f 2e ff          	jg     6c1 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:56
                    input_buf[command_line_cursor++] = ascii_code;
     793:	67 66 8d 50 01       	lea    0x1(%eax),%edx
     798:	66 89 16 00 50       	mov    %edx,0x5000
     79d:	67 88 98 20 50 00 00 	mov    %bl,0x5020(%eax)
     7a4:	e9 1a ff             	jmp    6c1 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:59
                }
            }
            else if (ascii_code == 13){
     7a7:	80 fb 0d             	cmp    $0xd,%bl
     7aa:	75 1e                	jne    7ca <tty+0x152>
/mnt/e/code/my_operating_system/os/kernel/tty.c:60
                new_line_flag = 1;
     7ac:	66 c7 06 00 40 01 00 	movl   $0x1,0x4000
     7b3:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:61
                input_buf[command_line_cursor] = '\0';
     7b5:	66 a1 00 50          	mov    0x5000,%eax
     7b9:	67 c6 80 20 50 00 00 	movb   $0x0,0x5020(%eax)
     7c0:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:62
                parser();
     7c1:	66 e8 7c fb ff ff    	calll  343 <parser>
     7c7:	e9 f7 fe             	jmp    6c1 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:64
            }
            else if (ascii_code == 8){
     7ca:	80 fb 08             	cmp    $0x8,%bl
     7cd:	75 3e                	jne    80d <loader_code_segment+0xd>
/mnt/e/code/my_operating_system/os/kernel/tty.c:65
                if(command_line_cursor){
     7cf:	66 a1 00 50          	mov    0x5000,%eax
     7d3:	66 85 c0             	test   %eax,%eax
     7d6:	0f 84 e7 fe          	je     6c1 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:66
                    input_buf[--command_line_cursor] = 0;
     7da:	67 66 8d 50 ff       	lea    -0x1(%eax),%edx
     7df:	66 89 16 00 50       	mov    %edx,0x5000
     7e4:	67 c6 80 1f 50 00 00 	movb   $0x0,0x501f(%eax)
     7eb:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:68
                    // 将光标设置为前一个位置，方便删除
                    int cur_cursor = get_cursor();
     7ec:	66 e8 ad 04 00 00    	calll  c9f <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:69
                    set_cursor(cur_cursor-1);
     7f2:	66 83 ec 0c          	sub    $0xc,%esp
     7f6:	66 83 e8 01          	sub    $0x1,%eax
     7fa:	66 0f b7 c0          	movzwl %ax,%eax
     7fe:	66 50                	push   %eax
     800:	66 e8 27 04 00 00    	calll  c2d <set_cursor>
     806:	66 83 c4 10          	add    $0x10,%esp
     80a:	e9 b4 fe             	jmp    6c1 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:72
                }
            }
            else if (ascii_code == 27){
     80d:	80 fb 1b             	cmp    $0x1b,%bl
     810:	0f 85 ad fe          	jne    6c1 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:73
                __asm__("mov $0x4c00, %ax");
     814:	b8 00 4c             	mov    $0x4c00,%ax
/mnt/e/code/my_operating_system/os/kernel/tty.c:74
                __asm__("int $0x40");
     817:	cd 40                	int    $0x40
     819:	e9 a5 fe             	jmp    6c1 <tty+0x49>

0000081c <tty_scroll_screen>:
tty_scroll_screen():
/mnt/e/code/my_operating_system/os/kernel/tty.c:169
    // printf("%d", command_line_row);
    printf("%s", message);
}


void tty_scroll_screen(){
     81c:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:170
    if (get_cursor()/80 > 24){
     820:	66 e8 79 04 00 00    	calll  c9f <get_cursor>
     826:	3d cf 07             	cmp    $0x7cf,%ax
     829:	76 0c                	jbe    837 <tty_scroll_screen+0x1b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:171
        scroll_screen();
     82b:	66 e8 fb 0d 00 00    	calll  162c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:172
        command_line_row--;
     831:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/kernel/tty.c:175
    }
    return ;
     837:	66 83 c4 0c          	add    $0xc,%esp
     83b:	66 c3                	retl   

0000083d <init_fsystem>:
init_fsystem():
/mnt/e/code/my_operating_system/os/service/fsystem.c:14
FileDescriptor root[56];
u16 root_sector;
u16 first_cluster_by_sector;
u16 cluster2sector;

void init_fsystem(){
     83d:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:15
    cluster2sector = 1;
     841:	c7 06 c0 5b 01 00    	movw   $0x1,0x5bc0
/mnt/e/code/my_operating_system/os/service/fsystem.c:16
    root_sector = 37;
     847:	c7 06 a0 50 25 00    	movw   $0x25,0x50a0
/mnt/e/code/my_operating_system/os/service/fsystem.c:17
    first_cluster_by_sector = root_sector + 1;  
     84d:	c7 06 c2 5b 26 00    	movw   $0x26,0x5bc2
/mnt/e/code/my_operating_system/os/service/fsystem.c:18
    read_n_sector(root_sector,1, 0x1000, root);
     853:	66 b8 c0 54 00 00    	mov    $0x54c0,%eax
     859:	66 0f b7 c0          	movzwl %ax,%eax
     85d:	66 50                	push   %eax
     85f:	66 68 00 10 00 00    	pushl  $0x1000
     865:	66 6a 01             	pushl  $0x1
     868:	66 6a 25             	pushl  $0x25
     86b:	66 e8 13 0c 00 00    	calll  1484 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:19
    read_n_sector(1,2,0x1000, FAT_table);// 这个会覆盖掉root吗？
     871:	66 b8 c0 50 00 00    	mov    $0x50c0,%eax
     877:	66 0f b7 c0          	movzwl %ax,%eax
     87b:	66 50                	push   %eax
     87d:	66 68 00 10 00 00    	pushl  $0x1000
     883:	66 6a 02             	pushl  $0x2
     886:	66 6a 01             	pushl  $0x1
     889:	66 e8 f5 0b 00 00    	calll  1484 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:27
    // puti(FAT_table[0]);
    // puti(root[0].cluster_number);
    // puts(&root[0], 10);
    // puts(&root[1], 10);
    // puts(&root[2], 10);
}
     88f:	66 83 c4 2c          	add    $0x2c,%esp
     893:	66 c3                	retl   

00000895 <_fs_find_descriptor_number_by_name>:
_fs_find_descriptor_number_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:29

u16 _fs_find_descriptor_number_by_name(char * file_name){
     895:	66 57                	push   %edi
     897:	66 56                	push   %esi
     899:	66 53                	push   %ebx
     89b:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:30
    int file_name_length = strlen(file_name);
     8a1:	66 83 ec 0c          	sub    $0xc,%esp
     8a5:	66 57                	push   %edi
     8a7:	66 e8 1f 0e 00 00    	calll  16cc <strlen>
     8ad:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:31
    if (file_name_length >= 11) file_name_length = 11;
     8b0:	66 83 c4 10          	add    $0x10,%esp
     8b4:	66 83 f8 0a          	cmp    $0xa,%eax
     8b8:	7e 06                	jle    8c0 <_fs_find_descriptor_number_by_name+0x2b>
     8ba:	66 be 0b 00 00 00    	mov    $0xb,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:33
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     8c0:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     8c6:	eb 2f                	jmp    8f7 <_fs_find_descriptor_number_by_name+0x62>
/mnt/e/code/my_operating_system/os/service/fsystem.c:34
        if (!strncmp(&root[i], file_name, file_name_length)){
     8c8:	66 89 d8             	mov    %ebx,%eax
     8cb:	66 c1 e0 05          	shl    $0x5,%eax
     8cf:	66 05 c0 54 00 00    	add    $0x54c0,%eax
     8d5:	66 83 ec 04          	sub    $0x4,%esp
     8d9:	66 56                	push   %esi
     8db:	66 57                	push   %edi
     8dd:	66 50                	push   %eax
     8df:	66 e8 ab 0e 00 00    	calll  1790 <strncmp>
     8e5:	66 83 c4 10          	add    $0x10,%esp
     8e9:	66 85 c0             	test   %eax,%eax
     8ec:	75 05                	jne    8f3 <_fs_find_descriptor_number_by_name+0x5e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:35
            return i;
     8ee:	66 89 d8             	mov    %ebx,%eax
     8f1:	eb 10                	jmp    903 <_fs_find_descriptor_number_by_name+0x6e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 2)

u16 _fs_find_descriptor_number_by_name(char * file_name){
    int file_name_length = strlen(file_name);
    if (file_name_length >= 11) file_name_length = 11;
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     8f3:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 1)
     8f7:	66 83 fb 09          	cmp    $0x9,%ebx
     8fb:	7e cb                	jle    8c8 <_fs_find_descriptor_number_by_name+0x33>
/mnt/e/code/my_operating_system/os/service/fsystem.c:38
        if (!strncmp(&root[i], file_name, file_name_length)){
            return i;
        }
    }
    return -1;
     8fd:	66 b8 ff ff ff ff    	mov    $0xffffffff,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:39
}
     903:	66 5b                	pop    %ebx
     905:	66 5e                	pop    %esi
     907:	66 5f                	pop    %edi
     909:	66 c3                	retl   

0000090b <_fs_find_cluster_code_by_name>:
_fs_find_cluster_code_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:41

u16 _fs_find_cluster_code_by_name(char * file_name){
     90b:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:42
    int index = _fs_find_descriptor_number_by_name(file_name);
     90f:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     915:	66 e8 7a ff ff ff    	calll  895 <_fs_find_descriptor_number_by_name>
     91b:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:44
    if (index != -1)
        return root[index].cluster_code;
     91f:	66 c1 e0 05          	shl    $0x5,%eax
     923:	67 66 0f b7 80 da 54 	movzwl 0x54da(%eax),%eax
     92a:	00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:46
    return 0;
}
     92c:	66 83 c4 1c          	add    $0x1c,%esp
     930:	66 c3                	retl   

00000932 <_fs_get_file_size_by_cluster_code>:
_fs_get_file_size_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:48

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
     932:	67 66 0f b7 54 24 04 	movzwl 0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:49
    int size = 0;
     939:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     93f:	eb 1b                	jmp    95c <_fs_get_file_size_by_cluster_code+0x2a>
/mnt/e/code/my_operating_system/os/service/fsystem.c:51
        size += 512*cluster2sector;
     941:	66 0f b7 0e c0 5b    	movzwl 0x5bc0,%ecx
     947:	66 c1 e1 09          	shl    $0x9,%ecx
     94b:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:52
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     94e:	66 0f b7 d2          	movzwl %dx,%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:53
        cluster_code = FAT_table[cluster_code];
     952:	67 66 0f b7 94 12 c0 	movzwl 0x50c0(%edx,%edx,1),%edx
     959:	50 00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    return 0;
}

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     95c:	67 66 8d 4a fe       	lea    -0x2(%edx),%ecx
     961:	83 f9 ed             	cmp    $0xffed,%cx
     964:	76 db                	jbe    941 <_fs_get_file_size_by_cluster_code+0xf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:56
        size += 512*cluster2sector;
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     966:	66 f3 c3             	repz retl 

00000969 <_fs_show_file_by_descriptor_number>:
_fs_show_file_by_descriptor_number():
/mnt/e/code/my_operating_system/os/service/fsystem.c:58

void _fs_show_file_by_descriptor_number(u16 index){
     969:	66 56                	push   %esi
     96b:	66 53                	push   %ebx
     96d:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:59
    int cluster_code = root[index].cluster_code;
     971:	67 66 0f b7 44 24 14 	movzwl 0x14(%esp),%eax
     978:	66 89 c6             	mov    %eax,%esi
     97b:	66 c1 e6 05          	shl    $0x5,%esi
     97f:	67 66 0f b7 9e da 54 	movzwl 0x54da(%esi),%ebx
     986:	00 00 
     988:	66 81 c6 c0 54 00 00 	add    $0x54c0,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:60
    printf("%d, %d\n" , index,cluster_code);
     98f:	66 53                	push   %ebx
     991:	66 50                	push   %eax
     993:	66 68 50 18 00 00    	pushl  $0x1850
     999:	66 e8 d7 08 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:62
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
     99f:	67 66 89 1c 24       	mov    %ebx,(%esp)
     9a4:	66 e8 88 ff ff ff    	calll  932 <_fs_get_file_size_by_cluster_code>
     9aa:	66 83 c4 0c          	add    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:61
}

void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
     9ae:	66 0f b7 c0          	movzwl %ax,%eax
     9b2:	66 50                	push   %eax
     9b4:	66 56                	push   %esi
     9b6:	66 68 58 18 00 00    	pushl  $0x1858
     9bc:	66 e8 b4 08 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     9c2:	66 83 c4 10          	add    $0x10,%esp
     9c6:	eb 20                	jmp    9e8 <_fs_show_file_by_descriptor_number+0x7f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:64
        printf("-%d", cluster_code);
     9c8:	66 83 ec 08          	sub    $0x8,%esp
     9cc:	66 53                	push   %ebx
     9ce:	66 68 69 18 00 00    	pushl  $0x1869
     9d4:	66 e8 9c 08 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:65
        cluster_code = FAT_table[cluster_code];
     9da:	67 66 0f b7 9c 1b c0 	movzwl 0x50c0(%ebx,%ebx,1),%ebx
     9e1:	50 00 00 
     9e4:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     9e8:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     9ed:	66 3d ed ff 00 00    	cmp    $0xffed,%eax
     9f3:	76 d3                	jbe    9c8 <_fs_show_file_by_descriptor_number+0x5f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:67
        printf("-%d", cluster_code);
        cluster_code = FAT_table[cluster_code];
    }
    printf("-|\n");
     9f5:	66 83 ec 0c          	sub    $0xc,%esp
     9f9:	66 68 6d 18 00 00    	pushl  $0x186d
     9ff:	66 e8 71 08 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:69
    return ;
}
     a05:	66 83 c4 14          	add    $0x14,%esp
     a09:	66 5b                	pop    %ebx
     a0b:	66 5e                	pop    %esi
     a0d:	66 c3                	retl   

00000a0f <_fs_load_by_cluster_code>:
_fs_load_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:71

u16 _fs_load_by_cluster_code(u16 cluster_code, u16 segment, u16 offset){
     a0f:	66 55                	push   %ebp
     a11:	66 57                	push   %edi
     a13:	66 56                	push   %esi
     a15:	66 53                	push   %ebx
     a17:	66 83 ec 0c          	sub    $0xc,%esp
     a1b:	67 66 0f b7 5c 24 20 	movzwl 0x20(%esp),%ebx
     a22:	67 66 0f b7 6c 24 24 	movzwl 0x24(%esp),%ebp
     a29:	67 66 0f b7 74 24 28 	movzwl 0x28(%esp),%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:72
    int size = 0;
     a30:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     a36:	eb 5b                	jmp    a93 <_fs_load_by_cluster_code+0x84>
/mnt/e/code/my_operating_system/os/service/fsystem.c:74
        size += 512*cluster2sector;
     a38:	66 0f b7 16 c0 5b    	movzwl 0x5bc0,%edx
     a3e:	66 89 d0             	mov    %edx,%eax
     a41:	66 c1 e0 09          	shl    $0x9,%eax
     a45:	66 01 c7             	add    %eax,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:75
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     a48:	66 0f b7 0e c2 5b    	movzwl 0x5bc2,%ecx
     a4e:	66 0f b7 db          	movzwl %bx,%ebx
     a52:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     a57:	66 0f af c2          	imul   %edx,%eax
     a5b:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:76
        read_n_sector(sector_number, cluster2sector, segment, offset);
     a5e:	66 0f b7 ce          	movzwl %si,%ecx
     a62:	66 51                	push   %ecx
     a64:	66 0f b7 cd          	movzwl %bp,%ecx
     a68:	66 51                	push   %ecx
     a6a:	66 52                	push   %edx
     a6c:	66 0f b7 c0          	movzwl %ax,%eax
     a70:	66 50                	push   %eax
     a72:	66 e8 0c 0a 00 00    	calll  1484 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:77
        offset = offset+cluster2sector*512;
     a78:	66 0f b7 06 c0 5b    	movzwl 0x5bc0,%eax
     a7e:	66 c1 e0 09          	shl    $0x9,%eax
     a82:	66 01 c6             	add    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:78
        cluster_code = FAT_table[cluster_code];
     a85:	67 66 0f b7 9c 1b c0 	movzwl 0x50c0(%ebx,%ebx,1),%ebx
     a8c:	50 00 00 
     a8f:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    return ;
}

u16 _fs_load_by_cluster_code(u16 cluster_code, u16 segment, u16 offset){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     a93:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     a98:	83 f8 ed             	cmp    $0xffed,%ax
     a9b:	76 9b                	jbe    a38 <_fs_load_by_cluster_code+0x29>
/mnt/e/code/my_operating_system/os/service/fsystem.c:81
        read_n_sector(sector_number, cluster2sector, segment, offset);
        offset = offset+cluster2sector*512;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     a9d:	66 89 f8             	mov    %edi,%eax
     aa0:	66 83 c4 0c          	add    $0xc,%esp
     aa4:	66 5b                	pop    %ebx
     aa6:	66 5e                	pop    %esi
     aa8:	66 5f                	pop    %edi
     aaa:	66 5d                	pop    %ebp
     aac:	66 c3                	retl   

00000aae <fs_load_by_name>:
fs_load_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:84


u16 fs_load_by_name(char * file_name, u16 segment, u16 offset){
     aae:	66 56                	push   %esi
     ab0:	66 53                	push   %ebx
     ab2:	66 83 ec 10          	sub    $0x10,%esp
     ab6:	67 66 8b 5c 24 20    	mov    0x20(%esp),%ebx
     abc:	67 66 8b 74 24 24    	mov    0x24(%esp),%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:85
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     ac2:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     ac8:	66 e8 3d fe ff ff    	calll  90b <_fs_find_cluster_code_by_name>
     ace:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:86
    if (cluster_code){
     ad2:	66 83 c4 10          	add    $0x10,%esp
     ad6:	66 85 c0             	test   %eax,%eax
     ad9:	74 1e                	je     af9 <fs_load_by_name+0x4b>
/mnt/e/code/my_operating_system/os/service/fsystem.c:87
        return _fs_load_by_cluster_code(cluster_code, segment, offset);
     adb:	66 83 ec 04          	sub    $0x4,%esp
     adf:	66 0f b7 f6          	movzwl %si,%esi
     ae3:	66 56                	push   %esi
     ae5:	66 0f b7 db          	movzwl %bx,%ebx
     ae9:	66 53                	push   %ebx
     aeb:	66 50                	push   %eax
     aed:	66 e8 1c ff ff ff    	calll  a0f <_fs_load_by_cluster_code>
     af3:	66 83 c4 10          	add    $0x10,%esp
     af7:	eb 06                	jmp    aff <fs_load_by_name+0x51>
/mnt/e/code/my_operating_system/os/service/fsystem.c:90
    }
    else {
        return 0;
     af9:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:92
    }
}
     aff:	66 83 c4 04          	add    $0x4,%esp
     b03:	66 5b                	pop    %ebx
     b05:	66 5e                	pop    %esi
     b07:	66 c3                	retl   

00000b09 <fs_get_file_size>:
fs_get_file_size():
/mnt/e/code/my_operating_system/os/service/fsystem.c:95


u16 fs_get_file_size(char * file_name){
     b09:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:96
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     b0d:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     b13:	66 e8 f2 fd ff ff    	calll  90b <_fs_find_cluster_code_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:97
    return _fs_get_file_size_by_cluster_code(cluster_code);
     b19:	66 0f b7 c0          	movzwl %ax,%eax
     b1d:	67 66 89 04 24       	mov    %eax,(%esp)
     b22:	66 e8 0a fe ff ff    	calll  932 <_fs_get_file_size_by_cluster_code>
/mnt/e/code/my_operating_system/os/service/fsystem.c:98
}
     b28:	66 83 c4 1c          	add    $0x1c,%esp
     b2c:	66 c3                	retl   

00000b2e <fs_show_root_file_table>:
fs_show_root_file_table():
/mnt/e/code/my_operating_system/os/service/fsystem.c:100

void fs_show_root_file_table(){
     b2e:	66 53                	push   %ebx
     b30:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:101
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
     b34:	66 68 71 18 00 00    	pushl  $0x1871
     b3a:	66 68 79 18 00 00    	pushl  $0x1879
     b40:	66 68 83 18 00 00    	pushl  $0x1883
     b46:	66 68 8e 18 00 00    	pushl  $0x188e
     b4c:	66 e8 24 07 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:102
    printf("------------------------------------\n\r");
     b52:	67 66 c7 04 24 70 21 	movl   $0x2170,(%esp)
     b59:	00 00 
     b5b:	66 e8 15 07 00 00    	calll  1276 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     b61:	66 83 c4 10          	add    $0x10,%esp
     b65:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     b6b:	eb 18                	jmp    b85 <fs_show_root_file_table+0x57>
/mnt/e/code/my_operating_system/os/service/fsystem.c:105 (discriminator 3)
        _fs_show_file_by_descriptor_number(i);
     b6d:	66 83 ec 0c          	sub    $0xc,%esp
     b71:	66 0f b7 c3          	movzwl %bx,%eax
     b75:	66 50                	push   %eax
     b77:	66 e8 ec fd ff ff    	calll  969 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 3)

void fs_show_root_file_table(){
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    printf("------------------------------------\n\r");
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     b7d:	66 83 c3 01          	add    $0x1,%ebx
     b81:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 1)
     b85:	66 83 fb 08          	cmp    $0x8,%ebx
     b89:	7e e2                	jle    b6d <fs_show_root_file_table+0x3f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:108
        _fs_show_file_by_descriptor_number(i);
    }
    return ;
}
     b8b:	66 83 c4 08          	add    $0x8,%esp
     b8f:	66 5b                	pop    %ebx
     b91:	66 c3                	retl   

00000b93 <fs_show_file_by_name>:
fs_show_file_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:110

void fs_show_file_by_name(char * file_name){
     b93:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:111
    int descriptor_index = _fs_find_descriptor_number_by_name(file_name);
     b97:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     b9d:	66 e8 f2 fc ff ff    	calll  895 <_fs_find_descriptor_number_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:112
    _fs_show_file_by_descriptor_number(descriptor_index);
     ba3:	66 0f b7 c0          	movzwl %ax,%eax
     ba7:	67 66 89 04 24       	mov    %eax,(%esp)
     bac:	66 e8 b7 fd ff ff    	calll  969 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:114
    return ;
}
     bb2:	66 83 c4 1c          	add    $0x1c,%esp
     bb6:	66 c3                	retl   

00000bb8 <fs_show_floppy_infomation>:
fs_show_floppy_infomation():
/mnt/e/code/my_operating_system/os/service/fsystem.c:117


void fs_show_floppy_infomation(){
     bb8:	66 f3 c3             	repz retl 

00000bbb <schedule_process>:
schedule_process():
/mnt/e/code/my_operating_system/os/service/proc.c:11
#include "../include/system_call.h"
#include "../include/fsystem.h"
#include "../include/proc.h"

void schedule_process(){
    cur_process_index = (cur_process_index + 1) % 2;
     bbb:	66 0f b7 06 00 a0    	movzwl -0x6000,%eax
     bc1:	66 83 c0 01          	add    $0x1,%eax
     bc5:	66 83 e0 01          	and    $0x1,%eax
     bc9:	a3 00 a0             	mov    %ax,0xa000
/mnt/e/code/my_operating_system/os/service/proc.c:12
    cur_process = &process_table[cur_process_index];
     bcc:	66 0f b7 c0          	movzwl %ax,%eax
     bd0:	66 89 c2             	mov    %eax,%edx
     bd3:	66 c1 e2 06          	shl    $0x6,%edx
     bd7:	67 66 8d 84 82 00 5c 	lea    0x5c00(%edx,%eax,4),%eax
     bde:	00 00 
     be0:	66 a3 04 a0          	mov    %eax,0xa004
     be4:	66 c3                	retl   

00000be6 <_put_char>:
_put_char():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:5
#include "../include/basic.h"
#include "../include/type.h"
#include "../include/string.h"

void _put_char(char c, u16 cursor_index){
     be6:	66 53                	push   %ebx
     be8:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:7
    int _address = 0xb8000;
    int _offset = cursor_index * 2;
     bec:	67 66 0f b7 5c 24 1c 	movzwl 0x1c(%esp),%ebx
     bf3:	66 01 db             	add    %ebx,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:8
    write_memory_byte(_address+_offset, c);
     bf6:	67 66 8d 83 00 80 0b 	lea    0xb8000(%ebx),%eax
     bfd:	00 
     bfe:	67 66 0f b6 54 24 18 	movzbl 0x18(%esp),%edx
     c05:	66 52                	push   %edx
     c07:	66 50                	push   %eax
     c09:	66 e8 9d 09 00 00    	calll  15ac <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:9
    write_memory_byte(_address+_offset+1, 0x1f);
     c0f:	66 81 c3 01 80 0b 00 	add    $0xb8001,%ebx
     c16:	66 83 c4 08          	add    $0x8,%esp
     c1a:	66 6a 1f             	pushl  $0x1f
     c1d:	66 53                	push   %ebx
     c1f:	66 e8 87 09 00 00    	calll  15ac <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:11
    return ;
}
     c25:	66 83 c4 18          	add    $0x18,%esp
     c29:	66 5b                	pop    %ebx
     c2b:	66 c3                	retl   

00000c2d <set_cursor>:
set_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:13

void set_cursor(u16 cursor_index){
     c2d:	66 56                	push   %esi
     c2f:	66 53                	push   %ebx
     c31:	66 83 ec 0c          	sub    $0xc,%esp
     c35:	67 66 8b 5c 24 18    	mov    0x18(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:16
    // short cursor_index = 80 * row + column;     // 计算光标寄存器的值
    u8 low_eight = cursor_index; // 取低八位，高位被截断
    u8 high_eight = cursor_index >> 8; // 取高八位
     c3b:	66 89 d8             	mov    %ebx,%eax
     c3e:	c1 e8 08             	shr    $0x8,%ax
     c41:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:17
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     c44:	66 6a 0e             	pushl  $0xe
     c47:	66 68 d4 03 00 00    	pushl  $0x3d4
     c4d:	66 e8 0d 09 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:18
    write_port_byte(0x3d5, high_eight);// 将光标索引高八位写入端口
     c53:	66 83 c4 08          	add    $0x8,%esp
     c57:	66 89 f0             	mov    %esi,%eax
     c5a:	66 0f b6 f0          	movzbl %al,%esi
     c5e:	66 56                	push   %esi
     c60:	66 68 d5 03 00 00    	pushl  $0x3d5
     c66:	66 e8 f4 08 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:19
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     c6c:	66 83 c4 08          	add    $0x8,%esp
     c70:	66 6a 0f             	pushl  $0xf
     c73:	66 68 d4 03 00 00    	pushl  $0x3d4
     c79:	66 e8 e1 08 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:20
    write_port_byte(0x3d5, low_eight);// 将光标索引低八位写入端口
     c7f:	66 83 c4 08          	add    $0x8,%esp
     c83:	66 0f b6 db          	movzbl %bl,%ebx
     c87:	66 53                	push   %ebx
     c89:	66 68 d5 03 00 00    	pushl  $0x3d5
     c8f:	66 e8 cb 08 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:22
    return ;
}
     c95:	66 83 c4 14          	add    $0x14,%esp
     c99:	66 5b                	pop    %ebx
     c9b:	66 5e                	pop    %esi
     c9d:	66 c3                	retl   

00000c9f <get_cursor>:
get_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:24

u16 get_cursor(){
     c9f:	66 53                	push   %ebx
     ca1:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:27
    u8 low_eight = 0, high_eight = 0;
    u16 cursor_index = 0;
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     ca5:	66 6a 0e             	pushl  $0xe
     ca8:	66 68 d4 03 00 00    	pushl  $0x3d4
     cae:	66 e8 ac 08 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:28
    high_eight = read_port_byte(0x3d5);// 将光标索引高八位写入端口
     cb4:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     cbb:	00 00 
     cbd:	66 e8 c5 08 00 00    	calll  1588 <read_port_byte>
     cc3:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:29
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     cc6:	66 83 c4 08          	add    $0x8,%esp
     cca:	66 6a 0f             	pushl  $0xf
     ccd:	66 68 d4 03 00 00    	pushl  $0x3d4
     cd3:	66 e8 87 08 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:30
    low_eight = read_port_byte(0x3d5);// 将光标索引低八位写入端口
     cd9:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     ce0:	00 00 
     ce2:	66 e8 a0 08 00 00    	calll  1588 <read_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:32
    cursor_index = high_eight;
    cursor_index = (cursor_index << 8) + low_eight;
     ce8:	66 c1 e3 08          	shl    $0x8,%ebx
     cec:	66 0f b6 c0          	movzbl %al,%eax
     cf0:	66 01 d8             	add    %ebx,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:34
    return cursor_index;
}
     cf3:	66 83 c4 18          	add    $0x18,%esp
     cf7:	66 5b                	pop    %ebx
     cf9:	66 c3                	retl   

00000cfb <putc>:
putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:36

void putc(char c){
     cfb:	66 57                	push   %edi
     cfd:	66 56                	push   %esi
     cff:	66 53                	push   %ebx
     d01:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:37
    u16 cursor_index = get_cursor();
     d07:	66 e8 92 ff ff ff    	calll  c9f <get_cursor>
     d0d:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:38
    u16 row = cursor_index / 80;
     d10:	66 0f b7 d8          	movzwl %ax,%ebx
     d14:	66 69 db cd cc 00 00 	imul   $0xcccd,%ebx,%ebx
     d1b:	66 c1 eb 10          	shr    $0x10,%ebx
     d1f:	c1 eb 06             	shr    $0x6,%bx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:40
    u16 col = cursor_index % 80;
    if (cursor_index >= 1920){
     d22:	3d 7f 07             	cmp    $0x77f,%ax
     d25:	76 0c                	jbe    d33 <putc+0x38>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:41
        scroll_screen();
     d27:	66 e8 ff 08 00 00    	calll  162c <scroll_screen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:42
        cursor_index = 1840;
     d2d:	66 be 30 07 00 00    	mov    $0x730,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:44
    }
    switch (c) {
     d33:	66 89 f8             	mov    %edi,%eax
     d36:	3c 0a                	cmp    $0xa,%al
     d38:	74 06                	je     d40 <putc+0x45>
     d3a:	3c 0d                	cmp    $0xd,%al
     d3c:	74 25                	je     d63 <putc+0x68>
     d3e:	eb 45                	jmp    d85 <putc+0x8a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:46
        case '\n':
            set_cursor((row+1)*80); // 回车，移到下一行
     d40:	66 83 ec 0c          	sub    $0xc,%esp
     d44:	67 66 8d 5c 9b 05    	lea    0x5(%ebx,%ebx,4),%ebx
     d4a:	66 89 d8             	mov    %ebx,%eax
     d4d:	66 c1 e0 04          	shl    $0x4,%eax
     d51:	66 0f b7 c0          	movzwl %ax,%eax
     d55:	66 50                	push   %eax
     d57:	66 e8 d0 fe ff ff    	calll  c2d <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:47
            break;
     d5d:	66 83 c4 10          	add    $0x10,%esp
     d61:	eb 52                	jmp    db5 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:49
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     d63:	66 83 ec 0c          	sub    $0xc,%esp
     d67:	67 66 8d 1c 9b       	lea    (%ebx,%ebx,4),%ebx
     d6c:	66 89 d8             	mov    %ebx,%eax
     d6f:	66 c1 e0 04          	shl    $0x4,%eax
     d73:	66 0f b7 c0          	movzwl %ax,%eax
     d77:	66 50                	push   %eax
     d79:	66 e8 ae fe ff ff    	calll  c2d <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:50
            break;
     d7f:	66 83 c4 10          	add    $0x10,%esp
     d83:	eb 30                	jmp    db5 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:52
        default:
            _put_char(c, cursor_index);
     d85:	66 83 ec 08          	sub    $0x8,%esp
     d89:	66 0f b7 c6          	movzwl %si,%eax
     d8d:	66 50                	push   %eax
     d8f:	66 89 f8             	mov    %edi,%eax
     d92:	66 0f be f8          	movsbl %al,%edi
     d96:	66 57                	push   %edi
     d98:	66 e8 48 fe ff ff    	calll  be6 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:53
            set_cursor(cursor_index+1);
     d9e:	66 83 c6 01          	add    $0x1,%esi
     da2:	66 0f b7 f6          	movzwl %si,%esi
     da6:	67 66 89 34 24       	mov    %esi,(%esp)
     dab:	66 e8 7c fe ff ff    	calll  c2d <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:54
            break;
     db1:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:57
    }
    return ;
}
     db5:	66 5b                	pop    %ebx
     db7:	66 5e                	pop    %esi
     db9:	66 5f                	pop    %edi
     dbb:	66 c3                	retl   

00000dbd <_putc>:
_putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:59

void _putc(char c){
     dbd:	66 56                	push   %esi
     dbf:	66 53                	push   %ebx
     dc1:	66 83 ec 04          	sub    $0x4,%esp
     dc5:	67 66 8b 5c 24 10    	mov    0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:60
    u16 cursor_index = get_cursor();
     dcb:	66 e8 ce fe ff ff    	calll  c9f <get_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:61
    u16 row = cursor_index / 80;
     dd1:	66 0f b7 d0          	movzwl %ax,%edx
     dd5:	66 69 d2 cd cc 00 00 	imul   $0xcccd,%edx,%edx
     ddc:	66 c1 ea 10          	shr    $0x10,%edx
     de0:	c1 ea 06             	shr    $0x6,%dx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:62
    u16 col = cursor_index % 80;
     de3:	67 66 8d 34 92       	lea    (%edx,%edx,4),%esi
     de8:	66 c1 e6 04          	shl    $0x4,%esi
     dec:	66 89 f1             	mov    %esi,%ecx
     def:	66 89 c6             	mov    %eax,%esi
     df2:	66 29 ce             	sub    %ecx,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:63
    switch (c) {
     df5:	80 fb 0a             	cmp    $0xa,%bl
     df8:	74 07                	je     e01 <_putc+0x44>
     dfa:	80 fb 0d             	cmp    $0xd,%bl
     dfd:	74 2b                	je     e2a <_putc+0x6d>
     dff:	eb 4b                	jmp    e4c <_putc+0x8f>
     e01:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:65
        case '\n':
            set_cursor((row+1)*80+col); // 回车，移到下一行
     e04:	66 83 ec 0c          	sub    $0xc,%esp
     e08:	67 66 8d 54 92 05    	lea    0x5(%edx,%edx,4),%edx
     e0e:	66 89 d0             	mov    %edx,%eax
     e11:	66 c1 e0 04          	shl    $0x4,%eax
     e15:	66 01 c1             	add    %eax,%ecx
     e18:	66 0f b7 c9          	movzwl %cx,%ecx
     e1c:	66 51                	push   %ecx
     e1e:	66 e8 09 fe ff ff    	calll  c2d <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:66
            break;
     e24:	66 83 c4 10          	add    $0x10,%esp
     e28:	eb 3c                	jmp    e66 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:68
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     e2a:	66 83 ec 0c          	sub    $0xc,%esp
     e2e:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     e33:	66 89 d0             	mov    %edx,%eax
     e36:	66 c1 e0 04          	shl    $0x4,%eax
     e3a:	66 0f b7 c0          	movzwl %ax,%eax
     e3e:	66 50                	push   %eax
     e40:	66 e8 e7 fd ff ff    	calll  c2d <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:69
            break;
     e46:	66 83 c4 10          	add    $0x10,%esp
     e4a:	eb 1a                	jmp    e66 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:71
        default:
            _put_char(c, cursor_index);
     e4c:	66 83 ec 08          	sub    $0x8,%esp
     e50:	66 0f b7 c0          	movzwl %ax,%eax
     e54:	66 50                	push   %eax
     e56:	66 0f be db          	movsbl %bl,%ebx
     e5a:	66 53                	push   %ebx
     e5c:	66 e8 84 fd ff ff    	calll  be6 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:73
            // set_cursor(cursor_index+1);
            break;
     e62:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:76
    }
    return ;
}
     e66:	66 83 c4 04          	add    $0x4,%esp
     e6a:	66 5b                	pop    %ebx
     e6c:	66 5e                	pop    %esi
     e6e:	66 c3                	retl   

00000e70 <puti>:
puti():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:78

void puti(u32 n){
     e70:	66 56                	push   %esi
     e72:	66 53                	push   %ebx
     e74:	66 83 ec 44          	sub    $0x44,%esp
     e78:	67 66 8b 4c 24 50    	mov    0x50(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:79
    int len = 0;
     e7e:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     e84:	eb 2d                	jmp    eb3 <puti+0x43>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:82
        num[len] = n % 10;
     e86:	66 ba cd cc cc cc    	mov    $0xcccccccd,%edx
     e8c:	66 89 c8             	mov    %ecx,%eax
     e8f:	66 f7 e2             	mul    %edx
     e92:	66 c1 ea 03          	shr    $0x3,%edx
     e96:	66 89 d6             	mov    %edx,%esi
     e99:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     e9e:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     ea3:	66 29 c1             	sub    %eax,%ecx
     ea6:	67 66 89 4c 9c 04    	mov    %ecx,0x4(%esp,%ebx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:83
        n = n / 10;
     eac:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:84
        len++;
     eaf:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
}

void puti(u32 n){
    int len = 0;
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     eb3:	66 85 c9             	test   %ecx,%ecx
     eb6:	75 ce                	jne    e86 <puti+0x16>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     eb8:	66 83 eb 01          	sub    $0x1,%ebx
     ebc:	eb 23                	jmp    ee1 <puti+0x71>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:87 (discriminator 3)
        putc(num[i]+'0');
     ebe:	66 83 ec 0c          	sub    $0xc,%esp
     ec2:	67 66 0f b6 44 9c 10 	movzbl 0x10(%esp,%ebx,4),%eax
     ec9:	66 83 c0 30          	add    $0x30,%eax
     ecd:	66 0f be c0          	movsbl %al,%eax
     ed1:	66 50                	push   %eax
     ed3:	66 e8 22 fe ff ff    	calll  cfb <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 3)
    while (n != 0){
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     ed9:	66 83 eb 01          	sub    $0x1,%ebx
     edd:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 1)
     ee1:	66 85 db             	test   %ebx,%ebx
     ee4:	79 d8                	jns    ebe <puti+0x4e>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:90
        putc(num[i]+'0');
    }
    return ;
}
     ee6:	66 83 c4 44          	add    $0x44,%esp
     eea:	66 5b                	pop    %ebx
     eec:	66 5e                	pop    %esi
     eee:	66 c3                	retl   

00000ef0 <puts>:
puts():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:92

void puts(char * str, int size){
     ef0:	66 57                	push   %edi
     ef2:	66 56                	push   %esi
     ef4:	66 53                	push   %ebx
     ef6:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
     efc:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:93
    int i = 0;
     f02:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    while (i < size){
     f08:	eb 1a                	jmp    f24 <puts+0x34>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:95
        putc(str[i]);
     f0a:	66 83 ec 0c          	sub    $0xc,%esp
     f0e:	67 66 0f be 04 1f    	movsbl (%edi,%ebx,1),%eax
     f14:	66 50                	push   %eax
     f16:	66 e8 df fd ff ff    	calll  cfb <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:96
        i++;
     f1c:	66 83 c3 01          	add    $0x1,%ebx
     f20:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    return ;
}

void puts(char * str, int size){
    int i = 0;
    while (i < size){
     f24:	66 39 f3             	cmp    %esi,%ebx
     f27:	7c e1                	jl     f0a <puts+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:99
        putc(str[i]);
        i++;
    }
    return ;
}
     f29:	66 5b                	pop    %ebx
     f2b:	66 5e                	pop    %esi
     f2d:	66 5f                	pop    %edi
     f2f:	66 c3                	retl   

00000f31 <sprintf>:
sprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:103



void sprintf(char * dest , char * format, ...){
     f31:	66 55                	push   %ebp
     f33:	66 57                	push   %edi
     f35:	66 56                	push   %esi
     f37:	66 53                	push   %ebx
     f39:	66 83 ec 5c          	sub    $0x5c,%esp
     f3d:	67 66 8b 6c 24 70    	mov    0x70(%esp),%ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:106
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     f43:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:105



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     f49:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:104
}



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
     f4f:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     f55:	e9 33 01             	jmp    108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:109
        if (format[src_index] == '%'){
     f58:	3c 25                	cmp    $0x25,%al
     f5a:	0f 85 1b 01          	jne    1079 <core_header_data_segment+0x79>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:111
            src_index++;
            switch(format[src_index]){
     f5e:	67 66 0f b6 44 39 01 	movzbl 0x1(%ecx,%edi,1),%eax
     f65:	3c 64                	cmp    $0x64,%al
     f67:	74 28                	je     f91 <sprintf+0x60>
     f69:	3c 73                	cmp    $0x73,%al
     f6b:	0f 84 b5 00          	je     1024 <core_header_data_segment+0x24>
     f6f:	3c 63                	cmp    $0x63,%al
     f71:	0f 85 fe 00          	jne    1073 <core_header_data_segment+0x73>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     f75:	67 66 8b 44 94 78    	mov    0x78(%esp,%edx,4),%eax
     f7b:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:114
                    src_index++;
     f80:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     f84:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     f89:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:115
                    src_index++;
                    break;
     f8e:	e9 fa 00             	jmp    108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     f91:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     f96:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     f9c:	67 66 8b 4c 94 78    	mov    0x78(%esp,%edx,4),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:119
                    int len = 0; 
     fa2:	66 be 00 00 00 00    	mov    $0x0,%esi
     fa8:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                    int num[INT_LENGTH];
                    while (n != 0){
     fae:	eb 37                	jmp    fe7 <sprintf+0xb6>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:122
                        num[len] = n % 10;
     fb0:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     fb6:	66 89 c8             	mov    %ecx,%eax
     fb9:	66 f7 ea             	imul   %edx
     fbc:	66 c1 fa 02          	sar    $0x2,%edx
     fc0:	66 89 c8             	mov    %ecx,%eax
     fc3:	66 c1 f8 1f          	sar    $0x1f,%eax
     fc7:	66 29 c2             	sub    %eax,%edx
     fca:	66 89 d7             	mov    %edx,%edi
     fcd:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     fd2:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     fd7:	66 29 c1             	sub    %eax,%ecx
     fda:	67 66 89 4c b4 14    	mov    %ecx,0x14(%esp,%esi,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:123
                        n = n / 10;
     fe0:	66 89 f9             	mov    %edi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:124
                        len++;
     fe3:	66 83 c6 01          	add    $0x1,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     fe7:	66 85 c9             	test   %ecx,%ecx
     fea:	75 c4                	jne    fb0 <sprintf+0x7f>
     fec:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     ff2:	67 66 8d 46 ff       	lea    -0x1(%esi),%eax
     ff7:	eb 1a                	jmp    1013 <core_header_data_segment+0x13>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     ff9:	67 66 0f b6 74 84 14 	movzbl 0x14(%esp,%eax,4),%esi
    1000:	67 66 8d 56 30       	lea    0x30(%esi),%edx
    1005:	67 88 54 1d 00       	mov    %dl,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    100a:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
    100e:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1013:	66 85 c0             	test   %eax,%eax
    1016:	79 e1                	jns    ff9 <sprintf+0xc8>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:129
                        dest[des_index++] = num[i]+'0';
                    }
                    src_index++;
    1018:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                    dest[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    101c:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    1022:	eb 67                	jmp    108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    1024:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1029:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    102f:	67 66 8b 74 94 78    	mov    0x78(%esp,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:134
                    u32 str_len = strlen(str);
    1035:	66 83 ec 0c          	sub    $0xc,%esp
    1039:	66 56                	push   %esi
    103b:	66 e8 8b 06 00 00    	calll  16cc <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    u32 i = 0;
                    while (i < str_len){
    1041:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:135
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    1045:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    while (i < str_len){
    104b:	eb 15                	jmp    1062 <core_header_data_segment+0x62>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:137
                        dest[des_index++] = str[i++];
    104d:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    1053:	67 88 4c 1d 00       	mov    %cl,0x0(%ebp,%ebx,1)
    1058:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    105d:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    1062:	66 39 c2             	cmp    %eax,%edx
    1065:	72 e6                	jb     104d <core_header_data_segment+0x4d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:139
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
    1067:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    106b:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:140
                    u32 i = 0;
                    while (i < str_len){
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    1071:	eb 18                	jmp    108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:143
                }
                default :
                    src_index++;
    1073:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:144
                    break;
    1077:	eb 12                	jmp    108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:147
            }
        }
        else if (format[src_index] == '\\') {
    1079:	3c 5c                	cmp    $0x5c,%al
    107b:	74 0e                	je     108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:166
                        break;
                }
            }
        }
        else {
            dest[des_index++] = format[src_index++];
    107d:	66 83 c7 01          	add    $0x1,%edi
    1081:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
    1086:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    108b:	67 66 8b 4c 24 74    	mov    0x74(%esp),%ecx
    1091:	67 66 0f b6 04 39    	movzbl (%ecx,%edi,1),%eax
    1097:	84 c0                	test   %al,%al
    1099:	0f 85 bb fe          	jne    f58 <sprintf+0x27>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:169
        }
        else {
            dest[des_index++] = format[src_index++];
        }
    }
    dest[des_index] = 0;
    109d:	67 c6 44 1d 00 00    	movb   $0x0,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:171
    return ;
}
    10a3:	66 83 c4 5c          	add    $0x5c,%esp
    10a7:	66 5b                	pop    %ebx
    10a9:	66 5e                	pop    %esi
    10ab:	66 5f                	pop    %edi
    10ad:	66 5d                	pop    %ebp
    10af:	66 c3                	retl   

000010b1 <vprintf>:
vprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:174


void vprintf(char * format, va_list va){
    10b1:	66 55                	push   %ebp
    10b3:	66 57                	push   %edi
    10b5:	66 56                	push   %esi
    10b7:	66 53                	push   %ebx
    10b9:	66 81 ec 5c 04 00 00 	sub    $0x45c,%esp
    10c0:	67 66 8b ac 24 70 04 	mov    0x470(%esp),%ebp
    10c7:	00 00 
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:178
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    10c9:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:177


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    10cf:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:176
}


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    10d5:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    10db:	e9 4c 01             	jmp    122a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:181
        if (format[src_index] == '%'){
    10de:	3c 25                	cmp    $0x25,%al
    10e0:	0f 85 34 01          	jne    1218 <vprintf+0x167>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:183
            src_index++;
            switch(format[src_index]){
    10e4:	67 66 0f b6 44 3d 01 	movzbl 0x1(%ebp,%edi,1),%eax
    10eb:	3c 64                	cmp    $0x64,%al
    10ed:	74 30                	je     111f <vprintf+0x6e>
    10ef:	3c 73                	cmp    $0x73,%al
    10f1:	0f 84 c6 00          	je     11bb <vprintf+0x10a>
    10f5:	3c 63                	cmp    $0x63,%al
    10f7:	0f 85 17 01          	jne    1212 <vprintf+0x161>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
    10fb:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    1102:	00 00 
    1104:	67 66 8b 04 90       	mov    (%eax,%edx,4),%eax
    1109:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:186
                    src_index++;
    110e:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
    1112:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
    1117:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:187
                    src_index++;
                    break;
    111c:	e9 0b 01             	jmp    122a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    111f:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1124:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    112a:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    1131:	00 00 
    1133:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:191
                    int len = 0; 
    1138:	66 b9 00 00 00 00    	mov    $0x0,%ecx
    113e:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                    int num[INT_LENGTH];
                    while (n != 0){
    1144:	eb 3a                	jmp    1180 <vprintf+0xcf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:194
                        num[len] = n % 10;
    1146:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    114c:	66 89 f0             	mov    %esi,%eax
    114f:	66 f7 ea             	imul   %edx
    1152:	66 c1 fa 02          	sar    $0x2,%edx
    1156:	66 89 f0             	mov    %esi,%eax
    1159:	66 c1 f8 1f          	sar    $0x1f,%eax
    115d:	66 29 c2             	sub    %eax,%edx
    1160:	66 89 d7             	mov    %edx,%edi
    1163:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
    1168:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    116d:	66 89 f2             	mov    %esi,%edx
    1170:	66 29 c2             	sub    %eax,%edx
    1173:	67 66 89 54 8c 14    	mov    %edx,0x14(%esp,%ecx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:195
                        n = n / 10;
    1179:	66 89 fe             	mov    %edi,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:196
                        len++;
    117c:	66 83 c1 01          	add    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
    1180:	66 85 f6             	test   %esi,%esi
    1183:	75 c1                	jne    1146 <vprintf+0x95>
    1185:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    118b:	66 83 e9 01          	sub    $0x1,%ecx
    118f:	eb 19                	jmp    11aa <vprintf+0xf9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    1191:	67 66 0f b6 44 8c 14 	movzbl 0x14(%esp,%ecx,4),%eax
    1198:	66 83 c0 30          	add    $0x30,%eax
    119c:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    11a1:	66 83 e9 01          	sub    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    11a5:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    11aa:	66 85 c9             	test   %ecx,%ecx
    11ad:	79 e2                	jns    1191 <vprintf+0xe0>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:201
                        buf[des_index++] = num[i]+'0';
                    }
                    src_index++;
    11af:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                    buf[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    11b3:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    11b9:	eb 6f                	jmp    122a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    11bb:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    11c0:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    11c6:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    11cd:	00 00 
    11cf:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:206
                    u32 str_len = strlen(str);
    11d4:	66 83 ec 0c          	sub    $0xc,%esp
    11d8:	66 56                	push   %esi
    11da:	66 e8 ec 04 00 00    	calll  16cc <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    u32 i = 0;
                    while (i < str_len){
    11e0:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:207
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    11e4:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    while (i < str_len){
    11ea:	eb 15                	jmp    1201 <vprintf+0x150>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:209
                        buf[des_index++] = str[i++];
    11ec:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    11f2:	67 88 4c 1c 50       	mov    %cl,0x50(%esp,%ebx,1)
    11f7:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    11fc:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    1201:	66 39 c2             	cmp    %eax,%edx
    1204:	72 e6                	jb     11ec <vprintf+0x13b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:211
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
    1206:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    120a:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:212
                    u32 i = 0;
                    while (i < str_len){
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    1210:	eb 18                	jmp    122a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:215
                }
                default :
                    src_index++;
    1212:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:216
                    break;
    1216:	eb 12                	jmp    122a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:219
            }
        }
        else if (format[src_index] == '\\') {
    1218:	3c 5c                	cmp    $0x5c,%al
    121a:	74 0e                	je     122a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:238
                        break;
                }
            }
        }
        else {
            buf[des_index++] = format[src_index++];
    121c:	66 83 c7 01          	add    $0x1,%edi
    1220:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
    1225:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    122a:	67 66 0f b6 44 3d 00 	movzbl 0x0(%ebp,%edi,1),%eax
    1231:	84 c0                	test   %al,%al
    1233:	0f 85 a7 fe          	jne    10de <vprintf+0x2d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:241
        }
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    1237:	67 c6 44 1c 50 00    	movb   $0x0,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242
    for (int i = 0; i < des_index; i++){
    123d:	66 be 00 00 00 00    	mov    $0x0,%esi
    1243:	eb 1b                	jmp    1260 <vprintf+0x1af>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:243 (discriminator 3)
        putc(buf[i]);
    1245:	66 83 ec 0c          	sub    $0xc,%esp
    1249:	67 66 0f be 44 34 5c 	movsbl 0x5c(%esp,%esi,1),%eax
    1250:	66 50                	push   %eax
    1252:	66 e8 a3 fa ff ff    	calll  cfb <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 3)
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    for (int i = 0; i < des_index; i++){
    1258:	66 83 c6 01          	add    $0x1,%esi
    125c:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 1)
    1260:	66 39 f3             	cmp    %esi,%ebx
    1263:	7f e0                	jg     1245 <vprintf+0x194>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:246
        putc(buf[i]);
    }
    return ;
}
    1265:	66 81 c4 5c 04 00 00 	add    $0x45c,%esp
    126c:	66 5b                	pop    %ebx
    126e:	66 5e                	pop    %esi
    1270:	66 5f                	pop    %edi
    1272:	66 5d                	pop    %ebp
    1274:	66 c3                	retl   

00001276 <printf>:
printf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:248

void printf(char * format, ...){
    1276:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:249
    vprintf(format, &format+1);// 其实这里由于format是个指针，是32位的，所以这里对format的地址+1，也会加4个字节。
    127a:	67 66 8d 44 24 1c    	lea    0x1c(%esp),%eax
    1280:	66 50                	push   %eax
    1282:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    1288:	66 e8 23 fe ff ff    	calll  10b1 <vprintf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:251
    return ;
}
    128e:	66 83 c4 1c          	add    $0x1c,%esp
    1292:	66 c3                	retl   

00001294 <isalpha>:
isalpha():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:270
//     return ;
// }



int isalpha (int ch){
    1294:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:271
    if ('a' <= ch && ch <= 'z')
    129a:	67 66 8d 50 9f       	lea    -0x61(%eax),%edx
    129f:	66 83 fa 19          	cmp    $0x19,%edx
    12a3:	76 12                	jbe    12b7 <isalpha+0x23>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:273
        return 1;
    if ('A' <= ch && ch <= 'Z')
    12a5:	66 83 e8 41          	sub    $0x41,%eax
    12a9:	66 83 f8 19          	cmp    $0x19,%eax
    12ad:	77 10                	ja     12bf <isalpha+0x2b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:274
        return 1;
    12af:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12b5:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:272



int isalpha (int ch){
    if ('a' <= ch && ch <= 'z')
        return 1;
    12b7:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12bd:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:275
    if ('A' <= ch && ch <= 'Z')
        return 1;
    return 0;
    12bf:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:276
}
    12c5:	66 c3                	retl   

000012c7 <isdigit>:
isdigit():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:278
int isdigit (int ch){
    if ('0' <= ch && ch <= '9')
    12c7:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
    12cd:	66 83 e8 30          	sub    $0x30,%eax
    12d1:	66 83 f8 09          	cmp    $0x9,%eax
    12d5:	77 08                	ja     12df <isdigit+0x18>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:279
        return 1;
    12d7:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12dd:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:280
    return 0;
    12df:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:281
}
    12e5:	66 c3                	retl   

000012e7 <isalnum>:
isalnum():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:283

int isalnum (int ch){
    12e7:	66 53                	push   %ebx
    12e9:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284
    if ( isalpha(ch) || isdigit(ch) ){
    12ef:	66 53                	push   %ebx
    12f1:	66 e8 9d ff ff ff    	calll  1294 <isalpha>
    12f7:	66 83 c4 04          	add    $0x4,%esp
    12fb:	66 85 c0             	test   %eax,%eax
    12fe:	75 13                	jne    1313 <isalnum+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284 (discriminator 1)
    1300:	66 53                	push   %ebx
    1302:	66 e8 bf ff ff ff    	calll  12c7 <isdigit>
    1308:	66 83 c4 04          	add    $0x4,%esp
    130c:	66 85 c0             	test   %eax,%eax
    130f:	75 0a                	jne    131b <isalnum+0x34>
    1311:	eb 0e                	jmp    1321 <isalnum+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:285
        return 1;
    1313:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1319:	eb 06                	jmp    1321 <isalnum+0x3a>
    131b:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:288
    }
    return 0;
}
    1321:	66 5b                	pop    %ebx
    1323:	66 c3                	retl   

00001325 <ispunct>:
ispunct():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:289
int ispunct (int ch){
    1325:	66 83 ec 30          	sub    $0x30,%esp
    1329:	67 66 8b 4c 24 34    	mov    0x34(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:290
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    132f:	67 66 c7 44 24 0e 21 	movl   $0x24232221,0xe(%esp)
    1336:	22 23 24 
    1339:	67 66 c7 44 24 12 25 	movl   $0x28272625,0x12(%esp)
    1340:	26 27 28 
    1343:	67 66 c7 44 24 16 29 	movl   $0x2c2b2a29,0x16(%esp)
    134a:	2a 2b 2c 
    134d:	67 66 c7 44 24 1a 2d 	movl   $0x3a2f2e2d,0x1a(%esp)
    1354:	2e 2f 3a 
    1357:	67 66 c7 44 24 1e 3b 	movl   $0x3e3d3c3b,0x1e(%esp)
    135e:	3c 3d 3e 
    1361:	67 66 c7 44 24 22 3f 	movl   $0x5c5b403f,0x22(%esp)
    1368:	40 5b 5c 
    136b:	67 66 c7 44 24 26 5d 	movl   $0x605f5e5d,0x26(%esp)
    1372:	5e 5f 60 
    1375:	67 66 c7 44 24 2a 7b 	movl   $0x7e7d7c7b,0x2a(%esp)
    137c:	7c 7d 7e 
    137f:	67 c7 44 24 2e 00 00 	movw   $0x0,0x2e(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291
    for (int i = 0; i < 33; i++){
    1386:	66 b8 00 00 00 00    	mov    $0x0,%eax
    138c:	eb 10                	jmp    139e <ispunct+0x79>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:292
        if (ch == punct[i])
    138e:	67 66 0f be 54 04 0e 	movsbl 0xe(%esp,%eax,1),%edx
    1395:	66 39 ca             	cmp    %ecx,%edx
    1398:	74 12                	je     13ac <ispunct+0x87>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 2)
    }
    return 0;
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
    139a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 1)
    139e:	66 83 f8 20          	cmp    $0x20,%eax
    13a2:	7e ea                	jle    138e <ispunct+0x69>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:295
        if (ch == punct[i])
            return 1;
    }
    return 0;
    13a4:	66 b8 00 00 00 00    	mov    $0x0,%eax
    13aa:	eb 06                	jmp    13b2 <ispunct+0x8d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:293
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
        if (ch == punct[i])
            return 1;
    13ac:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:296
    }
    return 0;
}
    13b2:	66 83 c4 30          	add    $0x30,%esp
    13b6:	66 c3                	retl   

000013b8 <isblank>:
isblank():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:298
int isblank (int ch){
    if (ch == ' ')
    13b8:	67 66 83 7c 24 04 20 	cmpl   $0x20,0x4(%esp)
    13bf:	75 08                	jne    13c9 <isblank+0x11>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:299
        return 1;
    13c1:	66 b8 01 00 00 00    	mov    $0x1,%eax
    13c7:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:300
    return 0;
    13c9:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:301
}
    13cf:	66 c3                	retl   

000013d1 <isprint>:
isprint():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:302
int isprint (int ch){
    13d1:	66 53                	push   %ebx
    13d3:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303
    if (isalpha(ch) || isdigit(ch) || isalnum(ch) || ispunct(ch) || isblank(ch)){
    13d9:	66 53                	push   %ebx
    13db:	66 e8 b3 fe ff ff    	calll  1294 <isalpha>
    13e1:	66 83 c4 04          	add    $0x4,%esp
    13e5:	66 85 c0             	test   %eax,%eax
    13e8:	75 46                	jne    1430 <isprint+0x5f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 1)
    13ea:	66 53                	push   %ebx
    13ec:	66 e8 d5 fe ff ff    	calll  12c7 <isdigit>
    13f2:	66 83 c4 04          	add    $0x4,%esp
    13f6:	66 85 c0             	test   %eax,%eax
    13f9:	75 3d                	jne    1438 <isprint+0x67>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 2)
    13fb:	66 53                	push   %ebx
    13fd:	66 e8 e4 fe ff ff    	calll  12e7 <isalnum>
    1403:	66 83 c4 04          	add    $0x4,%esp
    1407:	66 85 c0             	test   %eax,%eax
    140a:	75 34                	jne    1440 <isprint+0x6f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 3)
    140c:	66 53                	push   %ebx
    140e:	66 e8 11 ff ff ff    	calll  1325 <ispunct>
    1414:	66 83 c4 04          	add    $0x4,%esp
    1418:	66 85 c0             	test   %eax,%eax
    141b:	75 2b                	jne    1448 <isprint+0x77>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 4)
    141d:	66 53                	push   %ebx
    141f:	66 e8 93 ff ff ff    	calll  13b8 <isblank>
    1425:	66 83 c4 04          	add    $0x4,%esp
    1429:	66 85 c0             	test   %eax,%eax
    142c:	75 22                	jne    1450 <isprint+0x7f>
    142e:	eb 26                	jmp    1456 <isprint+0x85>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:304
        return 1;
    1430:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1436:	eb 1e                	jmp    1456 <isprint+0x85>
    1438:	66 b8 01 00 00 00    	mov    $0x1,%eax
    143e:	eb 16                	jmp    1456 <isprint+0x85>
    1440:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1446:	eb 0e                	jmp    1456 <isprint+0x85>
    1448:	66 b8 01 00 00 00    	mov    $0x1,%eax
    144e:	eb 06                	jmp    1456 <isprint+0x85>
    1450:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:307
    }
    return 0;
}
    1456:	66 5b                	pop    %ebx
    1458:	66 c3                	retl   

0000145a <iscntrl>:
iscntrl():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:308
int iscntrl (int ch){
    145a:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:310
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
    1460:	66 83 f8 1f          	cmp    $0x1f,%eax
    1464:	76 0e                	jbe    1474 <iscntrl+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:312
        return 1;
    if (ch == 0x7f)
    1466:	66 83 f8 7f          	cmp    $0x7f,%eax
    146a:	75 10                	jne    147c <iscntrl+0x22>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:313
        return 1;
    146c:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1472:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:311
    return 0;
}
int iscntrl (int ch){
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
        return 1;
    1474:	66 b8 01 00 00 00    	mov    $0x1,%eax
    147a:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:314
    if (ch == 0x7f)
        return 1;
    return 0;
    147c:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:315
}
    1482:	66 c3                	retl   

00001484 <read_n_sector>:
read_n_sector():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:321

/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    1484:	66 55                	push   %ebp
    1486:	66 57                	push   %edi
    1488:	66 56                	push   %esi
    148a:	66 53                	push   %ebx
    148c:	66 83 ec 1c          	sub    $0x1c,%esp
    1490:	67 66 0f b7 7c 24 30 	movzwl 0x30(%esp),%edi
    1497:	67 66 0f b7 74 24 34 	movzwl 0x34(%esp),%esi
    149e:	67 66 0f b7 44 24 38 	movzwl 0x38(%esp),%eax
    14a5:	67 89 44 24 0c       	mov    %ax,0xc(%esp)
    14aa:	67 66 0f b7 44 24 3c 	movzwl 0x3c(%esp),%eax
    14b1:	67 89 44 24 0e       	mov    %ax,0xe(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322
    for (int i = 0; i < number; i++){
    14b6:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    14bc:	eb 7d                	jmp    153b <read_n_sector+0xb7>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:323 (discriminator 3)
        int sector = (sector_code+i) % 18+1;
    14be:	66 0f b7 ef          	movzwl %di,%ebp
    14c2:	66 01 dd             	add    %ebx,%ebp
    14c5:	66 ba 39 8e e3 38    	mov    $0x38e38e39,%edx
    14cb:	66 89 e8             	mov    %ebp,%eax
    14ce:	66 f7 ea             	imul   %edx
    14d1:	66 c1 fa 02          	sar    $0x2,%edx
    14d5:	66 89 e8             	mov    %ebp,%eax
    14d8:	66 c1 f8 1f          	sar    $0x1f,%eax
    14dc:	66 29 c2             	sub    %eax,%edx
    14df:	66 89 d1             	mov    %edx,%ecx
    14e2:	67 66 8d 14 d2       	lea    (%edx,%edx,8),%edx
    14e7:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    14ec:	66 89 ea             	mov    %ebp,%edx
    14ef:	66 29 c2             	sub    %eax,%edx
    14f2:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:325 (discriminator 3)
        int mid = (sector_code+i) / 18;
        int cylinder = mid >> 1;
    14f6:	66 89 cd             	mov    %ecx,%ebp
    14f9:	66 d1 fd             	sar    %ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:327 (discriminator 3)
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    14fc:	66 83 ec 0c          	sub    $0xc,%esp
    1500:	66 89 d8             	mov    %ebx,%eax
    1503:	66 c1 e0 09          	shl    $0x9,%eax
    1507:	67 03 44 24 1a       	add    0x1a(%esp),%ax
    150c:	66 0f b7 c0          	movzwl %ax,%eax
    1510:	66 50                	push   %eax
    1512:	67 66 0f b7 44 24 1c 	movzwl 0x1c(%esp),%eax
    1519:	66 50                	push   %eax
    151b:	66 0f b7 d2          	movzwl %dx,%edx
    151f:	66 52                	push   %edx
    1521:	66 0f b7 ed          	movzwl %bp,%ebp
    1525:	66 55                	push   %ebp
    1527:	66 83 e1 01          	and    $0x1,%ecx
    152b:	66 51                	push   %ecx
    152d:	66 e8 29 01 00 00    	calll  165c <read_sector>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 3)
/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    for (int i = 0; i < number; i++){
    1533:	66 83 c3 01          	add    $0x1,%ebx
    1537:	66 83 c4 20          	add    $0x20,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 1)
    153b:	66 0f b7 c6          	movzwl %si,%eax
    153f:	66 39 c3             	cmp    %eax,%ebx
    1542:	0f 8c 78 ff          	jl     14be <read_n_sector+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:330
        int cylinder = mid >> 1;
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    }
    return ;
}
    1546:	66 83 c4 1c          	add    $0x1c,%esp
    154a:	66 5b                	pop    %ebx
    154c:	66 5e                	pop    %esi
    154e:	66 5f                	pop    %edi
    1550:	66 5d                	pop    %ebp
    1552:	66 c3                	retl   
    1554:	66 90                	xchg   %eax,%eax
    1556:	66 90                	xchg   %eax,%eax
    1558:	66 90                	xchg   %eax,%eax
    155a:	66 90                	xchg   %eax,%eax
    155c:	66 90                	xchg   %eax,%eax
    155e:	66 90                	xchg   %eax,%eax

00001560 <write_port_byte>:
write_port_byte():
    1560:	66 55                	push   %ebp
    1562:	66 89 e5             	mov    %esp,%ebp
    1565:	53                   	push   %bx
    1566:	51                   	push   %cx
    1567:	52                   	push   %dx
    1568:	56                   	push   %si
    1569:	57                   	push   %di
    156a:	55                   	push   %bp
    156b:	1e                   	push   %ds
    156c:	06                   	push   %es
    156d:	16                   	push   %ss
    156e:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1572:	67 8a 45 0c          	mov    0xc(%ebp),%al
    1576:	cd 34                	int    $0x34
    1578:	17                   	pop    %ss
    1579:	07                   	pop    %es
    157a:	1f                   	pop    %ds
    157b:	5d                   	pop    %bp
    157c:	5f                   	pop    %di
    157d:	5e                   	pop    %si
    157e:	5a                   	pop    %dx
    157f:	59                   	pop    %cx
    1580:	5b                   	pop    %bx
    1581:	66 89 ec             	mov    %ebp,%esp
    1584:	66 5d                	pop    %ebp
    1586:	66 c3                	retl   

00001588 <read_port_byte>:
read_port_byte():
    1588:	66 55                	push   %ebp
    158a:	66 89 e5             	mov    %esp,%ebp
    158d:	53                   	push   %bx
    158e:	51                   	push   %cx
    158f:	52                   	push   %dx
    1590:	56                   	push   %si
    1591:	57                   	push   %di
    1592:	55                   	push   %bp
    1593:	1e                   	push   %ds
    1594:	06                   	push   %es
    1595:	16                   	push   %ss
    1596:	67 8b 45 08          	mov    0x8(%ebp),%ax
    159a:	cd 33                	int    $0x33
    159c:	17                   	pop    %ss
    159d:	07                   	pop    %es
    159e:	1f                   	pop    %ds
    159f:	5d                   	pop    %bp
    15a0:	5f                   	pop    %di
    15a1:	5e                   	pop    %si
    15a2:	5a                   	pop    %dx
    15a3:	59                   	pop    %cx
    15a4:	5b                   	pop    %bx
    15a5:	66 89 ec             	mov    %ebp,%esp
    15a8:	66 5d                	pop    %ebp
    15aa:	66 c3                	retl   

000015ac <write_memory_byte>:
write_memory_byte():
    15ac:	66 55                	push   %ebp
    15ae:	66 89 e5             	mov    %esp,%ebp
    15b1:	50                   	push   %ax
    15b2:	53                   	push   %bx
    15b3:	52                   	push   %dx
    15b4:	1e                   	push   %ds
    15b5:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    15b9:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    15bd:	c1 e0 0c             	shl    $0xc,%ax
    15c0:	67 8a 4d 0c          	mov    0xc(%ebp),%cl
    15c4:	cd 36                	int    $0x36
    15c6:	1f                   	pop    %ds
    15c7:	5a                   	pop    %dx
    15c8:	5b                   	pop    %bx
    15c9:	58                   	pop    %ax
    15ca:	66 89 ec             	mov    %ebp,%esp
    15cd:	66 5d                	pop    %ebp
    15cf:	66 c3                	retl   

000015d1 <read_memory_byte>:
read_memory_byte():
    15d1:	66 55                	push   %ebp
    15d3:	66 89 e5             	mov    %esp,%ebp
    15d6:	53                   	push   %bx
    15d7:	51                   	push   %cx
    15d8:	52                   	push   %dx
    15d9:	56                   	push   %si
    15da:	57                   	push   %di
    15db:	55                   	push   %bp
    15dc:	1e                   	push   %ds
    15dd:	06                   	push   %es
    15de:	16                   	push   %ss
    15df:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    15e3:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    15e7:	c1 e0 0c             	shl    $0xc,%ax
    15ea:	cd 35                	int    $0x35
    15ec:	17                   	pop    %ss
    15ed:	07                   	pop    %es
    15ee:	1f                   	pop    %ds
    15ef:	5d                   	pop    %bp
    15f0:	5f                   	pop    %di
    15f1:	5e                   	pop    %si
    15f2:	5a                   	pop    %dx
    15f3:	59                   	pop    %cx
    15f4:	5b                   	pop    %bx
    15f5:	66 89 ec             	mov    %ebp,%esp
    15f8:	66 5d                	pop    %ebp
    15fa:	66 c3                	retl   

000015fc <check_keyboard>:
check_keyboard():
    15fc:	b4 01                	mov    $0x1,%ah
    15fe:	cd 16                	int    $0x16
    1600:	74 05                	je     1607 <check_keyboard.have_key>
    1602:	b8 00 00             	mov    $0x0,%ax
    1605:	eb 03                	jmp    160a <check_keyboard.check_keyboard_return>

00001607 <check_keyboard.have_key>:
check_keyboard.have_key():
    1607:	b8 01 00             	mov    $0x1,%ax

0000160a <check_keyboard.check_keyboard_return>:
check_keyboard.check_keyboard_return():
    160a:	66 c3                	retl   

0000160c <get_keyboard>:
get_keyboard():
    160c:	b4 00                	mov    $0x0,%ah
    160e:	cd 16                	int    $0x16
    1610:	66 c3                	retl   

00001612 <clean_screen>:
clean_screen():
    1612:	50                   	push   %ax
    1613:	53                   	push   %bx
    1614:	51                   	push   %cx
    1615:	52                   	push   %dx
    1616:	b4 06                	mov    $0x6,%ah
    1618:	b0 00                	mov    $0x0,%al
    161a:	b5 00                	mov    $0x0,%ch
    161c:	b1 00                	mov    $0x0,%cl
    161e:	b6 17                	mov    $0x17,%dh
    1620:	b2 4f                	mov    $0x4f,%dl
    1622:	b7 1f                	mov    $0x1f,%bh
    1624:	cd 10                	int    $0x10
    1626:	5a                   	pop    %dx
    1627:	59                   	pop    %cx
    1628:	5b                   	pop    %bx
    1629:	58                   	pop    %ax
    162a:	66 c3                	retl   

0000162c <scroll_screen>:
scroll_screen():
    162c:	50                   	push   %ax
    162d:	53                   	push   %bx
    162e:	51                   	push   %cx
    162f:	52                   	push   %dx
    1630:	b4 06                	mov    $0x6,%ah
    1632:	b0 01                	mov    $0x1,%al
    1634:	b5 00                	mov    $0x0,%ch
    1636:	b1 00                	mov    $0x0,%cl
    1638:	b6 17                	mov    $0x17,%dh
    163a:	b2 4f                	mov    $0x4f,%dl
    163c:	b7 10                	mov    $0x10,%bh
    163e:	cd 10                	int    $0x10
    1640:	5a                   	pop    %dx
    1641:	59                   	pop    %cx
    1642:	5b                   	pop    %bx
    1643:	58                   	pop    %ax
    1644:	66 c3                	retl   

00001646 <get_random>:
get_random():
    1646:	53                   	push   %bx
    1647:	b8 00 00             	mov    $0x0,%ax
    164a:	e6 43                	out    %al,$0x43
    164c:	e4 40                	in     $0x40,%al
    164e:	b3 08                	mov    $0x8,%bl
    1650:	f6 f3                	div    %bl
    1652:	88 e0                	mov    %ah,%al
    1654:	b4 00                	mov    $0x0,%ah
    1656:	83 c0 72             	add    $0x72,%ax
    1659:	5b                   	pop    %bx
    165a:	66 c3                	retl   

0000165c <read_sector>:
read_sector():
    165c:	66 55                	push   %ebp
    165e:	66 89 e5             	mov    %esp,%ebp
    1661:	50                   	push   %ax
    1662:	53                   	push   %bx
    1663:	51                   	push   %cx
    1664:	52                   	push   %dx
    1665:	06                   	push   %es
    1666:	67 8b 45 14          	mov    0x14(%ebp),%ax
    166a:	8e c0                	mov    %ax,%es
    166c:	67 8b 5d 18          	mov    0x18(%ebp),%bx
    1670:	b4 02                	mov    $0x2,%ah
    1672:	b0 01                	mov    $0x1,%al
    1674:	b2 00                	mov    $0x0,%dl
    1676:	67 8a 75 08          	mov    0x8(%ebp),%dh
    167a:	67 8a 6d 0c          	mov    0xc(%ebp),%ch
    167e:	67 8a 4d 10          	mov    0x10(%ebp),%cl
    1682:	cd 13                	int    $0x13
    1684:	07                   	pop    %es
    1685:	5a                   	pop    %dx
    1686:	59                   	pop    %cx
    1687:	5b                   	pop    %bx
    1688:	58                   	pop    %ax
    1689:	66 89 ec             	mov    %ebp,%esp
    168c:	66 5d                	pop    %ebp
    168e:	66 c3                	retl   

00001690 <print_my_name>:
print_my_name():
    1690:	50                   	push   %ax
    1691:	53                   	push   %bx
    1692:	51                   	push   %cx
    1693:	52                   	push   %dx
    1694:	1e                   	push   %ds
    1695:	06                   	push   %es
    1696:	55                   	push   %bp
    1697:	b8 00 10             	mov    $0x1000,%ax
    169a:	8e c0                	mov    %ax,%es
    169c:	b8 08 40             	mov    $0x4008,%ax
    169f:	89 c5                	mov    %ax,%bp
    16a1:	b4 13                	mov    $0x13,%ah
    16a3:	b0 00                	mov    $0x0,%al
    16a5:	b7 00                	mov    $0x0,%bh
    16a7:	b3 0f                	mov    $0xf,%bl
    16a9:	b9 19 00             	mov    $0x19,%cx
    16ac:	b6 18                	mov    $0x18,%dh
    16ae:	b2 01                	mov    $0x1,%dl
    16b0:	cd 10                	int    $0x10
    16b2:	5d                   	pop    %bp
    16b3:	07                   	pop    %es
    16b4:	1f                   	pop    %ds
    16b5:	5a                   	pop    %dx
    16b6:	59                   	pop    %cx
    16b7:	5b                   	pop    %bx
    16b8:	58                   	pop    %ax
    16b9:	c3                   	ret    

000016ba <reboot>:
reboot():
    16ba:	b4 06                	mov    $0x6,%ah
    16bc:	b0 00                	mov    $0x0,%al
    16be:	b5 00                	mov    $0x0,%ch
    16c0:	b1 00                	mov    $0x0,%cl
    16c2:	b6 18                	mov    $0x18,%dh
    16c4:	b2 4f                	mov    $0x4f,%dl
    16c6:	b7 1f                	mov    $0x1f,%bh
    16c8:	cd 10                	int    $0x10
    16ca:	cd 19                	int    $0x19

000016cc <strlen>:
strlen():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:3
#include "../include/type.h"

size_t strlen(char * str){
    16cc:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:4
    u32 len = 0;
    16d2:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
    while (str[len] != 0){
    16d8:	eb 04                	jmp    16de <strlen+0x12>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:6
        len++;
    16da:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
#include "../include/type.h"

size_t strlen(char * str){
    u32 len = 0;
    while (str[len] != 0){
    16de:	67 80 3c 02 00       	cmpb   $0x0,(%edx,%eax,1)
    16e3:	75 f5                	jne    16da <strlen+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:9
        len++;
    }
    return len;
}
    16e5:	66 f3 c3             	repz retl 

000016e8 <strncpy>:
strncpy():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:11

void strncpy(char * dest, char * src, u32 size){
    16e8:	66 56                	push   %esi
    16ea:	66 53                	push   %ebx
    16ec:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    16f2:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    16f8:	67 66 8b 4c 24 14    	mov    0x14(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12
    for (int i = 0; i < size; i++){
    16fe:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1704:	eb 0e                	jmp    1714 <strncpy+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:13 (discriminator 3)
        dest[i] = src[i];
    1706:	67 66 0f b6 14 06    	movzbl (%esi,%eax,1),%edx
    170c:	67 88 14 03          	mov    %dl,(%ebx,%eax,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 3)
    }
    return len;
}

void strncpy(char * dest, char * src, u32 size){
    for (int i = 0; i < size; i++){
    1710:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 1)
    1714:	66 39 c8             	cmp    %ecx,%eax
    1717:	72 ed                	jb     1706 <strncpy+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:15
        dest[i] = src[i];
    }
    dest[size] = '\0';
    1719:	67 c6 04 0b 00       	movb   $0x0,(%ebx,%ecx,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:16
}
    171e:	66 5b                	pop    %ebx
    1720:	66 5e                	pop    %esi
    1722:	66 c3                	retl   

00001724 <strcmp>:
strcmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:18

int strcmp(char * lhs, char * rhs){
    1724:	66 57                	push   %edi
    1726:	66 56                	push   %esi
    1728:	66 53                	push   %ebx
    172a:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    1730:	67 66 8b 7c 24 14    	mov    0x14(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:19
    int lhs_len = strlen(lhs);
    1736:	66 56                	push   %esi
    1738:	66 e8 8e ff ff ff    	calll  16cc <strlen>
    173e:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:20
    int rhs_len = strlen(rhs);
    1741:	67 66 89 3c 24       	mov    %edi,(%esp)
    1746:	66 e8 80 ff ff ff    	calll  16cc <strlen>
    174c:	66 83 c4 04          	add    $0x4,%esp
/mnt/e/code/my_operating_system/os/service/../lib/string.c:21
    if (lhs_len != rhs_len){
    1750:	66 39 c3             	cmp    %eax,%ebx
    1753:	75 25                	jne    177a <strcmp+0x56>
    1755:	66 b8 00 00 00 00    	mov    $0x0,%eax
    175b:	eb 10                	jmp    176d <strcmp+0x49>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:25
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
    175d:	67 66 0f b6 14 07    	movzbl (%edi,%eax,1),%edx
    1763:	67 38 14 06          	cmp    %dl,(%esi,%eax,1)
    1767:	75 19                	jne    1782 <strcmp+0x5e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 2)
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
    1769:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 1)
    176d:	66 39 d8             	cmp    %ebx,%eax
    1770:	7c eb                	jl     175d <strcmp+0x39>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:28
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    1772:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1778:	eb 0e                	jmp    1788 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:22

int strcmp(char * lhs, char * rhs){
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    177a:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1780:	eb 06                	jmp    1788 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:26
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
            return 1;
    1782:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:29
    }
    return 0;
}
    1788:	66 5b                	pop    %ebx
    178a:	66 5e                	pop    %esi
    178c:	66 5f                	pop    %edi
    178e:	66 c3                	retl   

00001790 <strncmp>:
strncmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:31

int strncmp(char * lhs, char * rhs, int size){
    1790:	66 56                	push   %esi
    1792:	66 53                	push   %ebx
    1794:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    179a:	67 66 8b 4c 24 10    	mov    0x10(%esp),%ecx
    17a0:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32
    for (int i = 0; i < size; i++){
    17a6:	66 b8 00 00 00 00    	mov    $0x0,%eax
    17ac:	eb 10                	jmp    17be <strncmp+0x2e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:33
        if (lhs[i] != rhs[i])
    17ae:	67 66 0f b6 14 01    	movzbl (%ecx,%eax,1),%edx
    17b4:	67 38 14 03          	cmp    %dl,(%ebx,%eax,1)
    17b8:	75 11                	jne    17cb <strncmp+0x3b>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 2)
    }
    return 0;
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
    17ba:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 1)
    17be:	66 39 f0             	cmp    %esi,%eax
    17c1:	7c eb                	jl     17ae <strncmp+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:36
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    17c3:	66 b8 00 00 00 00    	mov    $0x0,%eax
    17c9:	eb 06                	jmp    17d1 <strncmp+0x41>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:34
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
        if (lhs[i] != rhs[i])
            return 1;
    17cb:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:37
    }
    return 0;
    17d1:	66 5b                	pop    %ebx
    17d3:	66 5e                	pop    %esi
    17d5:	66 c3                	retl   

000017d7 <move_name>:
move_name():
/mnt/e/code/my_operating_system/os/service/../lib/style.c:9

void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    17d7:	66 0f b7 0e 9e 0f    	movzwl 0xf9e,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10
    for (int i =78; i >= 0; i--){
    17dd:	66 b8 4e 00 00 00    	mov    $0x4e,%eax
    17e3:	eb 16                	jmp    17fb <move_name+0x24>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:11 (discriminator 3)
        text_line[i+1] = text_line[i];
    17e5:	67 66 0f b7 94 00 00 	movzwl 0xf00(%eax,%eax,1),%edx
    17ec:	0f 00 00 
    17ef:	67 89 94 00 02 0f 00 	mov    %dx,0xf02(%eax,%eax,1)
    17f6:	00 
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 3)
void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    for (int i =78; i >= 0; i--){
    17f7:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 1)
    17fb:	66 85 c0             	test   %eax,%eax
    17fe:	79 e5                	jns    17e5 <move_name+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:13
        text_line[i+1] = text_line[i];
    }
    text_line[0] = last_char;
    1800:	89 0e 00 0f          	mov    %cx,0xf00
    1804:	66 c3                	retl   
