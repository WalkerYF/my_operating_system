
kernel.debug:     file format elf32-i386


Disassembly of section .text:

00000000 <_start>:
_start():
       0:	e8 02 01             	call   105 <install_int33>
       3:	e8 38 01             	call   13e <install_int34>
       6:	e8 72 01             	call   17b <install_int35>
       9:	e8 aa 01             	call   1b6 <install_int36>
       c:	e8 a5 00             	call   b4 <install_int40>
       f:	66 e8 9b 02 00 00    	calll  2b0 <cstart>
      15:	e8 74 00             	call   8c <restart>

00000018 <start_tty>:
start_tty():
      18:	ea 00 00 00 15       	ljmp   $0x1500,$0x0
      1d:	66 e8 52 06 00 00    	calll  675 <tty>
      23:	b4 02                	mov    $0x2,%ah
      25:	cd 40                	int    $0x40
      27:	eb fe                	jmp    27 <user1_bound_y_right>

00000029 <install_int8>:
install_int8():
      29:	53                   	push   %bx
      2a:	51                   	push   %cx
      2b:	52                   	push   %dx
      2c:	56                   	push   %si
      2d:	57                   	push   %di
      2e:	55                   	push   %bp
      2f:	1e                   	push   %ds
      30:	06                   	push   %es
      31:	16                   	push   %ss
      32:	b0 34                	mov    $0x34,%al
      34:	e6 43                	out    %al,$0x43
      36:	b8 ff ff             	mov    $0xffff,%ax
      39:	e6 40                	out    %al,$0x40
      3b:	88 e0                	mov    %ah,%al
      3d:	e6 40                	out    %al,$0x40
      3f:	b8 00 00             	mov    $0x0,%ax
      42:	8e d8                	mov    %ax,%ds
      44:	8c c8                	mov    %cs,%ax
      46:	a3 22 00             	mov    %ax,0x22
      49:	c7 06 20 00 59 00    	movw   $0x59,0x20
      4f:	17                   	pop    %ss
      50:	07                   	pop    %es
      51:	1f                   	pop    %ds
      52:	5d                   	pop    %bp
      53:	5f                   	pop    %di
      54:	5e                   	pop    %si
      55:	5a                   	pop    %dx
      56:	59                   	pop    %cx
      57:	5b                   	pop    %bx
      58:	c3                   	ret    

00000059 <new_int8>:
new_int8():
      59:	66 60                	pushal 
      5b:	06                   	push   %es
      5c:	1e                   	push   %ds
      5d:	54                   	push   %sp
      5e:	16                   	push   %ss
      5f:	89 e6                	mov    %sp,%si
      61:	b8 00 10             	mov    $0x1000,%ax
      64:	8e c0                	mov    %ax,%es
      66:	8b 3e 04 a0          	mov    -0x5ffc,%di
      6a:	b9 2e 00             	mov    $0x2e,%cx
      6d:	fc                   	cld    
      6e:	f3 a4                	rep movsb %ds:(%si),%es:(%di)
      70:	b8 00 10             	mov    $0x1000,%ax
      73:	8e c0                	mov    %ax,%es
      75:	8e d8                	mov    %ax,%ds
      77:	8e d0                	mov    %ax,%ss
      79:	bc 00 50             	mov    $0x5000,%sp
      7c:	66 e8 36 0b 00 00    	calll  bb8 <schedule_process>
      82:	b0 20                	mov    $0x20,%al
      84:	e6 20                	out    %al,$0x20
      86:	e6 a0                	out    %al,$0xa0
      88:	e8 01 00             	call   8c <restart>
      8b:	cf                   	iret   

0000008c <restart>:
restart():
      8c:	8b 2e 04 a0          	mov    -0x5ffc,%bp
      90:	89 ee                	mov    %bp,%si
      92:	83 c6 04             	add    $0x4,%si
      95:	3e 8e 46 00          	mov    %ds:0x0(%bp),%es
      99:	3e 8b 7e 02          	mov    %ds:0x2(%bp),%di
      9d:	b9 2a 00             	mov    $0x2a,%cx
      a0:	83 ef 2a             	sub    $0x2a,%di
      a3:	fc                   	cld    
      a4:	f3 a4                	rep movsb %ds:(%si),%es:(%di)
      a6:	8c c0                	mov    %es,%ax
      a8:	83 ef 2a             	sub    $0x2a,%di
      ab:	8e d0                	mov    %ax,%ss
      ad:	89 fc                	mov    %di,%sp
      af:	1f                   	pop    %ds
      b0:	07                   	pop    %es
      b1:	66 61                	popal  
      b3:	cf                   	iret   

000000b4 <install_int40>:
install_int40():
      b4:	53                   	push   %bx
      b5:	51                   	push   %cx
      b6:	52                   	push   %dx
      b7:	56                   	push   %si
      b8:	57                   	push   %di
      b9:	55                   	push   %bp
      ba:	1e                   	push   %ds
      bb:	06                   	push   %es
      bc:	16                   	push   %ss
      bd:	b8 00 00             	mov    $0x0,%ax
      c0:	8e d8                	mov    %ax,%ds
      c2:	8c c8                	mov    %cs,%ax
      c4:	c7 06 00 01 d7 00    	movw   $0xd7,0x100
      ca:	a3 02 01             	mov    %ax,0x102
      cd:	17                   	pop    %ss
      ce:	07                   	pop    %es
      cf:	1f                   	pop    %ds
      d0:	5d                   	pop    %bp
      d1:	5f                   	pop    %di
      d2:	5e                   	pop    %si
      d3:	5a                   	pop    %dx
      d4:	59                   	pop    %cx
      d5:	5b                   	pop    %bx
      d6:	c3                   	ret    

000000d7 <new_int40>:
new_int40():
      d7:	80 fc 4c             	cmp    $0x4c,%ah
      da:	74 11                	je     ed <new_int40.return_kernel>
      dc:	88 e3                	mov    %ah,%bl
      de:	31 c0                	xor    %ax,%ax
      e0:	b0 02                	mov    $0x2,%al
      e2:	f6 e3                	mul    %bl
      e4:	89 c6                	mov    %ax,%si
      e6:	bb 20 a0             	mov    $0xa020,%bx
      e9:	66 ff 10             	calll  *(%bx,%si)
      ec:	cf                   	iret   

000000ed <new_int40.return_kernel>:
new_int40.return_kernel():
      ed:	59                   	pop    %cx
      ee:	59                   	pop    %cx
      ef:	59                   	pop    %cx
      f0:	b8 00 10             	mov    $0x1000,%ax
      f3:	8e d8                	mov    %ax,%ds
      f5:	8e c0                	mov    %ax,%es
      f7:	8e d0                	mov    %ax,%ss
      f9:	bc 00 50             	mov    $0x5000,%sp
      fc:	51                   	push   %cx
      fd:	68 00 10             	push   $0x1000
     100:	68 18 00             	push   $0x18
     103:	fb                   	sti    
     104:	cf                   	iret   

00000105 <install_int33>:
install_int33():
     105:	53                   	push   %bx
     106:	51                   	push   %cx
     107:	52                   	push   %dx
     108:	56                   	push   %si
     109:	57                   	push   %di
     10a:	55                   	push   %bp
     10b:	1e                   	push   %ds
     10c:	06                   	push   %es
     10d:	16                   	push   %ss
     10e:	b8 00 00             	mov    $0x0,%ax
     111:	8e d8                	mov    %ax,%ds
     113:	8c c8                	mov    %cs,%ax
     115:	c7 06 cc 00 28 01    	movw   $0x128,0xcc
     11b:	a3 ce 00             	mov    %ax,0xce
     11e:	17                   	pop    %ss
     11f:	07                   	pop    %es
     120:	1f                   	pop    %ds
     121:	5d                   	pop    %bp
     122:	5f                   	pop    %di
     123:	5e                   	pop    %si
     124:	5a                   	pop    %dx
     125:	59                   	pop    %cx
     126:	5b                   	pop    %bx
     127:	c3                   	ret    

00000128 <new_int33>:
new_int33():
     128:	53                   	push   %bx
     129:	51                   	push   %cx
     12a:	52                   	push   %dx
     12b:	56                   	push   %si
     12c:	57                   	push   %di
     12d:	55                   	push   %bp
     12e:	1e                   	push   %ds
     12f:	06                   	push   %es
     130:	16                   	push   %ss
     131:	89 c2                	mov    %ax,%dx
     133:	ec                   	in     (%dx),%al
     134:	17                   	pop    %ss
     135:	07                   	pop    %es
     136:	1f                   	pop    %ds
     137:	5d                   	pop    %bp
     138:	5f                   	pop    %di
     139:	5e                   	pop    %si
     13a:	5a                   	pop    %dx
     13b:	59                   	pop    %cx
     13c:	5b                   	pop    %bx
     13d:	cf                   	iret   

0000013e <install_int34>:
install_int34():
     13e:	53                   	push   %bx
     13f:	51                   	push   %cx
     140:	52                   	push   %dx
     141:	56                   	push   %si
     142:	57                   	push   %di
     143:	55                   	push   %bp
     144:	1e                   	push   %ds
     145:	06                   	push   %es
     146:	16                   	push   %ss
     147:	b8 00 00             	mov    $0x0,%ax
     14a:	8e d8                	mov    %ax,%ds
     14c:	8c c8                	mov    %cs,%ax
     14e:	c7 06 d0 00 61 01    	movw   $0x161,0xd0
     154:	a3 d2 00             	mov    %ax,0xd2
     157:	17                   	pop    %ss
     158:	07                   	pop    %es
     159:	1f                   	pop    %ds
     15a:	5d                   	pop    %bp
     15b:	5f                   	pop    %di
     15c:	5e                   	pop    %si
     15d:	5a                   	pop    %dx
     15e:	59                   	pop    %cx
     15f:	5b                   	pop    %bx
     160:	c3                   	ret    

00000161 <new_int34>:
new_int34():
     161:	50                   	push   %ax
     162:	53                   	push   %bx
     163:	51                   	push   %cx
     164:	52                   	push   %dx
     165:	56                   	push   %si
     166:	57                   	push   %di
     167:	55                   	push   %bp
     168:	1e                   	push   %ds
     169:	06                   	push   %es
     16a:	16                   	push   %ss
     16b:	89 da                	mov    %bx,%dx
     16d:	88 c0                	mov    %al,%al
     16f:	ee                   	out    %al,(%dx)
     170:	17                   	pop    %ss
     171:	07                   	pop    %es
     172:	1f                   	pop    %ds
     173:	5d                   	pop    %bp
     174:	5f                   	pop    %di
     175:	5e                   	pop    %si
     176:	5a                   	pop    %dx
     177:	59                   	pop    %cx
     178:	5b                   	pop    %bx
     179:	58                   	pop    %ax
     17a:	cf                   	iret   

0000017b <install_int35>:
install_int35():
     17b:	53                   	push   %bx
     17c:	51                   	push   %cx
     17d:	52                   	push   %dx
     17e:	56                   	push   %si
     17f:	57                   	push   %di
     180:	55                   	push   %bp
     181:	1e                   	push   %ds
     182:	06                   	push   %es
     183:	16                   	push   %ss
     184:	b8 00 00             	mov    $0x0,%ax
     187:	8e d8                	mov    %ax,%ds
     189:	8c c8                	mov    %cs,%ax
     18b:	c7 06 d4 00 9e 01    	movw   $0x19e,0xd4
     191:	a3 d6 00             	mov    %ax,0xd6
     194:	17                   	pop    %ss
     195:	07                   	pop    %es
     196:	1f                   	pop    %ds
     197:	5d                   	pop    %bp
     198:	5f                   	pop    %di
     199:	5e                   	pop    %si
     19a:	5a                   	pop    %dx
     19b:	59                   	pop    %cx
     19c:	5b                   	pop    %bx
     19d:	c3                   	ret    

0000019e <new_int35>:
new_int35():
     19e:	53                   	push   %bx
     19f:	51                   	push   %cx
     1a0:	52                   	push   %dx
     1a1:	56                   	push   %si
     1a2:	57                   	push   %di
     1a3:	55                   	push   %bp
     1a4:	1e                   	push   %ds
     1a5:	06                   	push   %es
     1a6:	16                   	push   %ss
     1a7:	8e c0                	mov    %ax,%es
     1a9:	26 8a 07             	mov    %es:(%bx),%al
     1ac:	17                   	pop    %ss
     1ad:	07                   	pop    %es
     1ae:	1f                   	pop    %ds
     1af:	5d                   	pop    %bp
     1b0:	5f                   	pop    %di
     1b1:	5e                   	pop    %si
     1b2:	5a                   	pop    %dx
     1b3:	59                   	pop    %cx
     1b4:	5b                   	pop    %bx
     1b5:	cf                   	iret   

000001b6 <install_int36>:
install_int36():
     1b6:	53                   	push   %bx
     1b7:	51                   	push   %cx
     1b8:	52                   	push   %dx
     1b9:	56                   	push   %si
     1ba:	57                   	push   %di
     1bb:	55                   	push   %bp
     1bc:	1e                   	push   %ds
     1bd:	06                   	push   %es
     1be:	16                   	push   %ss
     1bf:	b8 00 00             	mov    $0x0,%ax
     1c2:	8e d8                	mov    %ax,%ds
     1c4:	8c c8                	mov    %cs,%ax
     1c6:	c7 06 d8 00 d9 01    	movw   $0x1d9,0xd8
     1cc:	a3 da 00             	mov    %ax,0xda
     1cf:	17                   	pop    %ss
     1d0:	07                   	pop    %es
     1d1:	1f                   	pop    %ds
     1d2:	5d                   	pop    %bp
     1d3:	5f                   	pop    %di
     1d4:	5e                   	pop    %si
     1d5:	5a                   	pop    %dx
     1d6:	59                   	pop    %cx
     1d7:	5b                   	pop    %bx
     1d8:	c3                   	ret    

000001d9 <new_int36>:
new_int36():
     1d9:	50                   	push   %ax
     1da:	53                   	push   %bx
     1db:	51                   	push   %cx
     1dc:	52                   	push   %dx
     1dd:	56                   	push   %si
     1de:	57                   	push   %di
     1df:	55                   	push   %bp
     1e0:	1e                   	push   %ds
     1e1:	06                   	push   %es
     1e2:	16                   	push   %ss
     1e3:	8e c0                	mov    %ax,%es
     1e5:	26 88 0f             	mov    %cl,%es:(%bx)
     1e8:	17                   	pop    %ss
     1e9:	07                   	pop    %es
     1ea:	1f                   	pop    %ds
     1eb:	5d                   	pop    %bp
     1ec:	5f                   	pop    %di
     1ed:	5e                   	pop    %si
     1ee:	5a                   	pop    %dx
     1ef:	59                   	pop    %cx
     1f0:	5b                   	pop    %bx
     1f1:	58                   	pop    %ax
     1f2:	cf                   	iret   

000001f3 <init_process>:
init_process():
/mnt/e/code/my_operating_system/os/kernel/start.c:29
    cur_process_index = 0;
    cur_process = &process_table[cur_process_index];
    return 0;
}

void init_process(int process_index, u16 segment){
     1f3:	66 53                	push   %ebx
     1f5:	67 66 8b 4c 24 08    	mov    0x8(%esp),%ecx
     1fb:	67 66 8b 54 24 0c    	mov    0xc(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/start.c:31
    PCB_t* this_process = &process_table[process_index];
    this_process->regs.ss = segment;
     201:	66 89 c8             	mov    %ecx,%eax
     204:	66 c1 e0 06          	shl    $0x6,%eax
     208:	67 66 8d 1c 88       	lea    (%eax,%ecx,4),%ebx
     20d:	67 89 93 00 5c 00 00 	mov    %dx,0x5c00(%ebx)
/mnt/e/code/my_operating_system/os/kernel/start.c:32
    this_process->regs.sp = 0x5000;
     214:	67 c7 83 02 5c 00 00 	movw   $0x5000,0x5c02(%ebx)
     21b:	00 50 
/mnt/e/code/my_operating_system/os/kernel/start.c:33
    this_process->regs.ds = segment;
     21d:	67 89 93 04 5c 00 00 	mov    %dx,0x5c04(%ebx)
/mnt/e/code/my_operating_system/os/kernel/start.c:34
    this_process->regs.es = segment;
     224:	67 89 93 06 5c 00 00 	mov    %dx,0x5c06(%ebx)
/mnt/e/code/my_operating_system/os/kernel/start.c:35
    this_process->regs.edi = 0;
     22b:	67 66 c7 83 08 5c 00 	movl   $0x0,0x5c08(%ebx)
     232:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:36
    this_process->regs.esi = 0;
     237:	67 66 c7 83 0c 5c 00 	movl   $0x0,0x5c0c(%ebx)
     23e:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:37
    this_process->regs.ebp = 0x5000;
     243:	67 66 c7 83 10 5c 00 	movl   $0x5000,0x5c10(%ebx)
     24a:	00 00 50 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:38
    this_process->regs.kernel_esp = 0;
     24f:	67 66 c7 83 14 5c 00 	movl   $0x0,0x5c14(%ebx)
     256:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:39
    this_process->regs.ebx = 0;
     25b:	67 66 c7 83 18 5c 00 	movl   $0x0,0x5c18(%ebx)
     262:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:40
    this_process->regs.edx = 0;
     267:	67 66 c7 83 1c 5c 00 	movl   $0x0,0x5c1c(%ebx)
     26e:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:41
    this_process->regs.ecx = 0;
     273:	67 66 c7 83 20 5c 00 	movl   $0x0,0x5c20(%ebx)
     27a:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:42
    this_process->regs.eax = 0;
     27f:	67 66 c7 83 24 5c 00 	movl   $0x0,0x5c24(%ebx)
     286:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:43
    this_process->regs.ip = 0x0000;
     28b:	67 c7 83 28 5c 00 00 	movw   $0x0,0x5c28(%ebx)
     292:	00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:44
    this_process->regs.cs = segment;
     294:	67 89 93 2a 5c 00 00 	mov    %dx,0x5c2a(%ebx)
/mnt/e/code/my_operating_system/os/kernel/start.c:45
    this_process->regs.flags = 0x1202;
     29b:	67 c7 83 2c 5c 00 00 	movw   $0x1202,0x5c2c(%ebx)
     2a2:	02 12 
/mnt/e/code/my_operating_system/os/kernel/start.c:46
    this_process->pid = process_index;
     2a4:	67 66 89 8b 30 5c 00 	mov    %ecx,0x5c30(%ebx)
     2ab:	00 
/mnt/e/code/my_operating_system/os/kernel/start.c:48
    // this_process->p_name = 0;TODO:实现strcpy函数再说。
};
     2ac:	66 5b                	pop    %ebx
     2ae:	66 c3                	retl   

000002b0 <cstart>:
cstart():
/mnt/e/code/my_operating_system/os/kernel/start.c:11
#include "../include/system_call.h"
#include "../include/fsystem.h"
#include "../include/proc.h"

void test_system_call();
int cstart(){
     2b0:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:13
    // 初始化文件系统
    init_fsystem();
     2b4:	66 e8 80 05 00 00    	calll  83a <init_fsystem>
/mnt/e/code/my_operating_system/os/kernel/start.c:15
    // 清屏
    clean_screen();
     2ba:	66 e8 52 13 00 00    	calll  1612 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/start.c:17
    // 将光标设置为0 TODO:
    set_cursor(0);
     2c0:	66 83 ec 0c          	sub    $0xc,%esp
     2c4:	66 6a 00             	pushl  $0x0
     2c7:	66 e8 5d 09 00 00    	calll  c2a <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:19
    // install_system_call(2, test_system_call);
    fs_load_by_name("test_a.bin", 0x2000, 0x0000);
     2cd:	66 83 c4 0c          	add    $0xc,%esp
     2d1:	66 6a 00             	pushl  $0x0
     2d4:	66 68 00 20 00 00    	pushl  $0x2000
     2da:	66 68 06 18 00 00    	pushl  $0x1806
     2e0:	66 e8 c5 07 00 00    	calll  aab <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:20
    fs_load_by_name("test_b.bin", 0x2500, 0x0000);
     2e6:	66 83 c4 0c          	add    $0xc,%esp
     2ea:	66 6a 00             	pushl  $0x0
     2ed:	66 68 00 25 00 00    	pushl  $0x2500
     2f3:	66 68 11 18 00 00    	pushl  $0x1811
     2f9:	66 e8 ac 07 00 00    	calll  aab <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:22
    // while (1){}
    init_process(0, 0x2000);
     2ff:	66 83 c4 08          	add    $0x8,%esp
     303:	66 68 00 20 00 00    	pushl  $0x2000
     309:	66 6a 00             	pushl  $0x0
     30c:	66 e8 e1 fe ff ff    	calll  1f3 <init_process>
/mnt/e/code/my_operating_system/os/kernel/start.c:23
    init_process(1, 0x2500);
     312:	66 83 c4 08          	add    $0x8,%esp
     316:	66 68 00 25 00 00    	pushl  $0x2500
     31c:	66 6a 01             	pushl  $0x1
     31f:	66 e8 ce fe ff ff    	calll  1f3 <init_process>
/mnt/e/code/my_operating_system/os/kernel/start.c:24
    cur_process_index = 0;
     325:	c7 06 00 a0 00 00    	movw   $0x0,-0x6000
/mnt/e/code/my_operating_system/os/kernel/start.c:25
    cur_process = &process_table[cur_process_index];
     32b:	66 c7 06 04 a0 00 5c 	movl   $0x5c00,-0x5ffc
     332:	00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:27
    return 0;
}
     334:	66 b8 00 00 00 00    	mov    $0x0,%eax
     33a:	66 83 c4 1c          	add    $0x1c,%esp
     33e:	66 c3                	retl   

00000340 <parser>:
parser():
/mnt/e/code/my_operating_system/os/kernel/tty.c:89
    }
    return ;
}


void parser(){
     340:	66 56                	push   %esi
     342:	66 53                	push   %ebx
     344:	66 83 ec 74          	sub    $0x74,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:93
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
     348:	66 be 00 00 00 00    	mov    $0x0,%esi
/mnt/e/code/my_operating_system/os/kernel/tty.c:92


void parser(){
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
     34e:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:91
}


void parser(){
    char arguments[10][10];
    int input_start = 0;
     354:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     35a:	eb 64                	jmp    3c0 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:96
        if(input_buf[input_end] == ' ' || input_buf[input_end] == '\0'){
     35c:	67 66 0f b6 83 20 50 	movzbl 0x5020(%ebx),%eax
     363:	00 00 
     365:	3c 20                	cmp    $0x20,%al
     367:	0f 94 c1             	sete   %cl
     36a:	84 c0                	test   %al,%al
     36c:	0f 94 c0             	sete   %al
     36f:	08 c1                	or     %al,%cl
     371:	74 49                	je     3bc <parser+0x7c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:97
            if (input_start == input_end){ // 如果并没有参数，那么继续
     373:	66 39 da             	cmp    %ebx,%edx
     376:	75 0a                	jne    382 <parser+0x42>
/mnt/e/code/my_operating_system/os/kernel/tty.c:98
                input_start++;
     378:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:99
                input_end++;
     37c:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:100
                continue;
     380:	eb 3e                	jmp    3c0 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:103
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
     382:	66 89 d9             	mov    %ebx,%ecx
     385:	66 29 d1             	sub    %edx,%ecx
     388:	67 66 8d 04 b6       	lea    (%esi,%esi,4),%eax
     38d:	67 66 8d 44 44 0c    	lea    0xc(%esp,%eax,2),%eax
     393:	66 83 ec 04          	sub    $0x4,%esp
     397:	66 51                	push   %ecx
     399:	66 81 c2 20 50 00 00 	add    $0x5020,%edx
     3a0:	66 52                	push   %edx
     3a2:	66 50                	push   %eax
     3a4:	66 e8 3e 13 00 00    	calll  16e8 <strncpy>
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
     3aa:	67 66 8d 53 01       	lea    0x1(%ebx),%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:106
                input_start = input_end;
                arguments_num++;
     3af:	66 83 c6 01          	add    $0x1,%esi
     3b3:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
                continue;
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
                input_end++;
     3b7:	66 89 d3             	mov    %edx,%ebx
     3ba:	eb 04                	jmp    3c0 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:110
                input_start = input_end;
                arguments_num++;
            }
        }
        else {// 有参数，还没有读到末尾
            input_end++;
     3bc:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     3c0:	66 3b 1e 00 50       	cmp    0x5000,%ebx
     3c5:	7e 95                	jle    35c <parser+0x1c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:117
        }
    }

    // 完成分词，开始进行解析。

    if(!strcmp(arguments[0],"run")){// 如果返回0，就是相等了
     3c7:	66 83 ec 08          	sub    $0x8,%esp
     3cb:	66 68 1c 18 00 00    	pushl  $0x181c
     3d1:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     3d7:	66 50                	push   %eax
     3d9:	66 e8 45 13 00 00    	calll  1724 <strcmp>
     3df:	66 83 c4 10          	add    $0x10,%esp
     3e3:	66 85 c0             	test   %eax,%eax
     3e6:	75 31                	jne    419 <parser+0xd9>
/mnt/e/code/my_operating_system/os/kernel/tty.c:122
        // 运行一个用户程序。
        // 先从软盘中加载一个指定程序到内存处，然后开始执行。
        // 考虑维护一个空闲空间的指针，然后每加载一个程序，如果可行的话。
        void (**my_program)();
        *my_program = 0x4000;
     3e8:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     3ee:	67 66 c7 03 00 40 00 	movl   $0x4000,(%ebx)
     3f5:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:123
        fs_load_by_name(arguments[1],*my_program);
     3f6:	66 83 ec 08          	sub    $0x8,%esp
     3fa:	66 68 00 40 00 00    	pushl  $0x4000
     400:	67 66 8d 44 24 22    	lea    0x22(%esp),%eax
     406:	66 50                	push   %eax
     408:	66 e8 9d 06 00 00    	calll  aab <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/tty.c:124
        (*my_program)();
     40e:	67 66 ff 13          	calll  *(%ebx)
     412:	66 83 c4 10          	add    $0x10,%esp
     416:	e9 1b 01             	jmp    534 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     419:	66 83 ec 08          	sub    $0x8,%esp
     41d:	66 68 20 18 00 00    	pushl  $0x1820
     423:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     429:	66 50                	push   %eax
     42b:	66 e8 f3 12 00 00    	calll  1724 <strcmp>
     431:	66 83 c4 10          	add    $0x10,%esp
     435:	66 85 c0             	test   %eax,%eax
     438:	75 23                	jne    45d <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126 (discriminator 1)
     43a:	66 83 fe 01          	cmp    $0x1,%esi
     43e:	75 1d                	jne    45d <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:127
        printf("\n\n");
     440:	66 83 ec 0c          	sub    $0xc,%esp
     444:	66 68 23 18 00 00    	pushl  $0x1823
     44a:	66 e8 23 0e 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:128
        fs_show_root_file_table();
     450:	66 e8 d5 06 00 00    	calll  b2b <fs_show_root_file_table>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
        void (**my_program)();
        *my_program = 0x4000;
        fs_load_by_name(arguments[1],*my_program);
        (*my_program)();
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     456:	66 83 c4 10          	add    $0x10,%esp
     45a:	e9 d7 00             	jmp    534 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     45d:	66 83 ec 08          	sub    $0x8,%esp
     461:	66 68 26 18 00 00    	pushl  $0x1826
     467:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     46d:	66 50                	push   %eax
     46f:	66 e8 af 12 00 00    	calll  1724 <strcmp>
     475:	66 83 c4 10          	add    $0x10,%esp
     479:	66 85 c0             	test   %eax,%eax
     47c:	75 23                	jne    4a1 <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130 (discriminator 1)
     47e:	66 83 fe 01          	cmp    $0x1,%esi
     482:	75 1d                	jne    4a1 <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:131
        printf("\n\n");
     484:	66 83 ec 0c          	sub    $0xc,%esp
     488:	66 68 23 18 00 00    	pushl  $0x1823
     48e:	66 e8 df 0d 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:132
        reboot();
     494:	66 e8 20 12 00 00    	calll  16ba <reboot>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     49a:	66 83 c4 10          	add    $0x10,%esp
     49e:	e9 93 00             	jmp    534 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134
        printf("\n\n");
        reboot();
    }
    else if(!strcmp(arguments[0],"help") && arguments_num == 1){
     4a1:	66 83 ec 08          	sub    $0x8,%esp
     4a5:	66 68 2d 18 00 00    	pushl  $0x182d
     4ab:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     4b1:	66 50                	push   %eax
     4b3:	66 e8 6b 12 00 00    	calll  1724 <strcmp>
     4b9:	66 83 c4 10          	add    $0x10,%esp
     4bd:	66 85 c0             	test   %eax,%eax
     4c0:	75 58                	jne    51a <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134 (discriminator 1)
     4c2:	66 83 fe 01          	cmp    $0x1,%esi
     4c6:	75 52                	jne    51a <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:135
        printf("\n\n");
     4c8:	66 83 ec 0c          	sub    $0xc,%esp
     4cc:	66 68 23 18 00 00    	pushl  $0x1823
     4d2:	66 e8 9b 0d 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:136
        printf("ls        : show the file in the root folder.\n");
     4d8:	67 66 c7 04 24 c8 20 	movl   $0x20c8,(%esp)
     4df:	00 00 
     4e1:	66 e8 8c 0d 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:137
        printf("run [name]: run the file in the root folder.\n");
     4e7:	67 66 c7 04 24 f8 20 	movl   $0x20f8,(%esp)
     4ee:	00 00 
     4f0:	66 e8 7d 0d 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:138
        printf("help      : show the help message.\n");
     4f6:	67 66 c7 04 24 28 21 	movl   $0x2128,(%esp)
     4fd:	00 00 
     4ff:	66 e8 6e 0d 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:139
        printf("reboot    : reboot the machine.\n");
     505:	67 66 c7 04 24 4c 21 	movl   $0x214c,(%esp)
     50c:	00 00 
     50e:	66 e8 5f 0d 00 00    	calll  1273 <printf>
     514:	66 83 c4 10          	add    $0x10,%esp
     518:	eb 1a                	jmp    534 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:142
    }
    else {
        printf("\n%s : command not found! \n", input_buf);
     51a:	66 83 ec 08          	sub    $0x8,%esp
     51e:	66 68 20 50 00 00    	pushl  $0x5020
     524:	66 68 32 18 00 00    	pushl  $0x1832
     52a:	66 e8 43 0d 00 00    	calll  1273 <printf>
     530:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:144
    }
    int current_cursor = get_cursor();
     534:	66 e8 62 07 00 00    	calll  c9c <get_cursor>
     53a:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:145
    command_line_row = (current_cursor / 80);
     53e:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     544:	66 f7 ea             	imul   %edx
     547:	66 c1 fa 05          	sar    $0x5,%edx
     54b:	66 89 16 04 40       	mov    %edx,0x4004
/mnt/e/code/my_operating_system/os/kernel/tty.c:148
    // printf("arguments: %d|%s|%s|",arguments_num, arguments[0],arguments[1]);
    return ;
}
     550:	66 83 c4 74          	add    $0x74,%esp
     554:	66 5b                	pop    %ebx
     556:	66 5e                	pop    %esi
     558:	66 c3                	retl   

0000055a <create_a_line>:
create_a_line():
/mnt/e/code/my_operating_system/os/kernel/tty.c:151

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
     55a:	66 83 ec 2c          	sub    $0x2c,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:152
    char message[30] = "walker@walker-pc ~ $ \0";
     55e:	66 a1 98 21          	mov    0x2198,%eax
     562:	67 66 89 44 24 02    	mov    %eax,0x2(%esp)
     568:	66 a1 9c 21          	mov    0x219c,%eax
     56c:	67 66 89 44 24 06    	mov    %eax,0x6(%esp)
     572:	66 a1 a0 21          	mov    0x21a0,%eax
     576:	67 66 89 44 24 0a    	mov    %eax,0xa(%esp)
     57c:	66 a1 a4 21          	mov    0x21a4,%eax
     580:	67 66 89 44 24 0e    	mov    %eax,0xe(%esp)
     586:	66 a1 a8 21          	mov    0x21a8,%eax
     58a:	67 66 89 44 24 12    	mov    %eax,0x12(%esp)
     590:	66 0f b7 06 ac 21    	movzwl 0x21ac,%eax
     596:	67 89 44 24 16       	mov    %ax,0x16(%esp)
     59b:	66 0f b6 06 ae 21    	movzbl 0x21ae,%eax
     5a1:	67 88 44 24 18       	mov    %al,0x18(%esp)
     5a6:	67 66 c7 44 24 19 00 	movl   $0x0,0x19(%esp)
     5ad:	00 00 00 
     5b0:	67 c7 44 24 1d 00 00 	movw   $0x0,0x1d(%esp)
     5b7:	67 c6 44 24 1f 00    	movb   $0x0,0x1f(%esp)
/mnt/e/code/my_operating_system/os/kernel/tty.c:153
    for (int i = 0; i < MAX_BUF; i++){
     5bd:	66 b8 00 00 00 00    	mov    $0x0,%eax
     5c3:	eb 0c                	jmp    5d1 <create_a_line+0x77>
/mnt/e/code/my_operating_system/os/kernel/tty.c:154 (discriminator 3)
        input_buf[i] = 0;
     5c5:	67 c6 80 20 50 00 00 	movb   $0x0,0x5020(%eax)
     5cc:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 3)
}

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    char message[30] = "walker@walker-pc ~ $ \0";
    for (int i = 0; i < MAX_BUF; i++){
     5cd:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 1)
     5d1:	66 83 f8 63          	cmp    $0x63,%eax
     5d5:	7e ee                	jle    5c5 <create_a_line+0x6b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:156
        input_buf[i] = 0;
    }
    message_length = strlen(message);
     5d7:	66 83 ec 0c          	sub    $0xc,%esp
     5db:	67 66 8d 44 24 0e    	lea    0xe(%esp),%eax
     5e1:	66 50                	push   %eax
     5e3:	66 e8 e3 10 00 00    	calll  16cc <strlen>
     5e9:	66 a3 04 50          	mov    %eax,0x5004
/mnt/e/code/my_operating_system/os/kernel/tty.c:157
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
     5ed:	66 03 06 00 50       	add    0x5000,%eax
     5f2:	66 89 c1             	mov    %eax,%ecx
     5f5:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     5fb:	66 f7 ea             	imul   %edx
     5fe:	66 c1 fa 05          	sar    $0x5,%edx
     602:	66 c1 f9 1f          	sar    $0x1f,%ecx
     606:	66 29 ca             	sub    %ecx,%edx
     609:	66 89 d0             	mov    %edx,%eax
     60c:	66 03 06 04 40       	add    0x4004,%eax
     611:	66 83 c0 01          	add    $0x1,%eax
     615:	66 a3 04 40          	mov    %eax,0x4004
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    while(command_line_row > 23){
     619:	66 83 c4 10          	add    $0x10,%esp
     61d:	eb 0c                	jmp    62b <create_a_line+0xd1>
/mnt/e/code/my_operating_system/os/kernel/tty.c:159
        scroll_screen();
     61f:	66 e8 07 10 00 00    	calll  162c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:160
        command_line_row--;
     625:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    for (int i = 0; i < MAX_BUF; i++){
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    while(command_line_row > 23){
     62b:	66 a1 04 40          	mov    0x4004,%eax
     62f:	66 83 f8 17          	cmp    $0x17,%eax
     633:	7f ea                	jg     61f <create_a_line+0xc5>
/mnt/e/code/my_operating_system/os/kernel/tty.c:162
        scroll_screen();
        command_line_row--;
    }
    command_line_cursor = 0;
     635:	66 c7 06 00 50 00 00 	movl   $0x0,0x5000
     63c:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:163
    set_cursor(command_line_row * 80);
     63e:	66 83 ec 0c          	sub    $0xc,%esp
     642:	67 66 8d 04 80       	lea    (%eax,%eax,4),%eax
     647:	66 c1 e0 04          	shl    $0x4,%eax
     64b:	66 0f b7 d0          	movzwl %ax,%edx
     64f:	66 52                	push   %edx
     651:	66 e8 d3 05 00 00    	calll  c2a <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:165
    // printf("%d", command_line_row);
    printf("%s", message);
     657:	66 83 c4 08          	add    $0x8,%esp
     65b:	67 66 8d 44 24 0a    	lea    0xa(%esp),%eax
     661:	66 50                	push   %eax
     663:	66 68 4d 18 00 00    	pushl  $0x184d
     669:	66 e8 04 0c 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:166
}
     66f:	66 83 c4 3c          	add    $0x3c,%esp
     673:	66 c3                	retl   

00000675 <tty>:
tty():
/mnt/e/code/my_operating_system/os/kernel/tty.c:19
int message_length = 0;
int command_line_cursor = 0; // 光标在输入区的偏移量
char input_buf[MAX_BUF]; // 输入缓存区


void tty(){
     675:	66 56                	push   %esi
     677:	66 53                	push   %ebx
     679:	66 83 ec 04          	sub    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:21
    int keyboard_flag = 0;
    new_line_flag = 1;
     67d:	66 c7 06 00 40 01 00 	movl   $0x1,0x4000
     684:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:22
    command_line_row = -1;
     686:	66 c7 06 04 40 ff ff 	movl   $0xffffffff,0x4004
     68d:	ff ff 
/mnt/e/code/my_operating_system/os/kernel/tty.c:23
    clean_screen();
     68f:	66 e8 7d 0f 00 00    	calll  1612 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:24
    set_cursor(1974);
     695:	66 83 ec 0c          	sub    $0xc,%esp
     699:	66 68 b6 07 00 00    	pushl  $0x7b6
     69f:	66 e8 85 05 00 00    	calll  c2a <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:25
    set_cursor(0);
     6a5:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
     6ac:	00 00 
     6ae:	66 e8 76 05 00 00    	calll  c2a <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:26
    print_my_name();
     6b4:	66 e8 d6 0f 00 00    	calll  1690 <print_my_name>
     6ba:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:29
    while (1){
        // 使用缓冲区数据更新
        if (new_line_flag){
     6be:	66 83 3e 00 40 00    	cmpl   $0x0,0x4000
     6c4:	74 0f                	je     6d5 <tty+0x60>
/mnt/e/code/my_operating_system/os/kernel/tty.c:30
            create_a_line();
     6c6:	66 e8 8e fe ff ff    	calll  55a <create_a_line>
/mnt/e/code/my_operating_system/os/kernel/tty.c:31
            new_line_flag = 0;
     6cc:	66 c7 06 00 40 00 00 	movl   $0x0,0x4000
     6d3:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:34
        }

        if(command_line_row == 23 && message_length + command_line_cursor > 80){
     6d5:	66 83 3e 04 40 17    	cmpl   $0x17,0x4004
     6db:	75 2f                	jne    70c <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:34 (discriminator 1)
     6dd:	66 a1 00 50          	mov    0x5000,%eax
     6e1:	66 03 06 04 50       	add    0x5004,%eax
     6e6:	66 83 f8 50          	cmp    $0x50,%eax
     6ea:	7e 20                	jle    70c <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:35
            scroll_screen();
     6ec:	66 e8 3a 0f 00 00    	calll  162c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:36
            command_line_row--;
     6f2:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/kernel/tty.c:37
            set_cursor(1840);
     6f8:	66 83 ec 0c          	sub    $0xc,%esp
     6fc:	66 68 30 07 00 00    	pushl  $0x730
     702:	66 e8 22 05 00 00    	calll  c2a <set_cursor>
     708:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:39
        }
        putc(' ');// 用来删除光标处的文字，与输入退格的时候光标-1配合使用
     70c:	66 83 ec 0c          	sub    $0xc,%esp
     710:	66 6a 20             	pushl  $0x20
     713:	66 e8 df 05 00 00    	calll  cf8 <putc>
/mnt/e/code/my_operating_system/os/kernel/tty.c:42

        // command_line_row = get_cursor() / 80;
        set_cursor(80*command_line_row + message_length);
     719:	66 8b 16 04 40       	mov    0x4004,%edx
     71e:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     723:	66 89 d0             	mov    %edx,%eax
     726:	66 c1 e0 04          	shl    $0x4,%eax
     72a:	03 06 04 50          	add    0x5004,%ax
     72e:	66 0f b7 c0          	movzwl %ax,%eax
     732:	67 66 89 04 24       	mov    %eax,(%esp)
     737:	66 e8 ed 04 00 00    	calll  c2a <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:43
        puts(input_buf, command_line_cursor);
     73d:	66 83 c4 08          	add    $0x8,%esp
     741:	66 ff 36 00 50       	pushl  0x5000
     746:	66 68 20 50 00 00    	pushl  $0x5020
     74c:	66 e8 9b 07 00 00    	calll  eed <puts>
/mnt/e/code/my_operating_system/os/kernel/tty.c:46

        // 更新完了 检测键盘
        keyboard_flag = check_keyboard();
     752:	66 e8 a4 0e 00 00    	calll  15fc <check_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:49

        // 如果返回1，则有输入，处理输入信息，否则继续循环。
        if (keyboard_flag){
     758:	66 83 c4 10          	add    $0x10,%esp
     75c:	85 c0                	test   %ax,%ax
     75e:	0f 84 5c ff          	je     6be <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:51
            // 处理键盘事件
            u16 keyboard_code =  get_keyboard();
     762:	66 e8 a4 0e 00 00    	calll  160c <get_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:52
            u8 ascii_code = keyboard_code;
     768:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:54
            u8 scan_code = keyboard_code >> 8;
            if (isprint(ascii_code)){
     76b:	66 83 ec 0c          	sub    $0xc,%esp
     76f:	66 0f b6 c0          	movzbl %al,%eax
     773:	66 50                	push   %eax
     775:	66 e8 53 0c 00 00    	calll  13ce <isprint>
     77b:	66 83 c4 10          	add    $0x10,%esp
     77f:	66 85 c0             	test   %eax,%eax
     782:	74 20                	je     7a4 <tty+0x12f>
/mnt/e/code/my_operating_system/os/kernel/tty.c:55
                if (command_line_cursor <= MAX_BUF){
     784:	66 a1 00 50          	mov    0x5000,%eax
     788:	66 83 f8 64          	cmp    $0x64,%eax
     78c:	0f 8f 2e ff          	jg     6be <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:56
                    input_buf[command_line_cursor++] = ascii_code;
     790:	67 66 8d 50 01       	lea    0x1(%eax),%edx
     795:	66 89 16 00 50       	mov    %edx,0x5000
     79a:	67 88 98 20 50 00 00 	mov    %bl,0x5020(%eax)
     7a1:	e9 1a ff             	jmp    6be <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:59
                }
            }
            else if (ascii_code == 13){
     7a4:	80 fb 0d             	cmp    $0xd,%bl
     7a7:	75 1e                	jne    7c7 <tty+0x152>
/mnt/e/code/my_operating_system/os/kernel/tty.c:60
                new_line_flag = 1;
     7a9:	66 c7 06 00 40 01 00 	movl   $0x1,0x4000
     7b0:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:61
                input_buf[command_line_cursor] = '\0';
     7b2:	66 a1 00 50          	mov    0x5000,%eax
     7b6:	67 c6 80 20 50 00 00 	movb   $0x0,0x5020(%eax)
     7bd:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:62
                parser();
     7be:	66 e8 7c fb ff ff    	calll  340 <parser>
     7c4:	e9 f7 fe             	jmp    6be <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:64
            }
            else if (ascii_code == 8){
     7c7:	80 fb 08             	cmp    $0x8,%bl
     7ca:	75 3e                	jne    80a <loader_code_segment+0xa>
/mnt/e/code/my_operating_system/os/kernel/tty.c:65
                if(command_line_cursor){
     7cc:	66 a1 00 50          	mov    0x5000,%eax
     7d0:	66 85 c0             	test   %eax,%eax
     7d3:	0f 84 e7 fe          	je     6be <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:66
                    input_buf[--command_line_cursor] = 0;
     7d7:	67 66 8d 50 ff       	lea    -0x1(%eax),%edx
     7dc:	66 89 16 00 50       	mov    %edx,0x5000
     7e1:	67 c6 80 1f 50 00 00 	movb   $0x0,0x501f(%eax)
     7e8:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:68
                    // 将光标设置为前一个位置，方便删除
                    int cur_cursor = get_cursor();
     7e9:	66 e8 ad 04 00 00    	calll  c9c <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:69
                    set_cursor(cur_cursor-1);
     7ef:	66 83 ec 0c          	sub    $0xc,%esp
     7f3:	66 83 e8 01          	sub    $0x1,%eax
     7f7:	66 0f b7 c0          	movzwl %ax,%eax
     7fb:	66 50                	push   %eax
     7fd:	66 e8 27 04 00 00    	calll  c2a <set_cursor>
     803:	66 83 c4 10          	add    $0x10,%esp
     807:	e9 b4 fe             	jmp    6be <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:72
                }
            }
            else if (ascii_code == 27){
     80a:	80 fb 1b             	cmp    $0x1b,%bl
     80d:	0f 85 ad fe          	jne    6be <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:73
                __asm__("mov $0x4c00, %ax");
     811:	b8 00 4c             	mov    $0x4c00,%ax
/mnt/e/code/my_operating_system/os/kernel/tty.c:74
                __asm__("int $0x40");
     814:	cd 40                	int    $0x40
     816:	e9 a5 fe             	jmp    6be <tty+0x49>

00000819 <tty_scroll_screen>:
tty_scroll_screen():
/mnt/e/code/my_operating_system/os/kernel/tty.c:169
    // printf("%d", command_line_row);
    printf("%s", message);
}


void tty_scroll_screen(){
     819:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:170
    if (get_cursor()/80 > 24){
     81d:	66 e8 79 04 00 00    	calll  c9c <get_cursor>
     823:	3d cf 07             	cmp    $0x7cf,%ax
     826:	76 0c                	jbe    834 <tty_scroll_screen+0x1b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:171
        scroll_screen();
     828:	66 e8 fe 0d 00 00    	calll  162c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:172
        command_line_row--;
     82e:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/kernel/tty.c:175
    }
    return ;
     834:	66 83 c4 0c          	add    $0xc,%esp
     838:	66 c3                	retl   

0000083a <init_fsystem>:
init_fsystem():
/mnt/e/code/my_operating_system/os/service/fsystem.c:14
FileDescriptor root[56];
u16 root_sector;
u16 first_cluster_by_sector;
u16 cluster2sector;

void init_fsystem(){
     83a:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:15
    cluster2sector = 1;
     83e:	c7 06 c0 5b 01 00    	movw   $0x1,0x5bc0
/mnt/e/code/my_operating_system/os/service/fsystem.c:16
    root_sector = 37;
     844:	c7 06 a0 50 25 00    	movw   $0x25,0x50a0
/mnt/e/code/my_operating_system/os/service/fsystem.c:17
    first_cluster_by_sector = root_sector + 1;  
     84a:	c7 06 c2 5b 26 00    	movw   $0x26,0x5bc2
/mnt/e/code/my_operating_system/os/service/fsystem.c:18
    read_n_sector(root_sector,1, 0x1000, root);
     850:	66 b8 c0 54 00 00    	mov    $0x54c0,%eax
     856:	66 0f b7 c0          	movzwl %ax,%eax
     85a:	66 50                	push   %eax
     85c:	66 68 00 10 00 00    	pushl  $0x1000
     862:	66 6a 01             	pushl  $0x1
     865:	66 6a 25             	pushl  $0x25
     868:	66 e8 13 0c 00 00    	calll  1481 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:19
    read_n_sector(1,2,0x1000, FAT_table);// 这个会覆盖掉root吗？
     86e:	66 b8 c0 50 00 00    	mov    $0x50c0,%eax
     874:	66 0f b7 c0          	movzwl %ax,%eax
     878:	66 50                	push   %eax
     87a:	66 68 00 10 00 00    	pushl  $0x1000
     880:	66 6a 02             	pushl  $0x2
     883:	66 6a 01             	pushl  $0x1
     886:	66 e8 f5 0b 00 00    	calll  1481 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:27
    // puti(FAT_table[0]);
    // puti(root[0].cluster_number);
    // puts(&root[0], 10);
    // puts(&root[1], 10);
    // puts(&root[2], 10);
}
     88c:	66 83 c4 2c          	add    $0x2c,%esp
     890:	66 c3                	retl   

00000892 <_fs_find_descriptor_number_by_name>:
_fs_find_descriptor_number_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:29

u16 _fs_find_descriptor_number_by_name(char * file_name){
     892:	66 57                	push   %edi
     894:	66 56                	push   %esi
     896:	66 53                	push   %ebx
     898:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:30
    int file_name_length = strlen(file_name);
     89e:	66 83 ec 0c          	sub    $0xc,%esp
     8a2:	66 57                	push   %edi
     8a4:	66 e8 22 0e 00 00    	calll  16cc <strlen>
     8aa:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:31
    if (file_name_length >= 11) file_name_length = 11;
     8ad:	66 83 c4 10          	add    $0x10,%esp
     8b1:	66 83 f8 0a          	cmp    $0xa,%eax
     8b5:	7e 06                	jle    8bd <_fs_find_descriptor_number_by_name+0x2b>
     8b7:	66 be 0b 00 00 00    	mov    $0xb,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:33
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     8bd:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     8c3:	eb 2f                	jmp    8f4 <_fs_find_descriptor_number_by_name+0x62>
/mnt/e/code/my_operating_system/os/service/fsystem.c:34
        if (!strncmp(&root[i], file_name, file_name_length)){
     8c5:	66 89 d8             	mov    %ebx,%eax
     8c8:	66 c1 e0 05          	shl    $0x5,%eax
     8cc:	66 05 c0 54 00 00    	add    $0x54c0,%eax
     8d2:	66 83 ec 04          	sub    $0x4,%esp
     8d6:	66 56                	push   %esi
     8d8:	66 57                	push   %edi
     8da:	66 50                	push   %eax
     8dc:	66 e8 ae 0e 00 00    	calll  1790 <strncmp>
     8e2:	66 83 c4 10          	add    $0x10,%esp
     8e6:	66 85 c0             	test   %eax,%eax
     8e9:	75 05                	jne    8f0 <_fs_find_descriptor_number_by_name+0x5e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:35
            return i;
     8eb:	66 89 d8             	mov    %ebx,%eax
     8ee:	eb 10                	jmp    900 <_fs_find_descriptor_number_by_name+0x6e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 2)

u16 _fs_find_descriptor_number_by_name(char * file_name){
    int file_name_length = strlen(file_name);
    if (file_name_length >= 11) file_name_length = 11;
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     8f0:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 1)
     8f4:	66 83 fb 09          	cmp    $0x9,%ebx
     8f8:	7e cb                	jle    8c5 <_fs_find_descriptor_number_by_name+0x33>
/mnt/e/code/my_operating_system/os/service/fsystem.c:38
        if (!strncmp(&root[i], file_name, file_name_length)){
            return i;
        }
    }
    return -1;
     8fa:	66 b8 ff ff ff ff    	mov    $0xffffffff,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:39
}
     900:	66 5b                	pop    %ebx
     902:	66 5e                	pop    %esi
     904:	66 5f                	pop    %edi
     906:	66 c3                	retl   

00000908 <_fs_find_cluster_code_by_name>:
_fs_find_cluster_code_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:41

u16 _fs_find_cluster_code_by_name(char * file_name){
     908:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:42
    int index = _fs_find_descriptor_number_by_name(file_name);
     90c:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     912:	66 e8 7a ff ff ff    	calll  892 <_fs_find_descriptor_number_by_name>
     918:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:44
    if (index != -1)
        return root[index].cluster_code;
     91c:	66 c1 e0 05          	shl    $0x5,%eax
     920:	67 66 0f b7 80 da 54 	movzwl 0x54da(%eax),%eax
     927:	00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:46
    return 0;
}
     929:	66 83 c4 1c          	add    $0x1c,%esp
     92d:	66 c3                	retl   

0000092f <_fs_get_file_size_by_cluster_code>:
_fs_get_file_size_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:48

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
     92f:	67 66 0f b7 54 24 04 	movzwl 0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:49
    int size = 0;
     936:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     93c:	eb 1b                	jmp    959 <_fs_get_file_size_by_cluster_code+0x2a>
/mnt/e/code/my_operating_system/os/service/fsystem.c:51
        size += 512*cluster2sector;
     93e:	66 0f b7 0e c0 5b    	movzwl 0x5bc0,%ecx
     944:	66 c1 e1 09          	shl    $0x9,%ecx
     948:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:52
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     94b:	66 0f b7 d2          	movzwl %dx,%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:53
        cluster_code = FAT_table[cluster_code];
     94f:	67 66 0f b7 94 12 c0 	movzwl 0x50c0(%edx,%edx,1),%edx
     956:	50 00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    return 0;
}

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     959:	67 66 8d 4a fe       	lea    -0x2(%edx),%ecx
     95e:	83 f9 ed             	cmp    $0xffed,%cx
     961:	76 db                	jbe    93e <_fs_get_file_size_by_cluster_code+0xf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:56
        size += 512*cluster2sector;
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     963:	66 f3 c3             	repz retl 

00000966 <_fs_show_file_by_descriptor_number>:
_fs_show_file_by_descriptor_number():
/mnt/e/code/my_operating_system/os/service/fsystem.c:58

void _fs_show_file_by_descriptor_number(u16 index){
     966:	66 56                	push   %esi
     968:	66 53                	push   %ebx
     96a:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:59
    int cluster_code = root[index].cluster_code;
     96e:	67 66 0f b7 44 24 14 	movzwl 0x14(%esp),%eax
     975:	66 89 c6             	mov    %eax,%esi
     978:	66 c1 e6 05          	shl    $0x5,%esi
     97c:	67 66 0f b7 9e da 54 	movzwl 0x54da(%esi),%ebx
     983:	00 00 
     985:	66 81 c6 c0 54 00 00 	add    $0x54c0,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:60
    printf("%d, %d\n" , index,cluster_code);
     98c:	66 53                	push   %ebx
     98e:	66 50                	push   %eax
     990:	66 68 50 18 00 00    	pushl  $0x1850
     996:	66 e8 d7 08 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:62
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
     99c:	67 66 89 1c 24       	mov    %ebx,(%esp)
     9a1:	66 e8 88 ff ff ff    	calll  92f <_fs_get_file_size_by_cluster_code>
     9a7:	66 83 c4 0c          	add    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:61
}

void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
     9ab:	66 0f b7 c0          	movzwl %ax,%eax
     9af:	66 50                	push   %eax
     9b1:	66 56                	push   %esi
     9b3:	66 68 58 18 00 00    	pushl  $0x1858
     9b9:	66 e8 b4 08 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     9bf:	66 83 c4 10          	add    $0x10,%esp
     9c3:	eb 20                	jmp    9e5 <_fs_show_file_by_descriptor_number+0x7f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:64
        printf("-%d", cluster_code);
     9c5:	66 83 ec 08          	sub    $0x8,%esp
     9c9:	66 53                	push   %ebx
     9cb:	66 68 69 18 00 00    	pushl  $0x1869
     9d1:	66 e8 9c 08 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:65
        cluster_code = FAT_table[cluster_code];
     9d7:	67 66 0f b7 9c 1b c0 	movzwl 0x50c0(%ebx,%ebx,1),%ebx
     9de:	50 00 00 
     9e1:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     9e5:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     9ea:	66 3d ed ff 00 00    	cmp    $0xffed,%eax
     9f0:	76 d3                	jbe    9c5 <_fs_show_file_by_descriptor_number+0x5f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:67
        printf("-%d", cluster_code);
        cluster_code = FAT_table[cluster_code];
    }
    printf("-|\n");
     9f2:	66 83 ec 0c          	sub    $0xc,%esp
     9f6:	66 68 6d 18 00 00    	pushl  $0x186d
     9fc:	66 e8 71 08 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:69
    return ;
}
     a02:	66 83 c4 14          	add    $0x14,%esp
     a06:	66 5b                	pop    %ebx
     a08:	66 5e                	pop    %esi
     a0a:	66 c3                	retl   

00000a0c <_fs_load_by_cluster_code>:
_fs_load_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:71

u16 _fs_load_by_cluster_code(u16 cluster_code, u16 segment, u16 offset){
     a0c:	66 55                	push   %ebp
     a0e:	66 57                	push   %edi
     a10:	66 56                	push   %esi
     a12:	66 53                	push   %ebx
     a14:	66 83 ec 0c          	sub    $0xc,%esp
     a18:	67 66 0f b7 5c 24 20 	movzwl 0x20(%esp),%ebx
     a1f:	67 66 0f b7 6c 24 24 	movzwl 0x24(%esp),%ebp
     a26:	67 66 0f b7 74 24 28 	movzwl 0x28(%esp),%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:72
    int size = 0;
     a2d:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     a33:	eb 5b                	jmp    a90 <_fs_load_by_cluster_code+0x84>
/mnt/e/code/my_operating_system/os/service/fsystem.c:74
        size += 512*cluster2sector;
     a35:	66 0f b7 16 c0 5b    	movzwl 0x5bc0,%edx
     a3b:	66 89 d0             	mov    %edx,%eax
     a3e:	66 c1 e0 09          	shl    $0x9,%eax
     a42:	66 01 c7             	add    %eax,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:75
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     a45:	66 0f b7 0e c2 5b    	movzwl 0x5bc2,%ecx
     a4b:	66 0f b7 db          	movzwl %bx,%ebx
     a4f:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     a54:	66 0f af c2          	imul   %edx,%eax
     a58:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:76
        read_n_sector(sector_number, cluster2sector, segment, offset);
     a5b:	66 0f b7 ce          	movzwl %si,%ecx
     a5f:	66 51                	push   %ecx
     a61:	66 0f b7 cd          	movzwl %bp,%ecx
     a65:	66 51                	push   %ecx
     a67:	66 52                	push   %edx
     a69:	66 0f b7 c0          	movzwl %ax,%eax
     a6d:	66 50                	push   %eax
     a6f:	66 e8 0c 0a 00 00    	calll  1481 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:77
        offset = offset+cluster2sector*512;
     a75:	66 0f b7 06 c0 5b    	movzwl 0x5bc0,%eax
     a7b:	66 c1 e0 09          	shl    $0x9,%eax
     a7f:	66 01 c6             	add    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:78
        cluster_code = FAT_table[cluster_code];
     a82:	67 66 0f b7 9c 1b c0 	movzwl 0x50c0(%ebx,%ebx,1),%ebx
     a89:	50 00 00 
     a8c:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    return ;
}

u16 _fs_load_by_cluster_code(u16 cluster_code, u16 segment, u16 offset){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     a90:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     a95:	83 f8 ed             	cmp    $0xffed,%ax
     a98:	76 9b                	jbe    a35 <_fs_load_by_cluster_code+0x29>
/mnt/e/code/my_operating_system/os/service/fsystem.c:81
        read_n_sector(sector_number, cluster2sector, segment, offset);
        offset = offset+cluster2sector*512;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     a9a:	66 89 f8             	mov    %edi,%eax
     a9d:	66 83 c4 0c          	add    $0xc,%esp
     aa1:	66 5b                	pop    %ebx
     aa3:	66 5e                	pop    %esi
     aa5:	66 5f                	pop    %edi
     aa7:	66 5d                	pop    %ebp
     aa9:	66 c3                	retl   

00000aab <fs_load_by_name>:
fs_load_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:84


u16 fs_load_by_name(char * file_name, u16 segment, u16 offset){
     aab:	66 56                	push   %esi
     aad:	66 53                	push   %ebx
     aaf:	66 83 ec 10          	sub    $0x10,%esp
     ab3:	67 66 8b 5c 24 20    	mov    0x20(%esp),%ebx
     ab9:	67 66 8b 74 24 24    	mov    0x24(%esp),%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:85
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     abf:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     ac5:	66 e8 3d fe ff ff    	calll  908 <_fs_find_cluster_code_by_name>
     acb:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:86
    if (cluster_code){
     acf:	66 83 c4 10          	add    $0x10,%esp
     ad3:	66 85 c0             	test   %eax,%eax
     ad6:	74 1e                	je     af6 <fs_load_by_name+0x4b>
/mnt/e/code/my_operating_system/os/service/fsystem.c:87
        return _fs_load_by_cluster_code(cluster_code, segment, offset);
     ad8:	66 83 ec 04          	sub    $0x4,%esp
     adc:	66 0f b7 f6          	movzwl %si,%esi
     ae0:	66 56                	push   %esi
     ae2:	66 0f b7 db          	movzwl %bx,%ebx
     ae6:	66 53                	push   %ebx
     ae8:	66 50                	push   %eax
     aea:	66 e8 1c ff ff ff    	calll  a0c <_fs_load_by_cluster_code>
     af0:	66 83 c4 10          	add    $0x10,%esp
     af4:	eb 06                	jmp    afc <fs_load_by_name+0x51>
/mnt/e/code/my_operating_system/os/service/fsystem.c:90
    }
    else {
        return 0;
     af6:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:92
    }
}
     afc:	66 83 c4 04          	add    $0x4,%esp
     b00:	66 5b                	pop    %ebx
     b02:	66 5e                	pop    %esi
     b04:	66 c3                	retl   

00000b06 <fs_get_file_size>:
fs_get_file_size():
/mnt/e/code/my_operating_system/os/service/fsystem.c:95


u16 fs_get_file_size(char * file_name){
     b06:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:96
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     b0a:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     b10:	66 e8 f2 fd ff ff    	calll  908 <_fs_find_cluster_code_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:97
    return _fs_get_file_size_by_cluster_code(cluster_code);
     b16:	66 0f b7 c0          	movzwl %ax,%eax
     b1a:	67 66 89 04 24       	mov    %eax,(%esp)
     b1f:	66 e8 0a fe ff ff    	calll  92f <_fs_get_file_size_by_cluster_code>
/mnt/e/code/my_operating_system/os/service/fsystem.c:98
}
     b25:	66 83 c4 1c          	add    $0x1c,%esp
     b29:	66 c3                	retl   

00000b2b <fs_show_root_file_table>:
fs_show_root_file_table():
/mnt/e/code/my_operating_system/os/service/fsystem.c:100

void fs_show_root_file_table(){
     b2b:	66 53                	push   %ebx
     b2d:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:101
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
     b31:	66 68 71 18 00 00    	pushl  $0x1871
     b37:	66 68 79 18 00 00    	pushl  $0x1879
     b3d:	66 68 83 18 00 00    	pushl  $0x1883
     b43:	66 68 8e 18 00 00    	pushl  $0x188e
     b49:	66 e8 24 07 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:102
    printf("------------------------------------\n\r");
     b4f:	67 66 c7 04 24 70 21 	movl   $0x2170,(%esp)
     b56:	00 00 
     b58:	66 e8 15 07 00 00    	calll  1273 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     b5e:	66 83 c4 10          	add    $0x10,%esp
     b62:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     b68:	eb 18                	jmp    b82 <fs_show_root_file_table+0x57>
/mnt/e/code/my_operating_system/os/service/fsystem.c:105 (discriminator 3)
        _fs_show_file_by_descriptor_number(i);
     b6a:	66 83 ec 0c          	sub    $0xc,%esp
     b6e:	66 0f b7 c3          	movzwl %bx,%eax
     b72:	66 50                	push   %eax
     b74:	66 e8 ec fd ff ff    	calll  966 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 3)

void fs_show_root_file_table(){
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    printf("------------------------------------\n\r");
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     b7a:	66 83 c3 01          	add    $0x1,%ebx
     b7e:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 1)
     b82:	66 83 fb 08          	cmp    $0x8,%ebx
     b86:	7e e2                	jle    b6a <fs_show_root_file_table+0x3f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:108
        _fs_show_file_by_descriptor_number(i);
    }
    return ;
}
     b88:	66 83 c4 08          	add    $0x8,%esp
     b8c:	66 5b                	pop    %ebx
     b8e:	66 c3                	retl   

00000b90 <fs_show_file_by_name>:
fs_show_file_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:110

void fs_show_file_by_name(char * file_name){
     b90:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:111
    int descriptor_index = _fs_find_descriptor_number_by_name(file_name);
     b94:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     b9a:	66 e8 f2 fc ff ff    	calll  892 <_fs_find_descriptor_number_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:112
    _fs_show_file_by_descriptor_number(descriptor_index);
     ba0:	66 0f b7 c0          	movzwl %ax,%eax
     ba4:	67 66 89 04 24       	mov    %eax,(%esp)
     ba9:	66 e8 b7 fd ff ff    	calll  966 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:114
    return ;
}
     baf:	66 83 c4 1c          	add    $0x1c,%esp
     bb3:	66 c3                	retl   

00000bb5 <fs_show_floppy_infomation>:
fs_show_floppy_infomation():
/mnt/e/code/my_operating_system/os/service/fsystem.c:117


void fs_show_floppy_infomation(){
     bb5:	66 f3 c3             	repz retl 

00000bb8 <schedule_process>:
schedule_process():
/mnt/e/code/my_operating_system/os/service/proc.c:11
#include "../include/system_call.h"
#include "../include/fsystem.h"
#include "../include/proc.h"

void schedule_process(){
    cur_process_index = (cur_process_index + 1) % 2;
     bb8:	66 0f b7 06 00 a0    	movzwl -0x6000,%eax
     bbe:	66 83 c0 01          	add    $0x1,%eax
     bc2:	66 83 e0 01          	and    $0x1,%eax
     bc6:	a3 00 a0             	mov    %ax,0xa000
/mnt/e/code/my_operating_system/os/service/proc.c:12
    cur_process = &process_table[cur_process_index];
     bc9:	66 0f b7 c0          	movzwl %ax,%eax
     bcd:	66 89 c2             	mov    %eax,%edx
     bd0:	66 c1 e2 06          	shl    $0x6,%edx
     bd4:	67 66 8d 84 82 00 5c 	lea    0x5c00(%edx,%eax,4),%eax
     bdb:	00 00 
     bdd:	66 a3 04 a0          	mov    %eax,0xa004
     be1:	66 c3                	retl   

00000be3 <_put_char>:
_put_char():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:5
#include "../include/basic.h"
#include "../include/type.h"
#include "../include/string.h"

void _put_char(char c, u16 cursor_index){
     be3:	66 53                	push   %ebx
     be5:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:7
    int _address = 0xb8000;
    int _offset = cursor_index * 2;
     be9:	67 66 0f b7 5c 24 1c 	movzwl 0x1c(%esp),%ebx
     bf0:	66 01 db             	add    %ebx,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:8
    write_memory_byte(_address+_offset, c);
     bf3:	67 66 8d 83 00 80 0b 	lea    0xb8000(%ebx),%eax
     bfa:	00 
     bfb:	67 66 0f b6 54 24 18 	movzbl 0x18(%esp),%edx
     c02:	66 52                	push   %edx
     c04:	66 50                	push   %eax
     c06:	66 e8 a0 09 00 00    	calll  15ac <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:9
    write_memory_byte(_address+_offset+1, 0x1f);
     c0c:	66 81 c3 01 80 0b 00 	add    $0xb8001,%ebx
     c13:	66 83 c4 08          	add    $0x8,%esp
     c17:	66 6a 1f             	pushl  $0x1f
     c1a:	66 53                	push   %ebx
     c1c:	66 e8 8a 09 00 00    	calll  15ac <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:11
    return ;
}
     c22:	66 83 c4 18          	add    $0x18,%esp
     c26:	66 5b                	pop    %ebx
     c28:	66 c3                	retl   

00000c2a <set_cursor>:
set_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:13

void set_cursor(u16 cursor_index){
     c2a:	66 56                	push   %esi
     c2c:	66 53                	push   %ebx
     c2e:	66 83 ec 0c          	sub    $0xc,%esp
     c32:	67 66 8b 5c 24 18    	mov    0x18(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:16
    // short cursor_index = 80 * row + column;     // 计算光标寄存器的值
    u8 low_eight = cursor_index; // 取低八位，高位被截断
    u8 high_eight = cursor_index >> 8; // 取高八位
     c38:	66 89 d8             	mov    %ebx,%eax
     c3b:	c1 e8 08             	shr    $0x8,%ax
     c3e:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:17
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     c41:	66 6a 0e             	pushl  $0xe
     c44:	66 68 d4 03 00 00    	pushl  $0x3d4
     c4a:	66 e8 10 09 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:18
    write_port_byte(0x3d5, high_eight);// 将光标索引高八位写入端口
     c50:	66 83 c4 08          	add    $0x8,%esp
     c54:	66 89 f0             	mov    %esi,%eax
     c57:	66 0f b6 f0          	movzbl %al,%esi
     c5b:	66 56                	push   %esi
     c5d:	66 68 d5 03 00 00    	pushl  $0x3d5
     c63:	66 e8 f7 08 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:19
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     c69:	66 83 c4 08          	add    $0x8,%esp
     c6d:	66 6a 0f             	pushl  $0xf
     c70:	66 68 d4 03 00 00    	pushl  $0x3d4
     c76:	66 e8 e4 08 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:20
    write_port_byte(0x3d5, low_eight);// 将光标索引低八位写入端口
     c7c:	66 83 c4 08          	add    $0x8,%esp
     c80:	66 0f b6 db          	movzbl %bl,%ebx
     c84:	66 53                	push   %ebx
     c86:	66 68 d5 03 00 00    	pushl  $0x3d5
     c8c:	66 e8 ce 08 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:22
    return ;
}
     c92:	66 83 c4 14          	add    $0x14,%esp
     c96:	66 5b                	pop    %ebx
     c98:	66 5e                	pop    %esi
     c9a:	66 c3                	retl   

00000c9c <get_cursor>:
get_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:24

u16 get_cursor(){
     c9c:	66 53                	push   %ebx
     c9e:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:27
    u8 low_eight = 0, high_eight = 0;
    u16 cursor_index = 0;
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     ca2:	66 6a 0e             	pushl  $0xe
     ca5:	66 68 d4 03 00 00    	pushl  $0x3d4
     cab:	66 e8 af 08 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:28
    high_eight = read_port_byte(0x3d5);// 将光标索引高八位写入端口
     cb1:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     cb8:	00 00 
     cba:	66 e8 c8 08 00 00    	calll  1588 <read_port_byte>
     cc0:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:29
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     cc3:	66 83 c4 08          	add    $0x8,%esp
     cc7:	66 6a 0f             	pushl  $0xf
     cca:	66 68 d4 03 00 00    	pushl  $0x3d4
     cd0:	66 e8 8a 08 00 00    	calll  1560 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:30
    low_eight = read_port_byte(0x3d5);// 将光标索引低八位写入端口
     cd6:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     cdd:	00 00 
     cdf:	66 e8 a3 08 00 00    	calll  1588 <read_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:32
    cursor_index = high_eight;
    cursor_index = (cursor_index << 8) + low_eight;
     ce5:	66 c1 e3 08          	shl    $0x8,%ebx
     ce9:	66 0f b6 c0          	movzbl %al,%eax
     ced:	66 01 d8             	add    %ebx,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:34
    return cursor_index;
}
     cf0:	66 83 c4 18          	add    $0x18,%esp
     cf4:	66 5b                	pop    %ebx
     cf6:	66 c3                	retl   

00000cf8 <putc>:
putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:36

void putc(char c){
     cf8:	66 57                	push   %edi
     cfa:	66 56                	push   %esi
     cfc:	66 53                	push   %ebx
     cfe:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:37
    u16 cursor_index = get_cursor();
     d04:	66 e8 92 ff ff ff    	calll  c9c <get_cursor>
     d0a:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:38
    u16 row = cursor_index / 80;
     d0d:	66 0f b7 d8          	movzwl %ax,%ebx
     d11:	66 69 db cd cc 00 00 	imul   $0xcccd,%ebx,%ebx
     d18:	66 c1 eb 10          	shr    $0x10,%ebx
     d1c:	c1 eb 06             	shr    $0x6,%bx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:40
    u16 col = cursor_index % 80;
    if (cursor_index >= 1920){
     d1f:	3d 7f 07             	cmp    $0x77f,%ax
     d22:	76 0c                	jbe    d30 <putc+0x38>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:41
        scroll_screen();
     d24:	66 e8 02 09 00 00    	calll  162c <scroll_screen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:42
        cursor_index = 1840;
     d2a:	66 be 30 07 00 00    	mov    $0x730,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:44
    }
    switch (c) {
     d30:	66 89 f8             	mov    %edi,%eax
     d33:	3c 0a                	cmp    $0xa,%al
     d35:	74 06                	je     d3d <putc+0x45>
     d37:	3c 0d                	cmp    $0xd,%al
     d39:	74 25                	je     d60 <putc+0x68>
     d3b:	eb 45                	jmp    d82 <putc+0x8a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:46
        case '\n':
            set_cursor((row+1)*80); // 回车，移到下一行
     d3d:	66 83 ec 0c          	sub    $0xc,%esp
     d41:	67 66 8d 5c 9b 05    	lea    0x5(%ebx,%ebx,4),%ebx
     d47:	66 89 d8             	mov    %ebx,%eax
     d4a:	66 c1 e0 04          	shl    $0x4,%eax
     d4e:	66 0f b7 c0          	movzwl %ax,%eax
     d52:	66 50                	push   %eax
     d54:	66 e8 d0 fe ff ff    	calll  c2a <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:47
            break;
     d5a:	66 83 c4 10          	add    $0x10,%esp
     d5e:	eb 52                	jmp    db2 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:49
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     d60:	66 83 ec 0c          	sub    $0xc,%esp
     d64:	67 66 8d 1c 9b       	lea    (%ebx,%ebx,4),%ebx
     d69:	66 89 d8             	mov    %ebx,%eax
     d6c:	66 c1 e0 04          	shl    $0x4,%eax
     d70:	66 0f b7 c0          	movzwl %ax,%eax
     d74:	66 50                	push   %eax
     d76:	66 e8 ae fe ff ff    	calll  c2a <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:50
            break;
     d7c:	66 83 c4 10          	add    $0x10,%esp
     d80:	eb 30                	jmp    db2 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:52
        default:
            _put_char(c, cursor_index);
     d82:	66 83 ec 08          	sub    $0x8,%esp
     d86:	66 0f b7 c6          	movzwl %si,%eax
     d8a:	66 50                	push   %eax
     d8c:	66 89 f8             	mov    %edi,%eax
     d8f:	66 0f be f8          	movsbl %al,%edi
     d93:	66 57                	push   %edi
     d95:	66 e8 48 fe ff ff    	calll  be3 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:53
            set_cursor(cursor_index+1);
     d9b:	66 83 c6 01          	add    $0x1,%esi
     d9f:	66 0f b7 f6          	movzwl %si,%esi
     da3:	67 66 89 34 24       	mov    %esi,(%esp)
     da8:	66 e8 7c fe ff ff    	calll  c2a <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:54
            break;
     dae:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:57
    }
    return ;
}
     db2:	66 5b                	pop    %ebx
     db4:	66 5e                	pop    %esi
     db6:	66 5f                	pop    %edi
     db8:	66 c3                	retl   

00000dba <_putc>:
_putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:59

void _putc(char c){
     dba:	66 56                	push   %esi
     dbc:	66 53                	push   %ebx
     dbe:	66 83 ec 04          	sub    $0x4,%esp
     dc2:	67 66 8b 5c 24 10    	mov    0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:60
    u16 cursor_index = get_cursor();
     dc8:	66 e8 ce fe ff ff    	calll  c9c <get_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:61
    u16 row = cursor_index / 80;
     dce:	66 0f b7 d0          	movzwl %ax,%edx
     dd2:	66 69 d2 cd cc 00 00 	imul   $0xcccd,%edx,%edx
     dd9:	66 c1 ea 10          	shr    $0x10,%edx
     ddd:	c1 ea 06             	shr    $0x6,%dx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:62
    u16 col = cursor_index % 80;
     de0:	67 66 8d 34 92       	lea    (%edx,%edx,4),%esi
     de5:	66 c1 e6 04          	shl    $0x4,%esi
     de9:	66 89 f1             	mov    %esi,%ecx
     dec:	66 89 c6             	mov    %eax,%esi
     def:	66 29 ce             	sub    %ecx,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:63
    switch (c) {
     df2:	80 fb 0a             	cmp    $0xa,%bl
     df5:	74 07                	je     dfe <_putc+0x44>
     df7:	80 fb 0d             	cmp    $0xd,%bl
     dfa:	74 2b                	je     e27 <_putc+0x6d>
     dfc:	eb 4b                	jmp    e49 <_putc+0x8f>
     dfe:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:65
        case '\n':
            set_cursor((row+1)*80+col); // 回车，移到下一行
     e01:	66 83 ec 0c          	sub    $0xc,%esp
     e05:	67 66 8d 54 92 05    	lea    0x5(%edx,%edx,4),%edx
     e0b:	66 89 d0             	mov    %edx,%eax
     e0e:	66 c1 e0 04          	shl    $0x4,%eax
     e12:	66 01 c1             	add    %eax,%ecx
     e15:	66 0f b7 c9          	movzwl %cx,%ecx
     e19:	66 51                	push   %ecx
     e1b:	66 e8 09 fe ff ff    	calll  c2a <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:66
            break;
     e21:	66 83 c4 10          	add    $0x10,%esp
     e25:	eb 3c                	jmp    e63 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:68
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     e27:	66 83 ec 0c          	sub    $0xc,%esp
     e2b:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     e30:	66 89 d0             	mov    %edx,%eax
     e33:	66 c1 e0 04          	shl    $0x4,%eax
     e37:	66 0f b7 c0          	movzwl %ax,%eax
     e3b:	66 50                	push   %eax
     e3d:	66 e8 e7 fd ff ff    	calll  c2a <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:69
            break;
     e43:	66 83 c4 10          	add    $0x10,%esp
     e47:	eb 1a                	jmp    e63 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:71
        default:
            _put_char(c, cursor_index);
     e49:	66 83 ec 08          	sub    $0x8,%esp
     e4d:	66 0f b7 c0          	movzwl %ax,%eax
     e51:	66 50                	push   %eax
     e53:	66 0f be db          	movsbl %bl,%ebx
     e57:	66 53                	push   %ebx
     e59:	66 e8 84 fd ff ff    	calll  be3 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:73
            // set_cursor(cursor_index+1);
            break;
     e5f:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:76
    }
    return ;
}
     e63:	66 83 c4 04          	add    $0x4,%esp
     e67:	66 5b                	pop    %ebx
     e69:	66 5e                	pop    %esi
     e6b:	66 c3                	retl   

00000e6d <puti>:
puti():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:78

void puti(u32 n){
     e6d:	66 56                	push   %esi
     e6f:	66 53                	push   %ebx
     e71:	66 83 ec 44          	sub    $0x44,%esp
     e75:	67 66 8b 4c 24 50    	mov    0x50(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:79
    int len = 0;
     e7b:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     e81:	eb 2d                	jmp    eb0 <puti+0x43>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:82
        num[len] = n % 10;
     e83:	66 ba cd cc cc cc    	mov    $0xcccccccd,%edx
     e89:	66 89 c8             	mov    %ecx,%eax
     e8c:	66 f7 e2             	mul    %edx
     e8f:	66 c1 ea 03          	shr    $0x3,%edx
     e93:	66 89 d6             	mov    %edx,%esi
     e96:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     e9b:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     ea0:	66 29 c1             	sub    %eax,%ecx
     ea3:	67 66 89 4c 9c 04    	mov    %ecx,0x4(%esp,%ebx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:83
        n = n / 10;
     ea9:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:84
        len++;
     eac:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
}

void puti(u32 n){
    int len = 0;
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     eb0:	66 85 c9             	test   %ecx,%ecx
     eb3:	75 ce                	jne    e83 <puti+0x16>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     eb5:	66 83 eb 01          	sub    $0x1,%ebx
     eb9:	eb 23                	jmp    ede <puti+0x71>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:87 (discriminator 3)
        putc(num[i]+'0');
     ebb:	66 83 ec 0c          	sub    $0xc,%esp
     ebf:	67 66 0f b6 44 9c 10 	movzbl 0x10(%esp,%ebx,4),%eax
     ec6:	66 83 c0 30          	add    $0x30,%eax
     eca:	66 0f be c0          	movsbl %al,%eax
     ece:	66 50                	push   %eax
     ed0:	66 e8 22 fe ff ff    	calll  cf8 <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 3)
    while (n != 0){
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     ed6:	66 83 eb 01          	sub    $0x1,%ebx
     eda:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 1)
     ede:	66 85 db             	test   %ebx,%ebx
     ee1:	79 d8                	jns    ebb <puti+0x4e>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:90
        putc(num[i]+'0');
    }
    return ;
}
     ee3:	66 83 c4 44          	add    $0x44,%esp
     ee7:	66 5b                	pop    %ebx
     ee9:	66 5e                	pop    %esi
     eeb:	66 c3                	retl   

00000eed <puts>:
puts():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:92

void puts(char * str, int size){
     eed:	66 57                	push   %edi
     eef:	66 56                	push   %esi
     ef1:	66 53                	push   %ebx
     ef3:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
     ef9:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:93
    int i = 0;
     eff:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    while (i < size){
     f05:	eb 1a                	jmp    f21 <puts+0x34>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:95
        putc(str[i]);
     f07:	66 83 ec 0c          	sub    $0xc,%esp
     f0b:	67 66 0f be 04 1f    	movsbl (%edi,%ebx,1),%eax
     f11:	66 50                	push   %eax
     f13:	66 e8 df fd ff ff    	calll  cf8 <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:96
        i++;
     f19:	66 83 c3 01          	add    $0x1,%ebx
     f1d:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    return ;
}

void puts(char * str, int size){
    int i = 0;
    while (i < size){
     f21:	66 39 f3             	cmp    %esi,%ebx
     f24:	7c e1                	jl     f07 <puts+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:99
        putc(str[i]);
        i++;
    }
    return ;
}
     f26:	66 5b                	pop    %ebx
     f28:	66 5e                	pop    %esi
     f2a:	66 5f                	pop    %edi
     f2c:	66 c3                	retl   

00000f2e <sprintf>:
sprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:103



void sprintf(char * dest , char * format, ...){
     f2e:	66 55                	push   %ebp
     f30:	66 57                	push   %edi
     f32:	66 56                	push   %esi
     f34:	66 53                	push   %ebx
     f36:	66 83 ec 5c          	sub    $0x5c,%esp
     f3a:	67 66 8b 6c 24 70    	mov    0x70(%esp),%ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:106
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     f40:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:105



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     f46:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:104
}



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
     f4c:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     f52:	e9 33 01             	jmp    1088 <core_header_data_segment+0x88>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:109
        if (format[src_index] == '%'){
     f55:	3c 25                	cmp    $0x25,%al
     f57:	0f 85 1b 01          	jne    1076 <core_header_data_segment+0x76>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:111
            src_index++;
            switch(format[src_index]){
     f5b:	67 66 0f b6 44 39 01 	movzbl 0x1(%ecx,%edi,1),%eax
     f62:	3c 64                	cmp    $0x64,%al
     f64:	74 28                	je     f8e <sprintf+0x60>
     f66:	3c 73                	cmp    $0x73,%al
     f68:	0f 84 b5 00          	je     1021 <core_header_data_segment+0x21>
     f6c:	3c 63                	cmp    $0x63,%al
     f6e:	0f 85 fe 00          	jne    1070 <core_header_data_segment+0x70>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     f72:	67 66 8b 44 94 78    	mov    0x78(%esp,%edx,4),%eax
     f78:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:114
                    src_index++;
     f7d:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     f81:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     f86:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:115
                    src_index++;
                    break;
     f8b:	e9 fa 00             	jmp    1088 <core_header_data_segment+0x88>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     f8e:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     f93:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     f99:	67 66 8b 4c 94 78    	mov    0x78(%esp,%edx,4),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:119
                    int len = 0; 
     f9f:	66 be 00 00 00 00    	mov    $0x0,%esi
     fa5:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                    int num[INT_LENGTH];
                    while (n != 0){
     fab:	eb 37                	jmp    fe4 <sprintf+0xb6>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:122
                        num[len] = n % 10;
     fad:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     fb3:	66 89 c8             	mov    %ecx,%eax
     fb6:	66 f7 ea             	imul   %edx
     fb9:	66 c1 fa 02          	sar    $0x2,%edx
     fbd:	66 89 c8             	mov    %ecx,%eax
     fc0:	66 c1 f8 1f          	sar    $0x1f,%eax
     fc4:	66 29 c2             	sub    %eax,%edx
     fc7:	66 89 d7             	mov    %edx,%edi
     fca:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     fcf:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     fd4:	66 29 c1             	sub    %eax,%ecx
     fd7:	67 66 89 4c b4 14    	mov    %ecx,0x14(%esp,%esi,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:123
                        n = n / 10;
     fdd:	66 89 f9             	mov    %edi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:124
                        len++;
     fe0:	66 83 c6 01          	add    $0x1,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     fe4:	66 85 c9             	test   %ecx,%ecx
     fe7:	75 c4                	jne    fad <sprintf+0x7f>
     fe9:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     fef:	67 66 8d 46 ff       	lea    -0x1(%esi),%eax
     ff4:	eb 1a                	jmp    1010 <core_header_data_segment+0x10>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     ff6:	67 66 0f b6 74 84 14 	movzbl 0x14(%esp,%eax,4),%esi
     ffd:	67 66 8d 56 30       	lea    0x30(%esi),%edx
    1002:	67 88 54 1d 00       	mov    %dl,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1007:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
    100b:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1010:	66 85 c0             	test   %eax,%eax
    1013:	79 e1                	jns    ff6 <sprintf+0xc8>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:129
                        dest[des_index++] = num[i]+'0';
                    }
                    src_index++;
    1015:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                    dest[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    1019:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    101f:	eb 67                	jmp    1088 <core_header_data_segment+0x88>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    1021:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1026:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    102c:	67 66 8b 74 94 78    	mov    0x78(%esp,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:134
                    u32 str_len = strlen(str);
    1032:	66 83 ec 0c          	sub    $0xc,%esp
    1036:	66 56                	push   %esi
    1038:	66 e8 8e 06 00 00    	calll  16cc <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    u32 i = 0;
                    while (i < str_len){
    103e:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:135
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    1042:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    while (i < str_len){
    1048:	eb 15                	jmp    105f <core_header_data_segment+0x5f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:137
                        dest[des_index++] = str[i++];
    104a:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    1050:	67 88 4c 1d 00       	mov    %cl,0x0(%ebp,%ebx,1)
    1055:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    105a:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    105f:	66 39 c2             	cmp    %eax,%edx
    1062:	72 e6                	jb     104a <core_header_data_segment+0x4a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:139
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
    1064:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    1068:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:140
                    u32 i = 0;
                    while (i < str_len){
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    106e:	eb 18                	jmp    1088 <core_header_data_segment+0x88>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:143
                }
                default :
                    src_index++;
    1070:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:144
                    break;
    1074:	eb 12                	jmp    1088 <core_header_data_segment+0x88>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:147
            }
        }
        else if (format[src_index] == '\\') {
    1076:	3c 5c                	cmp    $0x5c,%al
    1078:	74 0e                	je     1088 <core_header_data_segment+0x88>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:166
                        break;
                }
            }
        }
        else {
            dest[des_index++] = format[src_index++];
    107a:	66 83 c7 01          	add    $0x1,%edi
    107e:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
    1083:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    1088:	67 66 8b 4c 24 74    	mov    0x74(%esp),%ecx
    108e:	67 66 0f b6 04 39    	movzbl (%ecx,%edi,1),%eax
    1094:	84 c0                	test   %al,%al
    1096:	0f 85 bb fe          	jne    f55 <sprintf+0x27>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:169
        }
        else {
            dest[des_index++] = format[src_index++];
        }
    }
    dest[des_index] = 0;
    109a:	67 c6 44 1d 00 00    	movb   $0x0,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:171
    return ;
}
    10a0:	66 83 c4 5c          	add    $0x5c,%esp
    10a4:	66 5b                	pop    %ebx
    10a6:	66 5e                	pop    %esi
    10a8:	66 5f                	pop    %edi
    10aa:	66 5d                	pop    %ebp
    10ac:	66 c3                	retl   

000010ae <vprintf>:
vprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:174


void vprintf(char * format, va_list va){
    10ae:	66 55                	push   %ebp
    10b0:	66 57                	push   %edi
    10b2:	66 56                	push   %esi
    10b4:	66 53                	push   %ebx
    10b6:	66 81 ec 5c 04 00 00 	sub    $0x45c,%esp
    10bd:	67 66 8b ac 24 70 04 	mov    0x470(%esp),%ebp
    10c4:	00 00 
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:178
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    10c6:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:177


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    10cc:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:176
}


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    10d2:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    10d8:	e9 4c 01             	jmp    1227 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:181
        if (format[src_index] == '%'){
    10db:	3c 25                	cmp    $0x25,%al
    10dd:	0f 85 34 01          	jne    1215 <vprintf+0x167>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:183
            src_index++;
            switch(format[src_index]){
    10e1:	67 66 0f b6 44 3d 01 	movzbl 0x1(%ebp,%edi,1),%eax
    10e8:	3c 64                	cmp    $0x64,%al
    10ea:	74 30                	je     111c <vprintf+0x6e>
    10ec:	3c 73                	cmp    $0x73,%al
    10ee:	0f 84 c6 00          	je     11b8 <vprintf+0x10a>
    10f2:	3c 63                	cmp    $0x63,%al
    10f4:	0f 85 17 01          	jne    120f <vprintf+0x161>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
    10f8:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    10ff:	00 00 
    1101:	67 66 8b 04 90       	mov    (%eax,%edx,4),%eax
    1106:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:186
                    src_index++;
    110b:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
    110f:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
    1114:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:187
                    src_index++;
                    break;
    1119:	e9 0b 01             	jmp    1227 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    111c:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1121:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    1127:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    112e:	00 00 
    1130:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:191
                    int len = 0; 
    1135:	66 b9 00 00 00 00    	mov    $0x0,%ecx
    113b:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                    int num[INT_LENGTH];
                    while (n != 0){
    1141:	eb 3a                	jmp    117d <vprintf+0xcf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:194
                        num[len] = n % 10;
    1143:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    1149:	66 89 f0             	mov    %esi,%eax
    114c:	66 f7 ea             	imul   %edx
    114f:	66 c1 fa 02          	sar    $0x2,%edx
    1153:	66 89 f0             	mov    %esi,%eax
    1156:	66 c1 f8 1f          	sar    $0x1f,%eax
    115a:	66 29 c2             	sub    %eax,%edx
    115d:	66 89 d7             	mov    %edx,%edi
    1160:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
    1165:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    116a:	66 89 f2             	mov    %esi,%edx
    116d:	66 29 c2             	sub    %eax,%edx
    1170:	67 66 89 54 8c 14    	mov    %edx,0x14(%esp,%ecx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:195
                        n = n / 10;
    1176:	66 89 fe             	mov    %edi,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:196
                        len++;
    1179:	66 83 c1 01          	add    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
    117d:	66 85 f6             	test   %esi,%esi
    1180:	75 c1                	jne    1143 <vprintf+0x95>
    1182:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1188:	66 83 e9 01          	sub    $0x1,%ecx
    118c:	eb 19                	jmp    11a7 <vprintf+0xf9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    118e:	67 66 0f b6 44 8c 14 	movzbl 0x14(%esp,%ecx,4),%eax
    1195:	66 83 c0 30          	add    $0x30,%eax
    1199:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    119e:	66 83 e9 01          	sub    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    11a2:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    11a7:	66 85 c9             	test   %ecx,%ecx
    11aa:	79 e2                	jns    118e <vprintf+0xe0>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:201
                        buf[des_index++] = num[i]+'0';
                    }
                    src_index++;
    11ac:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                    buf[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    11b0:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    11b6:	eb 6f                	jmp    1227 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    11b8:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    11bd:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    11c3:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    11ca:	00 00 
    11cc:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:206
                    u32 str_len = strlen(str);
    11d1:	66 83 ec 0c          	sub    $0xc,%esp
    11d5:	66 56                	push   %esi
    11d7:	66 e8 ef 04 00 00    	calll  16cc <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    u32 i = 0;
                    while (i < str_len){
    11dd:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:207
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    11e1:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    while (i < str_len){
    11e7:	eb 15                	jmp    11fe <vprintf+0x150>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:209
                        buf[des_index++] = str[i++];
    11e9:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    11ef:	67 88 4c 1c 50       	mov    %cl,0x50(%esp,%ebx,1)
    11f4:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    11f9:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    11fe:	66 39 c2             	cmp    %eax,%edx
    1201:	72 e6                	jb     11e9 <vprintf+0x13b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:211
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
    1203:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    1207:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:212
                    u32 i = 0;
                    while (i < str_len){
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    120d:	eb 18                	jmp    1227 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:215
                }
                default :
                    src_index++;
    120f:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:216
                    break;
    1213:	eb 12                	jmp    1227 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:219
            }
        }
        else if (format[src_index] == '\\') {
    1215:	3c 5c                	cmp    $0x5c,%al
    1217:	74 0e                	je     1227 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:238
                        break;
                }
            }
        }
        else {
            buf[des_index++] = format[src_index++];
    1219:	66 83 c7 01          	add    $0x1,%edi
    121d:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
    1222:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    1227:	67 66 0f b6 44 3d 00 	movzbl 0x0(%ebp,%edi,1),%eax
    122e:	84 c0                	test   %al,%al
    1230:	0f 85 a7 fe          	jne    10db <vprintf+0x2d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:241
        }
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    1234:	67 c6 44 1c 50 00    	movb   $0x0,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242
    for (int i = 0; i < des_index; i++){
    123a:	66 be 00 00 00 00    	mov    $0x0,%esi
    1240:	eb 1b                	jmp    125d <vprintf+0x1af>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:243 (discriminator 3)
        putc(buf[i]);
    1242:	66 83 ec 0c          	sub    $0xc,%esp
    1246:	67 66 0f be 44 34 5c 	movsbl 0x5c(%esp,%esi,1),%eax
    124d:	66 50                	push   %eax
    124f:	66 e8 a3 fa ff ff    	calll  cf8 <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 3)
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    for (int i = 0; i < des_index; i++){
    1255:	66 83 c6 01          	add    $0x1,%esi
    1259:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 1)
    125d:	66 39 f3             	cmp    %esi,%ebx
    1260:	7f e0                	jg     1242 <vprintf+0x194>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:246
        putc(buf[i]);
    }
    return ;
}
    1262:	66 81 c4 5c 04 00 00 	add    $0x45c,%esp
    1269:	66 5b                	pop    %ebx
    126b:	66 5e                	pop    %esi
    126d:	66 5f                	pop    %edi
    126f:	66 5d                	pop    %ebp
    1271:	66 c3                	retl   

00001273 <printf>:
printf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:248

void printf(char * format, ...){
    1273:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:249
    vprintf(format, &format+1);// 其实这里由于format是个指针，是32位的，所以这里对format的地址+1，也会加4个字节。
    1277:	67 66 8d 44 24 1c    	lea    0x1c(%esp),%eax
    127d:	66 50                	push   %eax
    127f:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    1285:	66 e8 23 fe ff ff    	calll  10ae <vprintf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:251
    return ;
}
    128b:	66 83 c4 1c          	add    $0x1c,%esp
    128f:	66 c3                	retl   

00001291 <isalpha>:
isalpha():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:270
//     return ;
// }



int isalpha (int ch){
    1291:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:271
    if ('a' <= ch && ch <= 'z')
    1297:	67 66 8d 50 9f       	lea    -0x61(%eax),%edx
    129c:	66 83 fa 19          	cmp    $0x19,%edx
    12a0:	76 12                	jbe    12b4 <isalpha+0x23>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:273
        return 1;
    if ('A' <= ch && ch <= 'Z')
    12a2:	66 83 e8 41          	sub    $0x41,%eax
    12a6:	66 83 f8 19          	cmp    $0x19,%eax
    12aa:	77 10                	ja     12bc <isalpha+0x2b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:274
        return 1;
    12ac:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12b2:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:272



int isalpha (int ch){
    if ('a' <= ch && ch <= 'z')
        return 1;
    12b4:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12ba:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:275
    if ('A' <= ch && ch <= 'Z')
        return 1;
    return 0;
    12bc:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:276
}
    12c2:	66 c3                	retl   

000012c4 <isdigit>:
isdigit():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:278
int isdigit (int ch){
    if ('0' <= ch && ch <= '9')
    12c4:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
    12ca:	66 83 e8 30          	sub    $0x30,%eax
    12ce:	66 83 f8 09          	cmp    $0x9,%eax
    12d2:	77 08                	ja     12dc <isdigit+0x18>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:279
        return 1;
    12d4:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12da:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:280
    return 0;
    12dc:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:281
}
    12e2:	66 c3                	retl   

000012e4 <isalnum>:
isalnum():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:283

int isalnum (int ch){
    12e4:	66 53                	push   %ebx
    12e6:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284
    if ( isalpha(ch) || isdigit(ch) ){
    12ec:	66 53                	push   %ebx
    12ee:	66 e8 9d ff ff ff    	calll  1291 <isalpha>
    12f4:	66 83 c4 04          	add    $0x4,%esp
    12f8:	66 85 c0             	test   %eax,%eax
    12fb:	75 13                	jne    1310 <isalnum+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284 (discriminator 1)
    12fd:	66 53                	push   %ebx
    12ff:	66 e8 bf ff ff ff    	calll  12c4 <isdigit>
    1305:	66 83 c4 04          	add    $0x4,%esp
    1309:	66 85 c0             	test   %eax,%eax
    130c:	75 0a                	jne    1318 <isalnum+0x34>
    130e:	eb 0e                	jmp    131e <isalnum+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:285
        return 1;
    1310:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1316:	eb 06                	jmp    131e <isalnum+0x3a>
    1318:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:288
    }
    return 0;
}
    131e:	66 5b                	pop    %ebx
    1320:	66 c3                	retl   

00001322 <ispunct>:
ispunct():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:289
int ispunct (int ch){
    1322:	66 83 ec 30          	sub    $0x30,%esp
    1326:	67 66 8b 4c 24 34    	mov    0x34(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:290
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    132c:	67 66 c7 44 24 0e 21 	movl   $0x24232221,0xe(%esp)
    1333:	22 23 24 
    1336:	67 66 c7 44 24 12 25 	movl   $0x28272625,0x12(%esp)
    133d:	26 27 28 
    1340:	67 66 c7 44 24 16 29 	movl   $0x2c2b2a29,0x16(%esp)
    1347:	2a 2b 2c 
    134a:	67 66 c7 44 24 1a 2d 	movl   $0x3a2f2e2d,0x1a(%esp)
    1351:	2e 2f 3a 
    1354:	67 66 c7 44 24 1e 3b 	movl   $0x3e3d3c3b,0x1e(%esp)
    135b:	3c 3d 3e 
    135e:	67 66 c7 44 24 22 3f 	movl   $0x5c5b403f,0x22(%esp)
    1365:	40 5b 5c 
    1368:	67 66 c7 44 24 26 5d 	movl   $0x605f5e5d,0x26(%esp)
    136f:	5e 5f 60 
    1372:	67 66 c7 44 24 2a 7b 	movl   $0x7e7d7c7b,0x2a(%esp)
    1379:	7c 7d 7e 
    137c:	67 c7 44 24 2e 00 00 	movw   $0x0,0x2e(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291
    for (int i = 0; i < 33; i++){
    1383:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1389:	eb 10                	jmp    139b <ispunct+0x79>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:292
        if (ch == punct[i])
    138b:	67 66 0f be 54 04 0e 	movsbl 0xe(%esp,%eax,1),%edx
    1392:	66 39 ca             	cmp    %ecx,%edx
    1395:	74 12                	je     13a9 <ispunct+0x87>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 2)
    }
    return 0;
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
    1397:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 1)
    139b:	66 83 f8 20          	cmp    $0x20,%eax
    139f:	7e ea                	jle    138b <ispunct+0x69>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:295
        if (ch == punct[i])
            return 1;
    }
    return 0;
    13a1:	66 b8 00 00 00 00    	mov    $0x0,%eax
    13a7:	eb 06                	jmp    13af <ispunct+0x8d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:293
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
        if (ch == punct[i])
            return 1;
    13a9:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:296
    }
    return 0;
}
    13af:	66 83 c4 30          	add    $0x30,%esp
    13b3:	66 c3                	retl   

000013b5 <isblank>:
isblank():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:298
int isblank (int ch){
    if (ch == ' ')
    13b5:	67 66 83 7c 24 04 20 	cmpl   $0x20,0x4(%esp)
    13bc:	75 08                	jne    13c6 <isblank+0x11>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:299
        return 1;
    13be:	66 b8 01 00 00 00    	mov    $0x1,%eax
    13c4:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:300
    return 0;
    13c6:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:301
}
    13cc:	66 c3                	retl   

000013ce <isprint>:
isprint():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:302
int isprint (int ch){
    13ce:	66 53                	push   %ebx
    13d0:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303
    if (isalpha(ch) || isdigit(ch) || isalnum(ch) || ispunct(ch) || isblank(ch)){
    13d6:	66 53                	push   %ebx
    13d8:	66 e8 b3 fe ff ff    	calll  1291 <isalpha>
    13de:	66 83 c4 04          	add    $0x4,%esp
    13e2:	66 85 c0             	test   %eax,%eax
    13e5:	75 46                	jne    142d <isprint+0x5f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 1)
    13e7:	66 53                	push   %ebx
    13e9:	66 e8 d5 fe ff ff    	calll  12c4 <isdigit>
    13ef:	66 83 c4 04          	add    $0x4,%esp
    13f3:	66 85 c0             	test   %eax,%eax
    13f6:	75 3d                	jne    1435 <isprint+0x67>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 2)
    13f8:	66 53                	push   %ebx
    13fa:	66 e8 e4 fe ff ff    	calll  12e4 <isalnum>
    1400:	66 83 c4 04          	add    $0x4,%esp
    1404:	66 85 c0             	test   %eax,%eax
    1407:	75 34                	jne    143d <isprint+0x6f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 3)
    1409:	66 53                	push   %ebx
    140b:	66 e8 11 ff ff ff    	calll  1322 <ispunct>
    1411:	66 83 c4 04          	add    $0x4,%esp
    1415:	66 85 c0             	test   %eax,%eax
    1418:	75 2b                	jne    1445 <isprint+0x77>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 4)
    141a:	66 53                	push   %ebx
    141c:	66 e8 93 ff ff ff    	calll  13b5 <isblank>
    1422:	66 83 c4 04          	add    $0x4,%esp
    1426:	66 85 c0             	test   %eax,%eax
    1429:	75 22                	jne    144d <isprint+0x7f>
    142b:	eb 26                	jmp    1453 <isprint+0x85>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:304
        return 1;
    142d:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1433:	eb 1e                	jmp    1453 <isprint+0x85>
    1435:	66 b8 01 00 00 00    	mov    $0x1,%eax
    143b:	eb 16                	jmp    1453 <isprint+0x85>
    143d:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1443:	eb 0e                	jmp    1453 <isprint+0x85>
    1445:	66 b8 01 00 00 00    	mov    $0x1,%eax
    144b:	eb 06                	jmp    1453 <isprint+0x85>
    144d:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:307
    }
    return 0;
}
    1453:	66 5b                	pop    %ebx
    1455:	66 c3                	retl   

00001457 <iscntrl>:
iscntrl():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:308
int iscntrl (int ch){
    1457:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:310
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
    145d:	66 83 f8 1f          	cmp    $0x1f,%eax
    1461:	76 0e                	jbe    1471 <iscntrl+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:312
        return 1;
    if (ch == 0x7f)
    1463:	66 83 f8 7f          	cmp    $0x7f,%eax
    1467:	75 10                	jne    1479 <iscntrl+0x22>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:313
        return 1;
    1469:	66 b8 01 00 00 00    	mov    $0x1,%eax
    146f:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:311
    return 0;
}
int iscntrl (int ch){
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
        return 1;
    1471:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1477:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:314
    if (ch == 0x7f)
        return 1;
    return 0;
    1479:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:315
}
    147f:	66 c3                	retl   

00001481 <read_n_sector>:
read_n_sector():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:321

/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    1481:	66 55                	push   %ebp
    1483:	66 57                	push   %edi
    1485:	66 56                	push   %esi
    1487:	66 53                	push   %ebx
    1489:	66 83 ec 1c          	sub    $0x1c,%esp
    148d:	67 66 0f b7 7c 24 30 	movzwl 0x30(%esp),%edi
    1494:	67 66 0f b7 74 24 34 	movzwl 0x34(%esp),%esi
    149b:	67 66 0f b7 44 24 38 	movzwl 0x38(%esp),%eax
    14a2:	67 89 44 24 0c       	mov    %ax,0xc(%esp)
    14a7:	67 66 0f b7 44 24 3c 	movzwl 0x3c(%esp),%eax
    14ae:	67 89 44 24 0e       	mov    %ax,0xe(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322
    for (int i = 0; i < number; i++){
    14b3:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    14b9:	eb 7d                	jmp    1538 <read_n_sector+0xb7>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:323 (discriminator 3)
        int sector = (sector_code+i) % 18+1;
    14bb:	66 0f b7 ef          	movzwl %di,%ebp
    14bf:	66 01 dd             	add    %ebx,%ebp
    14c2:	66 ba 39 8e e3 38    	mov    $0x38e38e39,%edx
    14c8:	66 89 e8             	mov    %ebp,%eax
    14cb:	66 f7 ea             	imul   %edx
    14ce:	66 c1 fa 02          	sar    $0x2,%edx
    14d2:	66 89 e8             	mov    %ebp,%eax
    14d5:	66 c1 f8 1f          	sar    $0x1f,%eax
    14d9:	66 29 c2             	sub    %eax,%edx
    14dc:	66 89 d1             	mov    %edx,%ecx
    14df:	67 66 8d 14 d2       	lea    (%edx,%edx,8),%edx
    14e4:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    14e9:	66 89 ea             	mov    %ebp,%edx
    14ec:	66 29 c2             	sub    %eax,%edx
    14ef:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:325 (discriminator 3)
        int mid = (sector_code+i) / 18;
        int cylinder = mid >> 1;
    14f3:	66 89 cd             	mov    %ecx,%ebp
    14f6:	66 d1 fd             	sar    %ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:327 (discriminator 3)
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    14f9:	66 83 ec 0c          	sub    $0xc,%esp
    14fd:	66 89 d8             	mov    %ebx,%eax
    1500:	66 c1 e0 09          	shl    $0x9,%eax
    1504:	67 03 44 24 1a       	add    0x1a(%esp),%ax
    1509:	66 0f b7 c0          	movzwl %ax,%eax
    150d:	66 50                	push   %eax
    150f:	67 66 0f b7 44 24 1c 	movzwl 0x1c(%esp),%eax
    1516:	66 50                	push   %eax
    1518:	66 0f b7 d2          	movzwl %dx,%edx
    151c:	66 52                	push   %edx
    151e:	66 0f b7 ed          	movzwl %bp,%ebp
    1522:	66 55                	push   %ebp
    1524:	66 83 e1 01          	and    $0x1,%ecx
    1528:	66 51                	push   %ecx
    152a:	66 e8 2c 01 00 00    	calll  165c <read_sector>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 3)
/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    for (int i = 0; i < number; i++){
    1530:	66 83 c3 01          	add    $0x1,%ebx
    1534:	66 83 c4 20          	add    $0x20,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 1)
    1538:	66 0f b7 c6          	movzwl %si,%eax
    153c:	66 39 c3             	cmp    %eax,%ebx
    153f:	0f 8c 78 ff          	jl     14bb <read_n_sector+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:330
        int cylinder = mid >> 1;
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    }
    return ;
}
    1543:	66 83 c4 1c          	add    $0x1c,%esp
    1547:	66 5b                	pop    %ebx
    1549:	66 5e                	pop    %esi
    154b:	66 5f                	pop    %edi
    154d:	66 5d                	pop    %ebp
    154f:	66 c3                	retl   
    1551:	66 90                	xchg   %eax,%eax
    1553:	66 90                	xchg   %eax,%eax
    1555:	66 90                	xchg   %eax,%eax
    1557:	66 90                	xchg   %eax,%eax
    1559:	66 90                	xchg   %eax,%eax
    155b:	66 90                	xchg   %eax,%eax
    155d:	66 90                	xchg   %eax,%eax
    155f:	90                   	nop

00001560 <write_port_byte>:
write_port_byte():
    1560:	66 55                	push   %ebp
    1562:	66 89 e5             	mov    %esp,%ebp
    1565:	53                   	push   %bx
    1566:	51                   	push   %cx
    1567:	52                   	push   %dx
    1568:	56                   	push   %si
    1569:	57                   	push   %di
    156a:	55                   	push   %bp
    156b:	1e                   	push   %ds
    156c:	06                   	push   %es
    156d:	16                   	push   %ss
    156e:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1572:	67 8a 45 0c          	mov    0xc(%ebp),%al
    1576:	cd 34                	int    $0x34
    1578:	17                   	pop    %ss
    1579:	07                   	pop    %es
    157a:	1f                   	pop    %ds
    157b:	5d                   	pop    %bp
    157c:	5f                   	pop    %di
    157d:	5e                   	pop    %si
    157e:	5a                   	pop    %dx
    157f:	59                   	pop    %cx
    1580:	5b                   	pop    %bx
    1581:	66 89 ec             	mov    %ebp,%esp
    1584:	66 5d                	pop    %ebp
    1586:	66 c3                	retl   

00001588 <read_port_byte>:
read_port_byte():
    1588:	66 55                	push   %ebp
    158a:	66 89 e5             	mov    %esp,%ebp
    158d:	53                   	push   %bx
    158e:	51                   	push   %cx
    158f:	52                   	push   %dx
    1590:	56                   	push   %si
    1591:	57                   	push   %di
    1592:	55                   	push   %bp
    1593:	1e                   	push   %ds
    1594:	06                   	push   %es
    1595:	16                   	push   %ss
    1596:	67 8b 45 08          	mov    0x8(%ebp),%ax
    159a:	cd 33                	int    $0x33
    159c:	17                   	pop    %ss
    159d:	07                   	pop    %es
    159e:	1f                   	pop    %ds
    159f:	5d                   	pop    %bp
    15a0:	5f                   	pop    %di
    15a1:	5e                   	pop    %si
    15a2:	5a                   	pop    %dx
    15a3:	59                   	pop    %cx
    15a4:	5b                   	pop    %bx
    15a5:	66 89 ec             	mov    %ebp,%esp
    15a8:	66 5d                	pop    %ebp
    15aa:	66 c3                	retl   

000015ac <write_memory_byte>:
write_memory_byte():
    15ac:	66 55                	push   %ebp
    15ae:	66 89 e5             	mov    %esp,%ebp
    15b1:	50                   	push   %ax
    15b2:	53                   	push   %bx
    15b3:	52                   	push   %dx
    15b4:	1e                   	push   %ds
    15b5:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    15b9:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    15bd:	c1 e0 0c             	shl    $0xc,%ax
    15c0:	67 8a 4d 0c          	mov    0xc(%ebp),%cl
    15c4:	cd 36                	int    $0x36
    15c6:	1f                   	pop    %ds
    15c7:	5a                   	pop    %dx
    15c8:	5b                   	pop    %bx
    15c9:	58                   	pop    %ax
    15ca:	66 89 ec             	mov    %ebp,%esp
    15cd:	66 5d                	pop    %ebp
    15cf:	66 c3                	retl   

000015d1 <read_memory_byte>:
read_memory_byte():
    15d1:	66 55                	push   %ebp
    15d3:	66 89 e5             	mov    %esp,%ebp
    15d6:	53                   	push   %bx
    15d7:	51                   	push   %cx
    15d8:	52                   	push   %dx
    15d9:	56                   	push   %si
    15da:	57                   	push   %di
    15db:	55                   	push   %bp
    15dc:	1e                   	push   %ds
    15dd:	06                   	push   %es
    15de:	16                   	push   %ss
    15df:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    15e3:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    15e7:	c1 e0 0c             	shl    $0xc,%ax
    15ea:	cd 35                	int    $0x35
    15ec:	17                   	pop    %ss
    15ed:	07                   	pop    %es
    15ee:	1f                   	pop    %ds
    15ef:	5d                   	pop    %bp
    15f0:	5f                   	pop    %di
    15f1:	5e                   	pop    %si
    15f2:	5a                   	pop    %dx
    15f3:	59                   	pop    %cx
    15f4:	5b                   	pop    %bx
    15f5:	66 89 ec             	mov    %ebp,%esp
    15f8:	66 5d                	pop    %ebp
    15fa:	66 c3                	retl   

000015fc <check_keyboard>:
check_keyboard():
    15fc:	b4 01                	mov    $0x1,%ah
    15fe:	cd 16                	int    $0x16
    1600:	74 05                	je     1607 <check_keyboard.have_key>
    1602:	b8 00 00             	mov    $0x0,%ax
    1605:	eb 03                	jmp    160a <check_keyboard.check_keyboard_return>

00001607 <check_keyboard.have_key>:
check_keyboard.have_key():
    1607:	b8 01 00             	mov    $0x1,%ax

0000160a <check_keyboard.check_keyboard_return>:
check_keyboard.check_keyboard_return():
    160a:	66 c3                	retl   

0000160c <get_keyboard>:
get_keyboard():
    160c:	b4 00                	mov    $0x0,%ah
    160e:	cd 16                	int    $0x16
    1610:	66 c3                	retl   

00001612 <clean_screen>:
clean_screen():
    1612:	50                   	push   %ax
    1613:	53                   	push   %bx
    1614:	51                   	push   %cx
    1615:	52                   	push   %dx
    1616:	b4 06                	mov    $0x6,%ah
    1618:	b0 00                	mov    $0x0,%al
    161a:	b5 00                	mov    $0x0,%ch
    161c:	b1 00                	mov    $0x0,%cl
    161e:	b6 17                	mov    $0x17,%dh
    1620:	b2 4f                	mov    $0x4f,%dl
    1622:	b7 1f                	mov    $0x1f,%bh
    1624:	cd 10                	int    $0x10
    1626:	5a                   	pop    %dx
    1627:	59                   	pop    %cx
    1628:	5b                   	pop    %bx
    1629:	58                   	pop    %ax
    162a:	66 c3                	retl   

0000162c <scroll_screen>:
scroll_screen():
    162c:	50                   	push   %ax
    162d:	53                   	push   %bx
    162e:	51                   	push   %cx
    162f:	52                   	push   %dx
    1630:	b4 06                	mov    $0x6,%ah
    1632:	b0 01                	mov    $0x1,%al
    1634:	b5 00                	mov    $0x0,%ch
    1636:	b1 00                	mov    $0x0,%cl
    1638:	b6 17                	mov    $0x17,%dh
    163a:	b2 4f                	mov    $0x4f,%dl
    163c:	b7 10                	mov    $0x10,%bh
    163e:	cd 10                	int    $0x10
    1640:	5a                   	pop    %dx
    1641:	59                   	pop    %cx
    1642:	5b                   	pop    %bx
    1643:	58                   	pop    %ax
    1644:	66 c3                	retl   

00001646 <get_random>:
get_random():
    1646:	53                   	push   %bx
    1647:	b8 00 00             	mov    $0x0,%ax
    164a:	e6 43                	out    %al,$0x43
    164c:	e4 40                	in     $0x40,%al
    164e:	b3 08                	mov    $0x8,%bl
    1650:	f6 f3                	div    %bl
    1652:	88 e0                	mov    %ah,%al
    1654:	b4 00                	mov    $0x0,%ah
    1656:	83 c0 72             	add    $0x72,%ax
    1659:	5b                   	pop    %bx
    165a:	66 c3                	retl   

0000165c <read_sector>:
read_sector():
    165c:	66 55                	push   %ebp
    165e:	66 89 e5             	mov    %esp,%ebp
    1661:	50                   	push   %ax
    1662:	53                   	push   %bx
    1663:	51                   	push   %cx
    1664:	52                   	push   %dx
    1665:	06                   	push   %es
    1666:	67 8b 45 14          	mov    0x14(%ebp),%ax
    166a:	8e c0                	mov    %ax,%es
    166c:	67 8b 5d 18          	mov    0x18(%ebp),%bx
    1670:	b4 02                	mov    $0x2,%ah
    1672:	b0 01                	mov    $0x1,%al
    1674:	b2 00                	mov    $0x0,%dl
    1676:	67 8a 75 08          	mov    0x8(%ebp),%dh
    167a:	67 8a 6d 0c          	mov    0xc(%ebp),%ch
    167e:	67 8a 4d 10          	mov    0x10(%ebp),%cl
    1682:	cd 13                	int    $0x13
    1684:	07                   	pop    %es
    1685:	5a                   	pop    %dx
    1686:	59                   	pop    %cx
    1687:	5b                   	pop    %bx
    1688:	58                   	pop    %ax
    1689:	66 89 ec             	mov    %ebp,%esp
    168c:	66 5d                	pop    %ebp
    168e:	66 c3                	retl   

00001690 <print_my_name>:
print_my_name():
    1690:	50                   	push   %ax
    1691:	53                   	push   %bx
    1692:	51                   	push   %cx
    1693:	52                   	push   %dx
    1694:	1e                   	push   %ds
    1695:	06                   	push   %es
    1696:	55                   	push   %bp
    1697:	b8 00 10             	mov    $0x1000,%ax
    169a:	8e c0                	mov    %ax,%es
    169c:	b8 08 40             	mov    $0x4008,%ax
    169f:	89 c5                	mov    %ax,%bp
    16a1:	b4 13                	mov    $0x13,%ah
    16a3:	b0 00                	mov    $0x0,%al
    16a5:	b7 00                	mov    $0x0,%bh
    16a7:	b3 0f                	mov    $0xf,%bl
    16a9:	b9 19 00             	mov    $0x19,%cx
    16ac:	b6 18                	mov    $0x18,%dh
    16ae:	b2 01                	mov    $0x1,%dl
    16b0:	cd 10                	int    $0x10
    16b2:	5d                   	pop    %bp
    16b3:	07                   	pop    %es
    16b4:	1f                   	pop    %ds
    16b5:	5a                   	pop    %dx
    16b6:	59                   	pop    %cx
    16b7:	5b                   	pop    %bx
    16b8:	58                   	pop    %ax
    16b9:	c3                   	ret    

000016ba <reboot>:
reboot():
    16ba:	b4 06                	mov    $0x6,%ah
    16bc:	b0 00                	mov    $0x0,%al
    16be:	b5 00                	mov    $0x0,%ch
    16c0:	b1 00                	mov    $0x0,%cl
    16c2:	b6 18                	mov    $0x18,%dh
    16c4:	b2 4f                	mov    $0x4f,%dl
    16c6:	b7 1f                	mov    $0x1f,%bh
    16c8:	cd 10                	int    $0x10
    16ca:	cd 19                	int    $0x19

000016cc <strlen>:
strlen():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:3
#include "../include/type.h"

size_t strlen(char * str){
    16cc:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:4
    u32 len = 0;
    16d2:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
    while (str[len] != 0){
    16d8:	eb 04                	jmp    16de <strlen+0x12>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:6
        len++;
    16da:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
#include "../include/type.h"

size_t strlen(char * str){
    u32 len = 0;
    while (str[len] != 0){
    16de:	67 80 3c 02 00       	cmpb   $0x0,(%edx,%eax,1)
    16e3:	75 f5                	jne    16da <strlen+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:9
        len++;
    }
    return len;
}
    16e5:	66 f3 c3             	repz retl 

000016e8 <strncpy>:
strncpy():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:11

void strncpy(char * dest, char * src, u32 size){
    16e8:	66 56                	push   %esi
    16ea:	66 53                	push   %ebx
    16ec:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    16f2:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    16f8:	67 66 8b 4c 24 14    	mov    0x14(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12
    for (int i = 0; i < size; i++){
    16fe:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1704:	eb 0e                	jmp    1714 <strncpy+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:13 (discriminator 3)
        dest[i] = src[i];
    1706:	67 66 0f b6 14 06    	movzbl (%esi,%eax,1),%edx
    170c:	67 88 14 03          	mov    %dl,(%ebx,%eax,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 3)
    }
    return len;
}

void strncpy(char * dest, char * src, u32 size){
    for (int i = 0; i < size; i++){
    1710:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 1)
    1714:	66 39 c8             	cmp    %ecx,%eax
    1717:	72 ed                	jb     1706 <strncpy+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:15
        dest[i] = src[i];
    }
    dest[size] = '\0';
    1719:	67 c6 04 0b 00       	movb   $0x0,(%ebx,%ecx,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:16
}
    171e:	66 5b                	pop    %ebx
    1720:	66 5e                	pop    %esi
    1722:	66 c3                	retl   

00001724 <strcmp>:
strcmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:18

int strcmp(char * lhs, char * rhs){
    1724:	66 57                	push   %edi
    1726:	66 56                	push   %esi
    1728:	66 53                	push   %ebx
    172a:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    1730:	67 66 8b 7c 24 14    	mov    0x14(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:19
    int lhs_len = strlen(lhs);
    1736:	66 56                	push   %esi
    1738:	66 e8 8e ff ff ff    	calll  16cc <strlen>
    173e:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:20
    int rhs_len = strlen(rhs);
    1741:	67 66 89 3c 24       	mov    %edi,(%esp)
    1746:	66 e8 80 ff ff ff    	calll  16cc <strlen>
    174c:	66 83 c4 04          	add    $0x4,%esp
/mnt/e/code/my_operating_system/os/service/../lib/string.c:21
    if (lhs_len != rhs_len){
    1750:	66 39 c3             	cmp    %eax,%ebx
    1753:	75 25                	jne    177a <strcmp+0x56>
    1755:	66 b8 00 00 00 00    	mov    $0x0,%eax
    175b:	eb 10                	jmp    176d <strcmp+0x49>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:25
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
    175d:	67 66 0f b6 14 07    	movzbl (%edi,%eax,1),%edx
    1763:	67 38 14 06          	cmp    %dl,(%esi,%eax,1)
    1767:	75 19                	jne    1782 <strcmp+0x5e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 2)
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
    1769:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 1)
    176d:	66 39 d8             	cmp    %ebx,%eax
    1770:	7c eb                	jl     175d <strcmp+0x39>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:28
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    1772:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1778:	eb 0e                	jmp    1788 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:22

int strcmp(char * lhs, char * rhs){
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    177a:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1780:	eb 06                	jmp    1788 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:26
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
            return 1;
    1782:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:29
    }
    return 0;
}
    1788:	66 5b                	pop    %ebx
    178a:	66 5e                	pop    %esi
    178c:	66 5f                	pop    %edi
    178e:	66 c3                	retl   

00001790 <strncmp>:
strncmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:31

int strncmp(char * lhs, char * rhs, int size){
    1790:	66 56                	push   %esi
    1792:	66 53                	push   %ebx
    1794:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    179a:	67 66 8b 4c 24 10    	mov    0x10(%esp),%ecx
    17a0:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32
    for (int i = 0; i < size; i++){
    17a6:	66 b8 00 00 00 00    	mov    $0x0,%eax
    17ac:	eb 10                	jmp    17be <strncmp+0x2e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:33
        if (lhs[i] != rhs[i])
    17ae:	67 66 0f b6 14 01    	movzbl (%ecx,%eax,1),%edx
    17b4:	67 38 14 03          	cmp    %dl,(%ebx,%eax,1)
    17b8:	75 11                	jne    17cb <strncmp+0x3b>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 2)
    }
    return 0;
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
    17ba:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 1)
    17be:	66 39 f0             	cmp    %esi,%eax
    17c1:	7c eb                	jl     17ae <strncmp+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:36
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    17c3:	66 b8 00 00 00 00    	mov    $0x0,%eax
    17c9:	eb 06                	jmp    17d1 <strncmp+0x41>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:34
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
        if (lhs[i] != rhs[i])
            return 1;
    17cb:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:37
    }
    return 0;
    17d1:	66 5b                	pop    %ebx
    17d3:	66 5e                	pop    %esi
    17d5:	66 c3                	retl   

000017d7 <move_name>:
move_name():
/mnt/e/code/my_operating_system/os/service/../lib/style.c:9

void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    17d7:	66 0f b7 0e 9e 0f    	movzwl 0xf9e,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10
    for (int i =78; i >= 0; i--){
    17dd:	66 b8 4e 00 00 00    	mov    $0x4e,%eax
    17e3:	eb 16                	jmp    17fb <move_name+0x24>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:11 (discriminator 3)
        text_line[i+1] = text_line[i];
    17e5:	67 66 0f b7 94 00 00 	movzwl 0xf00(%eax,%eax,1),%edx
    17ec:	0f 00 00 
    17ef:	67 89 94 00 02 0f 00 	mov    %dx,0xf02(%eax,%eax,1)
    17f6:	00 
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 3)
void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    for (int i =78; i >= 0; i--){
    17f7:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 1)
    17fb:	66 85 c0             	test   %eax,%eax
    17fe:	79 e5                	jns    17e5 <move_name+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:13
        text_line[i+1] = text_line[i];
    }
    text_line[0] = last_char;
    1800:	89 0e 00 0f          	mov    %cx,0xf00
    1804:	66 c3                	retl   
