
kernel.debug:     file format elf32-i386


Disassembly of section .text:

00000000 <_start>:
_start():
       0:	e8 77 00             	call   7a <install_int8>
       3:	e8 ca 00             	call   d0 <install_int33>
       6:	e8 00 01             	call   109 <install_int34>
       9:	e8 3a 01             	call   146 <install_int35>
       c:	e8 72 01             	call   181 <install_int36>
       f:	e8 17 00             	call   29 <install_int40>
      12:	66 e8 a6 01 00 00    	calll  1be <cstart>

00000018 <start_tty>:
start_tty():
      18:	ea 00 00 00 15       	ljmp   $0x1500,$0x0
      1d:	66 e8 0f 05 00 00    	calll  532 <tty>
      23:	b4 02                	mov    $0x2,%ah
      25:	cd 40                	int    $0x40
      27:	eb fe                	jmp    27 <user1_bound_y_right>

00000029 <install_int40>:
install_int40():
      29:	53                   	push   %bx
      2a:	51                   	push   %cx
      2b:	52                   	push   %dx
      2c:	56                   	push   %si
      2d:	57                   	push   %di
      2e:	55                   	push   %bp
      2f:	1e                   	push   %ds
      30:	06                   	push   %es
      31:	16                   	push   %ss
      32:	b8 00 00             	mov    $0x0,%ax
      35:	8e d8                	mov    %ax,%ds
      37:	8c c8                	mov    %cs,%ax
      39:	c7 06 00 01 4c 00    	movw   $0x4c,0x100
      3f:	a3 02 01             	mov    %ax,0x102
      42:	17                   	pop    %ss
      43:	07                   	pop    %es
      44:	1f                   	pop    %ds
      45:	5d                   	pop    %bp
      46:	5f                   	pop    %di
      47:	5e                   	pop    %si
      48:	5a                   	pop    %dx
      49:	59                   	pop    %cx
      4a:	5b                   	pop    %bx
      4b:	c3                   	ret    

0000004c <new_int40>:
new_int40():
      4c:	80 fc 4c             	cmp    $0x4c,%ah
      4f:	74 11                	je     62 <new_int40.return_kernel>
      51:	88 e3                	mov    %ah,%bl
      53:	31 c0                	xor    %ax,%ax
      55:	b0 02                	mov    $0x2,%al
      57:	f6 e3                	mul    %bl
      59:	89 c6                	mov    %ax,%si
      5b:	bb a0 2b             	mov    $0x2ba0,%bx
      5e:	66 ff 10             	calll  *(%bx,%si)
      61:	cf                   	iret   

00000062 <new_int40.return_kernel>:
new_int40.return_kernel():
      62:	59                   	pop    %cx
      63:	59                   	pop    %cx
      64:	59                   	pop    %cx
      65:	b8 00 10             	mov    $0x1000,%ax
      68:	8e d8                	mov    %ax,%ds
      6a:	8e c0                	mov    %ax,%es
      6c:	8e d0                	mov    %ax,%ss
      6e:	bc 00 50             	mov    $0x5000,%sp
      71:	51                   	push   %cx
      72:	68 00 10             	push   $0x1000
      75:	68 18 00             	push   $0x18
      78:	fb                   	sti    
      79:	cf                   	iret   

0000007a <install_int8>:
install_int8():
      7a:	53                   	push   %bx
      7b:	51                   	push   %cx
      7c:	52                   	push   %dx
      7d:	56                   	push   %si
      7e:	57                   	push   %di
      7f:	55                   	push   %bp
      80:	1e                   	push   %ds
      81:	06                   	push   %es
      82:	16                   	push   %ss
      83:	b0 34                	mov    $0x34,%al
      85:	e6 43                	out    %al,$0x43
      87:	b8 ff ff             	mov    $0xffff,%ax
      8a:	e6 40                	out    %al,$0x40
      8c:	88 e0                	mov    %ah,%al
      8e:	e6 40                	out    %al,$0x40
      90:	b8 00 00             	mov    $0x0,%ax
      93:	8e d8                	mov    %ax,%ds
      95:	8c c8                	mov    %cs,%ax
      97:	a3 22 00             	mov    %ax,0x22
      9a:	c7 06 20 00 aa 00    	movw   $0xaa,0x20
      a0:	17                   	pop    %ss
      a1:	07                   	pop    %es
      a2:	1f                   	pop    %ds
      a3:	5d                   	pop    %bp
      a4:	5f                   	pop    %di
      a5:	5e                   	pop    %si
      a6:	5a                   	pop    %dx
      a7:	59                   	pop    %cx
      a8:	5b                   	pop    %bx
      a9:	c3                   	ret    

000000aa <new_int8>:
new_int8():
      aa:	50                   	push   %ax
      ab:	53                   	push   %bx
      ac:	51                   	push   %cx
      ad:	52                   	push   %dx
      ae:	56                   	push   %si
      af:	57                   	push   %di
      b0:	55                   	push   %bp
      b1:	1e                   	push   %ds
      b2:	06                   	push   %es
      b3:	16                   	push   %ss
      b4:	b8 00 b8             	mov    $0xb800,%ax
      b7:	8e d8                	mov    %ax,%ds
      b9:	66 e8 78 15 00 00    	calll  1637 <move_name>
      bf:	b0 20                	mov    $0x20,%al
      c1:	e6 20                	out    %al,$0x20
      c3:	e6 a0                	out    %al,$0xa0
      c5:	17                   	pop    %ss
      c6:	07                   	pop    %es
      c7:	1f                   	pop    %ds
      c8:	5d                   	pop    %bp
      c9:	5f                   	pop    %di
      ca:	5e                   	pop    %si
      cb:	5a                   	pop    %dx
      cc:	59                   	pop    %cx
      cd:	5b                   	pop    %bx
      ce:	58                   	pop    %ax
      cf:	cf                   	iret   

000000d0 <install_int33>:
install_int33():
      d0:	53                   	push   %bx
      d1:	51                   	push   %cx
      d2:	52                   	push   %dx
      d3:	56                   	push   %si
      d4:	57                   	push   %di
      d5:	55                   	push   %bp
      d6:	1e                   	push   %ds
      d7:	06                   	push   %es
      d8:	16                   	push   %ss
      d9:	b8 00 00             	mov    $0x0,%ax
      dc:	8e d8                	mov    %ax,%ds
      de:	8c c8                	mov    %cs,%ax
      e0:	c7 06 cc 00 f3 00    	movw   $0xf3,0xcc
      e6:	a3 ce 00             	mov    %ax,0xce
      e9:	17                   	pop    %ss
      ea:	07                   	pop    %es
      eb:	1f                   	pop    %ds
      ec:	5d                   	pop    %bp
      ed:	5f                   	pop    %di
      ee:	5e                   	pop    %si
      ef:	5a                   	pop    %dx
      f0:	59                   	pop    %cx
      f1:	5b                   	pop    %bx
      f2:	c3                   	ret    

000000f3 <new_int33>:
new_int33():
      f3:	53                   	push   %bx
      f4:	51                   	push   %cx
      f5:	52                   	push   %dx
      f6:	56                   	push   %si
      f7:	57                   	push   %di
      f8:	55                   	push   %bp
      f9:	1e                   	push   %ds
      fa:	06                   	push   %es
      fb:	16                   	push   %ss
      fc:	89 c2                	mov    %ax,%dx
      fe:	ec                   	in     (%dx),%al
      ff:	17                   	pop    %ss
     100:	07                   	pop    %es
     101:	1f                   	pop    %ds
     102:	5d                   	pop    %bp
     103:	5f                   	pop    %di
     104:	5e                   	pop    %si
     105:	5a                   	pop    %dx
     106:	59                   	pop    %cx
     107:	5b                   	pop    %bx
     108:	cf                   	iret   

00000109 <install_int34>:
install_int34():
     109:	53                   	push   %bx
     10a:	51                   	push   %cx
     10b:	52                   	push   %dx
     10c:	56                   	push   %si
     10d:	57                   	push   %di
     10e:	55                   	push   %bp
     10f:	1e                   	push   %ds
     110:	06                   	push   %es
     111:	16                   	push   %ss
     112:	b8 00 00             	mov    $0x0,%ax
     115:	8e d8                	mov    %ax,%ds
     117:	8c c8                	mov    %cs,%ax
     119:	c7 06 d0 00 2c 01    	movw   $0x12c,0xd0
     11f:	a3 d2 00             	mov    %ax,0xd2
     122:	17                   	pop    %ss
     123:	07                   	pop    %es
     124:	1f                   	pop    %ds
     125:	5d                   	pop    %bp
     126:	5f                   	pop    %di
     127:	5e                   	pop    %si
     128:	5a                   	pop    %dx
     129:	59                   	pop    %cx
     12a:	5b                   	pop    %bx
     12b:	c3                   	ret    

0000012c <new_int34>:
new_int34():
     12c:	50                   	push   %ax
     12d:	53                   	push   %bx
     12e:	51                   	push   %cx
     12f:	52                   	push   %dx
     130:	56                   	push   %si
     131:	57                   	push   %di
     132:	55                   	push   %bp
     133:	1e                   	push   %ds
     134:	06                   	push   %es
     135:	16                   	push   %ss
     136:	89 da                	mov    %bx,%dx
     138:	88 c0                	mov    %al,%al
     13a:	ee                   	out    %al,(%dx)
     13b:	17                   	pop    %ss
     13c:	07                   	pop    %es
     13d:	1f                   	pop    %ds
     13e:	5d                   	pop    %bp
     13f:	5f                   	pop    %di
     140:	5e                   	pop    %si
     141:	5a                   	pop    %dx
     142:	59                   	pop    %cx
     143:	5b                   	pop    %bx
     144:	58                   	pop    %ax
     145:	cf                   	iret   

00000146 <install_int35>:
install_int35():
     146:	53                   	push   %bx
     147:	51                   	push   %cx
     148:	52                   	push   %dx
     149:	56                   	push   %si
     14a:	57                   	push   %di
     14b:	55                   	push   %bp
     14c:	1e                   	push   %ds
     14d:	06                   	push   %es
     14e:	16                   	push   %ss
     14f:	b8 00 00             	mov    $0x0,%ax
     152:	8e d8                	mov    %ax,%ds
     154:	8c c8                	mov    %cs,%ax
     156:	c7 06 d4 00 69 01    	movw   $0x169,0xd4
     15c:	a3 d6 00             	mov    %ax,0xd6
     15f:	17                   	pop    %ss
     160:	07                   	pop    %es
     161:	1f                   	pop    %ds
     162:	5d                   	pop    %bp
     163:	5f                   	pop    %di
     164:	5e                   	pop    %si
     165:	5a                   	pop    %dx
     166:	59                   	pop    %cx
     167:	5b                   	pop    %bx
     168:	c3                   	ret    

00000169 <new_int35>:
new_int35():
     169:	53                   	push   %bx
     16a:	51                   	push   %cx
     16b:	52                   	push   %dx
     16c:	56                   	push   %si
     16d:	57                   	push   %di
     16e:	55                   	push   %bp
     16f:	1e                   	push   %ds
     170:	06                   	push   %es
     171:	16                   	push   %ss
     172:	8e c0                	mov    %ax,%es
     174:	26 8a 07             	mov    %es:(%bx),%al
     177:	17                   	pop    %ss
     178:	07                   	pop    %es
     179:	1f                   	pop    %ds
     17a:	5d                   	pop    %bp
     17b:	5f                   	pop    %di
     17c:	5e                   	pop    %si
     17d:	5a                   	pop    %dx
     17e:	59                   	pop    %cx
     17f:	5b                   	pop    %bx
     180:	cf                   	iret   

00000181 <install_int36>:
install_int36():
     181:	53                   	push   %bx
     182:	51                   	push   %cx
     183:	52                   	push   %dx
     184:	56                   	push   %si
     185:	57                   	push   %di
     186:	55                   	push   %bp
     187:	1e                   	push   %ds
     188:	06                   	push   %es
     189:	16                   	push   %ss
     18a:	b8 00 00             	mov    $0x0,%ax
     18d:	8e d8                	mov    %ax,%ds
     18f:	8c c8                	mov    %cs,%ax
     191:	c7 06 d8 00 a4 01    	movw   $0x1a4,0xd8
     197:	a3 da 00             	mov    %ax,0xda
     19a:	17                   	pop    %ss
     19b:	07                   	pop    %es
     19c:	1f                   	pop    %ds
     19d:	5d                   	pop    %bp
     19e:	5f                   	pop    %di
     19f:	5e                   	pop    %si
     1a0:	5a                   	pop    %dx
     1a1:	59                   	pop    %cx
     1a2:	5b                   	pop    %bx
     1a3:	c3                   	ret    

000001a4 <new_int36>:
new_int36():
     1a4:	50                   	push   %ax
     1a5:	53                   	push   %bx
     1a6:	51                   	push   %cx
     1a7:	52                   	push   %dx
     1a8:	56                   	push   %si
     1a9:	57                   	push   %di
     1aa:	55                   	push   %bp
     1ab:	1e                   	push   %ds
     1ac:	06                   	push   %es
     1ad:	16                   	push   %ss
     1ae:	8e c0                	mov    %ax,%es
     1b0:	26 88 0f             	mov    %cl,%es:(%bx)
     1b3:	17                   	pop    %ss
     1b4:	07                   	pop    %es
     1b5:	1f                   	pop    %ds
     1b6:	5d                   	pop    %bp
     1b7:	5f                   	pop    %di
     1b8:	5e                   	pop    %si
     1b9:	5a                   	pop    %dx
     1ba:	59                   	pop    %cx
     1bb:	5b                   	pop    %bx
     1bc:	58                   	pop    %ax
     1bd:	cf                   	iret   

000001be <cstart>:
cstart():
/mnt/e/code/my_operating_system/os/kernel/start.c:10
#include "../include/global.h"
#include "../include/system_call.h"
#include "../include/fsystem.h"

void test_system_call();
int cstart(){
     1be:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:12
    // 初始化文件系统
    init_fsystem();
     1c2:	66 e8 2f 05 00 00    	calll  6f7 <init_fsystem>
/mnt/e/code/my_operating_system/os/kernel/start.c:14
    // 清屏
    clean_screen();
     1c8:	66 e8 a4 12 00 00    	calll  1472 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/start.c:16
    // 将光标设置为0 TODO:
    set_cursor(0);
     1ce:	66 83 ec 0c          	sub    $0xc,%esp
     1d2:	66 6a 00             	pushl  $0x0
     1d5:	66 e8 b3 08 00 00    	calll  a8e <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:18
    // install_system_call(2, test_system_call);
    fs_load_by_name("test_a.bin", 0x5000);
     1db:	66 83 c4 08          	add    $0x8,%esp
     1df:	66 68 00 50 00 00    	pushl  $0x5000
     1e5:	66 68 66 16 00 00    	pushl  $0x1666
     1eb:	66 e8 63 07 00 00    	calll  954 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:21
    // while (1){}
    return 0;
}
     1f1:	66 b8 00 00 00 00    	mov    $0x0,%eax
     1f7:	66 83 c4 1c          	add    $0x1c,%esp
     1fb:	66 c3                	retl   

000001fd <parser>:
parser():
/mnt/e/code/my_operating_system/os/kernel/tty.c:89
    }
    return ;
}


void parser(){
     1fd:	66 56                	push   %esi
     1ff:	66 53                	push   %ebx
     201:	66 83 ec 74          	sub    $0x74,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:93
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
     205:	66 be 00 00 00 00    	mov    $0x0,%esi
/mnt/e/code/my_operating_system/os/kernel/tty.c:92


void parser(){
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
     20b:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:91
}


void parser(){
    char arguments[10][10];
    int input_start = 0;
     211:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     217:	eb 64                	jmp    27d <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:96
        if(input_buf[input_end] == ' ' || input_buf[input_end] == '\0'){
     219:	67 66 0f b6 83 e0 1f 	movzbl 0x1fe0(%ebx),%eax
     220:	00 00 
     222:	3c 20                	cmp    $0x20,%al
     224:	0f 94 c1             	sete   %cl
     227:	84 c0                	test   %al,%al
     229:	0f 94 c0             	sete   %al
     22c:	08 c1                	or     %al,%cl
     22e:	74 49                	je     279 <parser+0x7c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:97
            if (input_start == input_end){ // 如果并没有参数，那么继续
     230:	66 39 da             	cmp    %ebx,%edx
     233:	75 0a                	jne    23f <parser+0x42>
/mnt/e/code/my_operating_system/os/kernel/tty.c:98
                input_start++;
     235:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:99
                input_end++;
     239:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:100
                continue;
     23d:	eb 3e                	jmp    27d <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:103
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
     23f:	66 89 d9             	mov    %ebx,%ecx
     242:	66 29 d1             	sub    %edx,%ecx
     245:	67 66 8d 04 b6       	lea    (%esi,%esi,4),%eax
     24a:	67 66 8d 44 44 0c    	lea    0xc(%esp,%eax,2),%eax
     250:	66 83 ec 04          	sub    $0x4,%esp
     254:	66 51                	push   %ecx
     256:	66 81 c2 e0 1f 00 00 	add    $0x1fe0,%edx
     25d:	66 52                	push   %edx
     25f:	66 50                	push   %eax
     261:	66 e8 e1 12 00 00    	calll  1548 <strncpy>
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
     267:	67 66 8d 53 01       	lea    0x1(%ebx),%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:106
                input_start = input_end;
                arguments_num++;
     26c:	66 83 c6 01          	add    $0x1,%esi
     270:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
                continue;
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
                input_end++;
     274:	66 89 d3             	mov    %edx,%ebx
     277:	eb 04                	jmp    27d <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:110
                input_start = input_end;
                arguments_num++;
            }
        }
        else {// 有参数，还没有读到末尾
            input_end++;
     279:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     27d:	66 3b 1e c0 1f       	cmp    0x1fc0,%ebx
     282:	7e 95                	jle    219 <parser+0x1c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:117
        }
    }

    // 完成分词，开始进行解析。

    if(!strcmp(arguments[0],"run")){// 如果返回0，就是相等了
     284:	66 83 ec 08          	sub    $0x8,%esp
     288:	66 68 71 16 00 00    	pushl  $0x1671
     28e:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     294:	66 50                	push   %eax
     296:	66 e8 e8 12 00 00    	calll  1584 <strcmp>
     29c:	66 83 c4 10          	add    $0x10,%esp
     2a0:	66 85 c0             	test   %eax,%eax
     2a3:	75 31                	jne    2d6 <parser+0xd9>
/mnt/e/code/my_operating_system/os/kernel/tty.c:122
        // 运行一个用户程序。
        // 先从软盘中加载一个指定程序到内存处，然后开始执行。
        // 考虑维护一个空闲空间的指针，然后每加载一个程序，如果可行的话。
        void (**my_program)();
        *my_program = 0x4000;
     2a5:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     2ab:	67 66 c7 03 00 40 00 	movl   $0x4000,(%ebx)
     2b2:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:123
        fs_load_by_name(arguments[1],*my_program);
     2b3:	66 83 ec 08          	sub    $0x8,%esp
     2b7:	66 68 00 40 00 00    	pushl  $0x4000
     2bd:	67 66 8d 44 24 22    	lea    0x22(%esp),%eax
     2c3:	66 50                	push   %eax
     2c5:	66 e8 89 06 00 00    	calll  954 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/tty.c:124
        (*my_program)();
     2cb:	67 66 ff 13          	calll  *(%ebx)
     2cf:	66 83 c4 10          	add    $0x10,%esp
     2d3:	e9 1b 01             	jmp    3f1 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     2d6:	66 83 ec 08          	sub    $0x8,%esp
     2da:	66 68 75 16 00 00    	pushl  $0x1675
     2e0:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     2e6:	66 50                	push   %eax
     2e8:	66 e8 96 12 00 00    	calll  1584 <strcmp>
     2ee:	66 83 c4 10          	add    $0x10,%esp
     2f2:	66 85 c0             	test   %eax,%eax
     2f5:	75 23                	jne    31a <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126 (discriminator 1)
     2f7:	66 83 fe 01          	cmp    $0x1,%esi
     2fb:	75 1d                	jne    31a <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:127
        printf("\n\n");
     2fd:	66 83 ec 0c          	sub    $0xc,%esp
     301:	66 68 78 16 00 00    	pushl  $0x1678
     307:	66 e8 ca 0d 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:128
        fs_show_root_file_table();
     30d:	66 e8 a7 06 00 00    	calll  9ba <fs_show_root_file_table>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
        void (**my_program)();
        *my_program = 0x4000;
        fs_load_by_name(arguments[1],*my_program);
        (*my_program)();
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     313:	66 83 c4 10          	add    $0x10,%esp
     317:	e9 d7 00             	jmp    3f1 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     31a:	66 83 ec 08          	sub    $0x8,%esp
     31e:	66 68 7b 16 00 00    	pushl  $0x167b
     324:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     32a:	66 50                	push   %eax
     32c:	66 e8 52 12 00 00    	calll  1584 <strcmp>
     332:	66 83 c4 10          	add    $0x10,%esp
     336:	66 85 c0             	test   %eax,%eax
     339:	75 23                	jne    35e <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130 (discriminator 1)
     33b:	66 83 fe 01          	cmp    $0x1,%esi
     33f:	75 1d                	jne    35e <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:131
        printf("\n\n");
     341:	66 83 ec 0c          	sub    $0xc,%esp
     345:	66 68 78 16 00 00    	pushl  $0x1678
     34b:	66 e8 86 0d 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:132
        reboot();
     351:	66 e8 c3 11 00 00    	calll  151a <reboot>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     357:	66 83 c4 10          	add    $0x10,%esp
     35b:	e9 93 00             	jmp    3f1 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134
        printf("\n\n");
        reboot();
    }
    else if(!strcmp(arguments[0],"help") && arguments_num == 1){
     35e:	66 83 ec 08          	sub    $0x8,%esp
     362:	66 68 82 16 00 00    	pushl  $0x1682
     368:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     36e:	66 50                	push   %eax
     370:	66 e8 0e 12 00 00    	calll  1584 <strcmp>
     376:	66 83 c4 10          	add    $0x10,%esp
     37a:	66 85 c0             	test   %eax,%eax
     37d:	75 58                	jne    3d7 <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134 (discriminator 1)
     37f:	66 83 fe 01          	cmp    $0x1,%esi
     383:	75 52                	jne    3d7 <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:135
        printf("\n\n");
     385:	66 83 ec 0c          	sub    $0xc,%esp
     389:	66 68 78 16 00 00    	pushl  $0x1678
     38f:	66 e8 42 0d 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:136
        printf("ls        : show the file in the root folder.\n");
     395:	67 66 c7 04 24 a8 1e 	movl   $0x1ea8,(%esp)
     39c:	00 00 
     39e:	66 e8 33 0d 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:137
        printf("run [name]: run the file in the root folder.\n");
     3a4:	67 66 c7 04 24 d8 1e 	movl   $0x1ed8,(%esp)
     3ab:	00 00 
     3ad:	66 e8 24 0d 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:138
        printf("help      : show the help message.\n");
     3b3:	67 66 c7 04 24 08 1f 	movl   $0x1f08,(%esp)
     3ba:	00 00 
     3bc:	66 e8 15 0d 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:139
        printf("reboot    : reboot the machine.\n");
     3c2:	67 66 c7 04 24 2c 1f 	movl   $0x1f2c,(%esp)
     3c9:	00 00 
     3cb:	66 e8 06 0d 00 00    	calll  10d7 <printf>
     3d1:	66 83 c4 10          	add    $0x10,%esp
     3d5:	eb 1a                	jmp    3f1 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:142
    }
    else {
        printf("\n%s : command not found! \n", input_buf);
     3d7:	66 83 ec 08          	sub    $0x8,%esp
     3db:	66 68 e0 1f 00 00    	pushl  $0x1fe0
     3e1:	66 68 87 16 00 00    	pushl  $0x1687
     3e7:	66 e8 ea 0c 00 00    	calll  10d7 <printf>
     3ed:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:144
    }
    int current_cursor = get_cursor();
     3f1:	66 e8 09 07 00 00    	calll  b00 <get_cursor>
     3f7:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:145
    command_line_row = (current_cursor / 80);
     3fb:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     401:	66 f7 ea             	imul   %edx
     404:	66 c1 fa 05          	sar    $0x5,%edx
     408:	66 89 16 9c 1f       	mov    %edx,0x1f9c
/mnt/e/code/my_operating_system/os/kernel/tty.c:148
    // printf("arguments: %d|%s|%s|",arguments_num, arguments[0],arguments[1]);
    return ;
}
     40d:	66 83 c4 74          	add    $0x74,%esp
     411:	66 5b                	pop    %ebx
     413:	66 5e                	pop    %esi
     415:	66 c3                	retl   

00000417 <create_a_line>:
create_a_line():
/mnt/e/code/my_operating_system/os/kernel/tty.c:151

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
     417:	66 83 ec 2c          	sub    $0x2c,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:152
    char message[30] = "walker@walker-pc ~ $ \0";
     41b:	66 a1 78 1f          	mov    0x1f78,%eax
     41f:	67 66 89 44 24 02    	mov    %eax,0x2(%esp)
     425:	66 a1 7c 1f          	mov    0x1f7c,%eax
     429:	67 66 89 44 24 06    	mov    %eax,0x6(%esp)
     42f:	66 a1 80 1f          	mov    0x1f80,%eax
     433:	67 66 89 44 24 0a    	mov    %eax,0xa(%esp)
     439:	66 a1 84 1f          	mov    0x1f84,%eax
     43d:	67 66 89 44 24 0e    	mov    %eax,0xe(%esp)
     443:	66 a1 88 1f          	mov    0x1f88,%eax
     447:	67 66 89 44 24 12    	mov    %eax,0x12(%esp)
     44d:	66 0f b7 06 8c 1f    	movzwl 0x1f8c,%eax
     453:	67 89 44 24 16       	mov    %ax,0x16(%esp)
     458:	66 0f b6 06 8e 1f    	movzbl 0x1f8e,%eax
     45e:	67 88 44 24 18       	mov    %al,0x18(%esp)
     463:	67 66 c7 44 24 19 00 	movl   $0x0,0x19(%esp)
     46a:	00 00 00 
     46d:	67 c7 44 24 1d 00 00 	movw   $0x0,0x1d(%esp)
     474:	67 c6 44 24 1f 00    	movb   $0x0,0x1f(%esp)
/mnt/e/code/my_operating_system/os/kernel/tty.c:153
    for (int i = 0; i < MAX_BUF; i++){
     47a:	66 b8 00 00 00 00    	mov    $0x0,%eax
     480:	eb 0c                	jmp    48e <create_a_line+0x77>
/mnt/e/code/my_operating_system/os/kernel/tty.c:154 (discriminator 3)
        input_buf[i] = 0;
     482:	67 c6 80 e0 1f 00 00 	movb   $0x0,0x1fe0(%eax)
     489:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 3)
}

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    char message[30] = "walker@walker-pc ~ $ \0";
    for (int i = 0; i < MAX_BUF; i++){
     48a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 1)
     48e:	66 83 f8 63          	cmp    $0x63,%eax
     492:	7e ee                	jle    482 <create_a_line+0x6b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:156
        input_buf[i] = 0;
    }
    message_length = strlen(message);
     494:	66 83 ec 0c          	sub    $0xc,%esp
     498:	67 66 8d 44 24 0e    	lea    0xe(%esp),%eax
     49e:	66 50                	push   %eax
     4a0:	66 e8 86 10 00 00    	calll  152c <strlen>
     4a6:	66 a3 c4 1f          	mov    %eax,0x1fc4
/mnt/e/code/my_operating_system/os/kernel/tty.c:157
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
     4aa:	66 03 06 c0 1f       	add    0x1fc0,%eax
     4af:	66 89 c1             	mov    %eax,%ecx
     4b2:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     4b8:	66 f7 ea             	imul   %edx
     4bb:	66 c1 fa 05          	sar    $0x5,%edx
     4bf:	66 c1 f9 1f          	sar    $0x1f,%ecx
     4c3:	66 29 ca             	sub    %ecx,%edx
     4c6:	66 89 d0             	mov    %edx,%eax
     4c9:	66 03 06 9c 1f       	add    0x1f9c,%eax
     4ce:	66 83 c0 01          	add    $0x1,%eax
     4d2:	66 a3 9c 1f          	mov    %eax,0x1f9c
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    while(command_line_row > 23){
     4d6:	66 83 c4 10          	add    $0x10,%esp
     4da:	eb 0c                	jmp    4e8 <create_a_line+0xd1>
/mnt/e/code/my_operating_system/os/kernel/tty.c:159
        scroll_screen();
     4dc:	66 e8 aa 0f 00 00    	calll  148c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:160
        command_line_row--;
     4e2:	66 83 2e 9c 1f 01    	subl   $0x1,0x1f9c
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    for (int i = 0; i < MAX_BUF; i++){
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    while(command_line_row > 23){
     4e8:	66 a1 9c 1f          	mov    0x1f9c,%eax
     4ec:	66 83 f8 17          	cmp    $0x17,%eax
     4f0:	7f ea                	jg     4dc <create_a_line+0xc5>
/mnt/e/code/my_operating_system/os/kernel/tty.c:162
        scroll_screen();
        command_line_row--;
    }
    command_line_cursor = 0;
     4f2:	66 c7 06 c0 1f 00 00 	movl   $0x0,0x1fc0
     4f9:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:163
    set_cursor(command_line_row * 80);
     4fb:	66 83 ec 0c          	sub    $0xc,%esp
     4ff:	67 66 8d 04 80       	lea    (%eax,%eax,4),%eax
     504:	66 c1 e0 04          	shl    $0x4,%eax
     508:	66 0f b7 d0          	movzwl %ax,%edx
     50c:	66 52                	push   %edx
     50e:	66 e8 7a 05 00 00    	calll  a8e <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:165
    // printf("%d", command_line_row);
    printf("%s", message);
     514:	66 83 c4 08          	add    $0x8,%esp
     518:	67 66 8d 44 24 0a    	lea    0xa(%esp),%eax
     51e:	66 50                	push   %eax
     520:	66 68 a2 16 00 00    	pushl  $0x16a2
     526:	66 e8 ab 0b 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:166
}
     52c:	66 83 c4 3c          	add    $0x3c,%esp
     530:	66 c3                	retl   

00000532 <tty>:
tty():
/mnt/e/code/my_operating_system/os/kernel/tty.c:19
int message_length = 0;
int command_line_cursor = 0; // 光标在输入区的偏移量
char input_buf[MAX_BUF]; // 输入缓存区


void tty(){
     532:	66 56                	push   %esi
     534:	66 53                	push   %ebx
     536:	66 83 ec 04          	sub    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:21
    int keyboard_flag = 0;
    new_line_flag = 1;
     53a:	66 c7 06 98 1f 01 00 	movl   $0x1,0x1f98
     541:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:22
    command_line_row = -1;
     543:	66 c7 06 9c 1f ff ff 	movl   $0xffffffff,0x1f9c
     54a:	ff ff 
/mnt/e/code/my_operating_system/os/kernel/tty.c:23
    clean_screen();
     54c:	66 e8 20 0f 00 00    	calll  1472 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:24
    set_cursor(1974);
     552:	66 83 ec 0c          	sub    $0xc,%esp
     556:	66 68 b6 07 00 00    	pushl  $0x7b6
     55c:	66 e8 2c 05 00 00    	calll  a8e <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:25
    set_cursor(0);
     562:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
     569:	00 00 
     56b:	66 e8 1d 05 00 00    	calll  a8e <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:26
    print_my_name();
     571:	66 e8 79 0f 00 00    	calll  14f0 <print_my_name>
     577:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:29
    while (1){
        // 使用缓冲区数据更新
        if (new_line_flag){
     57b:	66 83 3e 98 1f 00    	cmpl   $0x0,0x1f98
     581:	74 0f                	je     592 <tty+0x60>
/mnt/e/code/my_operating_system/os/kernel/tty.c:30
            create_a_line();
     583:	66 e8 8e fe ff ff    	calll  417 <create_a_line>
/mnt/e/code/my_operating_system/os/kernel/tty.c:31
            new_line_flag = 0;
     589:	66 c7 06 98 1f 00 00 	movl   $0x0,0x1f98
     590:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:34
        }

        if(command_line_row == 23 && message_length + command_line_cursor > 80){
     592:	66 83 3e 9c 1f 17    	cmpl   $0x17,0x1f9c
     598:	75 2f                	jne    5c9 <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:34 (discriminator 1)
     59a:	66 a1 c0 1f          	mov    0x1fc0,%eax
     59e:	66 03 06 c4 1f       	add    0x1fc4,%eax
     5a3:	66 83 f8 50          	cmp    $0x50,%eax
     5a7:	7e 20                	jle    5c9 <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:35
            scroll_screen();
     5a9:	66 e8 dd 0e 00 00    	calll  148c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:36
            command_line_row--;
     5af:	66 83 2e 9c 1f 01    	subl   $0x1,0x1f9c
/mnt/e/code/my_operating_system/os/kernel/tty.c:37
            set_cursor(1840);
     5b5:	66 83 ec 0c          	sub    $0xc,%esp
     5b9:	66 68 30 07 00 00    	pushl  $0x730
     5bf:	66 e8 c9 04 00 00    	calll  a8e <set_cursor>
     5c5:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:39
        }
        putc(' ');// 用来删除光标处的文字，与输入退格的时候光标-1配合使用
     5c9:	66 83 ec 0c          	sub    $0xc,%esp
     5cd:	66 6a 20             	pushl  $0x20
     5d0:	66 e8 86 05 00 00    	calll  b5c <putc>
/mnt/e/code/my_operating_system/os/kernel/tty.c:42

        // command_line_row = get_cursor() / 80;
        set_cursor(80*command_line_row + message_length);
     5d6:	66 8b 16 9c 1f       	mov    0x1f9c,%edx
     5db:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     5e0:	66 89 d0             	mov    %edx,%eax
     5e3:	66 c1 e0 04          	shl    $0x4,%eax
     5e7:	03 06 c4 1f          	add    0x1fc4,%ax
     5eb:	66 0f b7 c0          	movzwl %ax,%eax
     5ef:	67 66 89 04 24       	mov    %eax,(%esp)
     5f4:	66 e8 94 04 00 00    	calll  a8e <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:43
        puts(input_buf, command_line_cursor);
     5fa:	66 83 c4 08          	add    $0x8,%esp
     5fe:	66 ff 36 c0 1f       	pushl  0x1fc0
     603:	66 68 e0 1f 00 00    	pushl  $0x1fe0
     609:	66 e8 42 07 00 00    	calll  d51 <puts>
/mnt/e/code/my_operating_system/os/kernel/tty.c:46

        // 更新完了 检测键盘
        keyboard_flag = check_keyboard();
     60f:	66 e8 47 0e 00 00    	calll  145c <check_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:49

        // 如果返回1，则有输入，处理输入信息，否则继续循环。
        if (keyboard_flag){
     615:	66 83 c4 10          	add    $0x10,%esp
     619:	85 c0                	test   %ax,%ax
     61b:	0f 84 5c ff          	je     57b <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:51
            // 处理键盘事件
            u16 keyboard_code =  get_keyboard();
     61f:	66 e8 47 0e 00 00    	calll  146c <get_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:52
            u8 ascii_code = keyboard_code;
     625:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:54
            u8 scan_code = keyboard_code >> 8;
            if (isprint(ascii_code)){
     628:	66 83 ec 0c          	sub    $0xc,%esp
     62c:	66 0f b6 c0          	movzbl %al,%eax
     630:	66 50                	push   %eax
     632:	66 e8 fa 0b 00 00    	calll  1232 <isprint>
     638:	66 83 c4 10          	add    $0x10,%esp
     63c:	66 85 c0             	test   %eax,%eax
     63f:	74 20                	je     661 <tty+0x12f>
/mnt/e/code/my_operating_system/os/kernel/tty.c:55
                if (command_line_cursor <= MAX_BUF){
     641:	66 a1 c0 1f          	mov    0x1fc0,%eax
     645:	66 83 f8 64          	cmp    $0x64,%eax
     649:	0f 8f 2e ff          	jg     57b <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:56
                    input_buf[command_line_cursor++] = ascii_code;
     64d:	67 66 8d 50 01       	lea    0x1(%eax),%edx
     652:	66 89 16 c0 1f       	mov    %edx,0x1fc0
     657:	67 88 98 e0 1f 00 00 	mov    %bl,0x1fe0(%eax)
     65e:	e9 1a ff             	jmp    57b <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:59
                }
            }
            else if (ascii_code == 13){
     661:	80 fb 0d             	cmp    $0xd,%bl
     664:	75 1e                	jne    684 <tty+0x152>
/mnt/e/code/my_operating_system/os/kernel/tty.c:60
                new_line_flag = 1;
     666:	66 c7 06 98 1f 01 00 	movl   $0x1,0x1f98
     66d:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:61
                input_buf[command_line_cursor] = '\0';
     66f:	66 a1 c0 1f          	mov    0x1fc0,%eax
     673:	67 c6 80 e0 1f 00 00 	movb   $0x0,0x1fe0(%eax)
     67a:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:62
                parser();
     67b:	66 e8 7c fb ff ff    	calll  1fd <parser>
     681:	e9 f7 fe             	jmp    57b <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:64
            }
            else if (ascii_code == 8){
     684:	80 fb 08             	cmp    $0x8,%bl
     687:	75 3e                	jne    6c7 <tty+0x195>
/mnt/e/code/my_operating_system/os/kernel/tty.c:65
                if(command_line_cursor){
     689:	66 a1 c0 1f          	mov    0x1fc0,%eax
     68d:	66 85 c0             	test   %eax,%eax
     690:	0f 84 e7 fe          	je     57b <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:66
                    input_buf[--command_line_cursor] = 0;
     694:	67 66 8d 50 ff       	lea    -0x1(%eax),%edx
     699:	66 89 16 c0 1f       	mov    %edx,0x1fc0
     69e:	67 c6 80 df 1f 00 00 	movb   $0x0,0x1fdf(%eax)
     6a5:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:68
                    // 将光标设置为前一个位置，方便删除
                    int cur_cursor = get_cursor();
     6a6:	66 e8 54 04 00 00    	calll  b00 <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:69
                    set_cursor(cur_cursor-1);
     6ac:	66 83 ec 0c          	sub    $0xc,%esp
     6b0:	66 83 e8 01          	sub    $0x1,%eax
     6b4:	66 0f b7 c0          	movzwl %ax,%eax
     6b8:	66 50                	push   %eax
     6ba:	66 e8 ce 03 00 00    	calll  a8e <set_cursor>
     6c0:	66 83 c4 10          	add    $0x10,%esp
     6c4:	e9 b4 fe             	jmp    57b <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:72
                }
            }
            else if (ascii_code == 27){
     6c7:	80 fb 1b             	cmp    $0x1b,%bl
     6ca:	0f 85 ad fe          	jne    57b <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:73
                __asm__("mov $0x4c00, %ax");
     6ce:	b8 00 4c             	mov    $0x4c00,%ax
/mnt/e/code/my_operating_system/os/kernel/tty.c:74
                __asm__("int $0x40");
     6d1:	cd 40                	int    $0x40
     6d3:	e9 a5 fe             	jmp    57b <tty+0x49>

000006d6 <tty_scroll_screen>:
tty_scroll_screen():
/mnt/e/code/my_operating_system/os/kernel/tty.c:169
    // printf("%d", command_line_row);
    printf("%s", message);
}


void tty_scroll_screen(){
     6d6:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:170
    if (get_cursor()/80 > 24){
     6da:	66 e8 20 04 00 00    	calll  b00 <get_cursor>
     6e0:	3d cf 07             	cmp    $0x7cf,%ax
     6e3:	76 0c                	jbe    6f1 <tty_scroll_screen+0x1b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:171
        scroll_screen();
     6e5:	66 e8 a1 0d 00 00    	calll  148c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:172
        command_line_row--;
     6eb:	66 83 2e 9c 1f 01    	subl   $0x1,0x1f9c
/mnt/e/code/my_operating_system/os/kernel/tty.c:175
    }
    return ;
     6f1:	66 83 c4 0c          	add    $0xc,%esp
     6f5:	66 c3                	retl   

000006f7 <init_fsystem>:
init_fsystem():
/mnt/e/code/my_operating_system/os/service/fsystem.c:14
FileDescriptor root[56];
u16 root_sector;
u16 first_cluster_by_sector;
u16 cluster2sector;

void init_fsystem(){
     6f7:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:15
    cluster2sector = 1;
     6fb:	c7 06 80 2b 01 00    	movw   $0x1,0x2b80
/mnt/e/code/my_operating_system/os/service/fsystem.c:16
    root_sector = 37;
     701:	c7 06 60 20 25 00    	movw   $0x25,0x2060
/mnt/e/code/my_operating_system/os/service/fsystem.c:17
    first_cluster_by_sector = root_sector + 1;  
     707:	c7 06 82 2b 26 00    	movw   $0x26,0x2b82
/mnt/e/code/my_operating_system/os/service/fsystem.c:18
    read_n_sector(root_sector,1, 0x1000, root);
     70d:	66 b8 80 24 00 00    	mov    $0x2480,%eax
     713:	66 0f b7 c0          	movzwl %ax,%eax
     717:	66 50                	push   %eax
     719:	66 68 00 10 00 00    	pushl  $0x1000
     71f:	66 6a 01             	pushl  $0x1
     722:	66 6a 25             	pushl  $0x25
     725:	66 e8 ba 0b 00 00    	calll  12e5 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:19
    read_n_sector(1,2,0x1000, FAT_table);// 这个会覆盖掉root吗？
     72b:	66 b8 80 20 00 00    	mov    $0x2080,%eax
     731:	66 0f b7 c0          	movzwl %ax,%eax
     735:	66 50                	push   %eax
     737:	66 68 00 10 00 00    	pushl  $0x1000
     73d:	66 6a 02             	pushl  $0x2
     740:	66 6a 01             	pushl  $0x1
     743:	66 e8 9c 0b 00 00    	calll  12e5 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:27
    // puti(FAT_table[0]);
    // puti(root[0].cluster_number);
    // puts(&root[0], 10);
    // puts(&root[1], 10);
    // puts(&root[2], 10);
}
     749:	66 83 c4 2c          	add    $0x2c,%esp
     74d:	66 c3                	retl   

0000074f <_fs_find_descriptor_number_by_name>:
_fs_find_descriptor_number_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:29

u16 _fs_find_descriptor_number_by_name(char * file_name){
     74f:	66 57                	push   %edi
     751:	66 56                	push   %esi
     753:	66 53                	push   %ebx
     755:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:30
    int file_name_length = strlen(file_name);
     75b:	66 83 ec 0c          	sub    $0xc,%esp
     75f:	66 57                	push   %edi
     761:	66 e8 c5 0d 00 00    	calll  152c <strlen>
     767:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:31
    if (file_name_length >= 11) file_name_length = 11;
     76a:	66 83 c4 10          	add    $0x10,%esp
     76e:	66 83 f8 0a          	cmp    $0xa,%eax
     772:	7e 06                	jle    77a <_fs_find_descriptor_number_by_name+0x2b>
     774:	66 be 0b 00 00 00    	mov    $0xb,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:33
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     77a:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     780:	eb 2f                	jmp    7b1 <_fs_find_descriptor_number_by_name+0x62>
/mnt/e/code/my_operating_system/os/service/fsystem.c:34
        if (!strncmp(&root[i], file_name, file_name_length)){
     782:	66 89 d8             	mov    %ebx,%eax
     785:	66 c1 e0 05          	shl    $0x5,%eax
     789:	66 05 80 24 00 00    	add    $0x2480,%eax
     78f:	66 83 ec 04          	sub    $0x4,%esp
     793:	66 56                	push   %esi
     795:	66 57                	push   %edi
     797:	66 50                	push   %eax
     799:	66 e8 51 0e 00 00    	calll  15f0 <strncmp>
     79f:	66 83 c4 10          	add    $0x10,%esp
     7a3:	66 85 c0             	test   %eax,%eax
     7a6:	75 05                	jne    7ad <_fs_find_descriptor_number_by_name+0x5e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:35
            return i;
     7a8:	66 89 d8             	mov    %ebx,%eax
     7ab:	eb 10                	jmp    7bd <_fs_find_descriptor_number_by_name+0x6e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 2)

u16 _fs_find_descriptor_number_by_name(char * file_name){
    int file_name_length = strlen(file_name);
    if (file_name_length >= 11) file_name_length = 11;
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     7ad:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 1)
     7b1:	66 83 fb 09          	cmp    $0x9,%ebx
     7b5:	7e cb                	jle    782 <_fs_find_descriptor_number_by_name+0x33>
/mnt/e/code/my_operating_system/os/service/fsystem.c:38
        if (!strncmp(&root[i], file_name, file_name_length)){
            return i;
        }
    }
    return -1;
     7b7:	66 b8 ff ff ff ff    	mov    $0xffffffff,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:39
}
     7bd:	66 5b                	pop    %ebx
     7bf:	66 5e                	pop    %esi
     7c1:	66 5f                	pop    %edi
     7c3:	66 c3                	retl   

000007c5 <_fs_find_cluster_code_by_name>:
_fs_find_cluster_code_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:41

u16 _fs_find_cluster_code_by_name(char * file_name){
     7c5:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:42
    int index = _fs_find_descriptor_number_by_name(file_name);
     7c9:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     7cf:	66 e8 7a ff ff ff    	calll  74f <_fs_find_descriptor_number_by_name>
     7d5:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:44
    if (index != -1)
        return root[index].cluster_code;
     7d9:	66 c1 e0 05          	shl    $0x5,%eax
     7dd:	67 66 0f b7 80 9a 24 	movzwl 0x249a(%eax),%eax
     7e4:	00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:46
    return 0;
}
     7e6:	66 83 c4 1c          	add    $0x1c,%esp
     7ea:	66 c3                	retl   

000007ec <_fs_get_file_size_by_cluster_code>:
_fs_get_file_size_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:48

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
     7ec:	67 66 0f b7 54 24 04 	movzwl 0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:49
    int size = 0;
     7f3:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     7f9:	eb 1b                	jmp    816 <loader_code_segment+0x16>
/mnt/e/code/my_operating_system/os/service/fsystem.c:51
        size += 512*cluster2sector;
     7fb:	66 0f b7 0e 80 2b    	movzwl 0x2b80,%ecx
     801:	66 c1 e1 09          	shl    $0x9,%ecx
     805:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:52
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     808:	66 0f b7 d2          	movzwl %dx,%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:53
        cluster_code = FAT_table[cluster_code];
     80c:	67 66 0f b7 94 12 80 	movzwl 0x2080(%edx,%edx,1),%edx
     813:	20 00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    return 0;
}

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     816:	67 66 8d 4a fe       	lea    -0x2(%edx),%ecx
     81b:	83 f9 ed             	cmp    $0xffed,%cx
     81e:	76 db                	jbe    7fb <_fs_get_file_size_by_cluster_code+0xf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:56
        size += 512*cluster2sector;
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     820:	66 f3 c3             	repz retl 

00000823 <_fs_show_file_by_descriptor_number>:
_fs_show_file_by_descriptor_number():
/mnt/e/code/my_operating_system/os/service/fsystem.c:58

void _fs_show_file_by_descriptor_number(u16 index){
     823:	66 56                	push   %esi
     825:	66 53                	push   %ebx
     827:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:59
    int cluster_code = root[index].cluster_code;
     82b:	67 66 0f b7 44 24 14 	movzwl 0x14(%esp),%eax
     832:	66 89 c6             	mov    %eax,%esi
     835:	66 c1 e6 05          	shl    $0x5,%esi
     839:	67 66 0f b7 9e 9a 24 	movzwl 0x249a(%esi),%ebx
     840:	00 00 
     842:	66 81 c6 80 24 00 00 	add    $0x2480,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:60
    printf("%d, %d\n" , index,cluster_code);
     849:	66 53                	push   %ebx
     84b:	66 50                	push   %eax
     84d:	66 68 a5 16 00 00    	pushl  $0x16a5
     853:	66 e8 7e 08 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:62
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
     859:	67 66 89 1c 24       	mov    %ebx,(%esp)
     85e:	66 e8 88 ff ff ff    	calll  7ec <_fs_get_file_size_by_cluster_code>
     864:	66 83 c4 0c          	add    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:61
}

void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
     868:	66 0f b7 c0          	movzwl %ax,%eax
     86c:	66 50                	push   %eax
     86e:	66 56                	push   %esi
     870:	66 68 ad 16 00 00    	pushl  $0x16ad
     876:	66 e8 5b 08 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     87c:	66 83 c4 10          	add    $0x10,%esp
     880:	eb 20                	jmp    8a2 <_fs_show_file_by_descriptor_number+0x7f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:64
        printf("-%d", cluster_code);
     882:	66 83 ec 08          	sub    $0x8,%esp
     886:	66 53                	push   %ebx
     888:	66 68 be 16 00 00    	pushl  $0x16be
     88e:	66 e8 43 08 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:65
        cluster_code = FAT_table[cluster_code];
     894:	67 66 0f b7 9c 1b 80 	movzwl 0x2080(%ebx,%ebx,1),%ebx
     89b:	20 00 00 
     89e:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     8a2:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     8a7:	66 3d ed ff 00 00    	cmp    $0xffed,%eax
     8ad:	76 d3                	jbe    882 <_fs_show_file_by_descriptor_number+0x5f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:67
        printf("-%d", cluster_code);
        cluster_code = FAT_table[cluster_code];
    }
    printf("-|\n");
     8af:	66 83 ec 0c          	sub    $0xc,%esp
     8b3:	66 68 c2 16 00 00    	pushl  $0x16c2
     8b9:	66 e8 18 08 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:69
    return ;
}
     8bf:	66 83 c4 14          	add    $0x14,%esp
     8c3:	66 5b                	pop    %ebx
     8c5:	66 5e                	pop    %esi
     8c7:	66 c3                	retl   

000008c9 <_fs_load_by_cluster_code>:
_fs_load_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:71

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
     8c9:	66 57                	push   %edi
     8cb:	66 56                	push   %esi
     8cd:	66 53                	push   %ebx
     8cf:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
     8d5:	67 66 0f b7 5c 24 10 	movzwl 0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/fsystem.c:72
    int size = 0;
     8dc:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     8e2:	eb 5b                	jmp    93f <_fs_load_by_cluster_code+0x76>
/mnt/e/code/my_operating_system/os/service/fsystem.c:74
        size += 512*cluster2sector;
     8e4:	66 0f b7 16 80 2b    	movzwl 0x2b80,%edx
     8ea:	66 89 d0             	mov    %edx,%eax
     8ed:	66 c1 e0 09          	shl    $0x9,%eax
     8f1:	66 01 c7             	add    %eax,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:75
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     8f4:	66 0f b7 0e 82 2b    	movzwl 0x2b82,%ecx
     8fa:	66 0f b7 db          	movzwl %bx,%ebx
     8fe:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     903:	66 0f af c2          	imul   %edx,%eax
     907:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:76
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
     90a:	66 0f b7 ce          	movzwl %si,%ecx
     90e:	66 51                	push   %ecx
     910:	66 68 00 10 00 00    	pushl  $0x1000
     916:	66 52                	push   %edx
     918:	66 0f b7 c0          	movzwl %ax,%eax
     91c:	66 50                	push   %eax
     91e:	66 e8 c1 09 00 00    	calll  12e5 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:77
        program = program+cluster2sector*512;
     924:	66 0f b7 06 80 2b    	movzwl 0x2b80,%eax
     92a:	66 c1 e0 09          	shl    $0x9,%eax
     92e:	66 01 c6             	add    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:78
        cluster_code = FAT_table[cluster_code];
     931:	67 66 0f b7 9c 1b 80 	movzwl 0x2080(%ebx,%ebx,1),%ebx
     938:	20 00 00 
     93b:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    return ;
}

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     93f:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     944:	83 f8 ed             	cmp    $0xffed,%ax
     947:	76 9b                	jbe    8e4 <_fs_load_by_cluster_code+0x1b>
/mnt/e/code/my_operating_system/os/service/fsystem.c:81
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
        program = program+cluster2sector*512;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     949:	66 89 f8             	mov    %edi,%eax
     94c:	66 5b                	pop    %ebx
     94e:	66 5e                	pop    %esi
     950:	66 5f                	pop    %edi
     952:	66 c3                	retl   

00000954 <fs_load_by_name>:
fs_load_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:84


u16 fs_load_by_name(char * file_name, void (*program)()){
     954:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:85
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     958:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     95e:	66 e8 61 fe ff ff    	calll  7c5 <_fs_find_cluster_code_by_name>
     964:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:86
    if (cluster_code){
     968:	66 83 c4 10          	add    $0x10,%esp
     96c:	66 85 c0             	test   %eax,%eax
     96f:	74 18                	je     989 <fs_load_by_name+0x35>
/mnt/e/code/my_operating_system/os/service/fsystem.c:87
        return _fs_load_by_cluster_code(cluster_code, program);
     971:	66 83 ec 08          	sub    $0x8,%esp
     975:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     97b:	66 50                	push   %eax
     97d:	66 e8 46 ff ff ff    	calll  8c9 <_fs_load_by_cluster_code>
     983:	66 83 c4 10          	add    $0x10,%esp
     987:	eb 06                	jmp    98f <fs_load_by_name+0x3b>
/mnt/e/code/my_operating_system/os/service/fsystem.c:90
    }
    else {
        return 0;
     989:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:92
    }
}
     98f:	66 83 c4 0c          	add    $0xc,%esp
     993:	66 c3                	retl   

00000995 <fs_get_file_size>:
fs_get_file_size():
/mnt/e/code/my_operating_system/os/service/fsystem.c:95


u16 fs_get_file_size(char * file_name){
     995:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:96
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     999:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     99f:	66 e8 20 fe ff ff    	calll  7c5 <_fs_find_cluster_code_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:97
    return _fs_get_file_size_by_cluster_code(cluster_code);
     9a5:	66 0f b7 c0          	movzwl %ax,%eax
     9a9:	67 66 89 04 24       	mov    %eax,(%esp)
     9ae:	66 e8 38 fe ff ff    	calll  7ec <_fs_get_file_size_by_cluster_code>
/mnt/e/code/my_operating_system/os/service/fsystem.c:98
}
     9b4:	66 83 c4 1c          	add    $0x1c,%esp
     9b8:	66 c3                	retl   

000009ba <fs_show_root_file_table>:
fs_show_root_file_table():
/mnt/e/code/my_operating_system/os/service/fsystem.c:100

void fs_show_root_file_table(){
     9ba:	66 53                	push   %ebx
     9bc:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:101
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
     9c0:	66 68 c6 16 00 00    	pushl  $0x16c6
     9c6:	66 68 ce 16 00 00    	pushl  $0x16ce
     9cc:	66 68 d8 16 00 00    	pushl  $0x16d8
     9d2:	66 68 e3 16 00 00    	pushl  $0x16e3
     9d8:	66 e8 f9 06 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:102
    printf("------------------------------------\n\r");
     9de:	67 66 c7 04 24 50 1f 	movl   $0x1f50,(%esp)
     9e5:	00 00 
     9e7:	66 e8 ea 06 00 00    	calll  10d7 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     9ed:	66 83 c4 10          	add    $0x10,%esp
     9f1:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     9f7:	eb 18                	jmp    a11 <fs_show_root_file_table+0x57>
/mnt/e/code/my_operating_system/os/service/fsystem.c:105 (discriminator 3)
        _fs_show_file_by_descriptor_number(i);
     9f9:	66 83 ec 0c          	sub    $0xc,%esp
     9fd:	66 0f b7 c3          	movzwl %bx,%eax
     a01:	66 50                	push   %eax
     a03:	66 e8 1a fe ff ff    	calll  823 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 3)

void fs_show_root_file_table(){
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    printf("------------------------------------\n\r");
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     a09:	66 83 c3 01          	add    $0x1,%ebx
     a0d:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 1)
     a11:	66 83 fb 08          	cmp    $0x8,%ebx
     a15:	7e e2                	jle    9f9 <fs_show_root_file_table+0x3f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:108
        _fs_show_file_by_descriptor_number(i);
    }
    return ;
}
     a17:	66 83 c4 08          	add    $0x8,%esp
     a1b:	66 5b                	pop    %ebx
     a1d:	66 c3                	retl   

00000a1f <fs_show_file_by_name>:
fs_show_file_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:110

void fs_show_file_by_name(char * file_name){
     a1f:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:111
    int descriptor_index = _fs_find_descriptor_number_by_name(file_name);
     a23:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     a29:	66 e8 20 fd ff ff    	calll  74f <_fs_find_descriptor_number_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:112
    _fs_show_file_by_descriptor_number(descriptor_index);
     a2f:	66 0f b7 c0          	movzwl %ax,%eax
     a33:	67 66 89 04 24       	mov    %eax,(%esp)
     a38:	66 e8 e5 fd ff ff    	calll  823 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:114
    return ;
}
     a3e:	66 83 c4 1c          	add    $0x1c,%esp
     a42:	66 c3                	retl   

00000a44 <fs_show_floppy_infomation>:
fs_show_floppy_infomation():
/mnt/e/code/my_operating_system/os/service/fsystem.c:117


void fs_show_floppy_infomation(){
     a44:	66 f3 c3             	repz retl 

00000a47 <_put_char>:
_put_char():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:5
#include "../include/basic.h"
#include "../include/type.h"
#include "../include/string.h"

void _put_char(char c, u16 cursor_index){
     a47:	66 53                	push   %ebx
     a49:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:7
    int _address = 0xb8000;
    int _offset = cursor_index * 2;
     a4d:	67 66 0f b7 5c 24 1c 	movzwl 0x1c(%esp),%ebx
     a54:	66 01 db             	add    %ebx,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:8
    write_memory_byte(_address+_offset, c);
     a57:	67 66 8d 83 00 80 0b 	lea    0xb8000(%ebx),%eax
     a5e:	00 
     a5f:	67 66 0f b6 54 24 18 	movzbl 0x18(%esp),%edx
     a66:	66 52                	push   %edx
     a68:	66 50                	push   %eax
     a6a:	66 e8 9c 09 00 00    	calll  140c <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:9
    write_memory_byte(_address+_offset+1, 0x1f);
     a70:	66 81 c3 01 80 0b 00 	add    $0xb8001,%ebx
     a77:	66 83 c4 08          	add    $0x8,%esp
     a7b:	66 6a 1f             	pushl  $0x1f
     a7e:	66 53                	push   %ebx
     a80:	66 e8 86 09 00 00    	calll  140c <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:11
    return ;
}
     a86:	66 83 c4 18          	add    $0x18,%esp
     a8a:	66 5b                	pop    %ebx
     a8c:	66 c3                	retl   

00000a8e <set_cursor>:
set_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:13

void set_cursor(u16 cursor_index){
     a8e:	66 56                	push   %esi
     a90:	66 53                	push   %ebx
     a92:	66 83 ec 0c          	sub    $0xc,%esp
     a96:	67 66 8b 5c 24 18    	mov    0x18(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:16
    // short cursor_index = 80 * row + column;     // 计算光标寄存器的值
    u8 low_eight = cursor_index; // 取低八位，高位被截断
    u8 high_eight = cursor_index >> 8; // 取高八位
     a9c:	66 89 d8             	mov    %ebx,%eax
     a9f:	c1 e8 08             	shr    $0x8,%ax
     aa2:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:17
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     aa5:	66 6a 0e             	pushl  $0xe
     aa8:	66 68 d4 03 00 00    	pushl  $0x3d4
     aae:	66 e8 0c 09 00 00    	calll  13c0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:18
    write_port_byte(0x3d5, high_eight);// 将光标索引高八位写入端口
     ab4:	66 83 c4 08          	add    $0x8,%esp
     ab8:	66 89 f0             	mov    %esi,%eax
     abb:	66 0f b6 f0          	movzbl %al,%esi
     abf:	66 56                	push   %esi
     ac1:	66 68 d5 03 00 00    	pushl  $0x3d5
     ac7:	66 e8 f3 08 00 00    	calll  13c0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:19
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     acd:	66 83 c4 08          	add    $0x8,%esp
     ad1:	66 6a 0f             	pushl  $0xf
     ad4:	66 68 d4 03 00 00    	pushl  $0x3d4
     ada:	66 e8 e0 08 00 00    	calll  13c0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:20
    write_port_byte(0x3d5, low_eight);// 将光标索引低八位写入端口
     ae0:	66 83 c4 08          	add    $0x8,%esp
     ae4:	66 0f b6 db          	movzbl %bl,%ebx
     ae8:	66 53                	push   %ebx
     aea:	66 68 d5 03 00 00    	pushl  $0x3d5
     af0:	66 e8 ca 08 00 00    	calll  13c0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:22
    return ;
}
     af6:	66 83 c4 14          	add    $0x14,%esp
     afa:	66 5b                	pop    %ebx
     afc:	66 5e                	pop    %esi
     afe:	66 c3                	retl   

00000b00 <get_cursor>:
get_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:24

u16 get_cursor(){
     b00:	66 53                	push   %ebx
     b02:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:27
    u8 low_eight = 0, high_eight = 0;
    u16 cursor_index = 0;
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     b06:	66 6a 0e             	pushl  $0xe
     b09:	66 68 d4 03 00 00    	pushl  $0x3d4
     b0f:	66 e8 ab 08 00 00    	calll  13c0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:28
    high_eight = read_port_byte(0x3d5);// 将光标索引高八位写入端口
     b15:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     b1c:	00 00 
     b1e:	66 e8 c4 08 00 00    	calll  13e8 <read_port_byte>
     b24:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:29
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     b27:	66 83 c4 08          	add    $0x8,%esp
     b2b:	66 6a 0f             	pushl  $0xf
     b2e:	66 68 d4 03 00 00    	pushl  $0x3d4
     b34:	66 e8 86 08 00 00    	calll  13c0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:30
    low_eight = read_port_byte(0x3d5);// 将光标索引低八位写入端口
     b3a:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     b41:	00 00 
     b43:	66 e8 9f 08 00 00    	calll  13e8 <read_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:32
    cursor_index = high_eight;
    cursor_index = (cursor_index << 8) + low_eight;
     b49:	66 c1 e3 08          	shl    $0x8,%ebx
     b4d:	66 0f b6 c0          	movzbl %al,%eax
     b51:	66 01 d8             	add    %ebx,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:34
    return cursor_index;
}
     b54:	66 83 c4 18          	add    $0x18,%esp
     b58:	66 5b                	pop    %ebx
     b5a:	66 c3                	retl   

00000b5c <putc>:
putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:36

void putc(char c){
     b5c:	66 57                	push   %edi
     b5e:	66 56                	push   %esi
     b60:	66 53                	push   %ebx
     b62:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:37
    u16 cursor_index = get_cursor();
     b68:	66 e8 92 ff ff ff    	calll  b00 <get_cursor>
     b6e:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:38
    u16 row = cursor_index / 80;
     b71:	66 0f b7 d8          	movzwl %ax,%ebx
     b75:	66 69 db cd cc 00 00 	imul   $0xcccd,%ebx,%ebx
     b7c:	66 c1 eb 10          	shr    $0x10,%ebx
     b80:	c1 eb 06             	shr    $0x6,%bx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:40
    u16 col = cursor_index % 80;
    if (cursor_index >= 1920){
     b83:	3d 7f 07             	cmp    $0x77f,%ax
     b86:	76 0c                	jbe    b94 <putc+0x38>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:41
        scroll_screen();
     b88:	66 e8 fe 08 00 00    	calll  148c <scroll_screen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:42
        cursor_index = 1840;
     b8e:	66 be 30 07 00 00    	mov    $0x730,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:44
    }
    switch (c) {
     b94:	66 89 f8             	mov    %edi,%eax
     b97:	3c 0a                	cmp    $0xa,%al
     b99:	74 06                	je     ba1 <putc+0x45>
     b9b:	3c 0d                	cmp    $0xd,%al
     b9d:	74 25                	je     bc4 <putc+0x68>
     b9f:	eb 45                	jmp    be6 <putc+0x8a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:46
        case '\n':
            set_cursor((row+1)*80); // 回车，移到下一行
     ba1:	66 83 ec 0c          	sub    $0xc,%esp
     ba5:	67 66 8d 5c 9b 05    	lea    0x5(%ebx,%ebx,4),%ebx
     bab:	66 89 d8             	mov    %ebx,%eax
     bae:	66 c1 e0 04          	shl    $0x4,%eax
     bb2:	66 0f b7 c0          	movzwl %ax,%eax
     bb6:	66 50                	push   %eax
     bb8:	66 e8 d0 fe ff ff    	calll  a8e <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:47
            break;
     bbe:	66 83 c4 10          	add    $0x10,%esp
     bc2:	eb 52                	jmp    c16 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:49
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     bc4:	66 83 ec 0c          	sub    $0xc,%esp
     bc8:	67 66 8d 1c 9b       	lea    (%ebx,%ebx,4),%ebx
     bcd:	66 89 d8             	mov    %ebx,%eax
     bd0:	66 c1 e0 04          	shl    $0x4,%eax
     bd4:	66 0f b7 c0          	movzwl %ax,%eax
     bd8:	66 50                	push   %eax
     bda:	66 e8 ae fe ff ff    	calll  a8e <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:50
            break;
     be0:	66 83 c4 10          	add    $0x10,%esp
     be4:	eb 30                	jmp    c16 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:52
        default:
            _put_char(c, cursor_index);
     be6:	66 83 ec 08          	sub    $0x8,%esp
     bea:	66 0f b7 c6          	movzwl %si,%eax
     bee:	66 50                	push   %eax
     bf0:	66 89 f8             	mov    %edi,%eax
     bf3:	66 0f be f8          	movsbl %al,%edi
     bf7:	66 57                	push   %edi
     bf9:	66 e8 48 fe ff ff    	calll  a47 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:53
            set_cursor(cursor_index+1);
     bff:	66 83 c6 01          	add    $0x1,%esi
     c03:	66 0f b7 f6          	movzwl %si,%esi
     c07:	67 66 89 34 24       	mov    %esi,(%esp)
     c0c:	66 e8 7c fe ff ff    	calll  a8e <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:54
            break;
     c12:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:57
    }
    return ;
}
     c16:	66 5b                	pop    %ebx
     c18:	66 5e                	pop    %esi
     c1a:	66 5f                	pop    %edi
     c1c:	66 c3                	retl   

00000c1e <_putc>:
_putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:59

void _putc(char c){
     c1e:	66 56                	push   %esi
     c20:	66 53                	push   %ebx
     c22:	66 83 ec 04          	sub    $0x4,%esp
     c26:	67 66 8b 5c 24 10    	mov    0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:60
    u16 cursor_index = get_cursor();
     c2c:	66 e8 ce fe ff ff    	calll  b00 <get_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:61
    u16 row = cursor_index / 80;
     c32:	66 0f b7 d0          	movzwl %ax,%edx
     c36:	66 69 d2 cd cc 00 00 	imul   $0xcccd,%edx,%edx
     c3d:	66 c1 ea 10          	shr    $0x10,%edx
     c41:	c1 ea 06             	shr    $0x6,%dx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:62
    u16 col = cursor_index % 80;
     c44:	67 66 8d 34 92       	lea    (%edx,%edx,4),%esi
     c49:	66 c1 e6 04          	shl    $0x4,%esi
     c4d:	66 89 f1             	mov    %esi,%ecx
     c50:	66 89 c6             	mov    %eax,%esi
     c53:	66 29 ce             	sub    %ecx,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:63
    switch (c) {
     c56:	80 fb 0a             	cmp    $0xa,%bl
     c59:	74 07                	je     c62 <_putc+0x44>
     c5b:	80 fb 0d             	cmp    $0xd,%bl
     c5e:	74 2b                	je     c8b <_putc+0x6d>
     c60:	eb 4b                	jmp    cad <_putc+0x8f>
     c62:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:65
        case '\n':
            set_cursor((row+1)*80+col); // 回车，移到下一行
     c65:	66 83 ec 0c          	sub    $0xc,%esp
     c69:	67 66 8d 54 92 05    	lea    0x5(%edx,%edx,4),%edx
     c6f:	66 89 d0             	mov    %edx,%eax
     c72:	66 c1 e0 04          	shl    $0x4,%eax
     c76:	66 01 c1             	add    %eax,%ecx
     c79:	66 0f b7 c9          	movzwl %cx,%ecx
     c7d:	66 51                	push   %ecx
     c7f:	66 e8 09 fe ff ff    	calll  a8e <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:66
            break;
     c85:	66 83 c4 10          	add    $0x10,%esp
     c89:	eb 3c                	jmp    cc7 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:68
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     c8b:	66 83 ec 0c          	sub    $0xc,%esp
     c8f:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     c94:	66 89 d0             	mov    %edx,%eax
     c97:	66 c1 e0 04          	shl    $0x4,%eax
     c9b:	66 0f b7 c0          	movzwl %ax,%eax
     c9f:	66 50                	push   %eax
     ca1:	66 e8 e7 fd ff ff    	calll  a8e <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:69
            break;
     ca7:	66 83 c4 10          	add    $0x10,%esp
     cab:	eb 1a                	jmp    cc7 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:71
        default:
            _put_char(c, cursor_index);
     cad:	66 83 ec 08          	sub    $0x8,%esp
     cb1:	66 0f b7 c0          	movzwl %ax,%eax
     cb5:	66 50                	push   %eax
     cb7:	66 0f be db          	movsbl %bl,%ebx
     cbb:	66 53                	push   %ebx
     cbd:	66 e8 84 fd ff ff    	calll  a47 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:73
            // set_cursor(cursor_index+1);
            break;
     cc3:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:76
    }
    return ;
}
     cc7:	66 83 c4 04          	add    $0x4,%esp
     ccb:	66 5b                	pop    %ebx
     ccd:	66 5e                	pop    %esi
     ccf:	66 c3                	retl   

00000cd1 <puti>:
puti():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:78

void puti(u32 n){
     cd1:	66 56                	push   %esi
     cd3:	66 53                	push   %ebx
     cd5:	66 83 ec 44          	sub    $0x44,%esp
     cd9:	67 66 8b 4c 24 50    	mov    0x50(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:79
    int len = 0;
     cdf:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     ce5:	eb 2d                	jmp    d14 <puti+0x43>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:82
        num[len] = n % 10;
     ce7:	66 ba cd cc cc cc    	mov    $0xcccccccd,%edx
     ced:	66 89 c8             	mov    %ecx,%eax
     cf0:	66 f7 e2             	mul    %edx
     cf3:	66 c1 ea 03          	shr    $0x3,%edx
     cf7:	66 89 d6             	mov    %edx,%esi
     cfa:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     cff:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     d04:	66 29 c1             	sub    %eax,%ecx
     d07:	67 66 89 4c 9c 04    	mov    %ecx,0x4(%esp,%ebx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:83
        n = n / 10;
     d0d:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:84
        len++;
     d10:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
}

void puti(u32 n){
    int len = 0;
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     d14:	66 85 c9             	test   %ecx,%ecx
     d17:	75 ce                	jne    ce7 <puti+0x16>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     d19:	66 83 eb 01          	sub    $0x1,%ebx
     d1d:	eb 23                	jmp    d42 <puti+0x71>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:87 (discriminator 3)
        putc(num[i]+'0');
     d1f:	66 83 ec 0c          	sub    $0xc,%esp
     d23:	67 66 0f b6 44 9c 10 	movzbl 0x10(%esp,%ebx,4),%eax
     d2a:	66 83 c0 30          	add    $0x30,%eax
     d2e:	66 0f be c0          	movsbl %al,%eax
     d32:	66 50                	push   %eax
     d34:	66 e8 22 fe ff ff    	calll  b5c <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 3)
    while (n != 0){
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     d3a:	66 83 eb 01          	sub    $0x1,%ebx
     d3e:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 1)
     d42:	66 85 db             	test   %ebx,%ebx
     d45:	79 d8                	jns    d1f <puti+0x4e>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:90
        putc(num[i]+'0');
    }
    return ;
}
     d47:	66 83 c4 44          	add    $0x44,%esp
     d4b:	66 5b                	pop    %ebx
     d4d:	66 5e                	pop    %esi
     d4f:	66 c3                	retl   

00000d51 <puts>:
puts():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:92

void puts(char * str, int size){
     d51:	66 57                	push   %edi
     d53:	66 56                	push   %esi
     d55:	66 53                	push   %ebx
     d57:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
     d5d:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:93
    int i = 0;
     d63:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    while (i < size){
     d69:	eb 1a                	jmp    d85 <puts+0x34>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:95
        putc(str[i]);
     d6b:	66 83 ec 0c          	sub    $0xc,%esp
     d6f:	67 66 0f be 04 1f    	movsbl (%edi,%ebx,1),%eax
     d75:	66 50                	push   %eax
     d77:	66 e8 df fd ff ff    	calll  b5c <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:96
        i++;
     d7d:	66 83 c3 01          	add    $0x1,%ebx
     d81:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    return ;
}

void puts(char * str, int size){
    int i = 0;
    while (i < size){
     d85:	66 39 f3             	cmp    %esi,%ebx
     d88:	7c e1                	jl     d6b <puts+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:99
        putc(str[i]);
        i++;
    }
    return ;
}
     d8a:	66 5b                	pop    %ebx
     d8c:	66 5e                	pop    %esi
     d8e:	66 5f                	pop    %edi
     d90:	66 c3                	retl   

00000d92 <sprintf>:
sprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:103



void sprintf(char * dest , char * format, ...){
     d92:	66 55                	push   %ebp
     d94:	66 57                	push   %edi
     d96:	66 56                	push   %esi
     d98:	66 53                	push   %ebx
     d9a:	66 83 ec 5c          	sub    $0x5c,%esp
     d9e:	67 66 8b 6c 24 70    	mov    0x70(%esp),%ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:106
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     da4:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:105



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     daa:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:104
}



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
     db0:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     db6:	e9 33 01             	jmp    eec <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:109
        if (format[src_index] == '%'){
     db9:	3c 25                	cmp    $0x25,%al
     dbb:	0f 85 1b 01          	jne    eda <sprintf+0x148>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:111
            src_index++;
            switch(format[src_index]){
     dbf:	67 66 0f b6 44 39 01 	movzbl 0x1(%ecx,%edi,1),%eax
     dc6:	3c 64                	cmp    $0x64,%al
     dc8:	74 28                	je     df2 <sprintf+0x60>
     dca:	3c 73                	cmp    $0x73,%al
     dcc:	0f 84 b5 00          	je     e85 <sprintf+0xf3>
     dd0:	3c 63                	cmp    $0x63,%al
     dd2:	0f 85 fe 00          	jne    ed4 <sprintf+0x142>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     dd6:	67 66 8b 44 94 78    	mov    0x78(%esp,%edx,4),%eax
     ddc:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:114
                    src_index++;
     de1:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     de5:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     dea:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:115
                    src_index++;
                    break;
     def:	e9 fa 00             	jmp    eec <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     df2:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     df7:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     dfd:	67 66 8b 4c 94 78    	mov    0x78(%esp,%edx,4),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:119
                    int len = 0; 
     e03:	66 be 00 00 00 00    	mov    $0x0,%esi
     e09:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                    int num[INT_LENGTH];
                    while (n != 0){
     e0f:	eb 37                	jmp    e48 <sprintf+0xb6>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:122
                        num[len] = n % 10;
     e11:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     e17:	66 89 c8             	mov    %ecx,%eax
     e1a:	66 f7 ea             	imul   %edx
     e1d:	66 c1 fa 02          	sar    $0x2,%edx
     e21:	66 89 c8             	mov    %ecx,%eax
     e24:	66 c1 f8 1f          	sar    $0x1f,%eax
     e28:	66 29 c2             	sub    %eax,%edx
     e2b:	66 89 d7             	mov    %edx,%edi
     e2e:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     e33:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     e38:	66 29 c1             	sub    %eax,%ecx
     e3b:	67 66 89 4c b4 14    	mov    %ecx,0x14(%esp,%esi,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:123
                        n = n / 10;
     e41:	66 89 f9             	mov    %edi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:124
                        len++;
     e44:	66 83 c6 01          	add    $0x1,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     e48:	66 85 c9             	test   %ecx,%ecx
     e4b:	75 c4                	jne    e11 <sprintf+0x7f>
     e4d:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     e53:	67 66 8d 46 ff       	lea    -0x1(%esi),%eax
     e58:	eb 1a                	jmp    e74 <sprintf+0xe2>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     e5a:	67 66 0f b6 74 84 14 	movzbl 0x14(%esp,%eax,4),%esi
     e61:	67 66 8d 56 30       	lea    0x30(%esi),%edx
     e66:	67 88 54 1d 00       	mov    %dl,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     e6b:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     e6f:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     e74:	66 85 c0             	test   %eax,%eax
     e77:	79 e1                	jns    e5a <sprintf+0xc8>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:129
                        dest[des_index++] = num[i]+'0';
                    }
                    src_index++;
     e79:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                    dest[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     e7d:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     e83:	eb 67                	jmp    eec <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     e85:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     e8a:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     e90:	67 66 8b 74 94 78    	mov    0x78(%esp,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:134
                    u32 str_len = strlen(str);
     e96:	66 83 ec 0c          	sub    $0xc,%esp
     e9a:	66 56                	push   %esi
     e9c:	66 e8 8a 06 00 00    	calll  152c <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    u32 i = 0;
                    while (i < str_len){
     ea2:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:135
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
     ea6:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    while (i < str_len){
     eac:	eb 15                	jmp    ec3 <sprintf+0x131>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:137
                        dest[des_index++] = str[i++];
     eae:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
     eb4:	67 88 4c 1d 00       	mov    %cl,0x0(%ebp,%ebx,1)
     eb9:	67 66 8d 52 01       	lea    0x1(%edx),%edx
     ebe:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
     ec3:	66 39 c2             	cmp    %eax,%edx
     ec6:	72 e6                	jb     eae <sprintf+0x11c>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:139
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
     ec8:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     ecc:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:140
                    u32 i = 0;
                    while (i < str_len){
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
     ed2:	eb 18                	jmp    eec <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:143
                }
                default :
                    src_index++;
     ed4:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:144
                    break;
     ed8:	eb 12                	jmp    eec <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:147
            }
        }
        else if (format[src_index] == '\\') {
     eda:	3c 5c                	cmp    $0x5c,%al
     edc:	74 0e                	je     eec <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:166
                        break;
                }
            }
        }
        else {
            dest[des_index++] = format[src_index++];
     ede:	66 83 c7 01          	add    $0x1,%edi
     ee2:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
     ee7:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     eec:	67 66 8b 4c 24 74    	mov    0x74(%esp),%ecx
     ef2:	67 66 0f b6 04 39    	movzbl (%ecx,%edi,1),%eax
     ef8:	84 c0                	test   %al,%al
     efa:	0f 85 bb fe          	jne    db9 <sprintf+0x27>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:169
        }
        else {
            dest[des_index++] = format[src_index++];
        }
    }
    dest[des_index] = 0;
     efe:	67 c6 44 1d 00 00    	movb   $0x0,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:171
    return ;
}
     f04:	66 83 c4 5c          	add    $0x5c,%esp
     f08:	66 5b                	pop    %ebx
     f0a:	66 5e                	pop    %esi
     f0c:	66 5f                	pop    %edi
     f0e:	66 5d                	pop    %ebp
     f10:	66 c3                	retl   

00000f12 <vprintf>:
vprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:174


void vprintf(char * format, va_list va){
     f12:	66 55                	push   %ebp
     f14:	66 57                	push   %edi
     f16:	66 56                	push   %esi
     f18:	66 53                	push   %ebx
     f1a:	66 81 ec 5c 04 00 00 	sub    $0x45c,%esp
     f21:	67 66 8b ac 24 70 04 	mov    0x470(%esp),%ebp
     f28:	00 00 
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:178
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     f2a:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:177


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     f30:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:176
}


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
     f36:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     f3c:	e9 4c 01             	jmp    108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:181
        if (format[src_index] == '%'){
     f3f:	3c 25                	cmp    $0x25,%al
     f41:	0f 85 34 01          	jne    1079 <core_header_data_segment+0x79>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:183
            src_index++;
            switch(format[src_index]){
     f45:	67 66 0f b6 44 3d 01 	movzbl 0x1(%ebp,%edi,1),%eax
     f4c:	3c 64                	cmp    $0x64,%al
     f4e:	74 30                	je     f80 <vprintf+0x6e>
     f50:	3c 73                	cmp    $0x73,%al
     f52:	0f 84 c6 00          	je     101c <core_header_data_segment+0x1c>
     f56:	3c 63                	cmp    $0x63,%al
     f58:	0f 85 17 01          	jne    1073 <core_header_data_segment+0x73>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
     f5c:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     f63:	00 00 
     f65:	67 66 8b 04 90       	mov    (%eax,%edx,4),%eax
     f6a:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:186
                    src_index++;
     f6f:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
     f73:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     f78:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:187
                    src_index++;
                    break;
     f7d:	e9 0b 01             	jmp    108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     f80:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     f85:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     f8b:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     f92:	00 00 
     f94:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:191
                    int len = 0; 
     f99:	66 b9 00 00 00 00    	mov    $0x0,%ecx
     f9f:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                    int num[INT_LENGTH];
                    while (n != 0){
     fa5:	eb 3a                	jmp    fe1 <vprintf+0xcf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:194
                        num[len] = n % 10;
     fa7:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     fad:	66 89 f0             	mov    %esi,%eax
     fb0:	66 f7 ea             	imul   %edx
     fb3:	66 c1 fa 02          	sar    $0x2,%edx
     fb7:	66 89 f0             	mov    %esi,%eax
     fba:	66 c1 f8 1f          	sar    $0x1f,%eax
     fbe:	66 29 c2             	sub    %eax,%edx
     fc1:	66 89 d7             	mov    %edx,%edi
     fc4:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     fc9:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     fce:	66 89 f2             	mov    %esi,%edx
     fd1:	66 29 c2             	sub    %eax,%edx
     fd4:	67 66 89 54 8c 14    	mov    %edx,0x14(%esp,%ecx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:195
                        n = n / 10;
     fda:	66 89 fe             	mov    %edi,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:196
                        len++;
     fdd:	66 83 c1 01          	add    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     fe1:	66 85 f6             	test   %esi,%esi
     fe4:	75 c1                	jne    fa7 <vprintf+0x95>
     fe6:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     fec:	66 83 e9 01          	sub    $0x1,%ecx
     ff0:	eb 19                	jmp    100b <core_header_data_segment+0xb>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
     ff2:	67 66 0f b6 44 8c 14 	movzbl 0x14(%esp,%ecx,4),%eax
     ff9:	66 83 c0 30          	add    $0x30,%eax
     ffd:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1002:	66 83 e9 01          	sub    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    1006:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    100b:	66 85 c9             	test   %ecx,%ecx
    100e:	79 e2                	jns    ff2 <vprintf+0xe0>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:201
                        buf[des_index++] = num[i]+'0';
                    }
                    src_index++;
    1010:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                    buf[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    1014:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    101a:	eb 6f                	jmp    108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    101c:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1021:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    1027:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    102e:	00 00 
    1030:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:206
                    u32 str_len = strlen(str);
    1035:	66 83 ec 0c          	sub    $0xc,%esp
    1039:	66 56                	push   %esi
    103b:	66 e8 eb 04 00 00    	calll  152c <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    u32 i = 0;
                    while (i < str_len){
    1041:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:207
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    1045:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    while (i < str_len){
    104b:	eb 15                	jmp    1062 <core_header_data_segment+0x62>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:209
                        buf[des_index++] = str[i++];
    104d:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    1053:	67 88 4c 1c 50       	mov    %cl,0x50(%esp,%ebx,1)
    1058:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    105d:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    1062:	66 39 c2             	cmp    %eax,%edx
    1065:	72 e6                	jb     104d <core_header_data_segment+0x4d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:211
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
    1067:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    106b:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:212
                    u32 i = 0;
                    while (i < str_len){
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    1071:	eb 18                	jmp    108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:215
                }
                default :
                    src_index++;
    1073:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:216
                    break;
    1077:	eb 12                	jmp    108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:219
            }
        }
        else if (format[src_index] == '\\') {
    1079:	3c 5c                	cmp    $0x5c,%al
    107b:	74 0e                	je     108b <core_header_data_segment+0x8b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:238
                        break;
                }
            }
        }
        else {
            buf[des_index++] = format[src_index++];
    107d:	66 83 c7 01          	add    $0x1,%edi
    1081:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
    1086:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    108b:	67 66 0f b6 44 3d 00 	movzbl 0x0(%ebp,%edi,1),%eax
    1092:	84 c0                	test   %al,%al
    1094:	0f 85 a7 fe          	jne    f3f <vprintf+0x2d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:241
        }
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    1098:	67 c6 44 1c 50 00    	movb   $0x0,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242
    for (int i = 0; i < des_index; i++){
    109e:	66 be 00 00 00 00    	mov    $0x0,%esi
    10a4:	eb 1b                	jmp    10c1 <core_header_data_segment+0xc1>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:243 (discriminator 3)
        putc(buf[i]);
    10a6:	66 83 ec 0c          	sub    $0xc,%esp
    10aa:	67 66 0f be 44 34 5c 	movsbl 0x5c(%esp,%esi,1),%eax
    10b1:	66 50                	push   %eax
    10b3:	66 e8 a3 fa ff ff    	calll  b5c <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 3)
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    for (int i = 0; i < des_index; i++){
    10b9:	66 83 c6 01          	add    $0x1,%esi
    10bd:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 1)
    10c1:	66 39 f3             	cmp    %esi,%ebx
    10c4:	7f e0                	jg     10a6 <core_header_data_segment+0xa6>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:246
        putc(buf[i]);
    }
    return ;
}
    10c6:	66 81 c4 5c 04 00 00 	add    $0x45c,%esp
    10cd:	66 5b                	pop    %ebx
    10cf:	66 5e                	pop    %esi
    10d1:	66 5f                	pop    %edi
    10d3:	66 5d                	pop    %ebp
    10d5:	66 c3                	retl   

000010d7 <printf>:
printf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:248

void printf(char * format, ...){
    10d7:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:249
    vprintf(format, &format+1);// 其实这里由于format是个指针，是32位的，所以这里对format的地址+1，也会加4个字节。
    10db:	67 66 8d 44 24 1c    	lea    0x1c(%esp),%eax
    10e1:	66 50                	push   %eax
    10e3:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    10e9:	66 e8 23 fe ff ff    	calll  f12 <vprintf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:251
    return ;
}
    10ef:	66 83 c4 1c          	add    $0x1c,%esp
    10f3:	66 c3                	retl   

000010f5 <isalpha>:
isalpha():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:270
//     return ;
// }



int isalpha (int ch){
    10f5:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:271
    if ('a' <= ch && ch <= 'z')
    10fb:	67 66 8d 50 9f       	lea    -0x61(%eax),%edx
    1100:	66 83 fa 19          	cmp    $0x19,%edx
    1104:	76 12                	jbe    1118 <isalpha+0x23>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:273
        return 1;
    if ('A' <= ch && ch <= 'Z')
    1106:	66 83 e8 41          	sub    $0x41,%eax
    110a:	66 83 f8 19          	cmp    $0x19,%eax
    110e:	77 10                	ja     1120 <isalpha+0x2b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:274
        return 1;
    1110:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1116:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:272



int isalpha (int ch){
    if ('a' <= ch && ch <= 'z')
        return 1;
    1118:	66 b8 01 00 00 00    	mov    $0x1,%eax
    111e:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:275
    if ('A' <= ch && ch <= 'Z')
        return 1;
    return 0;
    1120:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:276
}
    1126:	66 c3                	retl   

00001128 <isdigit>:
isdigit():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:278
int isdigit (int ch){
    if ('0' <= ch && ch <= '9')
    1128:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
    112e:	66 83 e8 30          	sub    $0x30,%eax
    1132:	66 83 f8 09          	cmp    $0x9,%eax
    1136:	77 08                	ja     1140 <isdigit+0x18>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:279
        return 1;
    1138:	66 b8 01 00 00 00    	mov    $0x1,%eax
    113e:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:280
    return 0;
    1140:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:281
}
    1146:	66 c3                	retl   

00001148 <isalnum>:
isalnum():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:283

int isalnum (int ch){
    1148:	66 53                	push   %ebx
    114a:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284
    if ( isalpha(ch) || isdigit(ch) ){
    1150:	66 53                	push   %ebx
    1152:	66 e8 9d ff ff ff    	calll  10f5 <isalpha>
    1158:	66 83 c4 04          	add    $0x4,%esp
    115c:	66 85 c0             	test   %eax,%eax
    115f:	75 13                	jne    1174 <isalnum+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284 (discriminator 1)
    1161:	66 53                	push   %ebx
    1163:	66 e8 bf ff ff ff    	calll  1128 <isdigit>
    1169:	66 83 c4 04          	add    $0x4,%esp
    116d:	66 85 c0             	test   %eax,%eax
    1170:	75 0a                	jne    117c <isalnum+0x34>
    1172:	eb 0e                	jmp    1182 <isalnum+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:285
        return 1;
    1174:	66 b8 01 00 00 00    	mov    $0x1,%eax
    117a:	eb 06                	jmp    1182 <isalnum+0x3a>
    117c:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:288
    }
    return 0;
}
    1182:	66 5b                	pop    %ebx
    1184:	66 c3                	retl   

00001186 <ispunct>:
ispunct():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:289
int ispunct (int ch){
    1186:	66 83 ec 30          	sub    $0x30,%esp
    118a:	67 66 8b 4c 24 34    	mov    0x34(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:290
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    1190:	67 66 c7 44 24 0e 21 	movl   $0x24232221,0xe(%esp)
    1197:	22 23 24 
    119a:	67 66 c7 44 24 12 25 	movl   $0x28272625,0x12(%esp)
    11a1:	26 27 28 
    11a4:	67 66 c7 44 24 16 29 	movl   $0x2c2b2a29,0x16(%esp)
    11ab:	2a 2b 2c 
    11ae:	67 66 c7 44 24 1a 2d 	movl   $0x3a2f2e2d,0x1a(%esp)
    11b5:	2e 2f 3a 
    11b8:	67 66 c7 44 24 1e 3b 	movl   $0x3e3d3c3b,0x1e(%esp)
    11bf:	3c 3d 3e 
    11c2:	67 66 c7 44 24 22 3f 	movl   $0x5c5b403f,0x22(%esp)
    11c9:	40 5b 5c 
    11cc:	67 66 c7 44 24 26 5d 	movl   $0x605f5e5d,0x26(%esp)
    11d3:	5e 5f 60 
    11d6:	67 66 c7 44 24 2a 7b 	movl   $0x7e7d7c7b,0x2a(%esp)
    11dd:	7c 7d 7e 
    11e0:	67 c7 44 24 2e 00 00 	movw   $0x0,0x2e(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291
    for (int i = 0; i < 33; i++){
    11e7:	66 b8 00 00 00 00    	mov    $0x0,%eax
    11ed:	eb 10                	jmp    11ff <ispunct+0x79>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:292
        if (ch == punct[i])
    11ef:	67 66 0f be 54 04 0e 	movsbl 0xe(%esp,%eax,1),%edx
    11f6:	66 39 ca             	cmp    %ecx,%edx
    11f9:	74 12                	je     120d <ispunct+0x87>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 2)
    }
    return 0;
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
    11fb:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 1)
    11ff:	66 83 f8 20          	cmp    $0x20,%eax
    1203:	7e ea                	jle    11ef <ispunct+0x69>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:295
        if (ch == punct[i])
            return 1;
    }
    return 0;
    1205:	66 b8 00 00 00 00    	mov    $0x0,%eax
    120b:	eb 06                	jmp    1213 <ispunct+0x8d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:293
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
        if (ch == punct[i])
            return 1;
    120d:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:296
    }
    return 0;
}
    1213:	66 83 c4 30          	add    $0x30,%esp
    1217:	66 c3                	retl   

00001219 <isblank>:
isblank():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:298
int isblank (int ch){
    if (ch == ' ')
    1219:	67 66 83 7c 24 04 20 	cmpl   $0x20,0x4(%esp)
    1220:	75 08                	jne    122a <isblank+0x11>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:299
        return 1;
    1222:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1228:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:300
    return 0;
    122a:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:301
}
    1230:	66 c3                	retl   

00001232 <isprint>:
isprint():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:302
int isprint (int ch){
    1232:	66 53                	push   %ebx
    1234:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303
    if (isalpha(ch) || isdigit(ch) || isalnum(ch) || ispunct(ch) || isblank(ch)){
    123a:	66 53                	push   %ebx
    123c:	66 e8 b3 fe ff ff    	calll  10f5 <isalpha>
    1242:	66 83 c4 04          	add    $0x4,%esp
    1246:	66 85 c0             	test   %eax,%eax
    1249:	75 46                	jne    1291 <isprint+0x5f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 1)
    124b:	66 53                	push   %ebx
    124d:	66 e8 d5 fe ff ff    	calll  1128 <isdigit>
    1253:	66 83 c4 04          	add    $0x4,%esp
    1257:	66 85 c0             	test   %eax,%eax
    125a:	75 3d                	jne    1299 <isprint+0x67>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 2)
    125c:	66 53                	push   %ebx
    125e:	66 e8 e4 fe ff ff    	calll  1148 <isalnum>
    1264:	66 83 c4 04          	add    $0x4,%esp
    1268:	66 85 c0             	test   %eax,%eax
    126b:	75 34                	jne    12a1 <isprint+0x6f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 3)
    126d:	66 53                	push   %ebx
    126f:	66 e8 11 ff ff ff    	calll  1186 <ispunct>
    1275:	66 83 c4 04          	add    $0x4,%esp
    1279:	66 85 c0             	test   %eax,%eax
    127c:	75 2b                	jne    12a9 <isprint+0x77>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 4)
    127e:	66 53                	push   %ebx
    1280:	66 e8 93 ff ff ff    	calll  1219 <isblank>
    1286:	66 83 c4 04          	add    $0x4,%esp
    128a:	66 85 c0             	test   %eax,%eax
    128d:	75 22                	jne    12b1 <isprint+0x7f>
    128f:	eb 26                	jmp    12b7 <isprint+0x85>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:304
        return 1;
    1291:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1297:	eb 1e                	jmp    12b7 <isprint+0x85>
    1299:	66 b8 01 00 00 00    	mov    $0x1,%eax
    129f:	eb 16                	jmp    12b7 <isprint+0x85>
    12a1:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12a7:	eb 0e                	jmp    12b7 <isprint+0x85>
    12a9:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12af:	eb 06                	jmp    12b7 <isprint+0x85>
    12b1:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:307
    }
    return 0;
}
    12b7:	66 5b                	pop    %ebx
    12b9:	66 c3                	retl   

000012bb <iscntrl>:
iscntrl():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:308
int iscntrl (int ch){
    12bb:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:310
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
    12c1:	66 83 f8 1f          	cmp    $0x1f,%eax
    12c5:	76 0e                	jbe    12d5 <iscntrl+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:312
        return 1;
    if (ch == 0x7f)
    12c7:	66 83 f8 7f          	cmp    $0x7f,%eax
    12cb:	75 10                	jne    12dd <iscntrl+0x22>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:313
        return 1;
    12cd:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12d3:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:311
    return 0;
}
int iscntrl (int ch){
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
        return 1;
    12d5:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12db:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:314
    if (ch == 0x7f)
        return 1;
    return 0;
    12dd:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:315
}
    12e3:	66 c3                	retl   

000012e5 <read_n_sector>:
read_n_sector():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:321

/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    12e5:	66 55                	push   %ebp
    12e7:	66 57                	push   %edi
    12e9:	66 56                	push   %esi
    12eb:	66 53                	push   %ebx
    12ed:	66 83 ec 1c          	sub    $0x1c,%esp
    12f1:	67 66 0f b7 7c 24 30 	movzwl 0x30(%esp),%edi
    12f8:	67 66 0f b7 74 24 34 	movzwl 0x34(%esp),%esi
    12ff:	67 66 0f b7 44 24 38 	movzwl 0x38(%esp),%eax
    1306:	67 89 44 24 0c       	mov    %ax,0xc(%esp)
    130b:	67 66 0f b7 44 24 3c 	movzwl 0x3c(%esp),%eax
    1312:	67 89 44 24 0e       	mov    %ax,0xe(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322
    for (int i = 0; i < number; i++){
    1317:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    131d:	eb 7d                	jmp    139c <read_n_sector+0xb7>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:323 (discriminator 3)
        int sector = (sector_code+i) % 18+1;
    131f:	66 0f b7 ef          	movzwl %di,%ebp
    1323:	66 01 dd             	add    %ebx,%ebp
    1326:	66 ba 39 8e e3 38    	mov    $0x38e38e39,%edx
    132c:	66 89 e8             	mov    %ebp,%eax
    132f:	66 f7 ea             	imul   %edx
    1332:	66 c1 fa 02          	sar    $0x2,%edx
    1336:	66 89 e8             	mov    %ebp,%eax
    1339:	66 c1 f8 1f          	sar    $0x1f,%eax
    133d:	66 29 c2             	sub    %eax,%edx
    1340:	66 89 d1             	mov    %edx,%ecx
    1343:	67 66 8d 14 d2       	lea    (%edx,%edx,8),%edx
    1348:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    134d:	66 89 ea             	mov    %ebp,%edx
    1350:	66 29 c2             	sub    %eax,%edx
    1353:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:325 (discriminator 3)
        int mid = (sector_code+i) / 18;
        int cylinder = mid >> 1;
    1357:	66 89 cd             	mov    %ecx,%ebp
    135a:	66 d1 fd             	sar    %ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:327 (discriminator 3)
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    135d:	66 83 ec 0c          	sub    $0xc,%esp
    1361:	66 89 d8             	mov    %ebx,%eax
    1364:	66 c1 e0 09          	shl    $0x9,%eax
    1368:	67 03 44 24 1a       	add    0x1a(%esp),%ax
    136d:	66 0f b7 c0          	movzwl %ax,%eax
    1371:	66 50                	push   %eax
    1373:	67 66 0f b7 44 24 1c 	movzwl 0x1c(%esp),%eax
    137a:	66 50                	push   %eax
    137c:	66 0f b7 d2          	movzwl %dx,%edx
    1380:	66 52                	push   %edx
    1382:	66 0f b7 ed          	movzwl %bp,%ebp
    1386:	66 55                	push   %ebp
    1388:	66 83 e1 01          	and    $0x1,%ecx
    138c:	66 51                	push   %ecx
    138e:	66 e8 28 01 00 00    	calll  14bc <read_sector>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 3)
/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    for (int i = 0; i < number; i++){
    1394:	66 83 c3 01          	add    $0x1,%ebx
    1398:	66 83 c4 20          	add    $0x20,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 1)
    139c:	66 0f b7 c6          	movzwl %si,%eax
    13a0:	66 39 c3             	cmp    %eax,%ebx
    13a3:	0f 8c 78 ff          	jl     131f <read_n_sector+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:330
        int cylinder = mid >> 1;
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    }
    return ;
}
    13a7:	66 83 c4 1c          	add    $0x1c,%esp
    13ab:	66 5b                	pop    %ebx
    13ad:	66 5e                	pop    %esi
    13af:	66 5f                	pop    %edi
    13b1:	66 5d                	pop    %ebp
    13b3:	66 c3                	retl   
    13b5:	66 90                	xchg   %eax,%eax
    13b7:	66 90                	xchg   %eax,%eax
    13b9:	66 90                	xchg   %eax,%eax
    13bb:	66 90                	xchg   %eax,%eax
    13bd:	66 90                	xchg   %eax,%eax
    13bf:	90                   	nop

000013c0 <write_port_byte>:
write_port_byte():
    13c0:	66 55                	push   %ebp
    13c2:	66 89 e5             	mov    %esp,%ebp
    13c5:	53                   	push   %bx
    13c6:	51                   	push   %cx
    13c7:	52                   	push   %dx
    13c8:	56                   	push   %si
    13c9:	57                   	push   %di
    13ca:	55                   	push   %bp
    13cb:	1e                   	push   %ds
    13cc:	06                   	push   %es
    13cd:	16                   	push   %ss
    13ce:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    13d2:	67 8a 45 0c          	mov    0xc(%ebp),%al
    13d6:	cd 34                	int    $0x34
    13d8:	17                   	pop    %ss
    13d9:	07                   	pop    %es
    13da:	1f                   	pop    %ds
    13db:	5d                   	pop    %bp
    13dc:	5f                   	pop    %di
    13dd:	5e                   	pop    %si
    13de:	5a                   	pop    %dx
    13df:	59                   	pop    %cx
    13e0:	5b                   	pop    %bx
    13e1:	66 89 ec             	mov    %ebp,%esp
    13e4:	66 5d                	pop    %ebp
    13e6:	66 c3                	retl   

000013e8 <read_port_byte>:
read_port_byte():
    13e8:	66 55                	push   %ebp
    13ea:	66 89 e5             	mov    %esp,%ebp
    13ed:	53                   	push   %bx
    13ee:	51                   	push   %cx
    13ef:	52                   	push   %dx
    13f0:	56                   	push   %si
    13f1:	57                   	push   %di
    13f2:	55                   	push   %bp
    13f3:	1e                   	push   %ds
    13f4:	06                   	push   %es
    13f5:	16                   	push   %ss
    13f6:	67 8b 45 08          	mov    0x8(%ebp),%ax
    13fa:	cd 33                	int    $0x33
    13fc:	17                   	pop    %ss
    13fd:	07                   	pop    %es
    13fe:	1f                   	pop    %ds
    13ff:	5d                   	pop    %bp
    1400:	5f                   	pop    %di
    1401:	5e                   	pop    %si
    1402:	5a                   	pop    %dx
    1403:	59                   	pop    %cx
    1404:	5b                   	pop    %bx
    1405:	66 89 ec             	mov    %ebp,%esp
    1408:	66 5d                	pop    %ebp
    140a:	66 c3                	retl   

0000140c <write_memory_byte>:
write_memory_byte():
    140c:	66 55                	push   %ebp
    140e:	66 89 e5             	mov    %esp,%ebp
    1411:	50                   	push   %ax
    1412:	53                   	push   %bx
    1413:	52                   	push   %dx
    1414:	1e                   	push   %ds
    1415:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1419:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    141d:	c1 e0 0c             	shl    $0xc,%ax
    1420:	67 8a 4d 0c          	mov    0xc(%ebp),%cl
    1424:	cd 36                	int    $0x36
    1426:	1f                   	pop    %ds
    1427:	5a                   	pop    %dx
    1428:	5b                   	pop    %bx
    1429:	58                   	pop    %ax
    142a:	66 89 ec             	mov    %ebp,%esp
    142d:	66 5d                	pop    %ebp
    142f:	66 c3                	retl   

00001431 <read_memory_byte>:
read_memory_byte():
    1431:	66 55                	push   %ebp
    1433:	66 89 e5             	mov    %esp,%ebp
    1436:	53                   	push   %bx
    1437:	51                   	push   %cx
    1438:	52                   	push   %dx
    1439:	56                   	push   %si
    143a:	57                   	push   %di
    143b:	55                   	push   %bp
    143c:	1e                   	push   %ds
    143d:	06                   	push   %es
    143e:	16                   	push   %ss
    143f:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1443:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    1447:	c1 e0 0c             	shl    $0xc,%ax
    144a:	cd 35                	int    $0x35
    144c:	17                   	pop    %ss
    144d:	07                   	pop    %es
    144e:	1f                   	pop    %ds
    144f:	5d                   	pop    %bp
    1450:	5f                   	pop    %di
    1451:	5e                   	pop    %si
    1452:	5a                   	pop    %dx
    1453:	59                   	pop    %cx
    1454:	5b                   	pop    %bx
    1455:	66 89 ec             	mov    %ebp,%esp
    1458:	66 5d                	pop    %ebp
    145a:	66 c3                	retl   

0000145c <check_keyboard>:
check_keyboard():
    145c:	b4 01                	mov    $0x1,%ah
    145e:	cd 16                	int    $0x16
    1460:	74 05                	je     1467 <check_keyboard.have_key>
    1462:	b8 00 00             	mov    $0x0,%ax
    1465:	eb 03                	jmp    146a <check_keyboard.check_keyboard_return>

00001467 <check_keyboard.have_key>:
check_keyboard.have_key():
    1467:	b8 01 00             	mov    $0x1,%ax

0000146a <check_keyboard.check_keyboard_return>:
check_keyboard.check_keyboard_return():
    146a:	66 c3                	retl   

0000146c <get_keyboard>:
get_keyboard():
    146c:	b4 00                	mov    $0x0,%ah
    146e:	cd 16                	int    $0x16
    1470:	66 c3                	retl   

00001472 <clean_screen>:
clean_screen():
    1472:	50                   	push   %ax
    1473:	53                   	push   %bx
    1474:	51                   	push   %cx
    1475:	52                   	push   %dx
    1476:	b4 06                	mov    $0x6,%ah
    1478:	b0 00                	mov    $0x0,%al
    147a:	b5 00                	mov    $0x0,%ch
    147c:	b1 00                	mov    $0x0,%cl
    147e:	b6 17                	mov    $0x17,%dh
    1480:	b2 4f                	mov    $0x4f,%dl
    1482:	b7 1f                	mov    $0x1f,%bh
    1484:	cd 10                	int    $0x10
    1486:	5a                   	pop    %dx
    1487:	59                   	pop    %cx
    1488:	5b                   	pop    %bx
    1489:	58                   	pop    %ax
    148a:	66 c3                	retl   

0000148c <scroll_screen>:
scroll_screen():
    148c:	50                   	push   %ax
    148d:	53                   	push   %bx
    148e:	51                   	push   %cx
    148f:	52                   	push   %dx
    1490:	b4 06                	mov    $0x6,%ah
    1492:	b0 01                	mov    $0x1,%al
    1494:	b5 00                	mov    $0x0,%ch
    1496:	b1 00                	mov    $0x0,%cl
    1498:	b6 17                	mov    $0x17,%dh
    149a:	b2 4f                	mov    $0x4f,%dl
    149c:	b7 10                	mov    $0x10,%bh
    149e:	cd 10                	int    $0x10
    14a0:	5a                   	pop    %dx
    14a1:	59                   	pop    %cx
    14a2:	5b                   	pop    %bx
    14a3:	58                   	pop    %ax
    14a4:	66 c3                	retl   

000014a6 <get_random>:
get_random():
    14a6:	53                   	push   %bx
    14a7:	b8 00 00             	mov    $0x0,%ax
    14aa:	e6 43                	out    %al,$0x43
    14ac:	e4 40                	in     $0x40,%al
    14ae:	b3 08                	mov    $0x8,%bl
    14b0:	f6 f3                	div    %bl
    14b2:	88 e0                	mov    %ah,%al
    14b4:	b4 00                	mov    $0x0,%ah
    14b6:	83 c0 72             	add    $0x72,%ax
    14b9:	5b                   	pop    %bx
    14ba:	66 c3                	retl   

000014bc <read_sector>:
read_sector():
    14bc:	66 55                	push   %ebp
    14be:	66 89 e5             	mov    %esp,%ebp
    14c1:	50                   	push   %ax
    14c2:	53                   	push   %bx
    14c3:	51                   	push   %cx
    14c4:	52                   	push   %dx
    14c5:	06                   	push   %es
    14c6:	67 8b 45 14          	mov    0x14(%ebp),%ax
    14ca:	8e c0                	mov    %ax,%es
    14cc:	67 8b 5d 18          	mov    0x18(%ebp),%bx
    14d0:	b4 02                	mov    $0x2,%ah
    14d2:	b0 01                	mov    $0x1,%al
    14d4:	b2 00                	mov    $0x0,%dl
    14d6:	67 8a 75 08          	mov    0x8(%ebp),%dh
    14da:	67 8a 6d 0c          	mov    0xc(%ebp),%ch
    14de:	67 8a 4d 10          	mov    0x10(%ebp),%cl
    14e2:	cd 13                	int    $0x13
    14e4:	07                   	pop    %es
    14e5:	5a                   	pop    %dx
    14e6:	59                   	pop    %cx
    14e7:	5b                   	pop    %bx
    14e8:	58                   	pop    %ax
    14e9:	66 89 ec             	mov    %ebp,%esp
    14ec:	66 5d                	pop    %ebp
    14ee:	66 c3                	retl   

000014f0 <print_my_name>:
print_my_name():
    14f0:	50                   	push   %ax
    14f1:	53                   	push   %bx
    14f2:	51                   	push   %cx
    14f3:	52                   	push   %dx
    14f4:	1e                   	push   %ds
    14f5:	06                   	push   %es
    14f6:	55                   	push   %bp
    14f7:	b8 00 10             	mov    $0x1000,%ax
    14fa:	8e c0                	mov    %ax,%es
    14fc:	b8 a0 1f             	mov    $0x1fa0,%ax
    14ff:	89 c5                	mov    %ax,%bp
    1501:	b4 13                	mov    $0x13,%ah
    1503:	b0 00                	mov    $0x0,%al
    1505:	b7 00                	mov    $0x0,%bh
    1507:	b3 0f                	mov    $0xf,%bl
    1509:	b9 19 00             	mov    $0x19,%cx
    150c:	b6 18                	mov    $0x18,%dh
    150e:	b2 01                	mov    $0x1,%dl
    1510:	cd 10                	int    $0x10
    1512:	5d                   	pop    %bp
    1513:	07                   	pop    %es
    1514:	1f                   	pop    %ds
    1515:	5a                   	pop    %dx
    1516:	59                   	pop    %cx
    1517:	5b                   	pop    %bx
    1518:	58                   	pop    %ax
    1519:	c3                   	ret    

0000151a <reboot>:
reboot():
    151a:	b4 06                	mov    $0x6,%ah
    151c:	b0 00                	mov    $0x0,%al
    151e:	b5 00                	mov    $0x0,%ch
    1520:	b1 00                	mov    $0x0,%cl
    1522:	b6 18                	mov    $0x18,%dh
    1524:	b2 4f                	mov    $0x4f,%dl
    1526:	b7 1f                	mov    $0x1f,%bh
    1528:	cd 10                	int    $0x10
    152a:	cd 19                	int    $0x19

0000152c <strlen>:
strlen():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:3
#include "../include/type.h"

size_t strlen(char * str){
    152c:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:4
    u32 len = 0;
    1532:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
    while (str[len] != 0){
    1538:	eb 04                	jmp    153e <strlen+0x12>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:6
        len++;
    153a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
#include "../include/type.h"

size_t strlen(char * str){
    u32 len = 0;
    while (str[len] != 0){
    153e:	67 80 3c 02 00       	cmpb   $0x0,(%edx,%eax,1)
    1543:	75 f5                	jne    153a <strlen+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:9
        len++;
    }
    return len;
}
    1545:	66 f3 c3             	repz retl 

00001548 <strncpy>:
strncpy():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:11

void strncpy(char * dest, char * src, u32 size){
    1548:	66 56                	push   %esi
    154a:	66 53                	push   %ebx
    154c:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    1552:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    1558:	67 66 8b 4c 24 14    	mov    0x14(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12
    for (int i = 0; i < size; i++){
    155e:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1564:	eb 0e                	jmp    1574 <strncpy+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:13 (discriminator 3)
        dest[i] = src[i];
    1566:	67 66 0f b6 14 06    	movzbl (%esi,%eax,1),%edx
    156c:	67 88 14 03          	mov    %dl,(%ebx,%eax,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 3)
    }
    return len;
}

void strncpy(char * dest, char * src, u32 size){
    for (int i = 0; i < size; i++){
    1570:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 1)
    1574:	66 39 c8             	cmp    %ecx,%eax
    1577:	72 ed                	jb     1566 <strncpy+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:15
        dest[i] = src[i];
    }
    dest[size] = '\0';
    1579:	67 c6 04 0b 00       	movb   $0x0,(%ebx,%ecx,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:16
}
    157e:	66 5b                	pop    %ebx
    1580:	66 5e                	pop    %esi
    1582:	66 c3                	retl   

00001584 <strcmp>:
strcmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:18

int strcmp(char * lhs, char * rhs){
    1584:	66 57                	push   %edi
    1586:	66 56                	push   %esi
    1588:	66 53                	push   %ebx
    158a:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    1590:	67 66 8b 7c 24 14    	mov    0x14(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:19
    int lhs_len = strlen(lhs);
    1596:	66 56                	push   %esi
    1598:	66 e8 8e ff ff ff    	calll  152c <strlen>
    159e:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:20
    int rhs_len = strlen(rhs);
    15a1:	67 66 89 3c 24       	mov    %edi,(%esp)
    15a6:	66 e8 80 ff ff ff    	calll  152c <strlen>
    15ac:	66 83 c4 04          	add    $0x4,%esp
/mnt/e/code/my_operating_system/os/service/../lib/string.c:21
    if (lhs_len != rhs_len){
    15b0:	66 39 c3             	cmp    %eax,%ebx
    15b3:	75 25                	jne    15da <strcmp+0x56>
    15b5:	66 b8 00 00 00 00    	mov    $0x0,%eax
    15bb:	eb 10                	jmp    15cd <strcmp+0x49>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:25
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
    15bd:	67 66 0f b6 14 07    	movzbl (%edi,%eax,1),%edx
    15c3:	67 38 14 06          	cmp    %dl,(%esi,%eax,1)
    15c7:	75 19                	jne    15e2 <strcmp+0x5e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 2)
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
    15c9:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 1)
    15cd:	66 39 d8             	cmp    %ebx,%eax
    15d0:	7c eb                	jl     15bd <strcmp+0x39>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:28
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    15d2:	66 b8 00 00 00 00    	mov    $0x0,%eax
    15d8:	eb 0e                	jmp    15e8 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:22

int strcmp(char * lhs, char * rhs){
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    15da:	66 b8 01 00 00 00    	mov    $0x1,%eax
    15e0:	eb 06                	jmp    15e8 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:26
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
            return 1;
    15e2:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:29
    }
    return 0;
}
    15e8:	66 5b                	pop    %ebx
    15ea:	66 5e                	pop    %esi
    15ec:	66 5f                	pop    %edi
    15ee:	66 c3                	retl   

000015f0 <strncmp>:
strncmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:31

int strncmp(char * lhs, char * rhs, int size){
    15f0:	66 56                	push   %esi
    15f2:	66 53                	push   %ebx
    15f4:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    15fa:	67 66 8b 4c 24 10    	mov    0x10(%esp),%ecx
    1600:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32
    for (int i = 0; i < size; i++){
    1606:	66 b8 00 00 00 00    	mov    $0x0,%eax
    160c:	eb 10                	jmp    161e <strncmp+0x2e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:33
        if (lhs[i] != rhs[i])
    160e:	67 66 0f b6 14 01    	movzbl (%ecx,%eax,1),%edx
    1614:	67 38 14 03          	cmp    %dl,(%ebx,%eax,1)
    1618:	75 11                	jne    162b <strncmp+0x3b>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 2)
    }
    return 0;
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
    161a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 1)
    161e:	66 39 f0             	cmp    %esi,%eax
    1621:	7c eb                	jl     160e <strncmp+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:36
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    1623:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1629:	eb 06                	jmp    1631 <strncmp+0x41>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:34
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
        if (lhs[i] != rhs[i])
            return 1;
    162b:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:37
    }
    return 0;
    1631:	66 5b                	pop    %ebx
    1633:	66 5e                	pop    %esi
    1635:	66 c3                	retl   

00001637 <move_name>:
move_name():
/mnt/e/code/my_operating_system/os/service/../lib/style.c:9

void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    1637:	66 0f b7 0e 9e 0f    	movzwl 0xf9e,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10
    for (int i =78; i >= 0; i--){
    163d:	66 b8 4e 00 00 00    	mov    $0x4e,%eax
    1643:	eb 16                	jmp    165b <move_name+0x24>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:11 (discriminator 3)
        text_line[i+1] = text_line[i];
    1645:	67 66 0f b7 94 00 00 	movzwl 0xf00(%eax,%eax,1),%edx
    164c:	0f 00 00 
    164f:	67 89 94 00 02 0f 00 	mov    %dx,0xf02(%eax,%eax,1)
    1656:	00 
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 3)
void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    for (int i =78; i >= 0; i--){
    1657:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 1)
    165b:	66 85 c0             	test   %eax,%eax
    165e:	79 e5                	jns    1645 <move_name+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:13
        text_line[i+1] = text_line[i];
    }
    text_line[0] = last_char;
    1660:	89 0e 00 0f          	mov    %cx,0xf00
    1664:	66 c3                	retl   
