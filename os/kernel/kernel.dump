
kernel.debug:     file format elf32-i386


Disassembly of section .text:

00000000 <_start>:
_start():
       0:	e8 72 00             	call   75 <install_int8>
       3:	e8 c5 00             	call   cb <install_int33>
       6:	e8 fb 00             	call   104 <install_int34>
       9:	e8 35 01             	call   141 <install_int35>
       c:	e8 6d 01             	call   17c <install_int36>
       f:	e8 12 00             	call   24 <install_int40>
      12:	66 e8 b7 01 00 00    	calll  1cf <cstart>

00000018 <start_tty>:
start_tty():
      18:	66 e8 0f 05 00 00    	calll  52d <tty>
      1e:	b4 02                	mov    $0x2,%ah
      20:	cd 40                	int    $0x40
      22:	eb fe                	jmp    22 <start_tty+0xa>

00000024 <install_int40>:
install_int40():
      24:	53                   	push   %bx
      25:	51                   	push   %cx
      26:	52                   	push   %dx
      27:	56                   	push   %si
      28:	57                   	push   %di
      29:	55                   	push   %bp
      2a:	1e                   	push   %ds
      2b:	06                   	push   %es
      2c:	16                   	push   %ss
      2d:	b8 00 00             	mov    $0x0,%ax
      30:	8e d8                	mov    %ax,%ds
      32:	8c c8                	mov    %cs,%ax
      34:	c7 06 00 01 47 00    	movw   $0x47,0x100
      3a:	a3 02 01             	mov    %ax,0x102
      3d:	17                   	pop    %ss
      3e:	07                   	pop    %es
      3f:	1f                   	pop    %ds
      40:	5d                   	pop    %bp
      41:	5f                   	pop    %di
      42:	5e                   	pop    %si
      43:	5a                   	pop    %dx
      44:	59                   	pop    %cx
      45:	5b                   	pop    %bx
      46:	c3                   	ret    

00000047 <new_int40>:
new_int40():
      47:	80 fc 4c             	cmp    $0x4c,%ah
      4a:	74 11                	je     5d <new_int40.return_kernel>
      4c:	88 e3                	mov    %ah,%bl
      4e:	31 c0                	xor    %ax,%ax
      50:	b0 02                	mov    $0x2,%al
      52:	f6 e3                	mul    %bl
      54:	89 c6                	mov    %ax,%si
      56:	bb a0 2b             	mov    $0x2ba0,%bx
      59:	66 ff 10             	calll  *(%bx,%si)
      5c:	cf                   	iret   

0000005d <new_int40.return_kernel>:
new_int40.return_kernel():
      5d:	59                   	pop    %cx
      5e:	59                   	pop    %cx
      5f:	59                   	pop    %cx
      60:	b8 00 10             	mov    $0x1000,%ax
      63:	8e d8                	mov    %ax,%ds
      65:	8e c0                	mov    %ax,%es
      67:	8e d0                	mov    %ax,%ss
      69:	bc 00 50             	mov    $0x5000,%sp
      6c:	51                   	push   %cx
      6d:	68 00 10             	push   $0x1000
      70:	68 18 00             	push   $0x18
      73:	fb                   	sti    
      74:	cf                   	iret   

00000075 <install_int8>:
install_int8():
      75:	53                   	push   %bx
      76:	51                   	push   %cx
      77:	52                   	push   %dx
      78:	56                   	push   %si
      79:	57                   	push   %di
      7a:	55                   	push   %bp
      7b:	1e                   	push   %ds
      7c:	06                   	push   %es
      7d:	16                   	push   %ss
      7e:	b0 34                	mov    $0x34,%al
      80:	e6 43                	out    %al,$0x43
      82:	b8 ff ff             	mov    $0xffff,%ax
      85:	e6 40                	out    %al,$0x40
      87:	88 e0                	mov    %ah,%al
      89:	e6 40                	out    %al,$0x40
      8b:	b8 00 00             	mov    $0x0,%ax
      8e:	8e d8                	mov    %ax,%ds
      90:	8c c8                	mov    %cs,%ax
      92:	a3 22 00             	mov    %ax,0x22
      95:	c7 06 20 00 a5 00    	movw   $0xa5,0x20
      9b:	17                   	pop    %ss
      9c:	07                   	pop    %es
      9d:	1f                   	pop    %ds
      9e:	5d                   	pop    %bp
      9f:	5f                   	pop    %di
      a0:	5e                   	pop    %si
      a1:	5a                   	pop    %dx
      a2:	59                   	pop    %cx
      a3:	5b                   	pop    %bx
      a4:	c3                   	ret    

000000a5 <new_int8>:
new_int8():
      a5:	50                   	push   %ax
      a6:	53                   	push   %bx
      a7:	51                   	push   %cx
      a8:	52                   	push   %dx
      a9:	56                   	push   %si
      aa:	57                   	push   %di
      ab:	55                   	push   %bp
      ac:	1e                   	push   %ds
      ad:	06                   	push   %es
      ae:	16                   	push   %ss
      af:	b8 00 b8             	mov    $0xb800,%ax
      b2:	8e d8                	mov    %ax,%ds
      b4:	66 e8 88 09 00 00    	calll  a42 <move_name>
      ba:	b0 20                	mov    $0x20,%al
      bc:	e6 20                	out    %al,$0x20
      be:	e6 a0                	out    %al,$0xa0
      c0:	17                   	pop    %ss
      c1:	07                   	pop    %es
      c2:	1f                   	pop    %ds
      c3:	5d                   	pop    %bp
      c4:	5f                   	pop    %di
      c5:	5e                   	pop    %si
      c6:	5a                   	pop    %dx
      c7:	59                   	pop    %cx
      c8:	5b                   	pop    %bx
      c9:	58                   	pop    %ax
      ca:	cf                   	iret   

000000cb <install_int33>:
install_int33():
      cb:	53                   	push   %bx
      cc:	51                   	push   %cx
      cd:	52                   	push   %dx
      ce:	56                   	push   %si
      cf:	57                   	push   %di
      d0:	55                   	push   %bp
      d1:	1e                   	push   %ds
      d2:	06                   	push   %es
      d3:	16                   	push   %ss
      d4:	b8 00 00             	mov    $0x0,%ax
      d7:	8e d8                	mov    %ax,%ds
      d9:	8c c8                	mov    %cs,%ax
      db:	c7 06 cc 00 ee 00    	movw   $0xee,0xcc
      e1:	a3 ce 00             	mov    %ax,0xce
      e4:	17                   	pop    %ss
      e5:	07                   	pop    %es
      e6:	1f                   	pop    %ds
      e7:	5d                   	pop    %bp
      e8:	5f                   	pop    %di
      e9:	5e                   	pop    %si
      ea:	5a                   	pop    %dx
      eb:	59                   	pop    %cx
      ec:	5b                   	pop    %bx
      ed:	c3                   	ret    

000000ee <new_int33>:
new_int33():
      ee:	53                   	push   %bx
      ef:	51                   	push   %cx
      f0:	52                   	push   %dx
      f1:	56                   	push   %si
      f2:	57                   	push   %di
      f3:	55                   	push   %bp
      f4:	1e                   	push   %ds
      f5:	06                   	push   %es
      f6:	16                   	push   %ss
      f7:	89 c2                	mov    %ax,%dx
      f9:	ec                   	in     (%dx),%al
      fa:	17                   	pop    %ss
      fb:	07                   	pop    %es
      fc:	1f                   	pop    %ds
      fd:	5d                   	pop    %bp
      fe:	5f                   	pop    %di
      ff:	5e                   	pop    %si
     100:	5a                   	pop    %dx
     101:	59                   	pop    %cx
     102:	5b                   	pop    %bx
     103:	cf                   	iret   

00000104 <install_int34>:
install_int34():
     104:	53                   	push   %bx
     105:	51                   	push   %cx
     106:	52                   	push   %dx
     107:	56                   	push   %si
     108:	57                   	push   %di
     109:	55                   	push   %bp
     10a:	1e                   	push   %ds
     10b:	06                   	push   %es
     10c:	16                   	push   %ss
     10d:	b8 00 00             	mov    $0x0,%ax
     110:	8e d8                	mov    %ax,%ds
     112:	8c c8                	mov    %cs,%ax
     114:	c7 06 d0 00 27 01    	movw   $0x127,0xd0
     11a:	a3 d2 00             	mov    %ax,0xd2
     11d:	17                   	pop    %ss
     11e:	07                   	pop    %es
     11f:	1f                   	pop    %ds
     120:	5d                   	pop    %bp
     121:	5f                   	pop    %di
     122:	5e                   	pop    %si
     123:	5a                   	pop    %dx
     124:	59                   	pop    %cx
     125:	5b                   	pop    %bx
     126:	c3                   	ret    

00000127 <new_int34>:
new_int34():
     127:	50                   	push   %ax
     128:	53                   	push   %bx
     129:	51                   	push   %cx
     12a:	52                   	push   %dx
     12b:	56                   	push   %si
     12c:	57                   	push   %di
     12d:	55                   	push   %bp
     12e:	1e                   	push   %ds
     12f:	06                   	push   %es
     130:	16                   	push   %ss
     131:	89 da                	mov    %bx,%dx
     133:	88 c0                	mov    %al,%al
     135:	ee                   	out    %al,(%dx)
     136:	17                   	pop    %ss
     137:	07                   	pop    %es
     138:	1f                   	pop    %ds
     139:	5d                   	pop    %bp
     13a:	5f                   	pop    %di
     13b:	5e                   	pop    %si
     13c:	5a                   	pop    %dx
     13d:	59                   	pop    %cx
     13e:	5b                   	pop    %bx
     13f:	58                   	pop    %ax
     140:	cf                   	iret   

00000141 <install_int35>:
install_int35():
     141:	53                   	push   %bx
     142:	51                   	push   %cx
     143:	52                   	push   %dx
     144:	56                   	push   %si
     145:	57                   	push   %di
     146:	55                   	push   %bp
     147:	1e                   	push   %ds
     148:	06                   	push   %es
     149:	16                   	push   %ss
     14a:	b8 00 00             	mov    $0x0,%ax
     14d:	8e d8                	mov    %ax,%ds
     14f:	8c c8                	mov    %cs,%ax
     151:	c7 06 d4 00 64 01    	movw   $0x164,0xd4
     157:	a3 d6 00             	mov    %ax,0xd6
     15a:	17                   	pop    %ss
     15b:	07                   	pop    %es
     15c:	1f                   	pop    %ds
     15d:	5d                   	pop    %bp
     15e:	5f                   	pop    %di
     15f:	5e                   	pop    %si
     160:	5a                   	pop    %dx
     161:	59                   	pop    %cx
     162:	5b                   	pop    %bx
     163:	c3                   	ret    

00000164 <new_int35>:
new_int35():
     164:	53                   	push   %bx
     165:	51                   	push   %cx
     166:	52                   	push   %dx
     167:	56                   	push   %si
     168:	57                   	push   %di
     169:	55                   	push   %bp
     16a:	1e                   	push   %ds
     16b:	06                   	push   %es
     16c:	16                   	push   %ss
     16d:	8e c0                	mov    %ax,%es
     16f:	26 8a 07             	mov    %es:(%bx),%al
     172:	17                   	pop    %ss
     173:	07                   	pop    %es
     174:	1f                   	pop    %ds
     175:	5d                   	pop    %bp
     176:	5f                   	pop    %di
     177:	5e                   	pop    %si
     178:	5a                   	pop    %dx
     179:	59                   	pop    %cx
     17a:	5b                   	pop    %bx
     17b:	cf                   	iret   

0000017c <install_int36>:
install_int36():
     17c:	53                   	push   %bx
     17d:	51                   	push   %cx
     17e:	52                   	push   %dx
     17f:	56                   	push   %si
     180:	57                   	push   %di
     181:	55                   	push   %bp
     182:	1e                   	push   %ds
     183:	06                   	push   %es
     184:	16                   	push   %ss
     185:	b8 00 00             	mov    $0x0,%ax
     188:	8e d8                	mov    %ax,%ds
     18a:	8c c8                	mov    %cs,%ax
     18c:	c7 06 d8 00 9f 01    	movw   $0x19f,0xd8
     192:	a3 da 00             	mov    %ax,0xda
     195:	17                   	pop    %ss
     196:	07                   	pop    %es
     197:	1f                   	pop    %ds
     198:	5d                   	pop    %bp
     199:	5f                   	pop    %di
     19a:	5e                   	pop    %si
     19b:	5a                   	pop    %dx
     19c:	59                   	pop    %cx
     19d:	5b                   	pop    %bx
     19e:	c3                   	ret    

0000019f <new_int36>:
new_int36():
     19f:	50                   	push   %ax
     1a0:	53                   	push   %bx
     1a1:	51                   	push   %cx
     1a2:	52                   	push   %dx
     1a3:	56                   	push   %si
     1a4:	57                   	push   %di
     1a5:	55                   	push   %bp
     1a6:	1e                   	push   %ds
     1a7:	06                   	push   %es
     1a8:	16                   	push   %ss
     1a9:	8e c0                	mov    %ax,%es
     1ab:	26 88 0f             	mov    %cl,%es:(%bx)
     1ae:	17                   	pop    %ss
     1af:	07                   	pop    %es
     1b0:	1f                   	pop    %ds
     1b1:	5d                   	pop    %bp
     1b2:	5f                   	pop    %di
     1b3:	5e                   	pop    %si
     1b4:	5a                   	pop    %dx
     1b5:	59                   	pop    %cx
     1b6:	5b                   	pop    %bx
     1b7:	58                   	pop    %ax
     1b8:	cf                   	iret   

000001b9 <install_system_call>:
install_system_call():
/mnt/e/code/my_operating_system/os/kernel/../lib/system_call.c:6
#include "../include/type.h"
#include "../include/stdio.h"
#include "../include/global.h"

void install_system_call(int system_call_number, void (*function)() ){
    system_call[system_call_number] = (u16) function;
     1b9:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     1bf:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
     1c5:	67 89 94 00 a0 2b 00 	mov    %dx,0x2ba0(%eax,%eax,1)
     1cc:	00 
     1cd:	66 c3                	retl   

000001cf <cstart>:
cstart():
/mnt/e/code/my_operating_system/os/kernel/start.c:10
#include "../include/global.h"
#include "../include/system_call.h"
#include "../include/fsystem.h"

void test_system_call();
int cstart(){
     1cf:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:12
    // 初始化文件系统
    init_fsystem();
     1d3:	66 e8 19 05 00 00    	calll  6f2 <init_fsystem>
/mnt/e/code/my_operating_system/os/kernel/start.c:14
    // 清屏
    clean_screen();
     1d9:	66 e8 b3 12 00 00    	calll  1492 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/start.c:16
    // 将光标设置为0 TODO:
    set_cursor(0);
     1df:	66 83 ec 0c          	sub    $0xc,%esp
     1e3:	66 6a 00             	pushl  $0x0
     1e6:	66 e8 cc 08 00 00    	calll  ab8 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:20
    // install_system_call(2, test_system_call);
    // while (1){}
    return 0;
}
     1ec:	66 b8 00 00 00 00    	mov    $0x0,%eax
     1f2:	66 83 c4 1c          	add    $0x1c,%esp
     1f6:	66 c3                	retl   

000001f8 <parser>:
parser():
/mnt/e/code/my_operating_system/os/kernel/tty.c:89
    }
    return ;
}


void parser(){
     1f8:	66 56                	push   %esi
     1fa:	66 53                	push   %ebx
     1fc:	66 83 ec 74          	sub    $0x74,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:93
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
     200:	66 be 00 00 00 00    	mov    $0x0,%esi
/mnt/e/code/my_operating_system/os/kernel/tty.c:92


void parser(){
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
     206:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:91
}


void parser(){
    char arguments[10][10];
    int input_start = 0;
     20c:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     212:	eb 64                	jmp    278 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:96
        if(input_buf[input_end] == ' ' || input_buf[input_end] == '\0'){
     214:	67 66 0f b6 83 e0 1f 	movzbl 0x1fe0(%ebx),%eax
     21b:	00 00 
     21d:	3c 20                	cmp    $0x20,%al
     21f:	0f 94 c1             	sete   %cl
     222:	84 c0                	test   %al,%al
     224:	0f 94 c0             	sete   %al
     227:	08 c1                	or     %al,%cl
     229:	74 49                	je     274 <parser+0x7c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:97
            if (input_start == input_end){ // 如果并没有参数，那么继续
     22b:	66 39 da             	cmp    %ebx,%edx
     22e:	75 0a                	jne    23a <parser+0x42>
/mnt/e/code/my_operating_system/os/kernel/tty.c:98
                input_start++;
     230:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:99
                input_end++;
     234:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:100
                continue;
     238:	eb 3e                	jmp    278 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:103
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
     23a:	66 89 d9             	mov    %ebx,%ecx
     23d:	66 29 d1             	sub    %edx,%ecx
     240:	67 66 8d 04 b6       	lea    (%esi,%esi,4),%eax
     245:	67 66 8d 44 44 0c    	lea    0xc(%esp,%eax,2),%eax
     24b:	66 83 ec 04          	sub    $0x4,%esp
     24f:	66 51                	push   %ecx
     251:	66 81 c2 e0 1f 00 00 	add    $0x1fe0,%edx
     258:	66 52                	push   %edx
     25a:	66 50                	push   %eax
     25c:	66 e8 06 13 00 00    	calll  1568 <strncpy>
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
     262:	67 66 8d 53 01       	lea    0x1(%ebx),%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:106
                input_start = input_end;
                arguments_num++;
     267:	66 83 c6 01          	add    $0x1,%esi
     26b:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
                continue;
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
                input_end++;
     26f:	66 89 d3             	mov    %edx,%ebx
     272:	eb 04                	jmp    278 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:110
                input_start = input_end;
                arguments_num++;
            }
        }
        else {// 有参数，还没有读到末尾
            input_end++;
     274:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     278:	66 3b 1e c0 1f       	cmp    0x1fc0,%ebx
     27d:	7e 95                	jle    214 <parser+0x1c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:117
        }
    }

    // 完成分词，开始进行解析。

    if(!strcmp(arguments[0],"run")){// 如果返回0，就是相等了
     27f:	66 83 ec 08          	sub    $0x8,%esp
     283:	66 68 18 1e 00 00    	pushl  $0x1e18
     289:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     28f:	66 50                	push   %eax
     291:	66 e8 0d 13 00 00    	calll  15a4 <strcmp>
     297:	66 83 c4 10          	add    $0x10,%esp
     29b:	66 85 c0             	test   %eax,%eax
     29e:	75 31                	jne    2d1 <parser+0xd9>
/mnt/e/code/my_operating_system/os/kernel/tty.c:122
        // 运行一个用户程序。
        // 先从软盘中加载一个指定程序到内存处，然后开始执行。
        // 考虑维护一个空闲空间的指针，然后每加载一个程序，如果可行的话。
        void (**my_program)();
        *my_program = 0x4000;
     2a0:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     2a6:	67 66 c7 03 00 40 00 	movl   $0x4000,(%ebx)
     2ad:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:123
        fs_load_by_name(arguments[1],*my_program);
     2ae:	66 83 ec 08          	sub    $0x8,%esp
     2b2:	66 68 00 40 00 00    	pushl  $0x4000
     2b8:	67 66 8d 44 24 22    	lea    0x22(%esp),%eax
     2be:	66 50                	push   %eax
     2c0:	66 e8 89 06 00 00    	calll  94f <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/tty.c:124
        (*my_program)();
     2c6:	67 66 ff 13          	calll  *(%ebx)
     2ca:	66 83 c4 10          	add    $0x10,%esp
     2ce:	e9 1b 01             	jmp    3ec <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     2d1:	66 83 ec 08          	sub    $0x8,%esp
     2d5:	66 68 1c 1e 00 00    	pushl  $0x1e1c
     2db:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     2e1:	66 50                	push   %eax
     2e3:	66 e8 bb 12 00 00    	calll  15a4 <strcmp>
     2e9:	66 83 c4 10          	add    $0x10,%esp
     2ed:	66 85 c0             	test   %eax,%eax
     2f0:	75 23                	jne    315 <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126 (discriminator 1)
     2f2:	66 83 fe 01          	cmp    $0x1,%esi
     2f6:	75 1d                	jne    315 <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:127
        printf("\n\n");
     2f8:	66 83 ec 0c          	sub    $0xc,%esp
     2fc:	66 68 1f 1e 00 00    	pushl  $0x1e1f
     302:	66 e8 f9 0d 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:128
        fs_show_root_file_table();
     308:	66 e8 a7 06 00 00    	calll  9b5 <fs_show_root_file_table>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
        void (**my_program)();
        *my_program = 0x4000;
        fs_load_by_name(arguments[1],*my_program);
        (*my_program)();
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     30e:	66 83 c4 10          	add    $0x10,%esp
     312:	e9 d7 00             	jmp    3ec <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     315:	66 83 ec 08          	sub    $0x8,%esp
     319:	66 68 22 1e 00 00    	pushl  $0x1e22
     31f:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     325:	66 50                	push   %eax
     327:	66 e8 77 12 00 00    	calll  15a4 <strcmp>
     32d:	66 83 c4 10          	add    $0x10,%esp
     331:	66 85 c0             	test   %eax,%eax
     334:	75 23                	jne    359 <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130 (discriminator 1)
     336:	66 83 fe 01          	cmp    $0x1,%esi
     33a:	75 1d                	jne    359 <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:131
        printf("\n\n");
     33c:	66 83 ec 0c          	sub    $0xc,%esp
     340:	66 68 1f 1e 00 00    	pushl  $0x1e1f
     346:	66 e8 b5 0d 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:132
        reboot();
     34c:	66 e8 e8 11 00 00    	calll  153a <reboot>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     352:	66 83 c4 10          	add    $0x10,%esp
     356:	e9 93 00             	jmp    3ec <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134
        printf("\n\n");
        reboot();
    }
    else if(!strcmp(arguments[0],"help") && arguments_num == 1){
     359:	66 83 ec 08          	sub    $0x8,%esp
     35d:	66 68 29 1e 00 00    	pushl  $0x1e29
     363:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     369:	66 50                	push   %eax
     36b:	66 e8 33 12 00 00    	calll  15a4 <strcmp>
     371:	66 83 c4 10          	add    $0x10,%esp
     375:	66 85 c0             	test   %eax,%eax
     378:	75 58                	jne    3d2 <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134 (discriminator 1)
     37a:	66 83 fe 01          	cmp    $0x1,%esi
     37e:	75 52                	jne    3d2 <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:135
        printf("\n\n");
     380:	66 83 ec 0c          	sub    $0xc,%esp
     384:	66 68 1f 1e 00 00    	pushl  $0x1e1f
     38a:	66 e8 71 0d 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:136
        printf("ls        : show the file in the root folder.\n");
     390:	67 66 c7 04 24 9c 1e 	movl   $0x1e9c,(%esp)
     397:	00 00 
     399:	66 e8 62 0d 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:137
        printf("run [name]: run the file in the root folder.\n");
     39f:	67 66 c7 04 24 cc 1e 	movl   $0x1ecc,(%esp)
     3a6:	00 00 
     3a8:	66 e8 53 0d 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:138
        printf("help      : show the help message.\n");
     3ae:	67 66 c7 04 24 fc 1e 	movl   $0x1efc,(%esp)
     3b5:	00 00 
     3b7:	66 e8 44 0d 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:139
        printf("reboot    : reboot the machine.\n");
     3bd:	67 66 c7 04 24 20 1f 	movl   $0x1f20,(%esp)
     3c4:	00 00 
     3c6:	66 e8 35 0d 00 00    	calll  1101 <printf>
     3cc:	66 83 c4 10          	add    $0x10,%esp
     3d0:	eb 1a                	jmp    3ec <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:142
    }
    else {
        printf("\n%s : command not found! \n", input_buf);
     3d2:	66 83 ec 08          	sub    $0x8,%esp
     3d6:	66 68 e0 1f 00 00    	pushl  $0x1fe0
     3dc:	66 68 2e 1e 00 00    	pushl  $0x1e2e
     3e2:	66 e8 19 0d 00 00    	calll  1101 <printf>
     3e8:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:144
    }
    int current_cursor = get_cursor();
     3ec:	66 e8 38 07 00 00    	calll  b2a <get_cursor>
     3f2:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:145
    command_line_row = (current_cursor / 80);
     3f6:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     3fc:	66 f7 ea             	imul   %edx
     3ff:	66 c1 fa 05          	sar    $0x5,%edx
     403:	66 89 16 90 1f       	mov    %edx,0x1f90
/mnt/e/code/my_operating_system/os/kernel/tty.c:148
    // printf("arguments: %d|%s|%s|",arguments_num, arguments[0],arguments[1]);
    return ;
}
     408:	66 83 c4 74          	add    $0x74,%esp
     40c:	66 5b                	pop    %ebx
     40e:	66 5e                	pop    %esi
     410:	66 c3                	retl   

00000412 <create_a_line>:
create_a_line():
/mnt/e/code/my_operating_system/os/kernel/tty.c:151

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
     412:	66 83 ec 2c          	sub    $0x2c,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:152
    char message[30] = "walker@walker-pc ~ $ \0";
     416:	66 a1 6c 1f          	mov    0x1f6c,%eax
     41a:	67 66 89 44 24 02    	mov    %eax,0x2(%esp)
     420:	66 a1 70 1f          	mov    0x1f70,%eax
     424:	67 66 89 44 24 06    	mov    %eax,0x6(%esp)
     42a:	66 a1 74 1f          	mov    0x1f74,%eax
     42e:	67 66 89 44 24 0a    	mov    %eax,0xa(%esp)
     434:	66 a1 78 1f          	mov    0x1f78,%eax
     438:	67 66 89 44 24 0e    	mov    %eax,0xe(%esp)
     43e:	66 a1 7c 1f          	mov    0x1f7c,%eax
     442:	67 66 89 44 24 12    	mov    %eax,0x12(%esp)
     448:	66 0f b7 06 80 1f    	movzwl 0x1f80,%eax
     44e:	67 89 44 24 16       	mov    %ax,0x16(%esp)
     453:	66 0f b6 06 82 1f    	movzbl 0x1f82,%eax
     459:	67 88 44 24 18       	mov    %al,0x18(%esp)
     45e:	67 66 c7 44 24 19 00 	movl   $0x0,0x19(%esp)
     465:	00 00 00 
     468:	67 c7 44 24 1d 00 00 	movw   $0x0,0x1d(%esp)
     46f:	67 c6 44 24 1f 00    	movb   $0x0,0x1f(%esp)
/mnt/e/code/my_operating_system/os/kernel/tty.c:153
    for (int i = 0; i < MAX_BUF; i++){
     475:	66 b8 00 00 00 00    	mov    $0x0,%eax
     47b:	eb 0c                	jmp    489 <create_a_line+0x77>
/mnt/e/code/my_operating_system/os/kernel/tty.c:154 (discriminator 3)
        input_buf[i] = 0;
     47d:	67 c6 80 e0 1f 00 00 	movb   $0x0,0x1fe0(%eax)
     484:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 3)
}

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    char message[30] = "walker@walker-pc ~ $ \0";
    for (int i = 0; i < MAX_BUF; i++){
     485:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 1)
     489:	66 83 f8 63          	cmp    $0x63,%eax
     48d:	7e ee                	jle    47d <create_a_line+0x6b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:156
        input_buf[i] = 0;
    }
    message_length = strlen(message);
     48f:	66 83 ec 0c          	sub    $0xc,%esp
     493:	67 66 8d 44 24 0e    	lea    0xe(%esp),%eax
     499:	66 50                	push   %eax
     49b:	66 e8 ab 10 00 00    	calll  154c <strlen>
     4a1:	66 a3 c4 1f          	mov    %eax,0x1fc4
/mnt/e/code/my_operating_system/os/kernel/tty.c:157
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
     4a5:	66 03 06 c0 1f       	add    0x1fc0,%eax
     4aa:	66 89 c1             	mov    %eax,%ecx
     4ad:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     4b3:	66 f7 ea             	imul   %edx
     4b6:	66 c1 fa 05          	sar    $0x5,%edx
     4ba:	66 c1 f9 1f          	sar    $0x1f,%ecx
     4be:	66 29 ca             	sub    %ecx,%edx
     4c1:	66 89 d0             	mov    %edx,%eax
     4c4:	66 03 06 90 1f       	add    0x1f90,%eax
     4c9:	66 83 c0 01          	add    $0x1,%eax
     4cd:	66 a3 90 1f          	mov    %eax,0x1f90
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    while(command_line_row > 23){
     4d1:	66 83 c4 10          	add    $0x10,%esp
     4d5:	eb 0c                	jmp    4e3 <create_a_line+0xd1>
/mnt/e/code/my_operating_system/os/kernel/tty.c:159
        scroll_screen();
     4d7:	66 e8 cf 0f 00 00    	calll  14ac <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:160
        command_line_row--;
     4dd:	66 83 2e 90 1f 01    	subl   $0x1,0x1f90
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    for (int i = 0; i < MAX_BUF; i++){
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    while(command_line_row > 23){
     4e3:	66 a1 90 1f          	mov    0x1f90,%eax
     4e7:	66 83 f8 17          	cmp    $0x17,%eax
     4eb:	7f ea                	jg     4d7 <create_a_line+0xc5>
/mnt/e/code/my_operating_system/os/kernel/tty.c:162
        scroll_screen();
        command_line_row--;
    }
    command_line_cursor = 0;
     4ed:	66 c7 06 c0 1f 00 00 	movl   $0x0,0x1fc0
     4f4:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:163
    set_cursor(command_line_row * 80);
     4f6:	66 83 ec 0c          	sub    $0xc,%esp
     4fa:	67 66 8d 04 80       	lea    (%eax,%eax,4),%eax
     4ff:	66 c1 e0 04          	shl    $0x4,%eax
     503:	66 0f b7 d0          	movzwl %ax,%edx
     507:	66 52                	push   %edx
     509:	66 e8 a9 05 00 00    	calll  ab8 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:165
    // printf("%d", command_line_row);
    printf("%s", message);
     50f:	66 83 c4 08          	add    $0x8,%esp
     513:	67 66 8d 44 24 0a    	lea    0xa(%esp),%eax
     519:	66 50                	push   %eax
     51b:	66 68 49 1e 00 00    	pushl  $0x1e49
     521:	66 e8 da 0b 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:166
}
     527:	66 83 c4 3c          	add    $0x3c,%esp
     52b:	66 c3                	retl   

0000052d <tty>:
tty():
/mnt/e/code/my_operating_system/os/kernel/tty.c:19
int message_length = 0;
int command_line_cursor = 0; // 光标在输入区的偏移量
char input_buf[MAX_BUF]; // 输入缓存区


void tty(){
     52d:	66 56                	push   %esi
     52f:	66 53                	push   %ebx
     531:	66 83 ec 04          	sub    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:21
    int keyboard_flag = 0;
    new_line_flag = 1;
     535:	66 c7 06 8c 1f 01 00 	movl   $0x1,0x1f8c
     53c:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:22
    command_line_row = -1;
     53e:	66 c7 06 90 1f ff ff 	movl   $0xffffffff,0x1f90
     545:	ff ff 
/mnt/e/code/my_operating_system/os/kernel/tty.c:23
    clean_screen();
     547:	66 e8 45 0f 00 00    	calll  1492 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:24
    set_cursor(1974);
     54d:	66 83 ec 0c          	sub    $0xc,%esp
     551:	66 68 b6 07 00 00    	pushl  $0x7b6
     557:	66 e8 5b 05 00 00    	calll  ab8 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:25
    set_cursor(0);
     55d:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
     564:	00 00 
     566:	66 e8 4c 05 00 00    	calll  ab8 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:26
    print_my_name();
     56c:	66 e8 9e 0f 00 00    	calll  1510 <print_my_name>
     572:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:29
    while (1){
        // 使用缓冲区数据更新
        if (new_line_flag){
     576:	66 83 3e 8c 1f 00    	cmpl   $0x0,0x1f8c
     57c:	74 0f                	je     58d <tty+0x60>
/mnt/e/code/my_operating_system/os/kernel/tty.c:30
            create_a_line();
     57e:	66 e8 8e fe ff ff    	calll  412 <create_a_line>
/mnt/e/code/my_operating_system/os/kernel/tty.c:31
            new_line_flag = 0;
     584:	66 c7 06 8c 1f 00 00 	movl   $0x0,0x1f8c
     58b:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:34
        }

        if(command_line_row == 23 && message_length + command_line_cursor > 80){
     58d:	66 83 3e 90 1f 17    	cmpl   $0x17,0x1f90
     593:	75 2f                	jne    5c4 <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:34 (discriminator 1)
     595:	66 a1 c0 1f          	mov    0x1fc0,%eax
     599:	66 03 06 c4 1f       	add    0x1fc4,%eax
     59e:	66 83 f8 50          	cmp    $0x50,%eax
     5a2:	7e 20                	jle    5c4 <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:35
            scroll_screen();
     5a4:	66 e8 02 0f 00 00    	calll  14ac <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:36
            command_line_row--;
     5aa:	66 83 2e 90 1f 01    	subl   $0x1,0x1f90
/mnt/e/code/my_operating_system/os/kernel/tty.c:37
            set_cursor(1840);
     5b0:	66 83 ec 0c          	sub    $0xc,%esp
     5b4:	66 68 30 07 00 00    	pushl  $0x730
     5ba:	66 e8 f8 04 00 00    	calll  ab8 <set_cursor>
     5c0:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:39
        }
        putc(' ');// 用来删除光标处的文字，与输入退格的时候光标-1配合使用
     5c4:	66 83 ec 0c          	sub    $0xc,%esp
     5c8:	66 6a 20             	pushl  $0x20
     5cb:	66 e8 b5 05 00 00    	calll  b86 <putc>
/mnt/e/code/my_operating_system/os/kernel/tty.c:42

        // command_line_row = get_cursor() / 80;
        set_cursor(80*command_line_row + message_length);
     5d1:	66 8b 16 90 1f       	mov    0x1f90,%edx
     5d6:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     5db:	66 89 d0             	mov    %edx,%eax
     5de:	66 c1 e0 04          	shl    $0x4,%eax
     5e2:	03 06 c4 1f          	add    0x1fc4,%ax
     5e6:	66 0f b7 c0          	movzwl %ax,%eax
     5ea:	67 66 89 04 24       	mov    %eax,(%esp)
     5ef:	66 e8 c3 04 00 00    	calll  ab8 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:43
        puts(input_buf, command_line_cursor);
     5f5:	66 83 c4 08          	add    $0x8,%esp
     5f9:	66 ff 36 c0 1f       	pushl  0x1fc0
     5fe:	66 68 e0 1f 00 00    	pushl  $0x1fe0
     604:	66 e8 71 07 00 00    	calll  d7b <puts>
/mnt/e/code/my_operating_system/os/kernel/tty.c:46

        // 更新完了 检测键盘
        keyboard_flag = check_keyboard();
     60a:	66 e8 6c 0e 00 00    	calll  147c <check_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:49

        // 如果返回1，则有输入，处理输入信息，否则继续循环。
        if (keyboard_flag){
     610:	66 83 c4 10          	add    $0x10,%esp
     614:	85 c0                	test   %ax,%ax
     616:	0f 84 5c ff          	je     576 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:51
            // 处理键盘事件
            u16 keyboard_code =  get_keyboard();
     61a:	66 e8 6c 0e 00 00    	calll  148c <get_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:52
            u8 ascii_code = keyboard_code;
     620:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:54
            u8 scan_code = keyboard_code >> 8;
            if (isprint(ascii_code)){
     623:	66 83 ec 0c          	sub    $0xc,%esp
     627:	66 0f b6 c0          	movzbl %al,%eax
     62b:	66 50                	push   %eax
     62d:	66 e8 29 0c 00 00    	calll  125c <isprint>
     633:	66 83 c4 10          	add    $0x10,%esp
     637:	66 85 c0             	test   %eax,%eax
     63a:	74 20                	je     65c <tty+0x12f>
/mnt/e/code/my_operating_system/os/kernel/tty.c:55
                if (command_line_cursor <= MAX_BUF){
     63c:	66 a1 c0 1f          	mov    0x1fc0,%eax
     640:	66 83 f8 64          	cmp    $0x64,%eax
     644:	0f 8f 2e ff          	jg     576 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:56
                    input_buf[command_line_cursor++] = ascii_code;
     648:	67 66 8d 50 01       	lea    0x1(%eax),%edx
     64d:	66 89 16 c0 1f       	mov    %edx,0x1fc0
     652:	67 88 98 e0 1f 00 00 	mov    %bl,0x1fe0(%eax)
     659:	e9 1a ff             	jmp    576 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:59
                }
            }
            else if (ascii_code == 13){
     65c:	80 fb 0d             	cmp    $0xd,%bl
     65f:	75 1e                	jne    67f <tty+0x152>
/mnt/e/code/my_operating_system/os/kernel/tty.c:60
                new_line_flag = 1;
     661:	66 c7 06 8c 1f 01 00 	movl   $0x1,0x1f8c
     668:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:61
                input_buf[command_line_cursor] = '\0';
     66a:	66 a1 c0 1f          	mov    0x1fc0,%eax
     66e:	67 c6 80 e0 1f 00 00 	movb   $0x0,0x1fe0(%eax)
     675:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:62
                parser();
     676:	66 e8 7c fb ff ff    	calll  1f8 <parser>
     67c:	e9 f7 fe             	jmp    576 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:64
            }
            else if (ascii_code == 8){
     67f:	80 fb 08             	cmp    $0x8,%bl
     682:	75 3e                	jne    6c2 <tty+0x195>
/mnt/e/code/my_operating_system/os/kernel/tty.c:65
                if(command_line_cursor){
     684:	66 a1 c0 1f          	mov    0x1fc0,%eax
     688:	66 85 c0             	test   %eax,%eax
     68b:	0f 84 e7 fe          	je     576 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:66
                    input_buf[--command_line_cursor] = 0;
     68f:	67 66 8d 50 ff       	lea    -0x1(%eax),%edx
     694:	66 89 16 c0 1f       	mov    %edx,0x1fc0
     699:	67 c6 80 df 1f 00 00 	movb   $0x0,0x1fdf(%eax)
     6a0:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:68
                    // 将光标设置为前一个位置，方便删除
                    int cur_cursor = get_cursor();
     6a1:	66 e8 83 04 00 00    	calll  b2a <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:69
                    set_cursor(cur_cursor-1);
     6a7:	66 83 ec 0c          	sub    $0xc,%esp
     6ab:	66 83 e8 01          	sub    $0x1,%eax
     6af:	66 0f b7 c0          	movzwl %ax,%eax
     6b3:	66 50                	push   %eax
     6b5:	66 e8 fd 03 00 00    	calll  ab8 <set_cursor>
     6bb:	66 83 c4 10          	add    $0x10,%esp
     6bf:	e9 b4 fe             	jmp    576 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:72
                }
            }
            else if (ascii_code == 27){
     6c2:	80 fb 1b             	cmp    $0x1b,%bl
     6c5:	0f 85 ad fe          	jne    576 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:73
                __asm__("mov $0x4c00, %ax");
     6c9:	b8 00 4c             	mov    $0x4c00,%ax
/mnt/e/code/my_operating_system/os/kernel/tty.c:74
                __asm__("int $0x40");
     6cc:	cd 40                	int    $0x40
     6ce:	e9 a5 fe             	jmp    576 <tty+0x49>

000006d1 <tty_scroll_screen>:
tty_scroll_screen():
/mnt/e/code/my_operating_system/os/kernel/tty.c:169
    // printf("%d", command_line_row);
    printf("%s", message);
}


void tty_scroll_screen(){
     6d1:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:170
    if (get_cursor()/80 > 24){
     6d5:	66 e8 4f 04 00 00    	calll  b2a <get_cursor>
     6db:	3d cf 07             	cmp    $0x7cf,%ax
     6de:	76 0c                	jbe    6ec <tty_scroll_screen+0x1b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:171
        scroll_screen();
     6e0:	66 e8 c6 0d 00 00    	calll  14ac <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:172
        command_line_row--;
     6e6:	66 83 2e 90 1f 01    	subl   $0x1,0x1f90
/mnt/e/code/my_operating_system/os/kernel/tty.c:175
    }
    return ;
     6ec:	66 83 c4 0c          	add    $0xc,%esp
     6f0:	66 c3                	retl   

000006f2 <init_fsystem>:
init_fsystem():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:14
FileDescriptor root[56];
u16 root_sector;
u16 first_cluster_by_sector;
u16 cluster2sector;

void init_fsystem(){
     6f2:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:15
    cluster2sector = 1;
     6f6:	c7 06 80 2b 01 00    	movw   $0x1,0x2b80
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:16
    root_sector = 37;
     6fc:	c7 06 60 20 25 00    	movw   $0x25,0x2060
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:17
    first_cluster_by_sector = root_sector + 1;  
     702:	c7 06 82 2b 26 00    	movw   $0x26,0x2b82
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:18
    read_n_sector(root_sector,1, 0x1000, root);
     708:	66 b8 80 24 00 00    	mov    $0x2480,%eax
     70e:	66 0f b7 c0          	movzwl %ax,%eax
     712:	66 50                	push   %eax
     714:	66 68 00 10 00 00    	pushl  $0x1000
     71a:	66 6a 01             	pushl  $0x1
     71d:	66 6a 25             	pushl  $0x25
     720:	66 e8 e9 0b 00 00    	calll  130f <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:19
    read_n_sector(1,2,0x1000, FAT_table);// 这个会覆盖掉root吗？
     726:	66 b8 80 20 00 00    	mov    $0x2080,%eax
     72c:	66 0f b7 c0          	movzwl %ax,%eax
     730:	66 50                	push   %eax
     732:	66 68 00 10 00 00    	pushl  $0x1000
     738:	66 6a 02             	pushl  $0x2
     73b:	66 6a 01             	pushl  $0x1
     73e:	66 e8 cb 0b 00 00    	calll  130f <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:27
    // puti(FAT_table[0]);
    // puti(root[0].cluster_number);
    // puts(&root[0], 10);
    // puts(&root[1], 10);
    // puts(&root[2], 10);
}
     744:	66 83 c4 2c          	add    $0x2c,%esp
     748:	66 c3                	retl   

0000074a <_fs_find_descriptor_number_by_name>:
_fs_find_descriptor_number_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:29

u16 _fs_find_descriptor_number_by_name(char * file_name){
     74a:	66 57                	push   %edi
     74c:	66 56                	push   %esi
     74e:	66 53                	push   %ebx
     750:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:30
    int file_name_length = strlen(file_name);
     756:	66 83 ec 0c          	sub    $0xc,%esp
     75a:	66 57                	push   %edi
     75c:	66 e8 ea 0d 00 00    	calll  154c <strlen>
     762:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:31
    if (file_name_length >= 11) file_name_length = 11;
     765:	66 83 c4 10          	add    $0x10,%esp
     769:	66 83 f8 0a          	cmp    $0xa,%eax
     76d:	7e 06                	jle    775 <_fs_find_descriptor_number_by_name+0x2b>
     76f:	66 be 0b 00 00 00    	mov    $0xb,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     775:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     77b:	eb 2f                	jmp    7ac <_fs_find_descriptor_number_by_name+0x62>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:34
        if (!strncmp(&root[i], file_name, file_name_length)){
     77d:	66 89 d8             	mov    %ebx,%eax
     780:	66 c1 e0 05          	shl    $0x5,%eax
     784:	66 05 80 24 00 00    	add    $0x2480,%eax
     78a:	66 83 ec 04          	sub    $0x4,%esp
     78e:	66 56                	push   %esi
     790:	66 57                	push   %edi
     792:	66 50                	push   %eax
     794:	66 e8 76 0e 00 00    	calll  1610 <strncmp>
     79a:	66 83 c4 10          	add    $0x10,%esp
     79e:	66 85 c0             	test   %eax,%eax
     7a1:	75 05                	jne    7a8 <_fs_find_descriptor_number_by_name+0x5e>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:35
            return i;
     7a3:	66 89 d8             	mov    %ebx,%eax
     7a6:	eb 10                	jmp    7b8 <_fs_find_descriptor_number_by_name+0x6e>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33 (discriminator 2)

u16 _fs_find_descriptor_number_by_name(char * file_name){
    int file_name_length = strlen(file_name);
    if (file_name_length >= 11) file_name_length = 11;
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     7a8:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33 (discriminator 1)
     7ac:	66 83 fb 09          	cmp    $0x9,%ebx
     7b0:	7e cb                	jle    77d <_fs_find_descriptor_number_by_name+0x33>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:38
        if (!strncmp(&root[i], file_name, file_name_length)){
            return i;
        }
    }
    return -1;
     7b2:	66 b8 ff ff ff ff    	mov    $0xffffffff,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:39
}
     7b8:	66 5b                	pop    %ebx
     7ba:	66 5e                	pop    %esi
     7bc:	66 5f                	pop    %edi
     7be:	66 c3                	retl   

000007c0 <_fs_find_cluster_code_by_name>:
_fs_find_cluster_code_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:41

u16 _fs_find_cluster_code_by_name(char * file_name){
     7c0:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:42
    int index = _fs_find_descriptor_number_by_name(file_name);
     7c4:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     7ca:	66 e8 7a ff ff ff    	calll  74a <_fs_find_descriptor_number_by_name>
     7d0:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:44
    if (index != -1)
        return root[index].cluster_code;
     7d4:	66 c1 e0 05          	shl    $0x5,%eax
     7d8:	67 66 0f b7 80 9a 24 	movzwl 0x249a(%eax),%eax
     7df:	00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:46
    return 0;
}
     7e1:	66 83 c4 1c          	add    $0x1c,%esp
     7e5:	66 c3                	retl   

000007e7 <_fs_get_file_size_by_cluster_code>:
_fs_get_file_size_by_cluster_code():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:48

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
     7e7:	67 66 0f b7 54 24 04 	movzwl 0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:49
    int size = 0;
     7ee:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:50
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     7f4:	eb 1b                	jmp    811 <loader_code_segment+0x11>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:51
        size += 512*cluster2sector;
     7f6:	66 0f b7 0e 80 2b    	movzwl 0x2b80,%ecx
     7fc:	66 c1 e1 09          	shl    $0x9,%ecx
     800:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:52
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     803:	66 0f b7 d2          	movzwl %dx,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:53
        cluster_code = FAT_table[cluster_code];
     807:	67 66 0f b7 94 12 80 	movzwl 0x2080(%edx,%edx,1),%edx
     80e:	20 00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:50
    return 0;
}

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     811:	67 66 8d 4a fe       	lea    -0x2(%edx),%ecx
     816:	83 f9 ed             	cmp    $0xffed,%cx
     819:	76 db                	jbe    7f6 <_fs_get_file_size_by_cluster_code+0xf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:56
        size += 512*cluster2sector;
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     81b:	66 f3 c3             	repz retl 

0000081e <_fs_show_file_by_descriptor_number>:
_fs_show_file_by_descriptor_number():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:58

void _fs_show_file_by_descriptor_number(u16 index){
     81e:	66 56                	push   %esi
     820:	66 53                	push   %ebx
     822:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:59
    int cluster_code = root[index].cluster_code;
     826:	67 66 0f b7 44 24 14 	movzwl 0x14(%esp),%eax
     82d:	66 89 c6             	mov    %eax,%esi
     830:	66 c1 e6 05          	shl    $0x5,%esi
     834:	67 66 0f b7 9e 9a 24 	movzwl 0x249a(%esi),%ebx
     83b:	00 00 
     83d:	66 81 c6 80 24 00 00 	add    $0x2480,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:60
    printf("%d, %d\n" , index,cluster_code);
     844:	66 53                	push   %ebx
     846:	66 50                	push   %eax
     848:	66 68 4c 1e 00 00    	pushl  $0x1e4c
     84e:	66 e8 ad 08 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:62
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
     854:	67 66 89 1c 24       	mov    %ebx,(%esp)
     859:	66 e8 88 ff ff ff    	calll  7e7 <_fs_get_file_size_by_cluster_code>
     85f:	66 83 c4 0c          	add    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:61
}

void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
     863:	66 0f b7 c0          	movzwl %ax,%eax
     867:	66 50                	push   %eax
     869:	66 56                	push   %esi
     86b:	66 68 54 1e 00 00    	pushl  $0x1e54
     871:	66 e8 8a 08 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:63
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     877:	66 83 c4 10          	add    $0x10,%esp
     87b:	eb 20                	jmp    89d <_fs_show_file_by_descriptor_number+0x7f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:64
        printf("-%d", cluster_code);
     87d:	66 83 ec 08          	sub    $0x8,%esp
     881:	66 53                	push   %ebx
     883:	66 68 65 1e 00 00    	pushl  $0x1e65
     889:	66 e8 72 08 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:65
        cluster_code = FAT_table[cluster_code];
     88f:	67 66 0f b7 9c 1b 80 	movzwl 0x2080(%ebx,%ebx,1),%ebx
     896:	20 00 00 
     899:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:63
void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     89d:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     8a2:	66 3d ed ff 00 00    	cmp    $0xffed,%eax
     8a8:	76 d3                	jbe    87d <_fs_show_file_by_descriptor_number+0x5f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:67
        printf("-%d", cluster_code);
        cluster_code = FAT_table[cluster_code];
    }
    printf("-|\n");
     8aa:	66 83 ec 0c          	sub    $0xc,%esp
     8ae:	66 68 69 1e 00 00    	pushl  $0x1e69
     8b4:	66 e8 47 08 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:69
    return ;
}
     8ba:	66 83 c4 14          	add    $0x14,%esp
     8be:	66 5b                	pop    %ebx
     8c0:	66 5e                	pop    %esi
     8c2:	66 c3                	retl   

000008c4 <_fs_load_by_cluster_code>:
_fs_load_by_cluster_code():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:71

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
     8c4:	66 57                	push   %edi
     8c6:	66 56                	push   %esi
     8c8:	66 53                	push   %ebx
     8ca:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
     8d0:	67 66 0f b7 5c 24 10 	movzwl 0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:72
    int size = 0;
     8d7:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:73
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     8dd:	eb 5b                	jmp    93a <_fs_load_by_cluster_code+0x76>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:74
        size += 512*cluster2sector;
     8df:	66 0f b7 16 80 2b    	movzwl 0x2b80,%edx
     8e5:	66 89 d0             	mov    %edx,%eax
     8e8:	66 c1 e0 09          	shl    $0x9,%eax
     8ec:	66 01 c7             	add    %eax,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:75
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     8ef:	66 0f b7 0e 82 2b    	movzwl 0x2b82,%ecx
     8f5:	66 0f b7 db          	movzwl %bx,%ebx
     8f9:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     8fe:	66 0f af c2          	imul   %edx,%eax
     902:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:76
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
     905:	66 0f b7 ce          	movzwl %si,%ecx
     909:	66 51                	push   %ecx
     90b:	66 68 00 10 00 00    	pushl  $0x1000
     911:	66 52                	push   %edx
     913:	66 0f b7 c0          	movzwl %ax,%eax
     917:	66 50                	push   %eax
     919:	66 e8 f0 09 00 00    	calll  130f <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:77
        program = program+cluster2sector*512;
     91f:	66 0f b7 06 80 2b    	movzwl 0x2b80,%eax
     925:	66 c1 e0 09          	shl    $0x9,%eax
     929:	66 01 c6             	add    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:78
        cluster_code = FAT_table[cluster_code];
     92c:	67 66 0f b7 9c 1b 80 	movzwl 0x2080(%ebx,%ebx,1),%ebx
     933:	20 00 00 
     936:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:73
    return ;
}

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     93a:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     93f:	83 f8 ed             	cmp    $0xffed,%ax
     942:	76 9b                	jbe    8df <_fs_load_by_cluster_code+0x1b>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:81
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
        program = program+cluster2sector*512;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     944:	66 89 f8             	mov    %edi,%eax
     947:	66 5b                	pop    %ebx
     949:	66 5e                	pop    %esi
     94b:	66 5f                	pop    %edi
     94d:	66 c3                	retl   

0000094f <fs_load_by_name>:
fs_load_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:84


u16 fs_load_by_name(char * file_name, void (*program)()){
     94f:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:85
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     953:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     959:	66 e8 61 fe ff ff    	calll  7c0 <_fs_find_cluster_code_by_name>
     95f:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:86
    if (cluster_code){
     963:	66 83 c4 10          	add    $0x10,%esp
     967:	66 85 c0             	test   %eax,%eax
     96a:	74 18                	je     984 <fs_load_by_name+0x35>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:87
        return _fs_load_by_cluster_code(cluster_code, program);
     96c:	66 83 ec 08          	sub    $0x8,%esp
     970:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     976:	66 50                	push   %eax
     978:	66 e8 46 ff ff ff    	calll  8c4 <_fs_load_by_cluster_code>
     97e:	66 83 c4 10          	add    $0x10,%esp
     982:	eb 06                	jmp    98a <fs_load_by_name+0x3b>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:90
    }
    else {
        return 0;
     984:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:92
    }
}
     98a:	66 83 c4 0c          	add    $0xc,%esp
     98e:	66 c3                	retl   

00000990 <fs_get_file_size>:
fs_get_file_size():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:95


u16 fs_get_file_size(char * file_name){
     990:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:96
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     994:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     99a:	66 e8 20 fe ff ff    	calll  7c0 <_fs_find_cluster_code_by_name>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:97
    return _fs_get_file_size_by_cluster_code(cluster_code);
     9a0:	66 0f b7 c0          	movzwl %ax,%eax
     9a4:	67 66 89 04 24       	mov    %eax,(%esp)
     9a9:	66 e8 38 fe ff ff    	calll  7e7 <_fs_get_file_size_by_cluster_code>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:98
}
     9af:	66 83 c4 1c          	add    $0x1c,%esp
     9b3:	66 c3                	retl   

000009b5 <fs_show_root_file_table>:
fs_show_root_file_table():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:100

void fs_show_root_file_table(){
     9b5:	66 53                	push   %ebx
     9b7:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:101
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
     9bb:	66 68 6d 1e 00 00    	pushl  $0x1e6d
     9c1:	66 68 75 1e 00 00    	pushl  $0x1e75
     9c7:	66 68 7f 1e 00 00    	pushl  $0x1e7f
     9cd:	66 68 8a 1e 00 00    	pushl  $0x1e8a
     9d3:	66 e8 28 07 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:102
    printf("------------------------------------\n\r");
     9d9:	67 66 c7 04 24 44 1f 	movl   $0x1f44,(%esp)
     9e0:	00 00 
     9e2:	66 e8 19 07 00 00    	calll  1101 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     9e8:	66 83 c4 10          	add    $0x10,%esp
     9ec:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     9f2:	eb 18                	jmp    a0c <fs_show_root_file_table+0x57>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:105 (discriminator 3)
        _fs_show_file_by_descriptor_number(i);
     9f4:	66 83 ec 0c          	sub    $0xc,%esp
     9f8:	66 0f b7 c3          	movzwl %bx,%eax
     9fc:	66 50                	push   %eax
     9fe:	66 e8 1a fe ff ff    	calll  81e <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104 (discriminator 3)

void fs_show_root_file_table(){
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    printf("------------------------------------\n\r");
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     a04:	66 83 c3 01          	add    $0x1,%ebx
     a08:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104 (discriminator 1)
     a0c:	66 83 fb 08          	cmp    $0x8,%ebx
     a10:	7e e2                	jle    9f4 <fs_show_root_file_table+0x3f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:108
        _fs_show_file_by_descriptor_number(i);
    }
    return ;
}
     a12:	66 83 c4 08          	add    $0x8,%esp
     a16:	66 5b                	pop    %ebx
     a18:	66 c3                	retl   

00000a1a <fs_show_file_by_name>:
fs_show_file_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:110

void fs_show_file_by_name(char * file_name){
     a1a:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:111
    int descriptor_index = _fs_find_descriptor_number_by_name(file_name);
     a1e:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     a24:	66 e8 20 fd ff ff    	calll  74a <_fs_find_descriptor_number_by_name>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:112
    _fs_show_file_by_descriptor_number(descriptor_index);
     a2a:	66 0f b7 c0          	movzwl %ax,%eax
     a2e:	67 66 89 04 24       	mov    %eax,(%esp)
     a33:	66 e8 e5 fd ff ff    	calll  81e <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:114
    return ;
}
     a39:	66 83 c4 1c          	add    $0x1c,%esp
     a3d:	66 c3                	retl   

00000a3f <fs_show_floppy_infomation>:
fs_show_floppy_infomation():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:117


void fs_show_floppy_infomation(){
     a3f:	66 f3 c3             	repz retl 

00000a42 <move_name>:
move_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:9

void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
     a42:	66 0f b7 0e 9e 0f    	movzwl 0xf9e,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10
    for (int i =78; i >= 0; i--){
     a48:	66 b8 4e 00 00 00    	mov    $0x4e,%eax
     a4e:	eb 16                	jmp    a66 <move_name+0x24>
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:11 (discriminator 3)
        text_line[i+1] = text_line[i];
     a50:	67 66 0f b7 94 00 00 	movzwl 0xf00(%eax,%eax,1),%edx
     a57:	0f 00 00 
     a5a:	67 89 94 00 02 0f 00 	mov    %dx,0xf02(%eax,%eax,1)
     a61:	00 
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10 (discriminator 3)
void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    for (int i =78; i >= 0; i--){
     a62:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10 (discriminator 1)
     a66:	66 85 c0             	test   %eax,%eax
     a69:	79 e5                	jns    a50 <move_name+0xe>
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:13
        text_line[i+1] = text_line[i];
    }
    text_line[0] = last_char;
     a6b:	89 0e 00 0f          	mov    %cx,0xf00
     a6f:	66 c3                	retl   

00000a71 <_put_char>:
_put_char():
/mnt/e/code/my_operating_system/os/lib/stdio.c:5
#include "../include/basic.h"
#include "../include/type.h"
#include "../include/string.h"

void _put_char(char c, u16 cursor_index){
     a71:	66 53                	push   %ebx
     a73:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:7
    int _address = 0xb8000;
    int _offset = cursor_index * 2;
     a77:	67 66 0f b7 5c 24 1c 	movzwl 0x1c(%esp),%ebx
     a7e:	66 01 db             	add    %ebx,%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:8
    write_memory_byte(_address+_offset, c);
     a81:	67 66 8d 83 00 80 0b 	lea    0xb8000(%ebx),%eax
     a88:	00 
     a89:	67 66 0f b6 54 24 18 	movzbl 0x18(%esp),%edx
     a90:	66 52                	push   %edx
     a92:	66 50                	push   %eax
     a94:	66 e8 92 09 00 00    	calll  142c <write_memory_byte>
/mnt/e/code/my_operating_system/os/lib/stdio.c:9
    write_memory_byte(_address+_offset+1, 0x1f);
     a9a:	66 81 c3 01 80 0b 00 	add    $0xb8001,%ebx
     aa1:	66 83 c4 08          	add    $0x8,%esp
     aa5:	66 6a 1f             	pushl  $0x1f
     aa8:	66 53                	push   %ebx
     aaa:	66 e8 7c 09 00 00    	calll  142c <write_memory_byte>
/mnt/e/code/my_operating_system/os/lib/stdio.c:11
    return ;
}
     ab0:	66 83 c4 18          	add    $0x18,%esp
     ab4:	66 5b                	pop    %ebx
     ab6:	66 c3                	retl   

00000ab8 <set_cursor>:
set_cursor():
/mnt/e/code/my_operating_system/os/lib/stdio.c:13

void set_cursor(u16 cursor_index){
     ab8:	66 56                	push   %esi
     aba:	66 53                	push   %ebx
     abc:	66 83 ec 0c          	sub    $0xc,%esp
     ac0:	67 66 8b 5c 24 18    	mov    0x18(%esp),%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:16
    // short cursor_index = 80 * row + column;     // 计算光标寄存器的值
    u8 low_eight = cursor_index; // 取低八位，高位被截断
    u8 high_eight = cursor_index >> 8; // 取高八位
     ac6:	66 89 d8             	mov    %ebx,%eax
     ac9:	c1 e8 08             	shr    $0x8,%ax
     acc:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/lib/stdio.c:17
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     acf:	66 6a 0e             	pushl  $0xe
     ad2:	66 68 d4 03 00 00    	pushl  $0x3d4
     ad8:	66 e8 02 09 00 00    	calll  13e0 <write_port_byte>
/mnt/e/code/my_operating_system/os/lib/stdio.c:18
    write_port_byte(0x3d5, high_eight);// 将光标索引高八位写入端口
     ade:	66 83 c4 08          	add    $0x8,%esp
     ae2:	66 89 f0             	mov    %esi,%eax
     ae5:	66 0f b6 f0          	movzbl %al,%esi
     ae9:	66 56                	push   %esi
     aeb:	66 68 d5 03 00 00    	pushl  $0x3d5
     af1:	66 e8 e9 08 00 00    	calll  13e0 <write_port_byte>
/mnt/e/code/my_operating_system/os/lib/stdio.c:19
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     af7:	66 83 c4 08          	add    $0x8,%esp
     afb:	66 6a 0f             	pushl  $0xf
     afe:	66 68 d4 03 00 00    	pushl  $0x3d4
     b04:	66 e8 d6 08 00 00    	calll  13e0 <write_port_byte>
/mnt/e/code/my_operating_system/os/lib/stdio.c:20
    write_port_byte(0x3d5, low_eight);// 将光标索引低八位写入端口
     b0a:	66 83 c4 08          	add    $0x8,%esp
     b0e:	66 0f b6 db          	movzbl %bl,%ebx
     b12:	66 53                	push   %ebx
     b14:	66 68 d5 03 00 00    	pushl  $0x3d5
     b1a:	66 e8 c0 08 00 00    	calll  13e0 <write_port_byte>
/mnt/e/code/my_operating_system/os/lib/stdio.c:22
    return ;
}
     b20:	66 83 c4 14          	add    $0x14,%esp
     b24:	66 5b                	pop    %ebx
     b26:	66 5e                	pop    %esi
     b28:	66 c3                	retl   

00000b2a <get_cursor>:
get_cursor():
/mnt/e/code/my_operating_system/os/lib/stdio.c:24

u16 get_cursor(){
     b2a:	66 53                	push   %ebx
     b2c:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:27
    u8 low_eight = 0, high_eight = 0;
    u16 cursor_index = 0;
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     b30:	66 6a 0e             	pushl  $0xe
     b33:	66 68 d4 03 00 00    	pushl  $0x3d4
     b39:	66 e8 a1 08 00 00    	calll  13e0 <write_port_byte>
/mnt/e/code/my_operating_system/os/lib/stdio.c:28
    high_eight = read_port_byte(0x3d5);// 将光标索引高八位写入端口
     b3f:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     b46:	00 00 
     b48:	66 e8 ba 08 00 00    	calll  1408 <read_port_byte>
     b4e:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:29
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     b51:	66 83 c4 08          	add    $0x8,%esp
     b55:	66 6a 0f             	pushl  $0xf
     b58:	66 68 d4 03 00 00    	pushl  $0x3d4
     b5e:	66 e8 7c 08 00 00    	calll  13e0 <write_port_byte>
/mnt/e/code/my_operating_system/os/lib/stdio.c:30
    low_eight = read_port_byte(0x3d5);// 将光标索引低八位写入端口
     b64:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     b6b:	00 00 
     b6d:	66 e8 95 08 00 00    	calll  1408 <read_port_byte>
/mnt/e/code/my_operating_system/os/lib/stdio.c:32
    cursor_index = high_eight;
    cursor_index = (cursor_index << 8) + low_eight;
     b73:	66 c1 e3 08          	shl    $0x8,%ebx
     b77:	66 0f b6 c0          	movzbl %al,%eax
     b7b:	66 01 d8             	add    %ebx,%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:34
    return cursor_index;
}
     b7e:	66 83 c4 18          	add    $0x18,%esp
     b82:	66 5b                	pop    %ebx
     b84:	66 c3                	retl   

00000b86 <putc>:
putc():
/mnt/e/code/my_operating_system/os/lib/stdio.c:36

void putc(char c){
     b86:	66 57                	push   %edi
     b88:	66 56                	push   %esi
     b8a:	66 53                	push   %ebx
     b8c:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:37
    u16 cursor_index = get_cursor();
     b92:	66 e8 92 ff ff ff    	calll  b2a <get_cursor>
     b98:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/lib/stdio.c:38
    u16 row = cursor_index / 80;
     b9b:	66 0f b7 d8          	movzwl %ax,%ebx
     b9f:	66 69 db cd cc 00 00 	imul   $0xcccd,%ebx,%ebx
     ba6:	66 c1 eb 10          	shr    $0x10,%ebx
     baa:	c1 eb 06             	shr    $0x6,%bx
/mnt/e/code/my_operating_system/os/lib/stdio.c:40
    u16 col = cursor_index % 80;
    if (cursor_index >= 1920){
     bad:	3d 7f 07             	cmp    $0x77f,%ax
     bb0:	76 0c                	jbe    bbe <putc+0x38>
/mnt/e/code/my_operating_system/os/lib/stdio.c:41
        scroll_screen();
     bb2:	66 e8 f4 08 00 00    	calll  14ac <scroll_screen>
/mnt/e/code/my_operating_system/os/lib/stdio.c:42
        cursor_index = 1840;
     bb8:	66 be 30 07 00 00    	mov    $0x730,%esi
/mnt/e/code/my_operating_system/os/lib/stdio.c:44
    }
    switch (c) {
     bbe:	66 89 f8             	mov    %edi,%eax
     bc1:	3c 0a                	cmp    $0xa,%al
     bc3:	74 06                	je     bcb <putc+0x45>
     bc5:	3c 0d                	cmp    $0xd,%al
     bc7:	74 25                	je     bee <putc+0x68>
     bc9:	eb 45                	jmp    c10 <putc+0x8a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:46
        case '\n':
            set_cursor((row+1)*80); // 回车，移到下一行
     bcb:	66 83 ec 0c          	sub    $0xc,%esp
     bcf:	67 66 8d 5c 9b 05    	lea    0x5(%ebx,%ebx,4),%ebx
     bd5:	66 89 d8             	mov    %ebx,%eax
     bd8:	66 c1 e0 04          	shl    $0x4,%eax
     bdc:	66 0f b7 c0          	movzwl %ax,%eax
     be0:	66 50                	push   %eax
     be2:	66 e8 d0 fe ff ff    	calll  ab8 <set_cursor>
/mnt/e/code/my_operating_system/os/lib/stdio.c:47
            break;
     be8:	66 83 c4 10          	add    $0x10,%esp
     bec:	eb 52                	jmp    c40 <putc+0xba>
/mnt/e/code/my_operating_system/os/lib/stdio.c:49
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     bee:	66 83 ec 0c          	sub    $0xc,%esp
     bf2:	67 66 8d 1c 9b       	lea    (%ebx,%ebx,4),%ebx
     bf7:	66 89 d8             	mov    %ebx,%eax
     bfa:	66 c1 e0 04          	shl    $0x4,%eax
     bfe:	66 0f b7 c0          	movzwl %ax,%eax
     c02:	66 50                	push   %eax
     c04:	66 e8 ae fe ff ff    	calll  ab8 <set_cursor>
/mnt/e/code/my_operating_system/os/lib/stdio.c:50
            break;
     c0a:	66 83 c4 10          	add    $0x10,%esp
     c0e:	eb 30                	jmp    c40 <putc+0xba>
/mnt/e/code/my_operating_system/os/lib/stdio.c:52
        default:
            _put_char(c, cursor_index);
     c10:	66 83 ec 08          	sub    $0x8,%esp
     c14:	66 0f b7 c6          	movzwl %si,%eax
     c18:	66 50                	push   %eax
     c1a:	66 89 f8             	mov    %edi,%eax
     c1d:	66 0f be f8          	movsbl %al,%edi
     c21:	66 57                	push   %edi
     c23:	66 e8 48 fe ff ff    	calll  a71 <_put_char>
/mnt/e/code/my_operating_system/os/lib/stdio.c:53
            set_cursor(cursor_index+1);
     c29:	66 83 c6 01          	add    $0x1,%esi
     c2d:	66 0f b7 f6          	movzwl %si,%esi
     c31:	67 66 89 34 24       	mov    %esi,(%esp)
     c36:	66 e8 7c fe ff ff    	calll  ab8 <set_cursor>
/mnt/e/code/my_operating_system/os/lib/stdio.c:54
            break;
     c3c:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:57
    }
    return ;
}
     c40:	66 5b                	pop    %ebx
     c42:	66 5e                	pop    %esi
     c44:	66 5f                	pop    %edi
     c46:	66 c3                	retl   

00000c48 <_putc>:
_putc():
/mnt/e/code/my_operating_system/os/lib/stdio.c:59

void _putc(char c){
     c48:	66 56                	push   %esi
     c4a:	66 53                	push   %ebx
     c4c:	66 83 ec 04          	sub    $0x4,%esp
     c50:	67 66 8b 5c 24 10    	mov    0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:60
    u16 cursor_index = get_cursor();
     c56:	66 e8 ce fe ff ff    	calll  b2a <get_cursor>
/mnt/e/code/my_operating_system/os/lib/stdio.c:61
    u16 row = cursor_index / 80;
     c5c:	66 0f b7 d0          	movzwl %ax,%edx
     c60:	66 69 d2 cd cc 00 00 	imul   $0xcccd,%edx,%edx
     c67:	66 c1 ea 10          	shr    $0x10,%edx
     c6b:	c1 ea 06             	shr    $0x6,%dx
/mnt/e/code/my_operating_system/os/lib/stdio.c:62
    u16 col = cursor_index % 80;
     c6e:	67 66 8d 34 92       	lea    (%edx,%edx,4),%esi
     c73:	66 c1 e6 04          	shl    $0x4,%esi
     c77:	66 89 f1             	mov    %esi,%ecx
     c7a:	66 89 c6             	mov    %eax,%esi
     c7d:	66 29 ce             	sub    %ecx,%esi
/mnt/e/code/my_operating_system/os/lib/stdio.c:63
    switch (c) {
     c80:	80 fb 0a             	cmp    $0xa,%bl
     c83:	74 07                	je     c8c <_putc+0x44>
     c85:	80 fb 0d             	cmp    $0xd,%bl
     c88:	74 2b                	je     cb5 <_putc+0x6d>
     c8a:	eb 4b                	jmp    cd7 <_putc+0x8f>
     c8c:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/lib/stdio.c:65
        case '\n':
            set_cursor((row+1)*80+col); // 回车，移到下一行
     c8f:	66 83 ec 0c          	sub    $0xc,%esp
     c93:	67 66 8d 54 92 05    	lea    0x5(%edx,%edx,4),%edx
     c99:	66 89 d0             	mov    %edx,%eax
     c9c:	66 c1 e0 04          	shl    $0x4,%eax
     ca0:	66 01 c1             	add    %eax,%ecx
     ca3:	66 0f b7 c9          	movzwl %cx,%ecx
     ca7:	66 51                	push   %ecx
     ca9:	66 e8 09 fe ff ff    	calll  ab8 <set_cursor>
/mnt/e/code/my_operating_system/os/lib/stdio.c:66
            break;
     caf:	66 83 c4 10          	add    $0x10,%esp
     cb3:	eb 3c                	jmp    cf1 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/lib/stdio.c:68
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     cb5:	66 83 ec 0c          	sub    $0xc,%esp
     cb9:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     cbe:	66 89 d0             	mov    %edx,%eax
     cc1:	66 c1 e0 04          	shl    $0x4,%eax
     cc5:	66 0f b7 c0          	movzwl %ax,%eax
     cc9:	66 50                	push   %eax
     ccb:	66 e8 e7 fd ff ff    	calll  ab8 <set_cursor>
/mnt/e/code/my_operating_system/os/lib/stdio.c:69
            break;
     cd1:	66 83 c4 10          	add    $0x10,%esp
     cd5:	eb 1a                	jmp    cf1 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/lib/stdio.c:71
        default:
            _put_char(c, cursor_index);
     cd7:	66 83 ec 08          	sub    $0x8,%esp
     cdb:	66 0f b7 c0          	movzwl %ax,%eax
     cdf:	66 50                	push   %eax
     ce1:	66 0f be db          	movsbl %bl,%ebx
     ce5:	66 53                	push   %ebx
     ce7:	66 e8 84 fd ff ff    	calll  a71 <_put_char>
/mnt/e/code/my_operating_system/os/lib/stdio.c:73
            // set_cursor(cursor_index+1);
            break;
     ced:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:76
    }
    return ;
}
     cf1:	66 83 c4 04          	add    $0x4,%esp
     cf5:	66 5b                	pop    %ebx
     cf7:	66 5e                	pop    %esi
     cf9:	66 c3                	retl   

00000cfb <puti>:
puti():
/mnt/e/code/my_operating_system/os/lib/stdio.c:78

void puti(u32 n){
     cfb:	66 56                	push   %esi
     cfd:	66 53                	push   %ebx
     cff:	66 83 ec 44          	sub    $0x44,%esp
     d03:	67 66 8b 4c 24 50    	mov    0x50(%esp),%ecx
/mnt/e/code/my_operating_system/os/lib/stdio.c:79
    int len = 0;
     d09:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:81
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     d0f:	eb 2d                	jmp    d3e <puti+0x43>
/mnt/e/code/my_operating_system/os/lib/stdio.c:82
        num[len] = n % 10;
     d11:	66 ba cd cc cc cc    	mov    $0xcccccccd,%edx
     d17:	66 89 c8             	mov    %ecx,%eax
     d1a:	66 f7 e2             	mul    %edx
     d1d:	66 c1 ea 03          	shr    $0x3,%edx
     d21:	66 89 d6             	mov    %edx,%esi
     d24:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     d29:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     d2e:	66 29 c1             	sub    %eax,%ecx
     d31:	67 66 89 4c 9c 04    	mov    %ecx,0x4(%esp,%ebx,4)
/mnt/e/code/my_operating_system/os/lib/stdio.c:83
        n = n / 10;
     d37:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/lib/stdio.c:84
        len++;
     d3a:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:81
}

void puti(u32 n){
    int len = 0;
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     d3e:	66 85 c9             	test   %ecx,%ecx
     d41:	75 ce                	jne    d11 <puti+0x16>
/mnt/e/code/my_operating_system/os/lib/stdio.c:86
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     d43:	66 83 eb 01          	sub    $0x1,%ebx
     d47:	eb 23                	jmp    d6c <puti+0x71>
/mnt/e/code/my_operating_system/os/lib/stdio.c:87 (discriminator 3)
        putc(num[i]+'0');
     d49:	66 83 ec 0c          	sub    $0xc,%esp
     d4d:	67 66 0f b6 44 9c 10 	movzbl 0x10(%esp,%ebx,4),%eax
     d54:	66 83 c0 30          	add    $0x30,%eax
     d58:	66 0f be c0          	movsbl %al,%eax
     d5c:	66 50                	push   %eax
     d5e:	66 e8 22 fe ff ff    	calll  b86 <putc>
/mnt/e/code/my_operating_system/os/lib/stdio.c:86 (discriminator 3)
    while (n != 0){
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     d64:	66 83 eb 01          	sub    $0x1,%ebx
     d68:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:86 (discriminator 1)
     d6c:	66 85 db             	test   %ebx,%ebx
     d6f:	79 d8                	jns    d49 <puti+0x4e>
/mnt/e/code/my_operating_system/os/lib/stdio.c:90
        putc(num[i]+'0');
    }
    return ;
}
     d71:	66 83 c4 44          	add    $0x44,%esp
     d75:	66 5b                	pop    %ebx
     d77:	66 5e                	pop    %esi
     d79:	66 c3                	retl   

00000d7b <puts>:
puts():
/mnt/e/code/my_operating_system/os/lib/stdio.c:92

void puts(char * str, int size){
     d7b:	66 57                	push   %edi
     d7d:	66 56                	push   %esi
     d7f:	66 53                	push   %ebx
     d81:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
     d87:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/lib/stdio.c:93
    int i = 0;
     d8d:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:94
    while (i < size){
     d93:	eb 1a                	jmp    daf <puts+0x34>
/mnt/e/code/my_operating_system/os/lib/stdio.c:95
        putc(str[i]);
     d95:	66 83 ec 0c          	sub    $0xc,%esp
     d99:	67 66 0f be 04 1f    	movsbl (%edi,%ebx,1),%eax
     d9f:	66 50                	push   %eax
     da1:	66 e8 df fd ff ff    	calll  b86 <putc>
/mnt/e/code/my_operating_system/os/lib/stdio.c:96
        i++;
     da7:	66 83 c3 01          	add    $0x1,%ebx
     dab:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:94
    return ;
}

void puts(char * str, int size){
    int i = 0;
    while (i < size){
     daf:	66 39 f3             	cmp    %esi,%ebx
     db2:	7c e1                	jl     d95 <puts+0x1a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:99
        putc(str[i]);
        i++;
    }
    return ;
}
     db4:	66 5b                	pop    %ebx
     db6:	66 5e                	pop    %esi
     db8:	66 5f                	pop    %edi
     dba:	66 c3                	retl   

00000dbc <sprintf>:
sprintf():
/mnt/e/code/my_operating_system/os/lib/stdio.c:103



void sprintf(char * dest , char * format, ...){
     dbc:	66 55                	push   %ebp
     dbe:	66 57                	push   %edi
     dc0:	66 56                	push   %esi
     dc2:	66 53                	push   %ebx
     dc4:	66 83 ec 5c          	sub    $0x5c,%esp
     dc8:	67 66 8b 6c 24 70    	mov    0x70(%esp),%ebp
/mnt/e/code/my_operating_system/os/lib/stdio.c:106
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     dce:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:105



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     dd4:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:104
}



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
     dda:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/lib/stdio.c:108
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     de0:	e9 33 01             	jmp    f16 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:109
        if (format[src_index] == '%'){
     de3:	3c 25                	cmp    $0x25,%al
     de5:	0f 85 1b 01          	jne    f04 <sprintf+0x148>
/mnt/e/code/my_operating_system/os/lib/stdio.c:111
            src_index++;
            switch(format[src_index]){
     de9:	67 66 0f b6 44 39 01 	movzbl 0x1(%ecx,%edi,1),%eax
     df0:	3c 64                	cmp    $0x64,%al
     df2:	74 28                	je     e1c <sprintf+0x60>
     df4:	3c 73                	cmp    $0x73,%al
     df6:	0f 84 b5 00          	je     eaf <sprintf+0xf3>
     dfa:	3c 63                	cmp    $0x63,%al
     dfc:	0f 85 fe 00          	jne    efe <sprintf+0x142>
/mnt/e/code/my_operating_system/os/lib/stdio.c:113
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     e00:	67 66 8b 44 94 78    	mov    0x78(%esp,%edx,4),%eax
     e06:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/lib/stdio.c:114
                    src_index++;
     e0b:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:113
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     e0f:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     e14:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/lib/stdio.c:115
                    src_index++;
                    break;
     e19:	e9 fa 00             	jmp    f16 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:118
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     e1c:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     e21:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     e27:	67 66 8b 4c 94 78    	mov    0x78(%esp,%edx,4),%ecx
/mnt/e/code/my_operating_system/os/lib/stdio.c:119
                    int len = 0; 
     e2d:	66 be 00 00 00 00    	mov    $0x0,%esi
     e33:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/lib/stdio.c:121
                    int num[INT_LENGTH];
                    while (n != 0){
     e39:	eb 37                	jmp    e72 <sprintf+0xb6>
/mnt/e/code/my_operating_system/os/lib/stdio.c:122
                        num[len] = n % 10;
     e3b:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     e41:	66 89 c8             	mov    %ecx,%eax
     e44:	66 f7 ea             	imul   %edx
     e47:	66 c1 fa 02          	sar    $0x2,%edx
     e4b:	66 89 c8             	mov    %ecx,%eax
     e4e:	66 c1 f8 1f          	sar    $0x1f,%eax
     e52:	66 29 c2             	sub    %eax,%edx
     e55:	66 89 d7             	mov    %edx,%edi
     e58:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     e5d:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     e62:	66 29 c1             	sub    %eax,%ecx
     e65:	67 66 89 4c b4 14    	mov    %ecx,0x14(%esp,%esi,4)
/mnt/e/code/my_operating_system/os/lib/stdio.c:123
                        n = n / 10;
     e6b:	66 89 f9             	mov    %edi,%ecx
/mnt/e/code/my_operating_system/os/lib/stdio.c:124
                        len++;
     e6e:	66 83 c6 01          	add    $0x1,%esi
/mnt/e/code/my_operating_system/os/lib/stdio.c:121
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     e72:	66 85 c9             	test   %ecx,%ecx
     e75:	75 c4                	jne    e3b <sprintf+0x7f>
     e77:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:126
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     e7d:	67 66 8d 46 ff       	lea    -0x1(%esi),%eax
     e82:	eb 1a                	jmp    e9e <sprintf+0xe2>
/mnt/e/code/my_operating_system/os/lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     e84:	67 66 0f b6 74 84 14 	movzbl 0x14(%esp,%eax,4),%esi
     e8b:	67 66 8d 56 30       	lea    0x30(%esi),%edx
     e90:	67 88 54 1d 00       	mov    %dl,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/lib/stdio.c:126 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     e95:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     e99:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:126 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     e9e:	66 85 c0             	test   %eax,%eax
     ea1:	79 e1                	jns    e84 <sprintf+0xc8>
/mnt/e/code/my_operating_system/os/lib/stdio.c:129
                        dest[des_index++] = num[i]+'0';
                    }
                    src_index++;
     ea3:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:118
                    dest[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     ea7:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     ead:	eb 67                	jmp    f16 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     eaf:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     eb4:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     eba:	67 66 8b 74 94 78    	mov    0x78(%esp,%edx,4),%esi
/mnt/e/code/my_operating_system/os/lib/stdio.c:134
                    u32 str_len = strlen(str);
     ec0:	66 83 ec 0c          	sub    $0xc,%esp
     ec4:	66 56                	push   %esi
     ec6:	66 e8 80 06 00 00    	calll  154c <strlen>
/mnt/e/code/my_operating_system/os/lib/stdio.c:136
                    u32 i = 0;
                    while (i < str_len){
     ecc:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:135
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
     ed0:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/lib/stdio.c:136
                    while (i < str_len){
     ed6:	eb 15                	jmp    eed <sprintf+0x131>
/mnt/e/code/my_operating_system/os/lib/stdio.c:137
                        dest[des_index++] = str[i++];
     ed8:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
     ede:	67 88 4c 1d 00       	mov    %cl,0x0(%ebp,%ebx,1)
     ee3:	67 66 8d 52 01       	lea    0x1(%edx),%edx
     ee8:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:136
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
     eed:	66 39 c2             	cmp    %eax,%edx
     ef0:	72 e6                	jb     ed8 <sprintf+0x11c>
/mnt/e/code/my_operating_system/os/lib/stdio.c:139
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
     ef2:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     ef6:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/lib/stdio.c:140
                    u32 i = 0;
                    while (i < str_len){
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
     efc:	eb 18                	jmp    f16 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:143
                }
                default :
                    src_index++;
     efe:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:144
                    break;
     f02:	eb 12                	jmp    f16 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:147
            }
        }
        else if (format[src_index] == '\\') {
     f04:	3c 5c                	cmp    $0x5c,%al
     f06:	74 0e                	je     f16 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:166
                        break;
                }
            }
        }
        else {
            dest[des_index++] = format[src_index++];
     f08:	66 83 c7 01          	add    $0x1,%edi
     f0c:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
     f11:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:108
void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     f16:	67 66 8b 4c 24 74    	mov    0x74(%esp),%ecx
     f1c:	67 66 0f b6 04 39    	movzbl (%ecx,%edi,1),%eax
     f22:	84 c0                	test   %al,%al
     f24:	0f 85 bb fe          	jne    de3 <sprintf+0x27>
/mnt/e/code/my_operating_system/os/lib/stdio.c:169
        }
        else {
            dest[des_index++] = format[src_index++];
        }
    }
    dest[des_index] = 0;
     f28:	67 c6 44 1d 00 00    	movb   $0x0,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/lib/stdio.c:171
    return ;
}
     f2e:	66 83 c4 5c          	add    $0x5c,%esp
     f32:	66 5b                	pop    %ebx
     f34:	66 5e                	pop    %esi
     f36:	66 5f                	pop    %edi
     f38:	66 5d                	pop    %ebp
     f3a:	66 c3                	retl   

00000f3c <vprintf>:
vprintf():
/mnt/e/code/my_operating_system/os/lib/stdio.c:174


void vprintf(char * format, va_list va){
     f3c:	66 55                	push   %ebp
     f3e:	66 57                	push   %edi
     f40:	66 56                	push   %esi
     f42:	66 53                	push   %ebx
     f44:	66 81 ec 5c 04 00 00 	sub    $0x45c,%esp
     f4b:	67 66 8b ac 24 70 04 	mov    0x470(%esp),%ebp
     f52:	00 00 
/mnt/e/code/my_operating_system/os/lib/stdio.c:178
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     f54:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:177


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     f5a:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:176
}


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
     f60:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/lib/stdio.c:180
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     f66:	e9 4c 01             	jmp    10b5 <core_header_data_segment+0xb5>
/mnt/e/code/my_operating_system/os/lib/stdio.c:181
        if (format[src_index] == '%'){
     f69:	3c 25                	cmp    $0x25,%al
     f6b:	0f 85 34 01          	jne    10a3 <core_header_data_segment+0xa3>
/mnt/e/code/my_operating_system/os/lib/stdio.c:183
            src_index++;
            switch(format[src_index]){
     f6f:	67 66 0f b6 44 3d 01 	movzbl 0x1(%ebp,%edi,1),%eax
     f76:	3c 64                	cmp    $0x64,%al
     f78:	74 30                	je     faa <vprintf+0x6e>
     f7a:	3c 73                	cmp    $0x73,%al
     f7c:	0f 84 c6 00          	je     1046 <core_header_data_segment+0x46>
     f80:	3c 63                	cmp    $0x63,%al
     f82:	0f 85 17 01          	jne    109d <core_header_data_segment+0x9d>
/mnt/e/code/my_operating_system/os/lib/stdio.c:185
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
     f86:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     f8d:	00 00 
     f8f:	67 66 8b 04 90       	mov    (%eax,%edx,4),%eax
     f94:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/lib/stdio.c:186
                    src_index++;
     f99:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:185
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
     f9d:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     fa2:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/lib/stdio.c:187
                    src_index++;
                    break;
     fa7:	e9 0b 01             	jmp    10b5 <core_header_data_segment+0xb5>
/mnt/e/code/my_operating_system/os/lib/stdio.c:190
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     faa:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     faf:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     fb5:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     fbc:	00 00 
     fbe:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/lib/stdio.c:191
                    int len = 0; 
     fc3:	66 b9 00 00 00 00    	mov    $0x0,%ecx
     fc9:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/lib/stdio.c:193
                    int num[INT_LENGTH];
                    while (n != 0){
     fcf:	eb 3a                	jmp    100b <core_header_data_segment+0xb>
/mnt/e/code/my_operating_system/os/lib/stdio.c:194
                        num[len] = n % 10;
     fd1:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     fd7:	66 89 f0             	mov    %esi,%eax
     fda:	66 f7 ea             	imul   %edx
     fdd:	66 c1 fa 02          	sar    $0x2,%edx
     fe1:	66 89 f0             	mov    %esi,%eax
     fe4:	66 c1 f8 1f          	sar    $0x1f,%eax
     fe8:	66 29 c2             	sub    %eax,%edx
     feb:	66 89 d7             	mov    %edx,%edi
     fee:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     ff3:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     ff8:	66 89 f2             	mov    %esi,%edx
     ffb:	66 29 c2             	sub    %eax,%edx
     ffe:	67 66 89 54 8c 14    	mov    %edx,0x14(%esp,%ecx,4)
/mnt/e/code/my_operating_system/os/lib/stdio.c:195
                        n = n / 10;
    1004:	66 89 fe             	mov    %edi,%esi
/mnt/e/code/my_operating_system/os/lib/stdio.c:196
                        len++;
    1007:	66 83 c1 01          	add    $0x1,%ecx
/mnt/e/code/my_operating_system/os/lib/stdio.c:193
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
    100b:	66 85 f6             	test   %esi,%esi
    100e:	75 c1                	jne    fd1 <vprintf+0x95>
    1010:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:198
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1016:	66 83 e9 01          	sub    $0x1,%ecx
    101a:	eb 19                	jmp    1035 <core_header_data_segment+0x35>
/mnt/e/code/my_operating_system/os/lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    101c:	67 66 0f b6 44 8c 14 	movzbl 0x14(%esp,%ecx,4),%eax
    1023:	66 83 c0 30          	add    $0x30,%eax
    1027:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/lib/stdio.c:198 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    102c:	66 83 e9 01          	sub    $0x1,%ecx
/mnt/e/code/my_operating_system/os/lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    1030:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:198 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1035:	66 85 c9             	test   %ecx,%ecx
    1038:	79 e2                	jns    101c <core_header_data_segment+0x1c>
/mnt/e/code/my_operating_system/os/lib/stdio.c:201
                        buf[des_index++] = num[i]+'0';
                    }
                    src_index++;
    103a:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:190
                    buf[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    103e:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    1044:	eb 6f                	jmp    10b5 <core_header_data_segment+0xb5>
/mnt/e/code/my_operating_system/os/lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    1046:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    104b:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    1051:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    1058:	00 00 
    105a:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/lib/stdio.c:206
                    u32 str_len = strlen(str);
    105f:	66 83 ec 0c          	sub    $0xc,%esp
    1063:	66 56                	push   %esi
    1065:	66 e8 e1 04 00 00    	calll  154c <strlen>
/mnt/e/code/my_operating_system/os/lib/stdio.c:208
                    u32 i = 0;
                    while (i < str_len){
    106b:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:207
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    106f:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/lib/stdio.c:208
                    while (i < str_len){
    1075:	eb 15                	jmp    108c <core_header_data_segment+0x8c>
/mnt/e/code/my_operating_system/os/lib/stdio.c:209
                        buf[des_index++] = str[i++];
    1077:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    107d:	67 88 4c 1c 50       	mov    %cl,0x50(%esp,%ebx,1)
    1082:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    1087:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:208
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    108c:	66 39 c2             	cmp    %eax,%edx
    108f:	72 e6                	jb     1077 <core_header_data_segment+0x77>
/mnt/e/code/my_operating_system/os/lib/stdio.c:211
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
    1091:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    1095:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/lib/stdio.c:212
                    u32 i = 0;
                    while (i < str_len){
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    109b:	eb 18                	jmp    10b5 <core_header_data_segment+0xb5>
/mnt/e/code/my_operating_system/os/lib/stdio.c:215
                }
                default :
                    src_index++;
    109d:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/lib/stdio.c:216
                    break;
    10a1:	eb 12                	jmp    10b5 <core_header_data_segment+0xb5>
/mnt/e/code/my_operating_system/os/lib/stdio.c:219
            }
        }
        else if (format[src_index] == '\\') {
    10a3:	3c 5c                	cmp    $0x5c,%al
    10a5:	74 0e                	je     10b5 <core_header_data_segment+0xb5>
/mnt/e/code/my_operating_system/os/lib/stdio.c:238
                        break;
                }
            }
        }
        else {
            buf[des_index++] = format[src_index++];
    10a7:	66 83 c7 01          	add    $0x1,%edi
    10ab:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
    10b0:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:180
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    10b5:	67 66 0f b6 44 3d 00 	movzbl 0x0(%ebp,%edi,1),%eax
    10bc:	84 c0                	test   %al,%al
    10be:	0f 85 a7 fe          	jne    f69 <vprintf+0x2d>
/mnt/e/code/my_operating_system/os/lib/stdio.c:241
        }
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    10c2:	67 c6 44 1c 50 00    	movb   $0x0,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/lib/stdio.c:242
    for (int i = 0; i < des_index; i++){
    10c8:	66 be 00 00 00 00    	mov    $0x0,%esi
    10ce:	eb 1b                	jmp    10eb <core_header_data_segment+0xeb>
/mnt/e/code/my_operating_system/os/lib/stdio.c:243 (discriminator 3)
        putc(buf[i]);
    10d0:	66 83 ec 0c          	sub    $0xc,%esp
    10d4:	67 66 0f be 44 34 5c 	movsbl 0x5c(%esp,%esi,1),%eax
    10db:	66 50                	push   %eax
    10dd:	66 e8 a3 fa ff ff    	calll  b86 <putc>
/mnt/e/code/my_operating_system/os/lib/stdio.c:242 (discriminator 3)
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    for (int i = 0; i < des_index; i++){
    10e3:	66 83 c6 01          	add    $0x1,%esi
    10e7:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:242 (discriminator 1)
    10eb:	66 39 f3             	cmp    %esi,%ebx
    10ee:	7f e0                	jg     10d0 <core_header_data_segment+0xd0>
/mnt/e/code/my_operating_system/os/lib/stdio.c:246
        putc(buf[i]);
    }
    return ;
}
    10f0:	66 81 c4 5c 04 00 00 	add    $0x45c,%esp
    10f7:	66 5b                	pop    %ebx
    10f9:	66 5e                	pop    %esi
    10fb:	66 5f                	pop    %edi
    10fd:	66 5d                	pop    %ebp
    10ff:	66 c3                	retl   

00001101 <printf>:
printf():
/mnt/e/code/my_operating_system/os/lib/stdio.c:248

void printf(char * format, ...){
    1101:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:249
    vprintf(format, &format+1);// 其实这里由于format是个指针，是32位的，所以这里对format的地址+1，也会加4个字节。
    1105:	67 66 8d 44 24 1c    	lea    0x1c(%esp),%eax
    110b:	66 50                	push   %eax
    110d:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    1113:	66 e8 23 fe ff ff    	calll  f3c <vprintf>
/mnt/e/code/my_operating_system/os/lib/stdio.c:251
    return ;
}
    1119:	66 83 c4 1c          	add    $0x1c,%esp
    111d:	66 c3                	retl   

0000111f <isalpha>:
isalpha():
/mnt/e/code/my_operating_system/os/lib/stdio.c:270
//     return ;
// }



int isalpha (int ch){
    111f:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:271
    if ('a' <= ch && ch <= 'z')
    1125:	67 66 8d 50 9f       	lea    -0x61(%eax),%edx
    112a:	66 83 fa 19          	cmp    $0x19,%edx
    112e:	76 12                	jbe    1142 <isalpha+0x23>
/mnt/e/code/my_operating_system/os/lib/stdio.c:273
        return 1;
    if ('A' <= ch && ch <= 'Z')
    1130:	66 83 e8 41          	sub    $0x41,%eax
    1134:	66 83 f8 19          	cmp    $0x19,%eax
    1138:	77 10                	ja     114a <isalpha+0x2b>
/mnt/e/code/my_operating_system/os/lib/stdio.c:274
        return 1;
    113a:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1140:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/lib/stdio.c:272



int isalpha (int ch){
    if ('a' <= ch && ch <= 'z')
        return 1;
    1142:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1148:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/lib/stdio.c:275
    if ('A' <= ch && ch <= 'Z')
        return 1;
    return 0;
    114a:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:276
}
    1150:	66 c3                	retl   

00001152 <isdigit>:
isdigit():
/mnt/e/code/my_operating_system/os/lib/stdio.c:278
int isdigit (int ch){
    if ('0' <= ch && ch <= '9')
    1152:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
    1158:	66 83 e8 30          	sub    $0x30,%eax
    115c:	66 83 f8 09          	cmp    $0x9,%eax
    1160:	77 08                	ja     116a <isdigit+0x18>
/mnt/e/code/my_operating_system/os/lib/stdio.c:279
        return 1;
    1162:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1168:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/lib/stdio.c:280
    return 0;
    116a:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:281
}
    1170:	66 c3                	retl   

00001172 <isalnum>:
isalnum():
/mnt/e/code/my_operating_system/os/lib/stdio.c:283

int isalnum (int ch){
    1172:	66 53                	push   %ebx
    1174:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:284
    if ( isalpha(ch) || isdigit(ch) ){
    117a:	66 53                	push   %ebx
    117c:	66 e8 9d ff ff ff    	calll  111f <isalpha>
    1182:	66 83 c4 04          	add    $0x4,%esp
    1186:	66 85 c0             	test   %eax,%eax
    1189:	75 13                	jne    119e <isalnum+0x2c>
/mnt/e/code/my_operating_system/os/lib/stdio.c:284 (discriminator 1)
    118b:	66 53                	push   %ebx
    118d:	66 e8 bf ff ff ff    	calll  1152 <isdigit>
    1193:	66 83 c4 04          	add    $0x4,%esp
    1197:	66 85 c0             	test   %eax,%eax
    119a:	75 0a                	jne    11a6 <isalnum+0x34>
    119c:	eb 0e                	jmp    11ac <isalnum+0x3a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:285
        return 1;
    119e:	66 b8 01 00 00 00    	mov    $0x1,%eax
    11a4:	eb 06                	jmp    11ac <isalnum+0x3a>
    11a6:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:288
    }
    return 0;
}
    11ac:	66 5b                	pop    %ebx
    11ae:	66 c3                	retl   

000011b0 <ispunct>:
ispunct():
/mnt/e/code/my_operating_system/os/lib/stdio.c:289
int ispunct (int ch){
    11b0:	66 83 ec 30          	sub    $0x30,%esp
    11b4:	67 66 8b 4c 24 34    	mov    0x34(%esp),%ecx
/mnt/e/code/my_operating_system/os/lib/stdio.c:290
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    11ba:	67 66 c7 44 24 0e 21 	movl   $0x24232221,0xe(%esp)
    11c1:	22 23 24 
    11c4:	67 66 c7 44 24 12 25 	movl   $0x28272625,0x12(%esp)
    11cb:	26 27 28 
    11ce:	67 66 c7 44 24 16 29 	movl   $0x2c2b2a29,0x16(%esp)
    11d5:	2a 2b 2c 
    11d8:	67 66 c7 44 24 1a 2d 	movl   $0x3a2f2e2d,0x1a(%esp)
    11df:	2e 2f 3a 
    11e2:	67 66 c7 44 24 1e 3b 	movl   $0x3e3d3c3b,0x1e(%esp)
    11e9:	3c 3d 3e 
    11ec:	67 66 c7 44 24 22 3f 	movl   $0x5c5b403f,0x22(%esp)
    11f3:	40 5b 5c 
    11f6:	67 66 c7 44 24 26 5d 	movl   $0x605f5e5d,0x26(%esp)
    11fd:	5e 5f 60 
    1200:	67 66 c7 44 24 2a 7b 	movl   $0x7e7d7c7b,0x2a(%esp)
    1207:	7c 7d 7e 
    120a:	67 c7 44 24 2e 00 00 	movw   $0x0,0x2e(%esp)
/mnt/e/code/my_operating_system/os/lib/stdio.c:291
    for (int i = 0; i < 33; i++){
    1211:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1217:	eb 10                	jmp    1229 <ispunct+0x79>
/mnt/e/code/my_operating_system/os/lib/stdio.c:292
        if (ch == punct[i])
    1219:	67 66 0f be 54 04 0e 	movsbl 0xe(%esp,%eax,1),%edx
    1220:	66 39 ca             	cmp    %ecx,%edx
    1223:	74 12                	je     1237 <ispunct+0x87>
/mnt/e/code/my_operating_system/os/lib/stdio.c:291 (discriminator 2)
    }
    return 0;
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
    1225:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:291 (discriminator 1)
    1229:	66 83 f8 20          	cmp    $0x20,%eax
    122d:	7e ea                	jle    1219 <ispunct+0x69>
/mnt/e/code/my_operating_system/os/lib/stdio.c:295
        if (ch == punct[i])
            return 1;
    }
    return 0;
    122f:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1235:	eb 06                	jmp    123d <ispunct+0x8d>
/mnt/e/code/my_operating_system/os/lib/stdio.c:293
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
        if (ch == punct[i])
            return 1;
    1237:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:296
    }
    return 0;
}
    123d:	66 83 c4 30          	add    $0x30,%esp
    1241:	66 c3                	retl   

00001243 <isblank>:
isblank():
/mnt/e/code/my_operating_system/os/lib/stdio.c:298
int isblank (int ch){
    if (ch == ' ')
    1243:	67 66 83 7c 24 04 20 	cmpl   $0x20,0x4(%esp)
    124a:	75 08                	jne    1254 <isblank+0x11>
/mnt/e/code/my_operating_system/os/lib/stdio.c:299
        return 1;
    124c:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1252:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/lib/stdio.c:300
    return 0;
    1254:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:301
}
    125a:	66 c3                	retl   

0000125c <isprint>:
isprint():
/mnt/e/code/my_operating_system/os/lib/stdio.c:302
int isprint (int ch){
    125c:	66 53                	push   %ebx
    125e:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/lib/stdio.c:303
    if (isalpha(ch) || isdigit(ch) || isalnum(ch) || ispunct(ch) || isblank(ch)){
    1264:	66 53                	push   %ebx
    1266:	66 e8 b3 fe ff ff    	calll  111f <isalpha>
    126c:	66 83 c4 04          	add    $0x4,%esp
    1270:	66 85 c0             	test   %eax,%eax
    1273:	75 46                	jne    12bb <isprint+0x5f>
/mnt/e/code/my_operating_system/os/lib/stdio.c:303 (discriminator 1)
    1275:	66 53                	push   %ebx
    1277:	66 e8 d5 fe ff ff    	calll  1152 <isdigit>
    127d:	66 83 c4 04          	add    $0x4,%esp
    1281:	66 85 c0             	test   %eax,%eax
    1284:	75 3d                	jne    12c3 <isprint+0x67>
/mnt/e/code/my_operating_system/os/lib/stdio.c:303 (discriminator 2)
    1286:	66 53                	push   %ebx
    1288:	66 e8 e4 fe ff ff    	calll  1172 <isalnum>
    128e:	66 83 c4 04          	add    $0x4,%esp
    1292:	66 85 c0             	test   %eax,%eax
    1295:	75 34                	jne    12cb <isprint+0x6f>
/mnt/e/code/my_operating_system/os/lib/stdio.c:303 (discriminator 3)
    1297:	66 53                	push   %ebx
    1299:	66 e8 11 ff ff ff    	calll  11b0 <ispunct>
    129f:	66 83 c4 04          	add    $0x4,%esp
    12a3:	66 85 c0             	test   %eax,%eax
    12a6:	75 2b                	jne    12d3 <isprint+0x77>
/mnt/e/code/my_operating_system/os/lib/stdio.c:303 (discriminator 4)
    12a8:	66 53                	push   %ebx
    12aa:	66 e8 93 ff ff ff    	calll  1243 <isblank>
    12b0:	66 83 c4 04          	add    $0x4,%esp
    12b4:	66 85 c0             	test   %eax,%eax
    12b7:	75 22                	jne    12db <isprint+0x7f>
    12b9:	eb 26                	jmp    12e1 <isprint+0x85>
/mnt/e/code/my_operating_system/os/lib/stdio.c:304
        return 1;
    12bb:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12c1:	eb 1e                	jmp    12e1 <isprint+0x85>
    12c3:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12c9:	eb 16                	jmp    12e1 <isprint+0x85>
    12cb:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12d1:	eb 0e                	jmp    12e1 <isprint+0x85>
    12d3:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12d9:	eb 06                	jmp    12e1 <isprint+0x85>
    12db:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:307
    }
    return 0;
}
    12e1:	66 5b                	pop    %ebx
    12e3:	66 c3                	retl   

000012e5 <iscntrl>:
iscntrl():
/mnt/e/code/my_operating_system/os/lib/stdio.c:308
int iscntrl (int ch){
    12e5:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:310
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
    12eb:	66 83 f8 1f          	cmp    $0x1f,%eax
    12ef:	76 0e                	jbe    12ff <iscntrl+0x1a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:312
        return 1;
    if (ch == 0x7f)
    12f1:	66 83 f8 7f          	cmp    $0x7f,%eax
    12f5:	75 10                	jne    1307 <iscntrl+0x22>
/mnt/e/code/my_operating_system/os/lib/stdio.c:313
        return 1;
    12f7:	66 b8 01 00 00 00    	mov    $0x1,%eax
    12fd:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/lib/stdio.c:311
    return 0;
}
int iscntrl (int ch){
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
        return 1;
    12ff:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1305:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/lib/stdio.c:314
    if (ch == 0x7f)
        return 1;
    return 0;
    1307:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/lib/stdio.c:315
}
    130d:	66 c3                	retl   

0000130f <read_n_sector>:
read_n_sector():
/mnt/e/code/my_operating_system/os/lib/stdio.c:321

/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    130f:	66 55                	push   %ebp
    1311:	66 57                	push   %edi
    1313:	66 56                	push   %esi
    1315:	66 53                	push   %ebx
    1317:	66 83 ec 1c          	sub    $0x1c,%esp
    131b:	67 66 0f b7 7c 24 30 	movzwl 0x30(%esp),%edi
    1322:	67 66 0f b7 74 24 34 	movzwl 0x34(%esp),%esi
    1329:	67 66 0f b7 44 24 38 	movzwl 0x38(%esp),%eax
    1330:	67 89 44 24 0c       	mov    %ax,0xc(%esp)
    1335:	67 66 0f b7 44 24 3c 	movzwl 0x3c(%esp),%eax
    133c:	67 89 44 24 0e       	mov    %ax,0xe(%esp)
/mnt/e/code/my_operating_system/os/lib/stdio.c:322
    for (int i = 0; i < number; i++){
    1341:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    1347:	eb 7d                	jmp    13c6 <read_n_sector+0xb7>
/mnt/e/code/my_operating_system/os/lib/stdio.c:323 (discriminator 3)
        int sector = (sector_code+i) % 18+1;
    1349:	66 0f b7 ef          	movzwl %di,%ebp
    134d:	66 01 dd             	add    %ebx,%ebp
    1350:	66 ba 39 8e e3 38    	mov    $0x38e38e39,%edx
    1356:	66 89 e8             	mov    %ebp,%eax
    1359:	66 f7 ea             	imul   %edx
    135c:	66 c1 fa 02          	sar    $0x2,%edx
    1360:	66 89 e8             	mov    %ebp,%eax
    1363:	66 c1 f8 1f          	sar    $0x1f,%eax
    1367:	66 29 c2             	sub    %eax,%edx
    136a:	66 89 d1             	mov    %edx,%ecx
    136d:	67 66 8d 14 d2       	lea    (%edx,%edx,8),%edx
    1372:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    1377:	66 89 ea             	mov    %ebp,%edx
    137a:	66 29 c2             	sub    %eax,%edx
    137d:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/lib/stdio.c:325 (discriminator 3)
        int mid = (sector_code+i) / 18;
        int cylinder = mid >> 1;
    1381:	66 89 cd             	mov    %ecx,%ebp
    1384:	66 d1 fd             	sar    %ebp
/mnt/e/code/my_operating_system/os/lib/stdio.c:327 (discriminator 3)
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    1387:	66 83 ec 0c          	sub    $0xc,%esp
    138b:	66 89 d8             	mov    %ebx,%eax
    138e:	66 c1 e0 09          	shl    $0x9,%eax
    1392:	67 03 44 24 1a       	add    0x1a(%esp),%ax
    1397:	66 0f b7 c0          	movzwl %ax,%eax
    139b:	66 50                	push   %eax
    139d:	67 66 0f b7 44 24 1c 	movzwl 0x1c(%esp),%eax
    13a4:	66 50                	push   %eax
    13a6:	66 0f b7 d2          	movzwl %dx,%edx
    13aa:	66 52                	push   %edx
    13ac:	66 0f b7 ed          	movzwl %bp,%ebp
    13b0:	66 55                	push   %ebp
    13b2:	66 83 e1 01          	and    $0x1,%ecx
    13b6:	66 51                	push   %ecx
    13b8:	66 e8 1e 01 00 00    	calll  14dc <read_sector>
/mnt/e/code/my_operating_system/os/lib/stdio.c:322 (discriminator 3)
/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    for (int i = 0; i < number; i++){
    13be:	66 83 c3 01          	add    $0x1,%ebx
    13c2:	66 83 c4 20          	add    $0x20,%esp
/mnt/e/code/my_operating_system/os/lib/stdio.c:322 (discriminator 1)
    13c6:	66 0f b7 c6          	movzwl %si,%eax
    13ca:	66 39 c3             	cmp    %eax,%ebx
    13cd:	0f 8c 78 ff          	jl     1349 <read_n_sector+0x3a>
/mnt/e/code/my_operating_system/os/lib/stdio.c:330
        int cylinder = mid >> 1;
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    }
    return ;
}
    13d1:	66 83 c4 1c          	add    $0x1c,%esp
    13d5:	66 5b                	pop    %ebx
    13d7:	66 5e                	pop    %esi
    13d9:	66 5f                	pop    %edi
    13db:	66 5d                	pop    %ebp
    13dd:	66 c3                	retl   
    13df:	90                   	nop

000013e0 <write_port_byte>:
write_port_byte():
    13e0:	66 55                	push   %ebp
    13e2:	66 89 e5             	mov    %esp,%ebp
    13e5:	53                   	push   %bx
    13e6:	51                   	push   %cx
    13e7:	52                   	push   %dx
    13e8:	56                   	push   %si
    13e9:	57                   	push   %di
    13ea:	55                   	push   %bp
    13eb:	1e                   	push   %ds
    13ec:	06                   	push   %es
    13ed:	16                   	push   %ss
    13ee:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    13f2:	67 8a 45 0c          	mov    0xc(%ebp),%al
    13f6:	cd 34                	int    $0x34
    13f8:	17                   	pop    %ss
    13f9:	07                   	pop    %es
    13fa:	1f                   	pop    %ds
    13fb:	5d                   	pop    %bp
    13fc:	5f                   	pop    %di
    13fd:	5e                   	pop    %si
    13fe:	5a                   	pop    %dx
    13ff:	59                   	pop    %cx
    1400:	5b                   	pop    %bx
    1401:	66 89 ec             	mov    %ebp,%esp
    1404:	66 5d                	pop    %ebp
    1406:	66 c3                	retl   

00001408 <read_port_byte>:
read_port_byte():
    1408:	66 55                	push   %ebp
    140a:	66 89 e5             	mov    %esp,%ebp
    140d:	53                   	push   %bx
    140e:	51                   	push   %cx
    140f:	52                   	push   %dx
    1410:	56                   	push   %si
    1411:	57                   	push   %di
    1412:	55                   	push   %bp
    1413:	1e                   	push   %ds
    1414:	06                   	push   %es
    1415:	16                   	push   %ss
    1416:	67 8b 45 08          	mov    0x8(%ebp),%ax
    141a:	cd 33                	int    $0x33
    141c:	17                   	pop    %ss
    141d:	07                   	pop    %es
    141e:	1f                   	pop    %ds
    141f:	5d                   	pop    %bp
    1420:	5f                   	pop    %di
    1421:	5e                   	pop    %si
    1422:	5a                   	pop    %dx
    1423:	59                   	pop    %cx
    1424:	5b                   	pop    %bx
    1425:	66 89 ec             	mov    %ebp,%esp
    1428:	66 5d                	pop    %ebp
    142a:	66 c3                	retl   

0000142c <write_memory_byte>:
write_memory_byte():
    142c:	66 55                	push   %ebp
    142e:	66 89 e5             	mov    %esp,%ebp
    1431:	50                   	push   %ax
    1432:	53                   	push   %bx
    1433:	52                   	push   %dx
    1434:	1e                   	push   %ds
    1435:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1439:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    143d:	c1 e0 0c             	shl    $0xc,%ax
    1440:	67 8a 4d 0c          	mov    0xc(%ebp),%cl
    1444:	cd 36                	int    $0x36
    1446:	1f                   	pop    %ds
    1447:	5a                   	pop    %dx
    1448:	5b                   	pop    %bx
    1449:	58                   	pop    %ax
    144a:	66 89 ec             	mov    %ebp,%esp
    144d:	66 5d                	pop    %ebp
    144f:	66 c3                	retl   

00001451 <read_memory_byte>:
read_memory_byte():
    1451:	66 55                	push   %ebp
    1453:	66 89 e5             	mov    %esp,%ebp
    1456:	53                   	push   %bx
    1457:	51                   	push   %cx
    1458:	52                   	push   %dx
    1459:	56                   	push   %si
    145a:	57                   	push   %di
    145b:	55                   	push   %bp
    145c:	1e                   	push   %ds
    145d:	06                   	push   %es
    145e:	16                   	push   %ss
    145f:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1463:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    1467:	c1 e0 0c             	shl    $0xc,%ax
    146a:	cd 35                	int    $0x35
    146c:	17                   	pop    %ss
    146d:	07                   	pop    %es
    146e:	1f                   	pop    %ds
    146f:	5d                   	pop    %bp
    1470:	5f                   	pop    %di
    1471:	5e                   	pop    %si
    1472:	5a                   	pop    %dx
    1473:	59                   	pop    %cx
    1474:	5b                   	pop    %bx
    1475:	66 89 ec             	mov    %ebp,%esp
    1478:	66 5d                	pop    %ebp
    147a:	66 c3                	retl   

0000147c <check_keyboard>:
check_keyboard():
    147c:	b4 01                	mov    $0x1,%ah
    147e:	cd 16                	int    $0x16
    1480:	74 05                	je     1487 <check_keyboard.have_key>
    1482:	b8 00 00             	mov    $0x0,%ax
    1485:	eb 03                	jmp    148a <check_keyboard.check_keyboard_return>

00001487 <check_keyboard.have_key>:
check_keyboard.have_key():
    1487:	b8 01 00             	mov    $0x1,%ax

0000148a <check_keyboard.check_keyboard_return>:
check_keyboard.check_keyboard_return():
    148a:	66 c3                	retl   

0000148c <get_keyboard>:
get_keyboard():
    148c:	b4 00                	mov    $0x0,%ah
    148e:	cd 16                	int    $0x16
    1490:	66 c3                	retl   

00001492 <clean_screen>:
clean_screen():
    1492:	50                   	push   %ax
    1493:	53                   	push   %bx
    1494:	51                   	push   %cx
    1495:	52                   	push   %dx
    1496:	b4 06                	mov    $0x6,%ah
    1498:	b0 00                	mov    $0x0,%al
    149a:	b5 00                	mov    $0x0,%ch
    149c:	b1 00                	mov    $0x0,%cl
    149e:	b6 17                	mov    $0x17,%dh
    14a0:	b2 4f                	mov    $0x4f,%dl
    14a2:	b7 1f                	mov    $0x1f,%bh
    14a4:	cd 10                	int    $0x10
    14a6:	5a                   	pop    %dx
    14a7:	59                   	pop    %cx
    14a8:	5b                   	pop    %bx
    14a9:	58                   	pop    %ax
    14aa:	66 c3                	retl   

000014ac <scroll_screen>:
scroll_screen():
    14ac:	50                   	push   %ax
    14ad:	53                   	push   %bx
    14ae:	51                   	push   %cx
    14af:	52                   	push   %dx
    14b0:	b4 06                	mov    $0x6,%ah
    14b2:	b0 01                	mov    $0x1,%al
    14b4:	b5 00                	mov    $0x0,%ch
    14b6:	b1 00                	mov    $0x0,%cl
    14b8:	b6 17                	mov    $0x17,%dh
    14ba:	b2 4f                	mov    $0x4f,%dl
    14bc:	b7 10                	mov    $0x10,%bh
    14be:	cd 10                	int    $0x10
    14c0:	5a                   	pop    %dx
    14c1:	59                   	pop    %cx
    14c2:	5b                   	pop    %bx
    14c3:	58                   	pop    %ax
    14c4:	66 c3                	retl   

000014c6 <get_random>:
get_random():
    14c6:	53                   	push   %bx
    14c7:	b8 00 00             	mov    $0x0,%ax
    14ca:	e6 43                	out    %al,$0x43
    14cc:	e4 40                	in     $0x40,%al
    14ce:	b3 08                	mov    $0x8,%bl
    14d0:	f6 f3                	div    %bl
    14d2:	88 e0                	mov    %ah,%al
    14d4:	b4 00                	mov    $0x0,%ah
    14d6:	83 c0 72             	add    $0x72,%ax
    14d9:	5b                   	pop    %bx
    14da:	66 c3                	retl   

000014dc <read_sector>:
read_sector():
    14dc:	66 55                	push   %ebp
    14de:	66 89 e5             	mov    %esp,%ebp
    14e1:	50                   	push   %ax
    14e2:	53                   	push   %bx
    14e3:	51                   	push   %cx
    14e4:	52                   	push   %dx
    14e5:	06                   	push   %es
    14e6:	67 8b 45 14          	mov    0x14(%ebp),%ax
    14ea:	8e c0                	mov    %ax,%es
    14ec:	67 8b 5d 18          	mov    0x18(%ebp),%bx
    14f0:	b4 02                	mov    $0x2,%ah
    14f2:	b0 01                	mov    $0x1,%al
    14f4:	b2 00                	mov    $0x0,%dl
    14f6:	67 8a 75 08          	mov    0x8(%ebp),%dh
    14fa:	67 8a 6d 0c          	mov    0xc(%ebp),%ch
    14fe:	67 8a 4d 10          	mov    0x10(%ebp),%cl
    1502:	cd 13                	int    $0x13
    1504:	07                   	pop    %es
    1505:	5a                   	pop    %dx
    1506:	59                   	pop    %cx
    1507:	5b                   	pop    %bx
    1508:	58                   	pop    %ax
    1509:	66 89 ec             	mov    %ebp,%esp
    150c:	66 5d                	pop    %ebp
    150e:	66 c3                	retl   

00001510 <print_my_name>:
print_my_name():
    1510:	50                   	push   %ax
    1511:	53                   	push   %bx
    1512:	51                   	push   %cx
    1513:	52                   	push   %dx
    1514:	1e                   	push   %ds
    1515:	06                   	push   %es
    1516:	55                   	push   %bp
    1517:	b8 00 10             	mov    $0x1000,%ax
    151a:	8e c0                	mov    %ax,%es
    151c:	b8 94 1f             	mov    $0x1f94,%ax
    151f:	89 c5                	mov    %ax,%bp
    1521:	b4 13                	mov    $0x13,%ah
    1523:	b0 00                	mov    $0x0,%al
    1525:	b7 00                	mov    $0x0,%bh
    1527:	b3 0f                	mov    $0xf,%bl
    1529:	b9 19 00             	mov    $0x19,%cx
    152c:	b6 18                	mov    $0x18,%dh
    152e:	b2 01                	mov    $0x1,%dl
    1530:	cd 10                	int    $0x10
    1532:	5d                   	pop    %bp
    1533:	07                   	pop    %es
    1534:	1f                   	pop    %ds
    1535:	5a                   	pop    %dx
    1536:	59                   	pop    %cx
    1537:	5b                   	pop    %bx
    1538:	58                   	pop    %ax
    1539:	c3                   	ret    

0000153a <reboot>:
reboot():
    153a:	b4 06                	mov    $0x6,%ah
    153c:	b0 00                	mov    $0x0,%al
    153e:	b5 00                	mov    $0x0,%ch
    1540:	b1 00                	mov    $0x0,%cl
    1542:	b6 18                	mov    $0x18,%dh
    1544:	b2 4f                	mov    $0x4f,%dl
    1546:	b7 1f                	mov    $0x1f,%bh
    1548:	cd 10                	int    $0x10
    154a:	cd 19                	int    $0x19

0000154c <strlen>:
strlen():
/mnt/e/code/my_operating_system/os/lib/string.c:3
#include "../include/type.h"

size_t strlen(char * str){
    154c:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/lib/string.c:4
    u32 len = 0;
    1552:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/lib/string.c:5
    while (str[len] != 0){
    1558:	eb 04                	jmp    155e <strlen+0x12>
/mnt/e/code/my_operating_system/os/lib/string.c:6
        len++;
    155a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/string.c:5
#include "../include/type.h"

size_t strlen(char * str){
    u32 len = 0;
    while (str[len] != 0){
    155e:	67 80 3c 02 00       	cmpb   $0x0,(%edx,%eax,1)
    1563:	75 f5                	jne    155a <strlen+0xe>
/mnt/e/code/my_operating_system/os/lib/string.c:9
        len++;
    }
    return len;
}
    1565:	66 f3 c3             	repz retl 

00001568 <strncpy>:
strncpy():
/mnt/e/code/my_operating_system/os/lib/string.c:11

void strncpy(char * dest, char * src, u32 size){
    1568:	66 56                	push   %esi
    156a:	66 53                	push   %ebx
    156c:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    1572:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    1578:	67 66 8b 4c 24 14    	mov    0x14(%esp),%ecx
/mnt/e/code/my_operating_system/os/lib/string.c:12
    for (int i = 0; i < size; i++){
    157e:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1584:	eb 0e                	jmp    1594 <strncpy+0x2c>
/mnt/e/code/my_operating_system/os/lib/string.c:13 (discriminator 3)
        dest[i] = src[i];
    1586:	67 66 0f b6 14 06    	movzbl (%esi,%eax,1),%edx
    158c:	67 88 14 03          	mov    %dl,(%ebx,%eax,1)
/mnt/e/code/my_operating_system/os/lib/string.c:12 (discriminator 3)
    }
    return len;
}

void strncpy(char * dest, char * src, u32 size){
    for (int i = 0; i < size; i++){
    1590:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/string.c:12 (discriminator 1)
    1594:	66 39 c8             	cmp    %ecx,%eax
    1597:	72 ed                	jb     1586 <strncpy+0x1e>
/mnt/e/code/my_operating_system/os/lib/string.c:15
        dest[i] = src[i];
    }
    dest[size] = '\0';
    1599:	67 c6 04 0b 00       	movb   $0x0,(%ebx,%ecx,1)
/mnt/e/code/my_operating_system/os/lib/string.c:16
}
    159e:	66 5b                	pop    %ebx
    15a0:	66 5e                	pop    %esi
    15a2:	66 c3                	retl   

000015a4 <strcmp>:
strcmp():
/mnt/e/code/my_operating_system/os/lib/string.c:18

int strcmp(char * lhs, char * rhs){
    15a4:	66 57                	push   %edi
    15a6:	66 56                	push   %esi
    15a8:	66 53                	push   %ebx
    15aa:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    15b0:	67 66 8b 7c 24 14    	mov    0x14(%esp),%edi
/mnt/e/code/my_operating_system/os/lib/string.c:19
    int lhs_len = strlen(lhs);
    15b6:	66 56                	push   %esi
    15b8:	66 e8 8e ff ff ff    	calll  154c <strlen>
    15be:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/lib/string.c:20
    int rhs_len = strlen(rhs);
    15c1:	67 66 89 3c 24       	mov    %edi,(%esp)
    15c6:	66 e8 80 ff ff ff    	calll  154c <strlen>
    15cc:	66 83 c4 04          	add    $0x4,%esp
/mnt/e/code/my_operating_system/os/lib/string.c:21
    if (lhs_len != rhs_len){
    15d0:	66 39 c3             	cmp    %eax,%ebx
    15d3:	75 25                	jne    15fa <strcmp+0x56>
    15d5:	66 b8 00 00 00 00    	mov    $0x0,%eax
    15db:	eb 10                	jmp    15ed <strcmp+0x49>
/mnt/e/code/my_operating_system/os/lib/string.c:25
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
    15dd:	67 66 0f b6 14 07    	movzbl (%edi,%eax,1),%edx
    15e3:	67 38 14 06          	cmp    %dl,(%esi,%eax,1)
    15e7:	75 19                	jne    1602 <strcmp+0x5e>
/mnt/e/code/my_operating_system/os/lib/string.c:24 (discriminator 2)
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
    15e9:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/string.c:24 (discriminator 1)
    15ed:	66 39 d8             	cmp    %ebx,%eax
    15f0:	7c eb                	jl     15dd <strcmp+0x39>
/mnt/e/code/my_operating_system/os/lib/string.c:28
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    15f2:	66 b8 00 00 00 00    	mov    $0x0,%eax
    15f8:	eb 0e                	jmp    1608 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/lib/string.c:22

int strcmp(char * lhs, char * rhs){
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    15fa:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1600:	eb 06                	jmp    1608 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/lib/string.c:26
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
            return 1;
    1602:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/string.c:29
    }
    return 0;
}
    1608:	66 5b                	pop    %ebx
    160a:	66 5e                	pop    %esi
    160c:	66 5f                	pop    %edi
    160e:	66 c3                	retl   

00001610 <strncmp>:
strncmp():
/mnt/e/code/my_operating_system/os/lib/string.c:31

int strncmp(char * lhs, char * rhs, int size){
    1610:	66 56                	push   %esi
    1612:	66 53                	push   %ebx
    1614:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    161a:	67 66 8b 4c 24 10    	mov    0x10(%esp),%ecx
    1620:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/lib/string.c:32
    for (int i = 0; i < size; i++){
    1626:	66 b8 00 00 00 00    	mov    $0x0,%eax
    162c:	eb 10                	jmp    163e <strncmp+0x2e>
/mnt/e/code/my_operating_system/os/lib/string.c:33
        if (lhs[i] != rhs[i])
    162e:	67 66 0f b6 14 01    	movzbl (%ecx,%eax,1),%edx
    1634:	67 38 14 03          	cmp    %dl,(%ebx,%eax,1)
    1638:	75 11                	jne    164b <strncmp+0x3b>
/mnt/e/code/my_operating_system/os/lib/string.c:32 (discriminator 2)
    }
    return 0;
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
    163a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/string.c:32 (discriminator 1)
    163e:	66 39 f0             	cmp    %esi,%eax
    1641:	7c eb                	jl     162e <strncmp+0x1e>
/mnt/e/code/my_operating_system/os/lib/string.c:36
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    1643:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1649:	eb 06                	jmp    1651 <strncmp+0x41>
/mnt/e/code/my_operating_system/os/lib/string.c:34
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
        if (lhs[i] != rhs[i])
            return 1;
    164b:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/lib/string.c:37
    }
    return 0;
    1651:	66 5b                	pop    %ebx
    1653:	66 5e                	pop    %esi
    1655:	66 c3                	retl   
