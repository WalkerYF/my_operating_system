
kernel.debug:     file format elf32-i386


Disassembly of section .text:

00000000 <_start>:
_start():
       0:	e8 72 00             	call   75 <install_int8>
       3:	e8 c5 00             	call   cb <install_int33>
       6:	e8 fb 00             	call   104 <install_int34>
       9:	e8 35 01             	call   141 <install_int35>
       c:	e8 6d 01             	call   17c <install_int36>
       f:	e8 12 00             	call   24 <install_int40>
      12:	66 e8 a5 0d 00 00    	calll  dbd <cstart>

00000018 <start_tty>:
start_tty():
      18:	66 e8 fd 10 00 00    	calll  111b <tty>
      1e:	b4 02                	mov    $0x2,%ah
      20:	cd 40                	int    $0x40
      22:	eb fe                	jmp    22 <start_tty+0xa>

00000024 <install_int40>:
install_int40():
      24:	53                   	push   %bx
      25:	51                   	push   %cx
      26:	52                   	push   %dx
      27:	56                   	push   %si
      28:	57                   	push   %di
      29:	55                   	push   %bp
      2a:	1e                   	push   %ds
      2b:	06                   	push   %es
      2c:	16                   	push   %ss
      2d:	b8 00 00             	mov    $0x0,%ax
      30:	8e d8                	mov    %ax,%ds
      32:	8c c8                	mov    %cs,%ax
      34:	c7 06 00 01 47 00    	movw   $0x47,0x100
      3a:	a3 02 01             	mov    %ax,0x102
      3d:	17                   	pop    %ss
      3e:	07                   	pop    %es
      3f:	1f                   	pop    %ds
      40:	5d                   	pop    %bp
      41:	5f                   	pop    %di
      42:	5e                   	pop    %si
      43:	5a                   	pop    %dx
      44:	59                   	pop    %cx
      45:	5b                   	pop    %bx
      46:	c3                   	ret    

00000047 <new_int40>:
new_int40():
      47:	80 fc 4c             	cmp    $0x4c,%ah
      4a:	74 11                	je     5d <new_int40.return_kernel>
      4c:	88 e3                	mov    %ah,%bl
      4e:	31 c0                	xor    %ax,%ax
      50:	b0 02                	mov    $0x2,%al
      52:	f6 e3                	mul    %bl
      54:	89 c6                	mov    %ax,%si
      56:	bb a0 2b             	mov    $0x2ba0,%bx
      59:	66 ff 10             	calll  *(%bx,%si)
      5c:	cf                   	iret   

0000005d <new_int40.return_kernel>:
new_int40.return_kernel():
      5d:	59                   	pop    %cx
      5e:	59                   	pop    %cx
      5f:	59                   	pop    %cx
      60:	b8 00 10             	mov    $0x1000,%ax
      63:	8e d8                	mov    %ax,%ds
      65:	8e c0                	mov    %ax,%es
      67:	8e d0                	mov    %ax,%ss
      69:	bc 00 50             	mov    $0x5000,%sp
      6c:	51                   	push   %cx
      6d:	68 00 10             	push   $0x1000
      70:	68 18 00             	push   $0x18
      73:	fb                   	sti    
      74:	cf                   	iret   

00000075 <install_int8>:
install_int8():
      75:	53                   	push   %bx
      76:	51                   	push   %cx
      77:	52                   	push   %dx
      78:	56                   	push   %si
      79:	57                   	push   %di
      7a:	55                   	push   %bp
      7b:	1e                   	push   %ds
      7c:	06                   	push   %es
      7d:	16                   	push   %ss
      7e:	b0 34                	mov    $0x34,%al
      80:	e6 43                	out    %al,$0x43
      82:	b8 ff ff             	mov    $0xffff,%ax
      85:	e6 40                	out    %al,$0x40
      87:	88 e0                	mov    %ah,%al
      89:	e6 40                	out    %al,$0x40
      8b:	b8 00 00             	mov    $0x0,%ax
      8e:	8e d8                	mov    %ax,%ds
      90:	8c c8                	mov    %cs,%ax
      92:	a3 22 00             	mov    %ax,0x22
      95:	c7 06 20 00 a5 00    	movw   $0xa5,0x20
      9b:	17                   	pop    %ss
      9c:	07                   	pop    %es
      9d:	1f                   	pop    %ds
      9e:	5d                   	pop    %bp
      9f:	5f                   	pop    %di
      a0:	5e                   	pop    %si
      a1:	5a                   	pop    %dx
      a2:	59                   	pop    %cx
      a3:	5b                   	pop    %bx
      a4:	c3                   	ret    

000000a5 <new_int8>:
new_int8():
      a5:	50                   	push   %ax
      a6:	53                   	push   %bx
      a7:	51                   	push   %cx
      a8:	52                   	push   %dx
      a9:	56                   	push   %si
      aa:	57                   	push   %di
      ab:	55                   	push   %bp
      ac:	1e                   	push   %ds
      ad:	06                   	push   %es
      ae:	16                   	push   %ss
      af:	b8 00 b8             	mov    $0xb800,%ax
      b2:	8e d8                	mov    %ax,%ds
      b4:	66 e8 76 15 00 00    	calll  1630 <move_name>
      ba:	b0 20                	mov    $0x20,%al
      bc:	e6 20                	out    %al,$0x20
      be:	e6 a0                	out    %al,$0xa0
      c0:	17                   	pop    %ss
      c1:	07                   	pop    %es
      c2:	1f                   	pop    %ds
      c3:	5d                   	pop    %bp
      c4:	5f                   	pop    %di
      c5:	5e                   	pop    %si
      c6:	5a                   	pop    %dx
      c7:	59                   	pop    %cx
      c8:	5b                   	pop    %bx
      c9:	58                   	pop    %ax
      ca:	cf                   	iret   

000000cb <install_int33>:
install_int33():
      cb:	53                   	push   %bx
      cc:	51                   	push   %cx
      cd:	52                   	push   %dx
      ce:	56                   	push   %si
      cf:	57                   	push   %di
      d0:	55                   	push   %bp
      d1:	1e                   	push   %ds
      d2:	06                   	push   %es
      d3:	16                   	push   %ss
      d4:	b8 00 00             	mov    $0x0,%ax
      d7:	8e d8                	mov    %ax,%ds
      d9:	8c c8                	mov    %cs,%ax
      db:	c7 06 cc 00 ee 00    	movw   $0xee,0xcc
      e1:	a3 ce 00             	mov    %ax,0xce
      e4:	17                   	pop    %ss
      e5:	07                   	pop    %es
      e6:	1f                   	pop    %ds
      e7:	5d                   	pop    %bp
      e8:	5f                   	pop    %di
      e9:	5e                   	pop    %si
      ea:	5a                   	pop    %dx
      eb:	59                   	pop    %cx
      ec:	5b                   	pop    %bx
      ed:	c3                   	ret    

000000ee <new_int33>:
new_int33():
      ee:	53                   	push   %bx
      ef:	51                   	push   %cx
      f0:	52                   	push   %dx
      f1:	56                   	push   %si
      f2:	57                   	push   %di
      f3:	55                   	push   %bp
      f4:	1e                   	push   %ds
      f5:	06                   	push   %es
      f6:	16                   	push   %ss
      f7:	89 c2                	mov    %ax,%dx
      f9:	ec                   	in     (%dx),%al
      fa:	17                   	pop    %ss
      fb:	07                   	pop    %es
      fc:	1f                   	pop    %ds
      fd:	5d                   	pop    %bp
      fe:	5f                   	pop    %di
      ff:	5e                   	pop    %si
     100:	5a                   	pop    %dx
     101:	59                   	pop    %cx
     102:	5b                   	pop    %bx
     103:	cf                   	iret   

00000104 <install_int34>:
install_int34():
     104:	53                   	push   %bx
     105:	51                   	push   %cx
     106:	52                   	push   %dx
     107:	56                   	push   %si
     108:	57                   	push   %di
     109:	55                   	push   %bp
     10a:	1e                   	push   %ds
     10b:	06                   	push   %es
     10c:	16                   	push   %ss
     10d:	b8 00 00             	mov    $0x0,%ax
     110:	8e d8                	mov    %ax,%ds
     112:	8c c8                	mov    %cs,%ax
     114:	c7 06 d0 00 27 01    	movw   $0x127,0xd0
     11a:	a3 d2 00             	mov    %ax,0xd2
     11d:	17                   	pop    %ss
     11e:	07                   	pop    %es
     11f:	1f                   	pop    %ds
     120:	5d                   	pop    %bp
     121:	5f                   	pop    %di
     122:	5e                   	pop    %si
     123:	5a                   	pop    %dx
     124:	59                   	pop    %cx
     125:	5b                   	pop    %bx
     126:	c3                   	ret    

00000127 <new_int34>:
new_int34():
     127:	50                   	push   %ax
     128:	53                   	push   %bx
     129:	51                   	push   %cx
     12a:	52                   	push   %dx
     12b:	56                   	push   %si
     12c:	57                   	push   %di
     12d:	55                   	push   %bp
     12e:	1e                   	push   %ds
     12f:	06                   	push   %es
     130:	16                   	push   %ss
     131:	89 da                	mov    %bx,%dx
     133:	88 c0                	mov    %al,%al
     135:	ee                   	out    %al,(%dx)
     136:	17                   	pop    %ss
     137:	07                   	pop    %es
     138:	1f                   	pop    %ds
     139:	5d                   	pop    %bp
     13a:	5f                   	pop    %di
     13b:	5e                   	pop    %si
     13c:	5a                   	pop    %dx
     13d:	59                   	pop    %cx
     13e:	5b                   	pop    %bx
     13f:	58                   	pop    %ax
     140:	cf                   	iret   

00000141 <install_int35>:
install_int35():
     141:	53                   	push   %bx
     142:	51                   	push   %cx
     143:	52                   	push   %dx
     144:	56                   	push   %si
     145:	57                   	push   %di
     146:	55                   	push   %bp
     147:	1e                   	push   %ds
     148:	06                   	push   %es
     149:	16                   	push   %ss
     14a:	b8 00 00             	mov    $0x0,%ax
     14d:	8e d8                	mov    %ax,%ds
     14f:	8c c8                	mov    %cs,%ax
     151:	c7 06 d4 00 64 01    	movw   $0x164,0xd4
     157:	a3 d6 00             	mov    %ax,0xd6
     15a:	17                   	pop    %ss
     15b:	07                   	pop    %es
     15c:	1f                   	pop    %ds
     15d:	5d                   	pop    %bp
     15e:	5f                   	pop    %di
     15f:	5e                   	pop    %si
     160:	5a                   	pop    %dx
     161:	59                   	pop    %cx
     162:	5b                   	pop    %bx
     163:	c3                   	ret    

00000164 <new_int35>:
new_int35():
     164:	53                   	push   %bx
     165:	51                   	push   %cx
     166:	52                   	push   %dx
     167:	56                   	push   %si
     168:	57                   	push   %di
     169:	55                   	push   %bp
     16a:	1e                   	push   %ds
     16b:	06                   	push   %es
     16c:	16                   	push   %ss
     16d:	8e c0                	mov    %ax,%es
     16f:	26 8a 07             	mov    %es:(%bx),%al
     172:	17                   	pop    %ss
     173:	07                   	pop    %es
     174:	1f                   	pop    %ds
     175:	5d                   	pop    %bp
     176:	5f                   	pop    %di
     177:	5e                   	pop    %si
     178:	5a                   	pop    %dx
     179:	59                   	pop    %cx
     17a:	5b                   	pop    %bx
     17b:	cf                   	iret   

0000017c <install_int36>:
install_int36():
     17c:	53                   	push   %bx
     17d:	51                   	push   %cx
     17e:	52                   	push   %dx
     17f:	56                   	push   %si
     180:	57                   	push   %di
     181:	55                   	push   %bp
     182:	1e                   	push   %ds
     183:	06                   	push   %es
     184:	16                   	push   %ss
     185:	b8 00 00             	mov    $0x0,%ax
     188:	8e d8                	mov    %ax,%ds
     18a:	8c c8                	mov    %cs,%ax
     18c:	c7 06 d8 00 9f 01    	movw   $0x19f,0xd8
     192:	a3 da 00             	mov    %ax,0xda
     195:	17                   	pop    %ss
     196:	07                   	pop    %es
     197:	1f                   	pop    %ds
     198:	5d                   	pop    %bp
     199:	5f                   	pop    %di
     19a:	5e                   	pop    %si
     19b:	5a                   	pop    %dx
     19c:	59                   	pop    %cx
     19d:	5b                   	pop    %bx
     19e:	c3                   	ret    

0000019f <new_int36>:
new_int36():
     19f:	50                   	push   %ax
     1a0:	53                   	push   %bx
     1a1:	51                   	push   %cx
     1a2:	52                   	push   %dx
     1a3:	56                   	push   %si
     1a4:	57                   	push   %di
     1a5:	55                   	push   %bp
     1a6:	1e                   	push   %ds
     1a7:	06                   	push   %es
     1a8:	16                   	push   %ss
     1a9:	8e c0                	mov    %ax,%es
     1ab:	26 88 0f             	mov    %cl,%es:(%bx)
     1ae:	17                   	pop    %ss
     1af:	07                   	pop    %es
     1b0:	1f                   	pop    %ds
     1b1:	5d                   	pop    %bp
     1b2:	5f                   	pop    %di
     1b3:	5e                   	pop    %si
     1b4:	5a                   	pop    %dx
     1b5:	59                   	pop    %cx
     1b6:	5b                   	pop    %bx
     1b7:	58                   	pop    %ax
     1b8:	cf                   	iret   

000001b9 <_put_char>:
_put_char():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:5
#include "../include/basic.h"
#include "../include/type.h"
#include "../include/string.h"

void _put_char(char c, u16 cursor_index){
     1b9:	66 53                	push   %ebx
     1bb:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:7
    int _address = 0xb8000;
    int _offset = cursor_index * 2;
     1bf:	67 66 0f b7 5c 24 1c 	movzwl 0x1c(%esp),%ebx
     1c6:	66 01 db             	add    %ebx,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:8
    write_memory_byte(_address+_offset, c);
     1c9:	67 66 8d 83 00 80 0b 	lea    0xb8000(%ebx),%eax
     1d0:	00 
     1d1:	67 66 0f b6 54 24 18 	movzbl 0x18(%esp),%edx
     1d8:	66 52                	push   %edx
     1da:	66 50                	push   %eax
     1dc:	66 e8 9a 09 00 00    	calll  b7c <write_memory_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:9
    write_memory_byte(_address+_offset+1, 0x1f);
     1e2:	66 81 c3 01 80 0b 00 	add    $0xb8001,%ebx
     1e9:	66 83 c4 08          	add    $0x8,%esp
     1ed:	66 6a 1f             	pushl  $0x1f
     1f0:	66 53                	push   %ebx
     1f2:	66 e8 84 09 00 00    	calll  b7c <write_memory_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:11
    return ;
}
     1f8:	66 83 c4 18          	add    $0x18,%esp
     1fc:	66 5b                	pop    %ebx
     1fe:	66 c3                	retl   

00000200 <set_cursor>:
set_cursor():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:13

void set_cursor(u16 cursor_index){
     200:	66 56                	push   %esi
     202:	66 53                	push   %ebx
     204:	66 83 ec 0c          	sub    $0xc,%esp
     208:	67 66 8b 5c 24 18    	mov    0x18(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:16
    // short cursor_index = 80 * row + column;     // 计算光标寄存器的值
    u8 low_eight = cursor_index; // 取低八位，高位被截断
    u8 high_eight = cursor_index >> 8; // 取高八位
     20e:	66 89 d8             	mov    %ebx,%eax
     211:	c1 e8 08             	shr    $0x8,%ax
     214:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:17
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     217:	66 6a 0e             	pushl  $0xe
     21a:	66 68 d4 03 00 00    	pushl  $0x3d4
     220:	66 e8 0a 09 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:18
    write_port_byte(0x3d5, high_eight);// 将光标索引高八位写入端口
     226:	66 83 c4 08          	add    $0x8,%esp
     22a:	66 89 f0             	mov    %esi,%eax
     22d:	66 0f b6 f0          	movzbl %al,%esi
     231:	66 56                	push   %esi
     233:	66 68 d5 03 00 00    	pushl  $0x3d5
     239:	66 e8 f1 08 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:19
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     23f:	66 83 c4 08          	add    $0x8,%esp
     243:	66 6a 0f             	pushl  $0xf
     246:	66 68 d4 03 00 00    	pushl  $0x3d4
     24c:	66 e8 de 08 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:20
    write_port_byte(0x3d5, low_eight);// 将光标索引低八位写入端口
     252:	66 83 c4 08          	add    $0x8,%esp
     256:	66 0f b6 db          	movzbl %bl,%ebx
     25a:	66 53                	push   %ebx
     25c:	66 68 d5 03 00 00    	pushl  $0x3d5
     262:	66 e8 c8 08 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:22
    return ;
}
     268:	66 83 c4 14          	add    $0x14,%esp
     26c:	66 5b                	pop    %ebx
     26e:	66 5e                	pop    %esi
     270:	66 c3                	retl   

00000272 <get_cursor>:
get_cursor():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:24

u16 get_cursor(){
     272:	66 53                	push   %ebx
     274:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:27
    u8 low_eight = 0, high_eight = 0;
    u16 cursor_index = 0;
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     278:	66 6a 0e             	pushl  $0xe
     27b:	66 68 d4 03 00 00    	pushl  $0x3d4
     281:	66 e8 a9 08 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:28
    high_eight = read_port_byte(0x3d5);// 将光标索引高八位写入端口
     287:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     28e:	00 00 
     290:	66 e8 c2 08 00 00    	calll  b58 <read_port_byte>
     296:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:29
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     299:	66 83 c4 08          	add    $0x8,%esp
     29d:	66 6a 0f             	pushl  $0xf
     2a0:	66 68 d4 03 00 00    	pushl  $0x3d4
     2a6:	66 e8 84 08 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:30
    low_eight = read_port_byte(0x3d5);// 将光标索引低八位写入端口
     2ac:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     2b3:	00 00 
     2b5:	66 e8 9d 08 00 00    	calll  b58 <read_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:32
    cursor_index = high_eight;
    cursor_index = (cursor_index << 8) + low_eight;
     2bb:	66 c1 e3 08          	shl    $0x8,%ebx
     2bf:	66 0f b6 c0          	movzbl %al,%eax
     2c3:	66 01 d8             	add    %ebx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:34
    return cursor_index;
}
     2c6:	66 83 c4 18          	add    $0x18,%esp
     2ca:	66 5b                	pop    %ebx
     2cc:	66 c3                	retl   

000002ce <putc>:
putc():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:36

void putc(char c){
     2ce:	66 57                	push   %edi
     2d0:	66 56                	push   %esi
     2d2:	66 53                	push   %ebx
     2d4:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:37
    u16 cursor_index = get_cursor();
     2da:	66 e8 92 ff ff ff    	calll  272 <get_cursor>
     2e0:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:38
    u16 row = cursor_index / 80;
     2e3:	66 0f b7 d8          	movzwl %ax,%ebx
     2e7:	66 69 db cd cc 00 00 	imul   $0xcccd,%ebx,%ebx
     2ee:	66 c1 eb 10          	shr    $0x10,%ebx
     2f2:	c1 eb 06             	shr    $0x6,%bx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:40
    u16 col = cursor_index % 80;
    if (cursor_index >= 1920){
     2f5:	3d 7f 07             	cmp    $0x77f,%ax
     2f8:	76 0c                	jbe    306 <putc+0x38>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:41
        scroll_screen();
     2fa:	66 e8 fc 08 00 00    	calll  bfc <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:42
        cursor_index = 1840;
     300:	66 be 30 07 00 00    	mov    $0x730,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:44
    }
    switch (c) {
     306:	66 89 f8             	mov    %edi,%eax
     309:	3c 0a                	cmp    $0xa,%al
     30b:	74 06                	je     313 <putc+0x45>
     30d:	3c 0d                	cmp    $0xd,%al
     30f:	74 25                	je     336 <putc+0x68>
     311:	eb 45                	jmp    358 <putc+0x8a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:46
        case '\n':
            set_cursor((row+1)*80); // 回车，移到下一行
     313:	66 83 ec 0c          	sub    $0xc,%esp
     317:	67 66 8d 5c 9b 05    	lea    0x5(%ebx,%ebx,4),%ebx
     31d:	66 89 d8             	mov    %ebx,%eax
     320:	66 c1 e0 04          	shl    $0x4,%eax
     324:	66 0f b7 c0          	movzwl %ax,%eax
     328:	66 50                	push   %eax
     32a:	66 e8 d0 fe ff ff    	calll  200 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:47
            break;
     330:	66 83 c4 10          	add    $0x10,%esp
     334:	eb 52                	jmp    388 <putc+0xba>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:49
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     336:	66 83 ec 0c          	sub    $0xc,%esp
     33a:	67 66 8d 1c 9b       	lea    (%ebx,%ebx,4),%ebx
     33f:	66 89 d8             	mov    %ebx,%eax
     342:	66 c1 e0 04          	shl    $0x4,%eax
     346:	66 0f b7 c0          	movzwl %ax,%eax
     34a:	66 50                	push   %eax
     34c:	66 e8 ae fe ff ff    	calll  200 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:50
            break;
     352:	66 83 c4 10          	add    $0x10,%esp
     356:	eb 30                	jmp    388 <putc+0xba>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:52
        default:
            _put_char(c, cursor_index);
     358:	66 83 ec 08          	sub    $0x8,%esp
     35c:	66 0f b7 c6          	movzwl %si,%eax
     360:	66 50                	push   %eax
     362:	66 89 f8             	mov    %edi,%eax
     365:	66 0f be f8          	movsbl %al,%edi
     369:	66 57                	push   %edi
     36b:	66 e8 48 fe ff ff    	calll  1b9 <_put_char>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:53
            set_cursor(cursor_index+1);
     371:	66 83 c6 01          	add    $0x1,%esi
     375:	66 0f b7 f6          	movzwl %si,%esi
     379:	67 66 89 34 24       	mov    %esi,(%esp)
     37e:	66 e8 7c fe ff ff    	calll  200 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:54
            break;
     384:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:57
    }
    return ;
}
     388:	66 5b                	pop    %ebx
     38a:	66 5e                	pop    %esi
     38c:	66 5f                	pop    %edi
     38e:	66 c3                	retl   

00000390 <_putc>:
_putc():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:59

void _putc(char c){
     390:	66 56                	push   %esi
     392:	66 53                	push   %ebx
     394:	66 83 ec 04          	sub    $0x4,%esp
     398:	67 66 8b 5c 24 10    	mov    0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:60
    u16 cursor_index = get_cursor();
     39e:	66 e8 ce fe ff ff    	calll  272 <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:61
    u16 row = cursor_index / 80;
     3a4:	66 0f b7 d0          	movzwl %ax,%edx
     3a8:	66 69 d2 cd cc 00 00 	imul   $0xcccd,%edx,%edx
     3af:	66 c1 ea 10          	shr    $0x10,%edx
     3b3:	c1 ea 06             	shr    $0x6,%dx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:62
    u16 col = cursor_index % 80;
     3b6:	67 66 8d 34 92       	lea    (%edx,%edx,4),%esi
     3bb:	66 c1 e6 04          	shl    $0x4,%esi
     3bf:	66 89 f1             	mov    %esi,%ecx
     3c2:	66 89 c6             	mov    %eax,%esi
     3c5:	66 29 ce             	sub    %ecx,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:63
    switch (c) {
     3c8:	80 fb 0a             	cmp    $0xa,%bl
     3cb:	74 07                	je     3d4 <_putc+0x44>
     3cd:	80 fb 0d             	cmp    $0xd,%bl
     3d0:	74 2b                	je     3fd <_putc+0x6d>
     3d2:	eb 4b                	jmp    41f <_putc+0x8f>
     3d4:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:65
        case '\n':
            set_cursor((row+1)*80+col); // 回车，移到下一行
     3d7:	66 83 ec 0c          	sub    $0xc,%esp
     3db:	67 66 8d 54 92 05    	lea    0x5(%edx,%edx,4),%edx
     3e1:	66 89 d0             	mov    %edx,%eax
     3e4:	66 c1 e0 04          	shl    $0x4,%eax
     3e8:	66 01 c1             	add    %eax,%ecx
     3eb:	66 0f b7 c9          	movzwl %cx,%ecx
     3ef:	66 51                	push   %ecx
     3f1:	66 e8 09 fe ff ff    	calll  200 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:66
            break;
     3f7:	66 83 c4 10          	add    $0x10,%esp
     3fb:	eb 3c                	jmp    439 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:68
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     3fd:	66 83 ec 0c          	sub    $0xc,%esp
     401:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     406:	66 89 d0             	mov    %edx,%eax
     409:	66 c1 e0 04          	shl    $0x4,%eax
     40d:	66 0f b7 c0          	movzwl %ax,%eax
     411:	66 50                	push   %eax
     413:	66 e8 e7 fd ff ff    	calll  200 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:69
            break;
     419:	66 83 c4 10          	add    $0x10,%esp
     41d:	eb 1a                	jmp    439 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:71
        default:
            _put_char(c, cursor_index);
     41f:	66 83 ec 08          	sub    $0x8,%esp
     423:	66 0f b7 c0          	movzwl %ax,%eax
     427:	66 50                	push   %eax
     429:	66 0f be db          	movsbl %bl,%ebx
     42d:	66 53                	push   %ebx
     42f:	66 e8 84 fd ff ff    	calll  1b9 <_put_char>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:73
            // set_cursor(cursor_index+1);
            break;
     435:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:76
    }
    return ;
}
     439:	66 83 c4 04          	add    $0x4,%esp
     43d:	66 5b                	pop    %ebx
     43f:	66 5e                	pop    %esi
     441:	66 c3                	retl   

00000443 <puti>:
puti():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:78

void puti(u32 n){
     443:	66 56                	push   %esi
     445:	66 53                	push   %ebx
     447:	66 83 ec 44          	sub    $0x44,%esp
     44b:	67 66 8b 4c 24 50    	mov    0x50(%esp),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:79
    int len = 0;
     451:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:81
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     457:	eb 2d                	jmp    486 <puti+0x43>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:82
        num[len] = n % 10;
     459:	66 ba cd cc cc cc    	mov    $0xcccccccd,%edx
     45f:	66 89 c8             	mov    %ecx,%eax
     462:	66 f7 e2             	mul    %edx
     465:	66 c1 ea 03          	shr    $0x3,%edx
     469:	66 89 d6             	mov    %edx,%esi
     46c:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     471:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     476:	66 29 c1             	sub    %eax,%ecx
     479:	67 66 89 4c 9c 04    	mov    %ecx,0x4(%esp,%ebx,4)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:83
        n = n / 10;
     47f:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:84
        len++;
     482:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:81
}

void puti(u32 n){
    int len = 0;
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     486:	66 85 c9             	test   %ecx,%ecx
     489:	75 ce                	jne    459 <puti+0x16>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:86
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     48b:	66 83 eb 01          	sub    $0x1,%ebx
     48f:	eb 23                	jmp    4b4 <puti+0x71>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:87 (discriminator 3)
        putc(num[i]+'0');
     491:	66 83 ec 0c          	sub    $0xc,%esp
     495:	67 66 0f b6 44 9c 10 	movzbl 0x10(%esp,%ebx,4),%eax
     49c:	66 83 c0 30          	add    $0x30,%eax
     4a0:	66 0f be c0          	movsbl %al,%eax
     4a4:	66 50                	push   %eax
     4a6:	66 e8 22 fe ff ff    	calll  2ce <putc>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:86 (discriminator 3)
    while (n != 0){
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     4ac:	66 83 eb 01          	sub    $0x1,%ebx
     4b0:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:86 (discriminator 1)
     4b4:	66 85 db             	test   %ebx,%ebx
     4b7:	79 d8                	jns    491 <puti+0x4e>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:90
        putc(num[i]+'0');
    }
    return ;
}
     4b9:	66 83 c4 44          	add    $0x44,%esp
     4bd:	66 5b                	pop    %ebx
     4bf:	66 5e                	pop    %esi
     4c1:	66 c3                	retl   

000004c3 <puts>:
puts():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:92

void puts(char * str, int size){
     4c3:	66 57                	push   %edi
     4c5:	66 56                	push   %esi
     4c7:	66 53                	push   %ebx
     4c9:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
     4cf:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:93
    int i = 0;
     4d5:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:94
    while (i < size){
     4db:	eb 1a                	jmp    4f7 <puts+0x34>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:95
        putc(str[i]);
     4dd:	66 83 ec 0c          	sub    $0xc,%esp
     4e1:	67 66 0f be 04 1f    	movsbl (%edi,%ebx,1),%eax
     4e7:	66 50                	push   %eax
     4e9:	66 e8 df fd ff ff    	calll  2ce <putc>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:96
        i++;
     4ef:	66 83 c3 01          	add    $0x1,%ebx
     4f3:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:94
    return ;
}

void puts(char * str, int size){
    int i = 0;
    while (i < size){
     4f7:	66 39 f3             	cmp    %esi,%ebx
     4fa:	7c e1                	jl     4dd <puts+0x1a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:99
        putc(str[i]);
        i++;
    }
    return ;
}
     4fc:	66 5b                	pop    %ebx
     4fe:	66 5e                	pop    %esi
     500:	66 5f                	pop    %edi
     502:	66 c3                	retl   

00000504 <sprintf>:
sprintf():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:103



void sprintf(char * dest , char * format, ...){
     504:	66 55                	push   %ebp
     506:	66 57                	push   %edi
     508:	66 56                	push   %esi
     50a:	66 53                	push   %ebx
     50c:	66 83 ec 5c          	sub    $0x5c,%esp
     510:	67 66 8b 6c 24 70    	mov    0x70(%esp),%ebp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:106
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     516:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:105



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     51c:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:104
}



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
     522:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:108
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     528:	e9 33 01             	jmp    65e <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:109
        if (format[src_index] == '%'){
     52b:	3c 25                	cmp    $0x25,%al
     52d:	0f 85 1b 01          	jne    64c <sprintf+0x148>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:111
            src_index++;
            switch(format[src_index]){
     531:	67 66 0f b6 44 39 01 	movzbl 0x1(%ecx,%edi,1),%eax
     538:	3c 64                	cmp    $0x64,%al
     53a:	74 28                	je     564 <sprintf+0x60>
     53c:	3c 73                	cmp    $0x73,%al
     53e:	0f 84 b5 00          	je     5f7 <sprintf+0xf3>
     542:	3c 63                	cmp    $0x63,%al
     544:	0f 85 fe 00          	jne    646 <sprintf+0x142>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:113
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     548:	67 66 8b 44 94 78    	mov    0x78(%esp,%edx,4),%eax
     54e:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:114
                    src_index++;
     553:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:113
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     557:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     55c:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:115
                    src_index++;
                    break;
     561:	e9 fa 00             	jmp    65e <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:118
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     564:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     569:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     56f:	67 66 8b 4c 94 78    	mov    0x78(%esp,%edx,4),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:119
                    int len = 0; 
     575:	66 be 00 00 00 00    	mov    $0x0,%esi
     57b:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:121
                    int num[INT_LENGTH];
                    while (n != 0){
     581:	eb 37                	jmp    5ba <sprintf+0xb6>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:122
                        num[len] = n % 10;
     583:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     589:	66 89 c8             	mov    %ecx,%eax
     58c:	66 f7 ea             	imul   %edx
     58f:	66 c1 fa 02          	sar    $0x2,%edx
     593:	66 89 c8             	mov    %ecx,%eax
     596:	66 c1 f8 1f          	sar    $0x1f,%eax
     59a:	66 29 c2             	sub    %eax,%edx
     59d:	66 89 d7             	mov    %edx,%edi
     5a0:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     5a5:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     5aa:	66 29 c1             	sub    %eax,%ecx
     5ad:	67 66 89 4c b4 14    	mov    %ecx,0x14(%esp,%esi,4)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:123
                        n = n / 10;
     5b3:	66 89 f9             	mov    %edi,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:124
                        len++;
     5b6:	66 83 c6 01          	add    $0x1,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:121
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     5ba:	66 85 c9             	test   %ecx,%ecx
     5bd:	75 c4                	jne    583 <sprintf+0x7f>
     5bf:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:126
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     5c5:	67 66 8d 46 ff       	lea    -0x1(%esi),%eax
     5ca:	eb 1a                	jmp    5e6 <sprintf+0xe2>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     5cc:	67 66 0f b6 74 84 14 	movzbl 0x14(%esp,%eax,4),%esi
     5d3:	67 66 8d 56 30       	lea    0x30(%esi),%edx
     5d8:	67 88 54 1d 00       	mov    %dl,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:126 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     5dd:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     5e1:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:126 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     5e6:	66 85 c0             	test   %eax,%eax
     5e9:	79 e1                	jns    5cc <sprintf+0xc8>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:129
                        dest[des_index++] = num[i]+'0';
                    }
                    src_index++;
     5eb:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:118
                    dest[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     5ef:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     5f5:	eb 67                	jmp    65e <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     5f7:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     5fc:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     602:	67 66 8b 74 94 78    	mov    0x78(%esp,%edx,4),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:134
                    u32 str_len = strlen(str);
     608:	66 83 ec 0c          	sub    $0xc,%esp
     60c:	66 56                	push   %esi
     60e:	66 e8 88 06 00 00    	calll  c9c <strlen>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:136
                    u32 i = 0;
                    while (i < str_len){
     614:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:135
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
     618:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:136
                    while (i < str_len){
     61e:	eb 15                	jmp    635 <sprintf+0x131>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:137
                        dest[des_index++] = str[i++];
     620:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
     626:	67 88 4c 1d 00       	mov    %cl,0x0(%ebp,%ebx,1)
     62b:	67 66 8d 52 01       	lea    0x1(%edx),%edx
     630:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:136
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
     635:	66 39 c2             	cmp    %eax,%edx
     638:	72 e6                	jb     620 <sprintf+0x11c>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:139
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
     63a:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     63e:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:140
                    u32 i = 0;
                    while (i < str_len){
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
     644:	eb 18                	jmp    65e <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:143
                }
                default :
                    src_index++;
     646:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:144
                    break;
     64a:	eb 12                	jmp    65e <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:147
            }
        }
        else if (format[src_index] == '\\') {
     64c:	3c 5c                	cmp    $0x5c,%al
     64e:	74 0e                	je     65e <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:166
                        break;
                }
            }
        }
        else {
            dest[des_index++] = format[src_index++];
     650:	66 83 c7 01          	add    $0x1,%edi
     654:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
     659:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:108
void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     65e:	67 66 8b 4c 24 74    	mov    0x74(%esp),%ecx
     664:	67 66 0f b6 04 39    	movzbl (%ecx,%edi,1),%eax
     66a:	84 c0                	test   %al,%al
     66c:	0f 85 bb fe          	jne    52b <sprintf+0x27>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:169
        }
        else {
            dest[des_index++] = format[src_index++];
        }
    }
    dest[des_index] = 0;
     670:	67 c6 44 1d 00 00    	movb   $0x0,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:171
    return ;
}
     676:	66 83 c4 5c          	add    $0x5c,%esp
     67a:	66 5b                	pop    %ebx
     67c:	66 5e                	pop    %esi
     67e:	66 5f                	pop    %edi
     680:	66 5d                	pop    %ebp
     682:	66 c3                	retl   

00000684 <vprintf>:
vprintf():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:174


void vprintf(char * format, va_list va){
     684:	66 55                	push   %ebp
     686:	66 57                	push   %edi
     688:	66 56                	push   %esi
     68a:	66 53                	push   %ebx
     68c:	66 81 ec 5c 04 00 00 	sub    $0x45c,%esp
     693:	67 66 8b ac 24 70 04 	mov    0x470(%esp),%ebp
     69a:	00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:178
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     69c:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:177


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     6a2:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:176
}


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
     6a8:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:180
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     6ae:	e9 4c 01             	jmp    7fd <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:181
        if (format[src_index] == '%'){
     6b1:	3c 25                	cmp    $0x25,%al
     6b3:	0f 85 34 01          	jne    7eb <vprintf+0x167>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:183
            src_index++;
            switch(format[src_index]){
     6b7:	67 66 0f b6 44 3d 01 	movzbl 0x1(%ebp,%edi,1),%eax
     6be:	3c 64                	cmp    $0x64,%al
     6c0:	74 30                	je     6f2 <vprintf+0x6e>
     6c2:	3c 73                	cmp    $0x73,%al
     6c4:	0f 84 c6 00          	je     78e <vprintf+0x10a>
     6c8:	3c 63                	cmp    $0x63,%al
     6ca:	0f 85 17 01          	jne    7e5 <vprintf+0x161>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:185
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
     6ce:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     6d5:	00 00 
     6d7:	67 66 8b 04 90       	mov    (%eax,%edx,4),%eax
     6dc:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:186
                    src_index++;
     6e1:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:185
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
     6e5:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     6ea:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:187
                    src_index++;
                    break;
     6ef:	e9 0b 01             	jmp    7fd <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:190
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     6f2:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     6f7:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     6fd:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     704:	00 00 
     706:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:191
                    int len = 0; 
     70b:	66 b9 00 00 00 00    	mov    $0x0,%ecx
     711:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:193
                    int num[INT_LENGTH];
                    while (n != 0){
     717:	eb 3a                	jmp    753 <vprintf+0xcf>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:194
                        num[len] = n % 10;
     719:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     71f:	66 89 f0             	mov    %esi,%eax
     722:	66 f7 ea             	imul   %edx
     725:	66 c1 fa 02          	sar    $0x2,%edx
     729:	66 89 f0             	mov    %esi,%eax
     72c:	66 c1 f8 1f          	sar    $0x1f,%eax
     730:	66 29 c2             	sub    %eax,%edx
     733:	66 89 d7             	mov    %edx,%edi
     736:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     73b:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     740:	66 89 f2             	mov    %esi,%edx
     743:	66 29 c2             	sub    %eax,%edx
     746:	67 66 89 54 8c 14    	mov    %edx,0x14(%esp,%ecx,4)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:195
                        n = n / 10;
     74c:	66 89 fe             	mov    %edi,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:196
                        len++;
     74f:	66 83 c1 01          	add    $0x1,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:193
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     753:	66 85 f6             	test   %esi,%esi
     756:	75 c1                	jne    719 <vprintf+0x95>
     758:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:198
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     75e:	66 83 e9 01          	sub    $0x1,%ecx
     762:	eb 19                	jmp    77d <vprintf+0xf9>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
     764:	67 66 0f b6 44 8c 14 	movzbl 0x14(%esp,%ecx,4),%eax
     76b:	66 83 c0 30          	add    $0x30,%eax
     76f:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:198 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     774:	66 83 e9 01          	sub    $0x1,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
     778:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:198 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     77d:	66 85 c9             	test   %ecx,%ecx
     780:	79 e2                	jns    764 <vprintf+0xe0>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:201
                        buf[des_index++] = num[i]+'0';
                    }
                    src_index++;
     782:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:190
                    buf[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     786:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     78c:	eb 6f                	jmp    7fd <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     78e:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     793:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     799:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     7a0:	00 00 
     7a2:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:206
                    u32 str_len = strlen(str);
     7a7:	66 83 ec 0c          	sub    $0xc,%esp
     7ab:	66 56                	push   %esi
     7ad:	66 e8 e9 04 00 00    	calll  c9c <strlen>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:208
                    u32 i = 0;
                    while (i < str_len){
     7b3:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:207
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
     7b7:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:208
                    while (i < str_len){
     7bd:	eb 15                	jmp    7d4 <vprintf+0x150>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:209
                        buf[des_index++] = str[i++];
     7bf:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
     7c5:	67 88 4c 1c 50       	mov    %cl,0x50(%esp,%ebx,1)
     7ca:	67 66 8d 52 01       	lea    0x1(%edx),%edx
     7cf:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:208
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
     7d4:	66 39 c2             	cmp    %eax,%edx
     7d7:	72 e6                	jb     7bf <vprintf+0x13b>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:211
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
     7d9:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     7dd:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:212
                    u32 i = 0;
                    while (i < str_len){
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
     7e3:	eb 18                	jmp    7fd <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:215
                }
                default :
                    src_index++;
     7e5:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:216
                    break;
     7e9:	eb 12                	jmp    7fd <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:219
            }
        }
        else if (format[src_index] == '\\') {
     7eb:	3c 5c                	cmp    $0x5c,%al
     7ed:	74 0e                	je     7fd <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:238
                        break;
                }
            }
        }
        else {
            buf[des_index++] = format[src_index++];
     7ef:	66 83 c7 01          	add    $0x1,%edi
     7f3:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
     7f8:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:180
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     7fd:	67 66 0f b6 44 3d 00 	movzbl 0x0(%ebp,%edi,1),%eax
     804:	84 c0                	test   %al,%al
     806:	0f 85 a7 fe          	jne    6b1 <vprintf+0x2d>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:241
        }
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
     80a:	67 c6 44 1c 50 00    	movb   $0x0,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:242
    for (int i = 0; i < des_index; i++){
     810:	66 be 00 00 00 00    	mov    $0x0,%esi
     816:	eb 1b                	jmp    833 <loader_code_segment+0x33>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:243 (discriminator 3)
        putc(buf[i]);
     818:	66 83 ec 0c          	sub    $0xc,%esp
     81c:	67 66 0f be 44 34 5c 	movsbl 0x5c(%esp,%esi,1),%eax
     823:	66 50                	push   %eax
     825:	66 e8 a3 fa ff ff    	calll  2ce <putc>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:242 (discriminator 3)
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    for (int i = 0; i < des_index; i++){
     82b:	66 83 c6 01          	add    $0x1,%esi
     82f:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:242 (discriminator 1)
     833:	66 39 f3             	cmp    %esi,%ebx
     836:	7f e0                	jg     818 <loader_code_segment+0x18>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:246
        putc(buf[i]);
    }
    return ;
}
     838:	66 81 c4 5c 04 00 00 	add    $0x45c,%esp
     83f:	66 5b                	pop    %ebx
     841:	66 5e                	pop    %esi
     843:	66 5f                	pop    %edi
     845:	66 5d                	pop    %ebp
     847:	66 c3                	retl   

00000849 <printf>:
printf():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:248

void printf(char * format, ...){
     849:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:249
    vprintf(format, &format+1);// 其实这里由于format是个指针，是32位的，所以这里对format的地址+1，也会加4个字节。
     84d:	67 66 8d 44 24 1c    	lea    0x1c(%esp),%eax
     853:	66 50                	push   %eax
     855:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     85b:	66 e8 23 fe ff ff    	calll  684 <vprintf>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:251
    return ;
}
     861:	66 83 c4 1c          	add    $0x1c,%esp
     865:	66 c3                	retl   

00000867 <isalpha>:
isalpha():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:270
//     return ;
// }



int isalpha (int ch){
     867:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:271
    if ('a' <= ch && ch <= 'z')
     86d:	67 66 8d 50 9f       	lea    -0x61(%eax),%edx
     872:	66 83 fa 19          	cmp    $0x19,%edx
     876:	76 12                	jbe    88a <isalpha+0x23>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:273
        return 1;
    if ('A' <= ch && ch <= 'Z')
     878:	66 83 e8 41          	sub    $0x41,%eax
     87c:	66 83 f8 19          	cmp    $0x19,%eax
     880:	77 10                	ja     892 <isalpha+0x2b>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:274
        return 1;
     882:	66 b8 01 00 00 00    	mov    $0x1,%eax
     888:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:272



int isalpha (int ch){
    if ('a' <= ch && ch <= 'z')
        return 1;
     88a:	66 b8 01 00 00 00    	mov    $0x1,%eax
     890:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:275
    if ('A' <= ch && ch <= 'Z')
        return 1;
    return 0;
     892:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:276
}
     898:	66 c3                	retl   

0000089a <isdigit>:
isdigit():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:278
int isdigit (int ch){
    if ('0' <= ch && ch <= '9')
     89a:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
     8a0:	66 83 e8 30          	sub    $0x30,%eax
     8a4:	66 83 f8 09          	cmp    $0x9,%eax
     8a8:	77 08                	ja     8b2 <isdigit+0x18>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:279
        return 1;
     8aa:	66 b8 01 00 00 00    	mov    $0x1,%eax
     8b0:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:280
    return 0;
     8b2:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:281
}
     8b8:	66 c3                	retl   

000008ba <isalnum>:
isalnum():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:283

int isalnum (int ch){
     8ba:	66 53                	push   %ebx
     8bc:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:284
    if ( isalpha(ch) || isdigit(ch) ){
     8c2:	66 53                	push   %ebx
     8c4:	66 e8 9d ff ff ff    	calll  867 <isalpha>
     8ca:	66 83 c4 04          	add    $0x4,%esp
     8ce:	66 85 c0             	test   %eax,%eax
     8d1:	75 13                	jne    8e6 <isalnum+0x2c>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:284 (discriminator 1)
     8d3:	66 53                	push   %ebx
     8d5:	66 e8 bf ff ff ff    	calll  89a <isdigit>
     8db:	66 83 c4 04          	add    $0x4,%esp
     8df:	66 85 c0             	test   %eax,%eax
     8e2:	75 0a                	jne    8ee <isalnum+0x34>
     8e4:	eb 0e                	jmp    8f4 <isalnum+0x3a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:285
        return 1;
     8e6:	66 b8 01 00 00 00    	mov    $0x1,%eax
     8ec:	eb 06                	jmp    8f4 <isalnum+0x3a>
     8ee:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:288
    }
    return 0;
}
     8f4:	66 5b                	pop    %ebx
     8f6:	66 c3                	retl   

000008f8 <ispunct>:
ispunct():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:289
int ispunct (int ch){
     8f8:	66 83 ec 30          	sub    $0x30,%esp
     8fc:	67 66 8b 4c 24 34    	mov    0x34(%esp),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:290
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
     902:	67 66 c7 44 24 0e 21 	movl   $0x24232221,0xe(%esp)
     909:	22 23 24 
     90c:	67 66 c7 44 24 12 25 	movl   $0x28272625,0x12(%esp)
     913:	26 27 28 
     916:	67 66 c7 44 24 16 29 	movl   $0x2c2b2a29,0x16(%esp)
     91d:	2a 2b 2c 
     920:	67 66 c7 44 24 1a 2d 	movl   $0x3a2f2e2d,0x1a(%esp)
     927:	2e 2f 3a 
     92a:	67 66 c7 44 24 1e 3b 	movl   $0x3e3d3c3b,0x1e(%esp)
     931:	3c 3d 3e 
     934:	67 66 c7 44 24 22 3f 	movl   $0x5c5b403f,0x22(%esp)
     93b:	40 5b 5c 
     93e:	67 66 c7 44 24 26 5d 	movl   $0x605f5e5d,0x26(%esp)
     945:	5e 5f 60 
     948:	67 66 c7 44 24 2a 7b 	movl   $0x7e7d7c7b,0x2a(%esp)
     94f:	7c 7d 7e 
     952:	67 c7 44 24 2e 00 00 	movw   $0x0,0x2e(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:291
    for (int i = 0; i < 33; i++){
     959:	66 b8 00 00 00 00    	mov    $0x0,%eax
     95f:	eb 10                	jmp    971 <ispunct+0x79>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:292
        if (ch == punct[i])
     961:	67 66 0f be 54 04 0e 	movsbl 0xe(%esp,%eax,1),%edx
     968:	66 39 ca             	cmp    %ecx,%edx
     96b:	74 12                	je     97f <ispunct+0x87>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:291 (discriminator 2)
    }
    return 0;
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
     96d:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:291 (discriminator 1)
     971:	66 83 f8 20          	cmp    $0x20,%eax
     975:	7e ea                	jle    961 <ispunct+0x69>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:295
        if (ch == punct[i])
            return 1;
    }
    return 0;
     977:	66 b8 00 00 00 00    	mov    $0x0,%eax
     97d:	eb 06                	jmp    985 <ispunct+0x8d>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:293
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
        if (ch == punct[i])
            return 1;
     97f:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:296
    }
    return 0;
}
     985:	66 83 c4 30          	add    $0x30,%esp
     989:	66 c3                	retl   

0000098b <isblank>:
isblank():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:298
int isblank (int ch){
    if (ch == ' ')
     98b:	67 66 83 7c 24 04 20 	cmpl   $0x20,0x4(%esp)
     992:	75 08                	jne    99c <isblank+0x11>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:299
        return 1;
     994:	66 b8 01 00 00 00    	mov    $0x1,%eax
     99a:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:300
    return 0;
     99c:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:301
}
     9a2:	66 c3                	retl   

000009a4 <isprint>:
isprint():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:302
int isprint (int ch){
     9a4:	66 53                	push   %ebx
     9a6:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303
    if (isalpha(ch) || isdigit(ch) || isalnum(ch) || ispunct(ch) || isblank(ch)){
     9ac:	66 53                	push   %ebx
     9ae:	66 e8 b3 fe ff ff    	calll  867 <isalpha>
     9b4:	66 83 c4 04          	add    $0x4,%esp
     9b8:	66 85 c0             	test   %eax,%eax
     9bb:	75 46                	jne    a03 <isprint+0x5f>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 1)
     9bd:	66 53                	push   %ebx
     9bf:	66 e8 d5 fe ff ff    	calll  89a <isdigit>
     9c5:	66 83 c4 04          	add    $0x4,%esp
     9c9:	66 85 c0             	test   %eax,%eax
     9cc:	75 3d                	jne    a0b <isprint+0x67>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 2)
     9ce:	66 53                	push   %ebx
     9d0:	66 e8 e4 fe ff ff    	calll  8ba <isalnum>
     9d6:	66 83 c4 04          	add    $0x4,%esp
     9da:	66 85 c0             	test   %eax,%eax
     9dd:	75 34                	jne    a13 <isprint+0x6f>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 3)
     9df:	66 53                	push   %ebx
     9e1:	66 e8 11 ff ff ff    	calll  8f8 <ispunct>
     9e7:	66 83 c4 04          	add    $0x4,%esp
     9eb:	66 85 c0             	test   %eax,%eax
     9ee:	75 2b                	jne    a1b <isprint+0x77>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 4)
     9f0:	66 53                	push   %ebx
     9f2:	66 e8 93 ff ff ff    	calll  98b <isblank>
     9f8:	66 83 c4 04          	add    $0x4,%esp
     9fc:	66 85 c0             	test   %eax,%eax
     9ff:	75 22                	jne    a23 <isprint+0x7f>
     a01:	eb 26                	jmp    a29 <isprint+0x85>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:304
        return 1;
     a03:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a09:	eb 1e                	jmp    a29 <isprint+0x85>
     a0b:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a11:	eb 16                	jmp    a29 <isprint+0x85>
     a13:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a19:	eb 0e                	jmp    a29 <isprint+0x85>
     a1b:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a21:	eb 06                	jmp    a29 <isprint+0x85>
     a23:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:307
    }
    return 0;
}
     a29:	66 5b                	pop    %ebx
     a2b:	66 c3                	retl   

00000a2d <iscntrl>:
iscntrl():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:308
int iscntrl (int ch){
     a2d:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:310
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
     a33:	66 83 f8 1f          	cmp    $0x1f,%eax
     a37:	76 0e                	jbe    a47 <iscntrl+0x1a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:312
        return 1;
    if (ch == 0x7f)
     a39:	66 83 f8 7f          	cmp    $0x7f,%eax
     a3d:	75 10                	jne    a4f <iscntrl+0x22>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:313
        return 1;
     a3f:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a45:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:311
    return 0;
}
int iscntrl (int ch){
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
        return 1;
     a47:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a4d:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:314
    if (ch == 0x7f)
        return 1;
    return 0;
     a4f:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:315
}
     a55:	66 c3                	retl   

00000a57 <read_n_sector>:
read_n_sector():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:321

/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
     a57:	66 55                	push   %ebp
     a59:	66 57                	push   %edi
     a5b:	66 56                	push   %esi
     a5d:	66 53                	push   %ebx
     a5f:	66 83 ec 1c          	sub    $0x1c,%esp
     a63:	67 66 0f b7 7c 24 30 	movzwl 0x30(%esp),%edi
     a6a:	67 66 0f b7 74 24 34 	movzwl 0x34(%esp),%esi
     a71:	67 66 0f b7 44 24 38 	movzwl 0x38(%esp),%eax
     a78:	67 89 44 24 0c       	mov    %ax,0xc(%esp)
     a7d:	67 66 0f b7 44 24 3c 	movzwl 0x3c(%esp),%eax
     a84:	67 89 44 24 0e       	mov    %ax,0xe(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:322
    for (int i = 0; i < number; i++){
     a89:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     a8f:	eb 7d                	jmp    b0e <read_n_sector+0xb7>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:323 (discriminator 3)
        int sector = (sector_code+i) % 18+1;
     a91:	66 0f b7 ef          	movzwl %di,%ebp
     a95:	66 01 dd             	add    %ebx,%ebp
     a98:	66 ba 39 8e e3 38    	mov    $0x38e38e39,%edx
     a9e:	66 89 e8             	mov    %ebp,%eax
     aa1:	66 f7 ea             	imul   %edx
     aa4:	66 c1 fa 02          	sar    $0x2,%edx
     aa8:	66 89 e8             	mov    %ebp,%eax
     aab:	66 c1 f8 1f          	sar    $0x1f,%eax
     aaf:	66 29 c2             	sub    %eax,%edx
     ab2:	66 89 d1             	mov    %edx,%ecx
     ab5:	67 66 8d 14 d2       	lea    (%edx,%edx,8),%edx
     aba:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     abf:	66 89 ea             	mov    %ebp,%edx
     ac2:	66 29 c2             	sub    %eax,%edx
     ac5:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:325 (discriminator 3)
        int mid = (sector_code+i) / 18;
        int cylinder = mid >> 1;
     ac9:	66 89 cd             	mov    %ecx,%ebp
     acc:	66 d1 fd             	sar    %ebp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:327 (discriminator 3)
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
     acf:	66 83 ec 0c          	sub    $0xc,%esp
     ad3:	66 89 d8             	mov    %ebx,%eax
     ad6:	66 c1 e0 09          	shl    $0x9,%eax
     ada:	67 03 44 24 1a       	add    0x1a(%esp),%ax
     adf:	66 0f b7 c0          	movzwl %ax,%eax
     ae3:	66 50                	push   %eax
     ae5:	67 66 0f b7 44 24 1c 	movzwl 0x1c(%esp),%eax
     aec:	66 50                	push   %eax
     aee:	66 0f b7 d2          	movzwl %dx,%edx
     af2:	66 52                	push   %edx
     af4:	66 0f b7 ed          	movzwl %bp,%ebp
     af8:	66 55                	push   %ebp
     afa:	66 83 e1 01          	and    $0x1,%ecx
     afe:	66 51                	push   %ecx
     b00:	66 e8 26 01 00 00    	calll  c2c <read_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:322 (discriminator 3)
/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    for (int i = 0; i < number; i++){
     b06:	66 83 c3 01          	add    $0x1,%ebx
     b0a:	66 83 c4 20          	add    $0x20,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:322 (discriminator 1)
     b0e:	66 0f b7 c6          	movzwl %si,%eax
     b12:	66 39 c3             	cmp    %eax,%ebx
     b15:	0f 8c 78 ff          	jl     a91 <read_n_sector+0x3a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:330
        int cylinder = mid >> 1;
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    }
    return ;
}
     b19:	66 83 c4 1c          	add    $0x1c,%esp
     b1d:	66 5b                	pop    %ebx
     b1f:	66 5e                	pop    %esi
     b21:	66 5f                	pop    %edi
     b23:	66 5d                	pop    %ebp
     b25:	66 c3                	retl   
     b27:	66 90                	xchg   %eax,%eax
     b29:	66 90                	xchg   %eax,%eax
     b2b:	66 90                	xchg   %eax,%eax
     b2d:	66 90                	xchg   %eax,%eax
     b2f:	90                   	nop

00000b30 <write_port_byte>:
write_port_byte():
     b30:	66 55                	push   %ebp
     b32:	66 89 e5             	mov    %esp,%ebp
     b35:	53                   	push   %bx
     b36:	51                   	push   %cx
     b37:	52                   	push   %dx
     b38:	56                   	push   %si
     b39:	57                   	push   %di
     b3a:	55                   	push   %bp
     b3b:	1e                   	push   %ds
     b3c:	06                   	push   %es
     b3d:	16                   	push   %ss
     b3e:	67 8b 5d 08          	mov    0x8(%ebp),%bx
     b42:	67 8a 45 0c          	mov    0xc(%ebp),%al
     b46:	cd 34                	int    $0x34
     b48:	17                   	pop    %ss
     b49:	07                   	pop    %es
     b4a:	1f                   	pop    %ds
     b4b:	5d                   	pop    %bp
     b4c:	5f                   	pop    %di
     b4d:	5e                   	pop    %si
     b4e:	5a                   	pop    %dx
     b4f:	59                   	pop    %cx
     b50:	5b                   	pop    %bx
     b51:	66 89 ec             	mov    %ebp,%esp
     b54:	66 5d                	pop    %ebp
     b56:	66 c3                	retl   

00000b58 <read_port_byte>:
read_port_byte():
     b58:	66 55                	push   %ebp
     b5a:	66 89 e5             	mov    %esp,%ebp
     b5d:	53                   	push   %bx
     b5e:	51                   	push   %cx
     b5f:	52                   	push   %dx
     b60:	56                   	push   %si
     b61:	57                   	push   %di
     b62:	55                   	push   %bp
     b63:	1e                   	push   %ds
     b64:	06                   	push   %es
     b65:	16                   	push   %ss
     b66:	67 8b 45 08          	mov    0x8(%ebp),%ax
     b6a:	cd 33                	int    $0x33
     b6c:	17                   	pop    %ss
     b6d:	07                   	pop    %es
     b6e:	1f                   	pop    %ds
     b6f:	5d                   	pop    %bp
     b70:	5f                   	pop    %di
     b71:	5e                   	pop    %si
     b72:	5a                   	pop    %dx
     b73:	59                   	pop    %cx
     b74:	5b                   	pop    %bx
     b75:	66 89 ec             	mov    %ebp,%esp
     b78:	66 5d                	pop    %ebp
     b7a:	66 c3                	retl   

00000b7c <write_memory_byte>:
write_memory_byte():
     b7c:	66 55                	push   %ebp
     b7e:	66 89 e5             	mov    %esp,%ebp
     b81:	50                   	push   %ax
     b82:	53                   	push   %bx
     b83:	52                   	push   %dx
     b84:	1e                   	push   %ds
     b85:	67 8b 5d 08          	mov    0x8(%ebp),%bx
     b89:	67 8b 45 0a          	mov    0xa(%ebp),%ax
     b8d:	c1 e0 0c             	shl    $0xc,%ax
     b90:	67 8a 4d 0c          	mov    0xc(%ebp),%cl
     b94:	cd 36                	int    $0x36
     b96:	1f                   	pop    %ds
     b97:	5a                   	pop    %dx
     b98:	5b                   	pop    %bx
     b99:	58                   	pop    %ax
     b9a:	66 89 ec             	mov    %ebp,%esp
     b9d:	66 5d                	pop    %ebp
     b9f:	66 c3                	retl   

00000ba1 <read_memory_byte>:
read_memory_byte():
     ba1:	66 55                	push   %ebp
     ba3:	66 89 e5             	mov    %esp,%ebp
     ba6:	53                   	push   %bx
     ba7:	51                   	push   %cx
     ba8:	52                   	push   %dx
     ba9:	56                   	push   %si
     baa:	57                   	push   %di
     bab:	55                   	push   %bp
     bac:	1e                   	push   %ds
     bad:	06                   	push   %es
     bae:	16                   	push   %ss
     baf:	67 8b 5d 08          	mov    0x8(%ebp),%bx
     bb3:	67 8b 45 0a          	mov    0xa(%ebp),%ax
     bb7:	c1 e0 0c             	shl    $0xc,%ax
     bba:	cd 35                	int    $0x35
     bbc:	17                   	pop    %ss
     bbd:	07                   	pop    %es
     bbe:	1f                   	pop    %ds
     bbf:	5d                   	pop    %bp
     bc0:	5f                   	pop    %di
     bc1:	5e                   	pop    %si
     bc2:	5a                   	pop    %dx
     bc3:	59                   	pop    %cx
     bc4:	5b                   	pop    %bx
     bc5:	66 89 ec             	mov    %ebp,%esp
     bc8:	66 5d                	pop    %ebp
     bca:	66 c3                	retl   

00000bcc <check_keyboard>:
check_keyboard():
     bcc:	b4 01                	mov    $0x1,%ah
     bce:	cd 16                	int    $0x16
     bd0:	74 05                	je     bd7 <check_keyboard.have_key>
     bd2:	b8 00 00             	mov    $0x0,%ax
     bd5:	eb 03                	jmp    bda <check_keyboard.check_keyboard_return>

00000bd7 <check_keyboard.have_key>:
check_keyboard.have_key():
     bd7:	b8 01 00             	mov    $0x1,%ax

00000bda <check_keyboard.check_keyboard_return>:
check_keyboard.check_keyboard_return():
     bda:	66 c3                	retl   

00000bdc <get_keyboard>:
get_keyboard():
     bdc:	b4 00                	mov    $0x0,%ah
     bde:	cd 16                	int    $0x16
     be0:	66 c3                	retl   

00000be2 <clean_screen>:
clean_screen():
     be2:	50                   	push   %ax
     be3:	53                   	push   %bx
     be4:	51                   	push   %cx
     be5:	52                   	push   %dx
     be6:	b4 06                	mov    $0x6,%ah
     be8:	b0 00                	mov    $0x0,%al
     bea:	b5 00                	mov    $0x0,%ch
     bec:	b1 00                	mov    $0x0,%cl
     bee:	b6 17                	mov    $0x17,%dh
     bf0:	b2 4f                	mov    $0x4f,%dl
     bf2:	b7 1f                	mov    $0x1f,%bh
     bf4:	cd 10                	int    $0x10
     bf6:	5a                   	pop    %dx
     bf7:	59                   	pop    %cx
     bf8:	5b                   	pop    %bx
     bf9:	58                   	pop    %ax
     bfa:	66 c3                	retl   

00000bfc <scroll_screen>:
scroll_screen():
     bfc:	50                   	push   %ax
     bfd:	53                   	push   %bx
     bfe:	51                   	push   %cx
     bff:	52                   	push   %dx
     c00:	b4 06                	mov    $0x6,%ah
     c02:	b0 01                	mov    $0x1,%al
     c04:	b5 00                	mov    $0x0,%ch
     c06:	b1 00                	mov    $0x0,%cl
     c08:	b6 17                	mov    $0x17,%dh
     c0a:	b2 4f                	mov    $0x4f,%dl
     c0c:	b7 10                	mov    $0x10,%bh
     c0e:	cd 10                	int    $0x10
     c10:	5a                   	pop    %dx
     c11:	59                   	pop    %cx
     c12:	5b                   	pop    %bx
     c13:	58                   	pop    %ax
     c14:	66 c3                	retl   

00000c16 <get_random>:
get_random():
     c16:	53                   	push   %bx
     c17:	b8 00 00             	mov    $0x0,%ax
     c1a:	e6 43                	out    %al,$0x43
     c1c:	e4 40                	in     $0x40,%al
     c1e:	b3 08                	mov    $0x8,%bl
     c20:	f6 f3                	div    %bl
     c22:	88 e0                	mov    %ah,%al
     c24:	b4 00                	mov    $0x0,%ah
     c26:	83 c0 72             	add    $0x72,%ax
     c29:	5b                   	pop    %bx
     c2a:	66 c3                	retl   

00000c2c <read_sector>:
read_sector():
     c2c:	66 55                	push   %ebp
     c2e:	66 89 e5             	mov    %esp,%ebp
     c31:	50                   	push   %ax
     c32:	53                   	push   %bx
     c33:	51                   	push   %cx
     c34:	52                   	push   %dx
     c35:	06                   	push   %es
     c36:	67 8b 45 14          	mov    0x14(%ebp),%ax
     c3a:	8e c0                	mov    %ax,%es
     c3c:	67 8b 5d 18          	mov    0x18(%ebp),%bx
     c40:	b4 02                	mov    $0x2,%ah
     c42:	b0 01                	mov    $0x1,%al
     c44:	b2 00                	mov    $0x0,%dl
     c46:	67 8a 75 08          	mov    0x8(%ebp),%dh
     c4a:	67 8a 6d 0c          	mov    0xc(%ebp),%ch
     c4e:	67 8a 4d 10          	mov    0x10(%ebp),%cl
     c52:	cd 13                	int    $0x13
     c54:	07                   	pop    %es
     c55:	5a                   	pop    %dx
     c56:	59                   	pop    %cx
     c57:	5b                   	pop    %bx
     c58:	58                   	pop    %ax
     c59:	66 89 ec             	mov    %ebp,%esp
     c5c:	66 5d                	pop    %ebp
     c5e:	66 c3                	retl   

00000c60 <print_my_name>:
print_my_name():
     c60:	50                   	push   %ax
     c61:	53                   	push   %bx
     c62:	51                   	push   %cx
     c63:	52                   	push   %dx
     c64:	1e                   	push   %ds
     c65:	06                   	push   %es
     c66:	55                   	push   %bp
     c67:	b8 00 10             	mov    $0x1000,%ax
     c6a:	8e c0                	mov    %ax,%es
     c6c:	b8 9c 1f             	mov    $0x1f9c,%ax
     c6f:	89 c5                	mov    %ax,%bp
     c71:	b4 13                	mov    $0x13,%ah
     c73:	b0 00                	mov    $0x0,%al
     c75:	b7 00                	mov    $0x0,%bh
     c77:	b3 0f                	mov    $0xf,%bl
     c79:	b9 19 00             	mov    $0x19,%cx
     c7c:	b6 18                	mov    $0x18,%dh
     c7e:	b2 01                	mov    $0x1,%dl
     c80:	cd 10                	int    $0x10
     c82:	5d                   	pop    %bp
     c83:	07                   	pop    %es
     c84:	1f                   	pop    %ds
     c85:	5a                   	pop    %dx
     c86:	59                   	pop    %cx
     c87:	5b                   	pop    %bx
     c88:	58                   	pop    %ax
     c89:	c3                   	ret    

00000c8a <reboot>:
reboot():
     c8a:	b4 06                	mov    $0x6,%ah
     c8c:	b0 00                	mov    $0x0,%al
     c8e:	b5 00                	mov    $0x0,%ch
     c90:	b1 00                	mov    $0x0,%cl
     c92:	b6 18                	mov    $0x18,%dh
     c94:	b2 4f                	mov    $0x4f,%dl
     c96:	b7 1f                	mov    $0x1f,%bh
     c98:	cd 10                	int    $0x10
     c9a:	cd 19                	int    $0x19

00000c9c <strlen>:
strlen():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:3
#include "../include/type.h"

size_t strlen(char * str){
     c9c:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:4
    u32 len = 0;
     ca2:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:5
    while (str[len] != 0){
     ca8:	eb 04                	jmp    cae <strlen+0x12>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:6
        len++;
     caa:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:5
#include "../include/type.h"

size_t strlen(char * str){
    u32 len = 0;
    while (str[len] != 0){
     cae:	67 80 3c 02 00       	cmpb   $0x0,(%edx,%eax,1)
     cb3:	75 f5                	jne    caa <strlen+0xe>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:9
        len++;
    }
    return len;
}
     cb5:	66 f3 c3             	repz retl 

00000cb8 <strncpy>:
strncpy():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:11

void strncpy(char * dest, char * src, u32 size){
     cb8:	66 56                	push   %esi
     cba:	66 53                	push   %ebx
     cbc:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
     cc2:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
     cc8:	67 66 8b 4c 24 14    	mov    0x14(%esp),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:12
    for (int i = 0; i < size; i++){
     cce:	66 b8 00 00 00 00    	mov    $0x0,%eax
     cd4:	eb 0e                	jmp    ce4 <strncpy+0x2c>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:13 (discriminator 3)
        dest[i] = src[i];
     cd6:	67 66 0f b6 14 06    	movzbl (%esi,%eax,1),%edx
     cdc:	67 88 14 03          	mov    %dl,(%ebx,%eax,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:12 (discriminator 3)
    }
    return len;
}

void strncpy(char * dest, char * src, u32 size){
    for (int i = 0; i < size; i++){
     ce0:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:12 (discriminator 1)
     ce4:	66 39 c8             	cmp    %ecx,%eax
     ce7:	72 ed                	jb     cd6 <strncpy+0x1e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:15
        dest[i] = src[i];
    }
    dest[size] = '\0';
     ce9:	67 c6 04 0b 00       	movb   $0x0,(%ebx,%ecx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:16
}
     cee:	66 5b                	pop    %ebx
     cf0:	66 5e                	pop    %esi
     cf2:	66 c3                	retl   

00000cf4 <strcmp>:
strcmp():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:18

int strcmp(char * lhs, char * rhs){
     cf4:	66 57                	push   %edi
     cf6:	66 56                	push   %esi
     cf8:	66 53                	push   %ebx
     cfa:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
     d00:	67 66 8b 7c 24 14    	mov    0x14(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:19
    int lhs_len = strlen(lhs);
     d06:	66 56                	push   %esi
     d08:	66 e8 8e ff ff ff    	calll  c9c <strlen>
     d0e:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:20
    int rhs_len = strlen(rhs);
     d11:	67 66 89 3c 24       	mov    %edi,(%esp)
     d16:	66 e8 80 ff ff ff    	calll  c9c <strlen>
     d1c:	66 83 c4 04          	add    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:21
    if (lhs_len != rhs_len){
     d20:	66 39 c3             	cmp    %eax,%ebx
     d23:	75 25                	jne    d4a <strcmp+0x56>
     d25:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d2b:	eb 10                	jmp    d3d <strcmp+0x49>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:25
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
     d2d:	67 66 0f b6 14 07    	movzbl (%edi,%eax,1),%edx
     d33:	67 38 14 06          	cmp    %dl,(%esi,%eax,1)
     d37:	75 19                	jne    d52 <strcmp+0x5e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:24 (discriminator 2)
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
     d39:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:24 (discriminator 1)
     d3d:	66 39 d8             	cmp    %ebx,%eax
     d40:	7c eb                	jl     d2d <strcmp+0x39>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:28
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
     d42:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d48:	eb 0e                	jmp    d58 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:22

int strcmp(char * lhs, char * rhs){
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
     d4a:	66 b8 01 00 00 00    	mov    $0x1,%eax
     d50:	eb 06                	jmp    d58 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:26
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
            return 1;
     d52:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:29
    }
    return 0;
}
     d58:	66 5b                	pop    %ebx
     d5a:	66 5e                	pop    %esi
     d5c:	66 5f                	pop    %edi
     d5e:	66 c3                	retl   

00000d60 <strncmp>:
strncmp():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:31

int strncmp(char * lhs, char * rhs, int size){
     d60:	66 56                	push   %esi
     d62:	66 53                	push   %ebx
     d64:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
     d6a:	67 66 8b 4c 24 10    	mov    0x10(%esp),%ecx
     d70:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:32
    for (int i = 0; i < size; i++){
     d76:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d7c:	eb 10                	jmp    d8e <strncmp+0x2e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:33
        if (lhs[i] != rhs[i])
     d7e:	67 66 0f b6 14 01    	movzbl (%ecx,%eax,1),%edx
     d84:	67 38 14 03          	cmp    %dl,(%ebx,%eax,1)
     d88:	75 11                	jne    d9b <strncmp+0x3b>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:32 (discriminator 2)
    }
    return 0;
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
     d8a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:32 (discriminator 1)
     d8e:	66 39 f0             	cmp    %esi,%eax
     d91:	7c eb                	jl     d7e <strncmp+0x1e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:36
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
     d93:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d99:	eb 06                	jmp    da1 <strncmp+0x41>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:34
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
        if (lhs[i] != rhs[i])
            return 1;
     d9b:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:37
    }
    return 0;
     da1:	66 5b                	pop    %ebx
     da3:	66 5e                	pop    %esi
     da5:	66 c3                	retl   

00000da7 <install_system_call>:
install_system_call():
/mnt/e/code/my_operating_system/os/kernel/../lib/system_call.c:6
#include "../include/type.h"
#include "../include/stdio.h"
#include "../include/global.h"

void install_system_call(int system_call_number, void (*function)() ){
    system_call[system_call_number] = (u16) function;
     da7:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     dad:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
     db3:	67 89 94 00 a0 2b 00 	mov    %dx,0x2ba0(%eax,%eax,1)
     dba:	00 
     dbb:	66 c3                	retl   

00000dbd <cstart>:
cstart():
/mnt/e/code/my_operating_system/os/kernel/start.c:10
#include "../include/global.h"
#include "../include/system_call.h"
#include "../include/fsystem.h"

void test_system_call();
int cstart(){
     dbd:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:12
    // 初始化文件系统
    init_fsystem();
     dc1:	66 e8 19 05 00 00    	calll  12e0 <init_fsystem>
/mnt/e/code/my_operating_system/os/kernel/start.c:14
    // 清屏
    clean_screen();
     dc7:	66 e8 15 fe ff ff    	calll  be2 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/start.c:16
    // 将光标设置为0 TODO:
    set_cursor(0);
     dcd:	66 83 ec 0c          	sub    $0xc,%esp
     dd1:	66 6a 00             	pushl  $0x0
     dd4:	66 e8 26 f4 ff ff    	calll  200 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:20
    // install_system_call(2, test_system_call);
    // while (1){}
    return 0;
}
     dda:	66 b8 00 00 00 00    	mov    $0x0,%eax
     de0:	66 83 c4 1c          	add    $0x1c,%esp
     de4:	66 c3                	retl   

00000de6 <parser>:
parser():
/mnt/e/code/my_operating_system/os/kernel/tty.c:89
    }
    return ;
}


void parser(){
     de6:	66 56                	push   %esi
     de8:	66 53                	push   %ebx
     dea:	66 83 ec 74          	sub    $0x74,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:93
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
     dee:	66 be 00 00 00 00    	mov    $0x0,%esi
/mnt/e/code/my_operating_system/os/kernel/tty.c:92


void parser(){
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
     df4:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:91
}


void parser(){
    char arguments[10][10];
    int input_start = 0;
     dfa:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     e00:	eb 64                	jmp    e66 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:96
        if(input_buf[input_end] == ' ' || input_buf[input_end] == '\0'){
     e02:	67 66 0f b6 83 e0 1f 	movzbl 0x1fe0(%ebx),%eax
     e09:	00 00 
     e0b:	3c 20                	cmp    $0x20,%al
     e0d:	0f 94 c1             	sete   %cl
     e10:	84 c0                	test   %al,%al
     e12:	0f 94 c0             	sete   %al
     e15:	08 c1                	or     %al,%cl
     e17:	74 49                	je     e62 <parser+0x7c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:97
            if (input_start == input_end){ // 如果并没有参数，那么继续
     e19:	66 39 da             	cmp    %ebx,%edx
     e1c:	75 0a                	jne    e28 <parser+0x42>
/mnt/e/code/my_operating_system/os/kernel/tty.c:98
                input_start++;
     e1e:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:99
                input_end++;
     e22:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:100
                continue;
     e26:	eb 3e                	jmp    e66 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:103
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
     e28:	66 89 d9             	mov    %ebx,%ecx
     e2b:	66 29 d1             	sub    %edx,%ecx
     e2e:	67 66 8d 04 b6       	lea    (%esi,%esi,4),%eax
     e33:	67 66 8d 44 44 0c    	lea    0xc(%esp,%eax,2),%eax
     e39:	66 83 ec 04          	sub    $0x4,%esp
     e3d:	66 51                	push   %ecx
     e3f:	66 81 c2 e0 1f 00 00 	add    $0x1fe0,%edx
     e46:	66 52                	push   %edx
     e48:	66 50                	push   %eax
     e4a:	66 e8 68 fe ff ff    	calll  cb8 <strncpy>
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
     e50:	67 66 8d 53 01       	lea    0x1(%ebx),%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:106
                input_start = input_end;
                arguments_num++;
     e55:	66 83 c6 01          	add    $0x1,%esi
     e59:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
                continue;
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
                input_end++;
     e5d:	66 89 d3             	mov    %edx,%ebx
     e60:	eb 04                	jmp    e66 <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:110
                input_start = input_end;
                arguments_num++;
            }
        }
        else {// 有参数，还没有读到末尾
            input_end++;
     e62:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     e66:	66 3b 1e c0 1f       	cmp    0x1fc0,%ebx
     e6b:	7e 95                	jle    e02 <parser+0x1c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:117
        }
    }

    // 完成分词，开始进行解析。

    if(!strcmp(arguments[0],"run")){// 如果返回0，就是相等了
     e6d:	66 83 ec 08          	sub    $0x8,%esp
     e71:	66 68 20 1e 00 00    	pushl  $0x1e20
     e77:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     e7d:	66 50                	push   %eax
     e7f:	66 e8 6f fe ff ff    	calll  cf4 <strcmp>
     e85:	66 83 c4 10          	add    $0x10,%esp
     e89:	66 85 c0             	test   %eax,%eax
     e8c:	75 31                	jne    ebf <parser+0xd9>
/mnt/e/code/my_operating_system/os/kernel/tty.c:122
        // 运行一个用户程序。
        // 先从软盘中加载一个指定程序到内存处，然后开始执行。
        // 考虑维护一个空闲空间的指针，然后每加载一个程序，如果可行的话。
        void (**my_program)();
        *my_program = 0x4000;
     e8e:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     e94:	67 66 c7 03 00 40 00 	movl   $0x4000,(%ebx)
     e9b:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:123
        fs_load_by_name(arguments[1],*my_program);
     e9c:	66 83 ec 08          	sub    $0x8,%esp
     ea0:	66 68 00 40 00 00    	pushl  $0x4000
     ea6:	67 66 8d 44 24 22    	lea    0x22(%esp),%eax
     eac:	66 50                	push   %eax
     eae:	66 e8 89 06 00 00    	calll  153d <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/tty.c:124
        (*my_program)();
     eb4:	67 66 ff 13          	calll  *(%ebx)
     eb8:	66 83 c4 10          	add    $0x10,%esp
     ebc:	e9 1b 01             	jmp    fda <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     ebf:	66 83 ec 08          	sub    $0x8,%esp
     ec3:	66 68 24 1e 00 00    	pushl  $0x1e24
     ec9:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     ecf:	66 50                	push   %eax
     ed1:	66 e8 1d fe ff ff    	calll  cf4 <strcmp>
     ed7:	66 83 c4 10          	add    $0x10,%esp
     edb:	66 85 c0             	test   %eax,%eax
     ede:	75 23                	jne    f03 <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126 (discriminator 1)
     ee0:	66 83 fe 01          	cmp    $0x1,%esi
     ee4:	75 1d                	jne    f03 <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:127
        printf("\n\n");
     ee6:	66 83 ec 0c          	sub    $0xc,%esp
     eea:	66 68 27 1e 00 00    	pushl  $0x1e27
     ef0:	66 e8 53 f9 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:128
        fs_show_root_file_table();
     ef6:	66 e8 a7 06 00 00    	calll  15a3 <fs_show_root_file_table>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
        void (**my_program)();
        *my_program = 0x4000;
        fs_load_by_name(arguments[1],*my_program);
        (*my_program)();
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     efc:	66 83 c4 10          	add    $0x10,%esp
     f00:	e9 d7 00             	jmp    fda <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     f03:	66 83 ec 08          	sub    $0x8,%esp
     f07:	66 68 2a 1e 00 00    	pushl  $0x1e2a
     f0d:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     f13:	66 50                	push   %eax
     f15:	66 e8 d9 fd ff ff    	calll  cf4 <strcmp>
     f1b:	66 83 c4 10          	add    $0x10,%esp
     f1f:	66 85 c0             	test   %eax,%eax
     f22:	75 23                	jne    f47 <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130 (discriminator 1)
     f24:	66 83 fe 01          	cmp    $0x1,%esi
     f28:	75 1d                	jne    f47 <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:131
        printf("\n\n");
     f2a:	66 83 ec 0c          	sub    $0xc,%esp
     f2e:	66 68 27 1e 00 00    	pushl  $0x1e27
     f34:	66 e8 0f f9 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:132
        reboot();
     f3a:	66 e8 4a fd ff ff    	calll  c8a <reboot>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     f40:	66 83 c4 10          	add    $0x10,%esp
     f44:	e9 93 00             	jmp    fda <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134
        printf("\n\n");
        reboot();
    }
    else if(!strcmp(arguments[0],"help") && arguments_num == 1){
     f47:	66 83 ec 08          	sub    $0x8,%esp
     f4b:	66 68 31 1e 00 00    	pushl  $0x1e31
     f51:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     f57:	66 50                	push   %eax
     f59:	66 e8 95 fd ff ff    	calll  cf4 <strcmp>
     f5f:	66 83 c4 10          	add    $0x10,%esp
     f63:	66 85 c0             	test   %eax,%eax
     f66:	75 58                	jne    fc0 <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134 (discriminator 1)
     f68:	66 83 fe 01          	cmp    $0x1,%esi
     f6c:	75 52                	jne    fc0 <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:135
        printf("\n\n");
     f6e:	66 83 ec 0c          	sub    $0xc,%esp
     f72:	66 68 27 1e 00 00    	pushl  $0x1e27
     f78:	66 e8 cb f8 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:136
        printf("ls        : show the file in the root folder.\n");
     f7e:	67 66 c7 04 24 a4 1e 	movl   $0x1ea4,(%esp)
     f85:	00 00 
     f87:	66 e8 bc f8 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:137
        printf("run [name]: run the file in the root folder.\n");
     f8d:	67 66 c7 04 24 d4 1e 	movl   $0x1ed4,(%esp)
     f94:	00 00 
     f96:	66 e8 ad f8 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:138
        printf("help      : show the help message.\n");
     f9c:	67 66 c7 04 24 04 1f 	movl   $0x1f04,(%esp)
     fa3:	00 00 
     fa5:	66 e8 9e f8 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:139
        printf("reboot    : reboot the machine.\n");
     fab:	67 66 c7 04 24 28 1f 	movl   $0x1f28,(%esp)
     fb2:	00 00 
     fb4:	66 e8 8f f8 ff ff    	calll  849 <printf>
     fba:	66 83 c4 10          	add    $0x10,%esp
     fbe:	eb 1a                	jmp    fda <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:142
    }
    else {
        printf("\n%s : command not found! \n", input_buf);
     fc0:	66 83 ec 08          	sub    $0x8,%esp
     fc4:	66 68 e0 1f 00 00    	pushl  $0x1fe0
     fca:	66 68 36 1e 00 00    	pushl  $0x1e36
     fd0:	66 e8 73 f8 ff ff    	calll  849 <printf>
     fd6:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:144
    }
    int current_cursor = get_cursor();
     fda:	66 e8 92 f2 ff ff    	calll  272 <get_cursor>
     fe0:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:145
    command_line_row = (current_cursor / 80);
     fe4:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     fea:	66 f7 ea             	imul   %edx
     fed:	66 c1 fa 05          	sar    $0x5,%edx
     ff1:	66 89 16 98 1f       	mov    %edx,0x1f98
/mnt/e/code/my_operating_system/os/kernel/tty.c:148
    // printf("arguments: %d|%s|%s|",arguments_num, arguments[0],arguments[1]);
    return ;
}
     ff6:	66 83 c4 74          	add    $0x74,%esp
     ffa:	66 5b                	pop    %ebx
     ffc:	66 5e                	pop    %esi
     ffe:	66 c3                	retl   

00001000 <create_a_line>:
create_a_line():
/mnt/e/code/my_operating_system/os/kernel/tty.c:151

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    1000:	66 83 ec 2c          	sub    $0x2c,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:152
    char message[30] = "walker@walker-pc ~ $ \0";
    1004:	66 a1 74 1f          	mov    0x1f74,%eax
    1008:	67 66 89 44 24 02    	mov    %eax,0x2(%esp)
    100e:	66 a1 78 1f          	mov    0x1f78,%eax
    1012:	67 66 89 44 24 06    	mov    %eax,0x6(%esp)
    1018:	66 a1 7c 1f          	mov    0x1f7c,%eax
    101c:	67 66 89 44 24 0a    	mov    %eax,0xa(%esp)
    1022:	66 a1 80 1f          	mov    0x1f80,%eax
    1026:	67 66 89 44 24 0e    	mov    %eax,0xe(%esp)
    102c:	66 a1 84 1f          	mov    0x1f84,%eax
    1030:	67 66 89 44 24 12    	mov    %eax,0x12(%esp)
    1036:	66 0f b7 06 88 1f    	movzwl 0x1f88,%eax
    103c:	67 89 44 24 16       	mov    %ax,0x16(%esp)
    1041:	66 0f b6 06 8a 1f    	movzbl 0x1f8a,%eax
    1047:	67 88 44 24 18       	mov    %al,0x18(%esp)
    104c:	67 66 c7 44 24 19 00 	movl   $0x0,0x19(%esp)
    1053:	00 00 00 
    1056:	67 c7 44 24 1d 00 00 	movw   $0x0,0x1d(%esp)
    105d:	67 c6 44 24 1f 00    	movb   $0x0,0x1f(%esp)
/mnt/e/code/my_operating_system/os/kernel/tty.c:153
    for (int i = 0; i < MAX_BUF; i++){
    1063:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1069:	eb 0c                	jmp    1077 <create_a_line+0x77>
/mnt/e/code/my_operating_system/os/kernel/tty.c:154 (discriminator 3)
        input_buf[i] = 0;
    106b:	67 c6 80 e0 1f 00 00 	movb   $0x0,0x1fe0(%eax)
    1072:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 3)
}

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    char message[30] = "walker@walker-pc ~ $ \0";
    for (int i = 0; i < MAX_BUF; i++){
    1073:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 1)
    1077:	66 83 f8 63          	cmp    $0x63,%eax
    107b:	7e ee                	jle    106b <create_a_line+0x6b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:156
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    107d:	66 83 ec 0c          	sub    $0xc,%esp
    1081:	67 66 8d 44 24 0e    	lea    0xe(%esp),%eax
    1087:	66 50                	push   %eax
    1089:	66 e8 0d fc ff ff    	calll  c9c <strlen>
    108f:	66 a3 c4 1f          	mov    %eax,0x1fc4
/mnt/e/code/my_operating_system/os/kernel/tty.c:157
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    1093:	66 03 06 c0 1f       	add    0x1fc0,%eax
    1098:	66 89 c1             	mov    %eax,%ecx
    109b:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    10a1:	66 f7 ea             	imul   %edx
    10a4:	66 c1 fa 05          	sar    $0x5,%edx
    10a8:	66 c1 f9 1f          	sar    $0x1f,%ecx
    10ac:	66 29 ca             	sub    %ecx,%edx
    10af:	66 89 d0             	mov    %edx,%eax
    10b2:	66 03 06 98 1f       	add    0x1f98,%eax
    10b7:	66 83 c0 01          	add    $0x1,%eax
    10bb:	66 a3 98 1f          	mov    %eax,0x1f98
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    while(command_line_row > 23){
    10bf:	66 83 c4 10          	add    $0x10,%esp
    10c3:	eb 0c                	jmp    10d1 <create_a_line+0xd1>
/mnt/e/code/my_operating_system/os/kernel/tty.c:159
        scroll_screen();
    10c5:	66 e8 31 fb ff ff    	calll  bfc <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:160
        command_line_row--;
    10cb:	66 83 2e 98 1f 01    	subl   $0x1,0x1f98
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    for (int i = 0; i < MAX_BUF; i++){
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    while(command_line_row > 23){
    10d1:	66 a1 98 1f          	mov    0x1f98,%eax
    10d5:	66 83 f8 17          	cmp    $0x17,%eax
    10d9:	7f ea                	jg     10c5 <create_a_line+0xc5>
/mnt/e/code/my_operating_system/os/kernel/tty.c:162
        scroll_screen();
        command_line_row--;
    }
    command_line_cursor = 0;
    10db:	66 c7 06 c0 1f 00 00 	movl   $0x0,0x1fc0
    10e2:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:163
    set_cursor(command_line_row * 80);
    10e4:	66 83 ec 0c          	sub    $0xc,%esp
    10e8:	67 66 8d 04 80       	lea    (%eax,%eax,4),%eax
    10ed:	66 c1 e0 04          	shl    $0x4,%eax
    10f1:	66 0f b7 d0          	movzwl %ax,%edx
    10f5:	66 52                	push   %edx
    10f7:	66 e8 03 f1 ff ff    	calll  200 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:165
    // printf("%d", command_line_row);
    printf("%s", message);
    10fd:	66 83 c4 08          	add    $0x8,%esp
    1101:	67 66 8d 44 24 0a    	lea    0xa(%esp),%eax
    1107:	66 50                	push   %eax
    1109:	66 68 51 1e 00 00    	pushl  $0x1e51
    110f:	66 e8 34 f7 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:166
}
    1115:	66 83 c4 3c          	add    $0x3c,%esp
    1119:	66 c3                	retl   

0000111b <tty>:
tty():
/mnt/e/code/my_operating_system/os/kernel/tty.c:19
int message_length = 0;
int command_line_cursor = 0; // 光标在输入区的偏移量
char input_buf[MAX_BUF]; // 输入缓存区


void tty(){
    111b:	66 56                	push   %esi
    111d:	66 53                	push   %ebx
    111f:	66 83 ec 04          	sub    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:21
    int keyboard_flag = 0;
    new_line_flag = 1;
    1123:	66 c7 06 94 1f 01 00 	movl   $0x1,0x1f94
    112a:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:22
    command_line_row = -1;
    112c:	66 c7 06 98 1f ff ff 	movl   $0xffffffff,0x1f98
    1133:	ff ff 
/mnt/e/code/my_operating_system/os/kernel/tty.c:23
    clean_screen();
    1135:	66 e8 a7 fa ff ff    	calll  be2 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:24
    set_cursor(1974);
    113b:	66 83 ec 0c          	sub    $0xc,%esp
    113f:	66 68 b6 07 00 00    	pushl  $0x7b6
    1145:	66 e8 b5 f0 ff ff    	calll  200 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:25
    set_cursor(0);
    114b:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
    1152:	00 00 
    1154:	66 e8 a6 f0 ff ff    	calll  200 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:26
    print_my_name();
    115a:	66 e8 00 fb ff ff    	calll  c60 <print_my_name>
    1160:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:29
    while (1){
        // 使用缓冲区数据更新
        if (new_line_flag){
    1164:	66 83 3e 94 1f 00    	cmpl   $0x0,0x1f94
    116a:	74 0f                	je     117b <tty+0x60>
/mnt/e/code/my_operating_system/os/kernel/tty.c:30
            create_a_line();
    116c:	66 e8 8e fe ff ff    	calll  1000 <create_a_line>
/mnt/e/code/my_operating_system/os/kernel/tty.c:31
            new_line_flag = 0;
    1172:	66 c7 06 94 1f 00 00 	movl   $0x0,0x1f94
    1179:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:34
        }

        if(command_line_row == 23 && message_length + command_line_cursor > 80){
    117b:	66 83 3e 98 1f 17    	cmpl   $0x17,0x1f98
    1181:	75 2f                	jne    11b2 <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:34 (discriminator 1)
    1183:	66 a1 c0 1f          	mov    0x1fc0,%eax
    1187:	66 03 06 c4 1f       	add    0x1fc4,%eax
    118c:	66 83 f8 50          	cmp    $0x50,%eax
    1190:	7e 20                	jle    11b2 <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:35
            scroll_screen();
    1192:	66 e8 64 fa ff ff    	calll  bfc <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:36
            command_line_row--;
    1198:	66 83 2e 98 1f 01    	subl   $0x1,0x1f98
/mnt/e/code/my_operating_system/os/kernel/tty.c:37
            set_cursor(1840);
    119e:	66 83 ec 0c          	sub    $0xc,%esp
    11a2:	66 68 30 07 00 00    	pushl  $0x730
    11a8:	66 e8 52 f0 ff ff    	calll  200 <set_cursor>
    11ae:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:39
        }
        putc(' ');// 用来删除光标处的文字，与输入退格的时候光标-1配合使用
    11b2:	66 83 ec 0c          	sub    $0xc,%esp
    11b6:	66 6a 20             	pushl  $0x20
    11b9:	66 e8 0f f1 ff ff    	calll  2ce <putc>
/mnt/e/code/my_operating_system/os/kernel/tty.c:42

        // command_line_row = get_cursor() / 80;
        set_cursor(80*command_line_row + message_length);
    11bf:	66 8b 16 98 1f       	mov    0x1f98,%edx
    11c4:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
    11c9:	66 89 d0             	mov    %edx,%eax
    11cc:	66 c1 e0 04          	shl    $0x4,%eax
    11d0:	03 06 c4 1f          	add    0x1fc4,%ax
    11d4:	66 0f b7 c0          	movzwl %ax,%eax
    11d8:	67 66 89 04 24       	mov    %eax,(%esp)
    11dd:	66 e8 1d f0 ff ff    	calll  200 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:43
        puts(input_buf, command_line_cursor);
    11e3:	66 83 c4 08          	add    $0x8,%esp
    11e7:	66 ff 36 c0 1f       	pushl  0x1fc0
    11ec:	66 68 e0 1f 00 00    	pushl  $0x1fe0
    11f2:	66 e8 cb f2 ff ff    	calll  4c3 <puts>
/mnt/e/code/my_operating_system/os/kernel/tty.c:46

        // 更新完了 检测键盘
        keyboard_flag = check_keyboard();
    11f8:	66 e8 ce f9 ff ff    	calll  bcc <check_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:49

        // 如果返回1，则有输入，处理输入信息，否则继续循环。
        if (keyboard_flag){
    11fe:	66 83 c4 10          	add    $0x10,%esp
    1202:	85 c0                	test   %ax,%ax
    1204:	0f 84 5c ff          	je     1164 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:51
            // 处理键盘事件
            u16 keyboard_code =  get_keyboard();
    1208:	66 e8 ce f9 ff ff    	calll  bdc <get_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:52
            u8 ascii_code = keyboard_code;
    120e:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:54
            u8 scan_code = keyboard_code >> 8;
            if (isprint(ascii_code)){
    1211:	66 83 ec 0c          	sub    $0xc,%esp
    1215:	66 0f b6 c0          	movzbl %al,%eax
    1219:	66 50                	push   %eax
    121b:	66 e8 83 f7 ff ff    	calll  9a4 <isprint>
    1221:	66 83 c4 10          	add    $0x10,%esp
    1225:	66 85 c0             	test   %eax,%eax
    1228:	74 20                	je     124a <tty+0x12f>
/mnt/e/code/my_operating_system/os/kernel/tty.c:55
                if (command_line_cursor <= MAX_BUF){
    122a:	66 a1 c0 1f          	mov    0x1fc0,%eax
    122e:	66 83 f8 64          	cmp    $0x64,%eax
    1232:	0f 8f 2e ff          	jg     1164 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:56
                    input_buf[command_line_cursor++] = ascii_code;
    1236:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    123b:	66 89 16 c0 1f       	mov    %edx,0x1fc0
    1240:	67 88 98 e0 1f 00 00 	mov    %bl,0x1fe0(%eax)
    1247:	e9 1a ff             	jmp    1164 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:59
                }
            }
            else if (ascii_code == 13){
    124a:	80 fb 0d             	cmp    $0xd,%bl
    124d:	75 1e                	jne    126d <tty+0x152>
/mnt/e/code/my_operating_system/os/kernel/tty.c:60
                new_line_flag = 1;
    124f:	66 c7 06 94 1f 01 00 	movl   $0x1,0x1f94
    1256:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:61
                input_buf[command_line_cursor] = '\0';
    1258:	66 a1 c0 1f          	mov    0x1fc0,%eax
    125c:	67 c6 80 e0 1f 00 00 	movb   $0x0,0x1fe0(%eax)
    1263:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:62
                parser();
    1264:	66 e8 7c fb ff ff    	calll  de6 <parser>
    126a:	e9 f7 fe             	jmp    1164 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:64
            }
            else if (ascii_code == 8){
    126d:	80 fb 08             	cmp    $0x8,%bl
    1270:	75 3e                	jne    12b0 <tty+0x195>
/mnt/e/code/my_operating_system/os/kernel/tty.c:65
                if(command_line_cursor){
    1272:	66 a1 c0 1f          	mov    0x1fc0,%eax
    1276:	66 85 c0             	test   %eax,%eax
    1279:	0f 84 e7 fe          	je     1164 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:66
                    input_buf[--command_line_cursor] = 0;
    127d:	67 66 8d 50 ff       	lea    -0x1(%eax),%edx
    1282:	66 89 16 c0 1f       	mov    %edx,0x1fc0
    1287:	67 c6 80 df 1f 00 00 	movb   $0x0,0x1fdf(%eax)
    128e:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:68
                    // 将光标设置为前一个位置，方便删除
                    int cur_cursor = get_cursor();
    128f:	66 e8 dd ef ff ff    	calll  272 <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:69
                    set_cursor(cur_cursor-1);
    1295:	66 83 ec 0c          	sub    $0xc,%esp
    1299:	66 83 e8 01          	sub    $0x1,%eax
    129d:	66 0f b7 c0          	movzwl %ax,%eax
    12a1:	66 50                	push   %eax
    12a3:	66 e8 57 ef ff ff    	calll  200 <set_cursor>
    12a9:	66 83 c4 10          	add    $0x10,%esp
    12ad:	e9 b4 fe             	jmp    1164 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:72
                }
            }
            else if (ascii_code == 27){
    12b0:	80 fb 1b             	cmp    $0x1b,%bl
    12b3:	0f 85 ad fe          	jne    1164 <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:73
                __asm__("mov $0x4c00, %ax");
    12b7:	b8 00 4c             	mov    $0x4c00,%ax
/mnt/e/code/my_operating_system/os/kernel/tty.c:74
                __asm__("int $0x40");
    12ba:	cd 40                	int    $0x40
    12bc:	e9 a5 fe             	jmp    1164 <tty+0x49>

000012bf <tty_scroll_screen>:
tty_scroll_screen():
/mnt/e/code/my_operating_system/os/kernel/tty.c:169
    // printf("%d", command_line_row);
    printf("%s", message);
}


void tty_scroll_screen(){
    12bf:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:170
    if (get_cursor()/80 > 24){
    12c3:	66 e8 a9 ef ff ff    	calll  272 <get_cursor>
    12c9:	3d cf 07             	cmp    $0x7cf,%ax
    12cc:	76 0c                	jbe    12da <tty_scroll_screen+0x1b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:171
        scroll_screen();
    12ce:	66 e8 28 f9 ff ff    	calll  bfc <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:172
        command_line_row--;
    12d4:	66 83 2e 98 1f 01    	subl   $0x1,0x1f98
/mnt/e/code/my_operating_system/os/kernel/tty.c:175
    }
    return ;
    12da:	66 83 c4 0c          	add    $0xc,%esp
    12de:	66 c3                	retl   

000012e0 <init_fsystem>:
init_fsystem():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:14
FileDescriptor root[56];
u16 root_sector;
u16 first_cluster_by_sector;
u16 cluster2sector;

void init_fsystem(){
    12e0:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:15
    cluster2sector = 1;
    12e4:	c7 06 80 2b 01 00    	movw   $0x1,0x2b80
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:16
    root_sector = 37;
    12ea:	c7 06 60 20 25 00    	movw   $0x25,0x2060
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:17
    first_cluster_by_sector = root_sector + 1;  
    12f0:	c7 06 82 2b 26 00    	movw   $0x26,0x2b82
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:18
    read_n_sector(root_sector,1, 0x1000, root);
    12f6:	66 b8 80 24 00 00    	mov    $0x2480,%eax
    12fc:	66 0f b7 c0          	movzwl %ax,%eax
    1300:	66 50                	push   %eax
    1302:	66 68 00 10 00 00    	pushl  $0x1000
    1308:	66 6a 01             	pushl  $0x1
    130b:	66 6a 25             	pushl  $0x25
    130e:	66 e8 43 f7 ff ff    	calll  a57 <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:19
    read_n_sector(1,2,0x1000, FAT_table);// 这个会覆盖掉root吗？
    1314:	66 b8 80 20 00 00    	mov    $0x2080,%eax
    131a:	66 0f b7 c0          	movzwl %ax,%eax
    131e:	66 50                	push   %eax
    1320:	66 68 00 10 00 00    	pushl  $0x1000
    1326:	66 6a 02             	pushl  $0x2
    1329:	66 6a 01             	pushl  $0x1
    132c:	66 e8 25 f7 ff ff    	calll  a57 <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:27
    // puti(FAT_table[0]);
    // puti(root[0].cluster_number);
    // puts(&root[0], 10);
    // puts(&root[1], 10);
    // puts(&root[2], 10);
}
    1332:	66 83 c4 2c          	add    $0x2c,%esp
    1336:	66 c3                	retl   

00001338 <_fs_find_descriptor_number_by_name>:
_fs_find_descriptor_number_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:29

u16 _fs_find_descriptor_number_by_name(char * file_name){
    1338:	66 57                	push   %edi
    133a:	66 56                	push   %esi
    133c:	66 53                	push   %ebx
    133e:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:30
    int file_name_length = strlen(file_name);
    1344:	66 83 ec 0c          	sub    $0xc,%esp
    1348:	66 57                	push   %edi
    134a:	66 e8 4c f9 ff ff    	calll  c9c <strlen>
    1350:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:31
    if (file_name_length >= 11) file_name_length = 11;
    1353:	66 83 c4 10          	add    $0x10,%esp
    1357:	66 83 f8 0a          	cmp    $0xa,%eax
    135b:	7e 06                	jle    1363 <_fs_find_descriptor_number_by_name+0x2b>
    135d:	66 be 0b 00 00 00    	mov    $0xb,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
    1363:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    1369:	eb 2f                	jmp    139a <_fs_find_descriptor_number_by_name+0x62>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:34
        if (!strncmp(&root[i], file_name, file_name_length)){
    136b:	66 89 d8             	mov    %ebx,%eax
    136e:	66 c1 e0 05          	shl    $0x5,%eax
    1372:	66 05 80 24 00 00    	add    $0x2480,%eax
    1378:	66 83 ec 04          	sub    $0x4,%esp
    137c:	66 56                	push   %esi
    137e:	66 57                	push   %edi
    1380:	66 50                	push   %eax
    1382:	66 e8 d8 f9 ff ff    	calll  d60 <strncmp>
    1388:	66 83 c4 10          	add    $0x10,%esp
    138c:	66 85 c0             	test   %eax,%eax
    138f:	75 05                	jne    1396 <_fs_find_descriptor_number_by_name+0x5e>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:35
            return i;
    1391:	66 89 d8             	mov    %ebx,%eax
    1394:	eb 10                	jmp    13a6 <_fs_find_descriptor_number_by_name+0x6e>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33 (discriminator 2)

u16 _fs_find_descriptor_number_by_name(char * file_name){
    int file_name_length = strlen(file_name);
    if (file_name_length >= 11) file_name_length = 11;
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
    1396:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33 (discriminator 1)
    139a:	66 83 fb 09          	cmp    $0x9,%ebx
    139e:	7e cb                	jle    136b <_fs_find_descriptor_number_by_name+0x33>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:38
        if (!strncmp(&root[i], file_name, file_name_length)){
            return i;
        }
    }
    return -1;
    13a0:	66 b8 ff ff ff ff    	mov    $0xffffffff,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:39
}
    13a6:	66 5b                	pop    %ebx
    13a8:	66 5e                	pop    %esi
    13aa:	66 5f                	pop    %edi
    13ac:	66 c3                	retl   

000013ae <_fs_find_cluster_code_by_name>:
_fs_find_cluster_code_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:41

u16 _fs_find_cluster_code_by_name(char * file_name){
    13ae:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:42
    int index = _fs_find_descriptor_number_by_name(file_name);
    13b2:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    13b8:	66 e8 7a ff ff ff    	calll  1338 <_fs_find_descriptor_number_by_name>
    13be:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:44
    if (index != -1)
        return root[index].cluster_code;
    13c2:	66 c1 e0 05          	shl    $0x5,%eax
    13c6:	67 66 0f b7 80 9a 24 	movzwl 0x249a(%eax),%eax
    13cd:	00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:46
    return 0;
}
    13cf:	66 83 c4 1c          	add    $0x1c,%esp
    13d3:	66 c3                	retl   

000013d5 <_fs_get_file_size_by_cluster_code>:
_fs_get_file_size_by_cluster_code():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:48

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    13d5:	67 66 0f b7 54 24 04 	movzwl 0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:49
    int size = 0;
    13dc:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:50
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    13e2:	eb 1b                	jmp    13ff <_fs_get_file_size_by_cluster_code+0x2a>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:51
        size += 512*cluster2sector;
    13e4:	66 0f b7 0e 80 2b    	movzwl 0x2b80,%ecx
    13ea:	66 c1 e1 09          	shl    $0x9,%ecx
    13ee:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:52
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
    13f1:	66 0f b7 d2          	movzwl %dx,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:53
        cluster_code = FAT_table[cluster_code];
    13f5:	67 66 0f b7 94 12 80 	movzwl 0x2080(%edx,%edx,1),%edx
    13fc:	20 00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:50
    return 0;
}

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    13ff:	67 66 8d 4a fe       	lea    -0x2(%edx),%ecx
    1404:	83 f9 ed             	cmp    $0xffed,%cx
    1407:	76 db                	jbe    13e4 <_fs_get_file_size_by_cluster_code+0xf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:56
        size += 512*cluster2sector;
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
    1409:	66 f3 c3             	repz retl 

0000140c <_fs_show_file_by_descriptor_number>:
_fs_show_file_by_descriptor_number():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:58

void _fs_show_file_by_descriptor_number(u16 index){
    140c:	66 56                	push   %esi
    140e:	66 53                	push   %ebx
    1410:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:59
    int cluster_code = root[index].cluster_code;
    1414:	67 66 0f b7 44 24 14 	movzwl 0x14(%esp),%eax
    141b:	66 89 c6             	mov    %eax,%esi
    141e:	66 c1 e6 05          	shl    $0x5,%esi
    1422:	67 66 0f b7 9e 9a 24 	movzwl 0x249a(%esi),%ebx
    1429:	00 00 
    142b:	66 81 c6 80 24 00 00 	add    $0x2480,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:60
    printf("%d, %d\n" , index,cluster_code);
    1432:	66 53                	push   %ebx
    1434:	66 50                	push   %eax
    1436:	66 68 54 1e 00 00    	pushl  $0x1e54
    143c:	66 e8 07 f4 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:62
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    1442:	67 66 89 1c 24       	mov    %ebx,(%esp)
    1447:	66 e8 88 ff ff ff    	calll  13d5 <_fs_get_file_size_by_cluster_code>
    144d:	66 83 c4 0c          	add    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:61
}

void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
    1451:	66 0f b7 c0          	movzwl %ax,%eax
    1455:	66 50                	push   %eax
    1457:	66 56                	push   %esi
    1459:	66 68 5c 1e 00 00    	pushl  $0x1e5c
    145f:	66 e8 e4 f3 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:63
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    1465:	66 83 c4 10          	add    $0x10,%esp
    1469:	eb 20                	jmp    148b <_fs_show_file_by_descriptor_number+0x7f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:64
        printf("-%d", cluster_code);
    146b:	66 83 ec 08          	sub    $0x8,%esp
    146f:	66 53                	push   %ebx
    1471:	66 68 6d 1e 00 00    	pushl  $0x1e6d
    1477:	66 e8 cc f3 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:65
        cluster_code = FAT_table[cluster_code];
    147d:	67 66 0f b7 9c 1b 80 	movzwl 0x2080(%ebx,%ebx,1),%ebx
    1484:	20 00 00 
    1487:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:63
void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    148b:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
    1490:	66 3d ed ff 00 00    	cmp    $0xffed,%eax
    1496:	76 d3                	jbe    146b <_fs_show_file_by_descriptor_number+0x5f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:67
        printf("-%d", cluster_code);
        cluster_code = FAT_table[cluster_code];
    }
    printf("-|\n");
    1498:	66 83 ec 0c          	sub    $0xc,%esp
    149c:	66 68 71 1e 00 00    	pushl  $0x1e71
    14a2:	66 e8 a1 f3 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:69
    return ;
}
    14a8:	66 83 c4 14          	add    $0x14,%esp
    14ac:	66 5b                	pop    %ebx
    14ae:	66 5e                	pop    %esi
    14b0:	66 c3                	retl   

000014b2 <_fs_load_by_cluster_code>:
_fs_load_by_cluster_code():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:71

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
    14b2:	66 57                	push   %edi
    14b4:	66 56                	push   %esi
    14b6:	66 53                	push   %ebx
    14b8:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
    14be:	67 66 0f b7 5c 24 10 	movzwl 0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:72
    int size = 0;
    14c5:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:73
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    14cb:	eb 5b                	jmp    1528 <_fs_load_by_cluster_code+0x76>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:74
        size += 512*cluster2sector;
    14cd:	66 0f b7 16 80 2b    	movzwl 0x2b80,%edx
    14d3:	66 89 d0             	mov    %edx,%eax
    14d6:	66 c1 e0 09          	shl    $0x9,%eax
    14da:	66 01 c7             	add    %eax,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:75
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
    14dd:	66 0f b7 0e 82 2b    	movzwl 0x2b82,%ecx
    14e3:	66 0f b7 db          	movzwl %bx,%ebx
    14e7:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
    14ec:	66 0f af c2          	imul   %edx,%eax
    14f0:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:76
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
    14f3:	66 0f b7 ce          	movzwl %si,%ecx
    14f7:	66 51                	push   %ecx
    14f9:	66 68 00 10 00 00    	pushl  $0x1000
    14ff:	66 52                	push   %edx
    1501:	66 0f b7 c0          	movzwl %ax,%eax
    1505:	66 50                	push   %eax
    1507:	66 e8 4a f5 ff ff    	calll  a57 <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:77
        program = program+cluster2sector*512;
    150d:	66 0f b7 06 80 2b    	movzwl 0x2b80,%eax
    1513:	66 c1 e0 09          	shl    $0x9,%eax
    1517:	66 01 c6             	add    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:78
        cluster_code = FAT_table[cluster_code];
    151a:	67 66 0f b7 9c 1b 80 	movzwl 0x2080(%ebx,%ebx,1),%ebx
    1521:	20 00 00 
    1524:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:73
    return ;
}

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    1528:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
    152d:	83 f8 ed             	cmp    $0xffed,%ax
    1530:	76 9b                	jbe    14cd <_fs_load_by_cluster_code+0x1b>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:81
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
        program = program+cluster2sector*512;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
    1532:	66 89 f8             	mov    %edi,%eax
    1535:	66 5b                	pop    %ebx
    1537:	66 5e                	pop    %esi
    1539:	66 5f                	pop    %edi
    153b:	66 c3                	retl   

0000153d <fs_load_by_name>:
fs_load_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:84


u16 fs_load_by_name(char * file_name, void (*program)()){
    153d:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:85
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
    1541:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    1547:	66 e8 61 fe ff ff    	calll  13ae <_fs_find_cluster_code_by_name>
    154d:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:86
    if (cluster_code){
    1551:	66 83 c4 10          	add    $0x10,%esp
    1555:	66 85 c0             	test   %eax,%eax
    1558:	74 18                	je     1572 <fs_load_by_name+0x35>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:87
        return _fs_load_by_cluster_code(cluster_code, program);
    155a:	66 83 ec 08          	sub    $0x8,%esp
    155e:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    1564:	66 50                	push   %eax
    1566:	66 e8 46 ff ff ff    	calll  14b2 <_fs_load_by_cluster_code>
    156c:	66 83 c4 10          	add    $0x10,%esp
    1570:	eb 06                	jmp    1578 <fs_load_by_name+0x3b>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:90
    }
    else {
        return 0;
    1572:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:92
    }
}
    1578:	66 83 c4 0c          	add    $0xc,%esp
    157c:	66 c3                	retl   

0000157e <fs_get_file_size>:
fs_get_file_size():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:95


u16 fs_get_file_size(char * file_name){
    157e:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:96
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
    1582:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    1588:	66 e8 20 fe ff ff    	calll  13ae <_fs_find_cluster_code_by_name>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:97
    return _fs_get_file_size_by_cluster_code(cluster_code);
    158e:	66 0f b7 c0          	movzwl %ax,%eax
    1592:	67 66 89 04 24       	mov    %eax,(%esp)
    1597:	66 e8 38 fe ff ff    	calll  13d5 <_fs_get_file_size_by_cluster_code>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:98
}
    159d:	66 83 c4 1c          	add    $0x1c,%esp
    15a1:	66 c3                	retl   

000015a3 <fs_show_root_file_table>:
fs_show_root_file_table():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:100

void fs_show_root_file_table(){
    15a3:	66 53                	push   %ebx
    15a5:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:101
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    15a9:	66 68 75 1e 00 00    	pushl  $0x1e75
    15af:	66 68 7d 1e 00 00    	pushl  $0x1e7d
    15b5:	66 68 87 1e 00 00    	pushl  $0x1e87
    15bb:	66 68 92 1e 00 00    	pushl  $0x1e92
    15c1:	66 e8 82 f2 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:102
    printf("------------------------------------\n\r");
    15c7:	67 66 c7 04 24 4c 1f 	movl   $0x1f4c,(%esp)
    15ce:	00 00 
    15d0:	66 e8 73 f2 ff ff    	calll  849 <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
    15d6:	66 83 c4 10          	add    $0x10,%esp
    15da:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    15e0:	eb 18                	jmp    15fa <fs_show_root_file_table+0x57>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:105 (discriminator 3)
        _fs_show_file_by_descriptor_number(i);
    15e2:	66 83 ec 0c          	sub    $0xc,%esp
    15e6:	66 0f b7 c3          	movzwl %bx,%eax
    15ea:	66 50                	push   %eax
    15ec:	66 e8 1a fe ff ff    	calll  140c <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104 (discriminator 3)

void fs_show_root_file_table(){
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    printf("------------------------------------\n\r");
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
    15f2:	66 83 c3 01          	add    $0x1,%ebx
    15f6:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104 (discriminator 1)
    15fa:	66 83 fb 08          	cmp    $0x8,%ebx
    15fe:	7e e2                	jle    15e2 <fs_show_root_file_table+0x3f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:108
        _fs_show_file_by_descriptor_number(i);
    }
    return ;
}
    1600:	66 83 c4 08          	add    $0x8,%esp
    1604:	66 5b                	pop    %ebx
    1606:	66 c3                	retl   

00001608 <fs_show_file_by_name>:
fs_show_file_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:110

void fs_show_file_by_name(char * file_name){
    1608:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:111
    int descriptor_index = _fs_find_descriptor_number_by_name(file_name);
    160c:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    1612:	66 e8 20 fd ff ff    	calll  1338 <_fs_find_descriptor_number_by_name>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:112
    _fs_show_file_by_descriptor_number(descriptor_index);
    1618:	66 0f b7 c0          	movzwl %ax,%eax
    161c:	67 66 89 04 24       	mov    %eax,(%esp)
    1621:	66 e8 e5 fd ff ff    	calll  140c <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:114
    return ;
}
    1627:	66 83 c4 1c          	add    $0x1c,%esp
    162b:	66 c3                	retl   

0000162d <fs_show_floppy_infomation>:
fs_show_floppy_infomation():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:117


void fs_show_floppy_infomation(){
    162d:	66 f3 c3             	repz retl 

00001630 <move_name>:
move_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:9

void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    1630:	66 0f b7 0e 9e 0f    	movzwl 0xf9e,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10
    for (int i =78; i >= 0; i--){
    1636:	66 b8 4e 00 00 00    	mov    $0x4e,%eax
    163c:	eb 16                	jmp    1654 <move_name+0x24>
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:11 (discriminator 3)
        text_line[i+1] = text_line[i];
    163e:	67 66 0f b7 94 00 00 	movzwl 0xf00(%eax,%eax,1),%edx
    1645:	0f 00 00 
    1648:	67 89 94 00 02 0f 00 	mov    %dx,0xf02(%eax,%eax,1)
    164f:	00 
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10 (discriminator 3)
void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    for (int i =78; i >= 0; i--){
    1650:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10 (discriminator 1)
    1654:	66 85 c0             	test   %eax,%eax
    1657:	79 e5                	jns    163e <move_name+0xe>
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:13
        text_line[i+1] = text_line[i];
    }
    text_line[0] = last_char;
    1659:	89 0e 00 0f          	mov    %cx,0xf00
    165d:	66 c3                	retl   
