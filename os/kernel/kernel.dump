
kernel.debug:     file format elf32-i386


Disassembly of section .text:

00000000 <_start>:
_start():
       0:	e8 02 01             	call   105 <install_int33>
       3:	e8 38 01             	call   13e <install_int34>
       6:	e8 72 01             	call   17b <install_int35>
       9:	e8 aa 01             	call   1b6 <install_int36>
       c:	e8 a5 00             	call   b4 <install_int40>
       f:	66 e8 de 01 00 00    	calll  1f3 <cstart>
      15:	e8 11 00             	call   29 <install_int8>
      18:	e8 71 00             	call   8c <restart>

0000001b <start_tty>:
start_tty():
      1b:	66 e8 6d 0a 00 00    	calll  a8e <tty>
      21:	b4 02                	mov    $0x2,%ah
      23:	cd 40                	int    $0x40
      25:	eb fe                	jmp    25 <start_tty+0xa>
      27:	eb fe                	jmp    27 <user1_bound_y_right>

00000029 <install_int8>:
install_int8():
      29:	53                   	push   %bx
      2a:	51                   	push   %cx
      2b:	52                   	push   %dx
      2c:	56                   	push   %si
      2d:	57                   	push   %di
      2e:	55                   	push   %bp
      2f:	1e                   	push   %ds
      30:	06                   	push   %es
      31:	16                   	push   %ss
      32:	b0 34                	mov    $0x34,%al
      34:	e6 43                	out    %al,$0x43
      36:	b8 ff ff             	mov    $0xffff,%ax
      39:	e6 40                	out    %al,$0x40
      3b:	88 e0                	mov    %ah,%al
      3d:	e6 40                	out    %al,$0x40
      3f:	b8 00 00             	mov    $0x0,%ax
      42:	8e d8                	mov    %ax,%ds
      44:	8c c8                	mov    %cs,%ax
      46:	a3 22 00             	mov    %ax,0x22
      49:	c7 06 20 00 59 00    	movw   $0x59,0x20
      4f:	17                   	pop    %ss
      50:	07                   	pop    %es
      51:	1f                   	pop    %ds
      52:	5d                   	pop    %bp
      53:	5f                   	pop    %di
      54:	5e                   	pop    %si
      55:	5a                   	pop    %dx
      56:	59                   	pop    %cx
      57:	5b                   	pop    %bx
      58:	c3                   	ret    

00000059 <new_int8>:
new_int8():
      59:	66 60                	pushal 
      5b:	06                   	push   %es
      5c:	1e                   	push   %ds
      5d:	54                   	push   %sp
      5e:	16                   	push   %ss
      5f:	89 e6                	mov    %sp,%si
      61:	b8 00 10             	mov    $0x1000,%ax
      64:	8e c0                	mov    %ax,%es
      66:	8b 3e 84 9f          	mov    -0x607c,%di
      6a:	b9 2e 00             	mov    $0x2e,%cx
      6d:	fc                   	cld    
      6e:	f3 a4                	rep movsb %ds:(%si),%es:(%di)
      70:	b8 00 10             	mov    $0x1000,%ax
      73:	8e c0                	mov    %ax,%es
      75:	8e d8                	mov    %ax,%ds
      77:	8e d0                	mov    %ax,%ss
      79:	bc 00 50             	mov    $0x5000,%sp
      7c:	66 e8 ed 05 00 00    	calll  66f <schedule_process>
      82:	b0 20                	mov    $0x20,%al
      84:	e6 20                	out    %al,$0x20
      86:	e6 a0                	out    %al,$0xa0
      88:	e8 01 00             	call   8c <restart>
      8b:	cf                   	iret   

0000008c <restart>:
restart():
      8c:	8b 2e 84 9f          	mov    -0x607c,%bp
      90:	89 ee                	mov    %bp,%si
      92:	83 c6 04             	add    $0x4,%si
      95:	3e 8e 46 00          	mov    %ds:0x0(%bp),%es
      99:	3e 8b 7e 02          	mov    %ds:0x2(%bp),%di
      9d:	b9 2a 00             	mov    $0x2a,%cx
      a0:	83 ef 2a             	sub    $0x2a,%di
      a3:	fc                   	cld    
      a4:	f3 a4                	rep movsb %ds:(%si),%es:(%di)
      a6:	8c c0                	mov    %es,%ax
      a8:	83 ef 2a             	sub    $0x2a,%di
      ab:	8e d0                	mov    %ax,%ss
      ad:	89 fc                	mov    %di,%sp
      af:	1f                   	pop    %ds
      b0:	07                   	pop    %es
      b1:	66 61                	popal  
      b3:	cf                   	iret   

000000b4 <install_int40>:
install_int40():
      b4:	53                   	push   %bx
      b5:	51                   	push   %cx
      b6:	52                   	push   %dx
      b7:	56                   	push   %si
      b8:	57                   	push   %di
      b9:	55                   	push   %bp
      ba:	1e                   	push   %ds
      bb:	06                   	push   %es
      bc:	16                   	push   %ss
      bd:	b8 00 00             	mov    $0x0,%ax
      c0:	8e d8                	mov    %ax,%ds
      c2:	8c c8                	mov    %cs,%ax
      c4:	c7 06 00 01 d7 00    	movw   $0xd7,0x100
      ca:	a3 02 01             	mov    %ax,0x102
      cd:	17                   	pop    %ss
      ce:	07                   	pop    %es
      cf:	1f                   	pop    %ds
      d0:	5d                   	pop    %bp
      d1:	5f                   	pop    %di
      d2:	5e                   	pop    %si
      d3:	5a                   	pop    %dx
      d4:	59                   	pop    %cx
      d5:	5b                   	pop    %bx
      d6:	c3                   	ret    

000000d7 <new_int40>:
new_int40():
      d7:	80 fc 4c             	cmp    $0x4c,%ah
      da:	74 11                	je     ed <new_int40.return_kernel>
      dc:	88 e3                	mov    %ah,%bl
      de:	31 c0                	xor    %ax,%ax
      e0:	b0 02                	mov    $0x2,%al
      e2:	f6 e3                	mul    %bl
      e4:	89 c6                	mov    %ax,%si
      e6:	bb a0 9f             	mov    $0x9fa0,%bx
      e9:	66 ff 10             	calll  *(%bx,%si)
      ec:	cf                   	iret   

000000ed <new_int40.return_kernel>:
new_int40.return_kernel():
      ed:	59                   	pop    %cx
      ee:	59                   	pop    %cx
      ef:	59                   	pop    %cx
      f0:	b8 00 10             	mov    $0x1000,%ax
      f3:	8e d8                	mov    %ax,%ds
      f5:	8e c0                	mov    %ax,%es
      f7:	8e d0                	mov    %ax,%ss
      f9:	bc 00 50             	mov    $0x5000,%sp
      fc:	51                   	push   %cx
      fd:	68 00 10             	push   $0x1000
     100:	68 1b 00             	push   $0x1b
     103:	fb                   	sti    
     104:	cf                   	iret   

00000105 <install_int33>:
install_int33():
     105:	53                   	push   %bx
     106:	51                   	push   %cx
     107:	52                   	push   %dx
     108:	56                   	push   %si
     109:	57                   	push   %di
     10a:	55                   	push   %bp
     10b:	1e                   	push   %ds
     10c:	06                   	push   %es
     10d:	16                   	push   %ss
     10e:	b8 00 00             	mov    $0x0,%ax
     111:	8e d8                	mov    %ax,%ds
     113:	8c c8                	mov    %cs,%ax
     115:	c7 06 cc 00 28 01    	movw   $0x128,0xcc
     11b:	a3 ce 00             	mov    %ax,0xce
     11e:	17                   	pop    %ss
     11f:	07                   	pop    %es
     120:	1f                   	pop    %ds
     121:	5d                   	pop    %bp
     122:	5f                   	pop    %di
     123:	5e                   	pop    %si
     124:	5a                   	pop    %dx
     125:	59                   	pop    %cx
     126:	5b                   	pop    %bx
     127:	c3                   	ret    

00000128 <new_int33>:
new_int33():
     128:	53                   	push   %bx
     129:	51                   	push   %cx
     12a:	52                   	push   %dx
     12b:	56                   	push   %si
     12c:	57                   	push   %di
     12d:	55                   	push   %bp
     12e:	1e                   	push   %ds
     12f:	06                   	push   %es
     130:	16                   	push   %ss
     131:	89 c2                	mov    %ax,%dx
     133:	ec                   	in     (%dx),%al
     134:	17                   	pop    %ss
     135:	07                   	pop    %es
     136:	1f                   	pop    %ds
     137:	5d                   	pop    %bp
     138:	5f                   	pop    %di
     139:	5e                   	pop    %si
     13a:	5a                   	pop    %dx
     13b:	59                   	pop    %cx
     13c:	5b                   	pop    %bx
     13d:	cf                   	iret   

0000013e <install_int34>:
install_int34():
     13e:	53                   	push   %bx
     13f:	51                   	push   %cx
     140:	52                   	push   %dx
     141:	56                   	push   %si
     142:	57                   	push   %di
     143:	55                   	push   %bp
     144:	1e                   	push   %ds
     145:	06                   	push   %es
     146:	16                   	push   %ss
     147:	b8 00 00             	mov    $0x0,%ax
     14a:	8e d8                	mov    %ax,%ds
     14c:	8c c8                	mov    %cs,%ax
     14e:	c7 06 d0 00 61 01    	movw   $0x161,0xd0
     154:	a3 d2 00             	mov    %ax,0xd2
     157:	17                   	pop    %ss
     158:	07                   	pop    %es
     159:	1f                   	pop    %ds
     15a:	5d                   	pop    %bp
     15b:	5f                   	pop    %di
     15c:	5e                   	pop    %si
     15d:	5a                   	pop    %dx
     15e:	59                   	pop    %cx
     15f:	5b                   	pop    %bx
     160:	c3                   	ret    

00000161 <new_int34>:
new_int34():
     161:	50                   	push   %ax
     162:	53                   	push   %bx
     163:	51                   	push   %cx
     164:	52                   	push   %dx
     165:	56                   	push   %si
     166:	57                   	push   %di
     167:	55                   	push   %bp
     168:	1e                   	push   %ds
     169:	06                   	push   %es
     16a:	16                   	push   %ss
     16b:	89 da                	mov    %bx,%dx
     16d:	88 c0                	mov    %al,%al
     16f:	ee                   	out    %al,(%dx)
     170:	17                   	pop    %ss
     171:	07                   	pop    %es
     172:	1f                   	pop    %ds
     173:	5d                   	pop    %bp
     174:	5f                   	pop    %di
     175:	5e                   	pop    %si
     176:	5a                   	pop    %dx
     177:	59                   	pop    %cx
     178:	5b                   	pop    %bx
     179:	58                   	pop    %ax
     17a:	cf                   	iret   

0000017b <install_int35>:
install_int35():
     17b:	53                   	push   %bx
     17c:	51                   	push   %cx
     17d:	52                   	push   %dx
     17e:	56                   	push   %si
     17f:	57                   	push   %di
     180:	55                   	push   %bp
     181:	1e                   	push   %ds
     182:	06                   	push   %es
     183:	16                   	push   %ss
     184:	b8 00 00             	mov    $0x0,%ax
     187:	8e d8                	mov    %ax,%ds
     189:	8c c8                	mov    %cs,%ax
     18b:	c7 06 d4 00 9e 01    	movw   $0x19e,0xd4
     191:	a3 d6 00             	mov    %ax,0xd6
     194:	17                   	pop    %ss
     195:	07                   	pop    %es
     196:	1f                   	pop    %ds
     197:	5d                   	pop    %bp
     198:	5f                   	pop    %di
     199:	5e                   	pop    %si
     19a:	5a                   	pop    %dx
     19b:	59                   	pop    %cx
     19c:	5b                   	pop    %bx
     19d:	c3                   	ret    

0000019e <new_int35>:
new_int35():
     19e:	53                   	push   %bx
     19f:	51                   	push   %cx
     1a0:	52                   	push   %dx
     1a1:	56                   	push   %si
     1a2:	57                   	push   %di
     1a3:	55                   	push   %bp
     1a4:	1e                   	push   %ds
     1a5:	06                   	push   %es
     1a6:	16                   	push   %ss
     1a7:	8e c0                	mov    %ax,%es
     1a9:	26 8a 07             	mov    %es:(%bx),%al
     1ac:	17                   	pop    %ss
     1ad:	07                   	pop    %es
     1ae:	1f                   	pop    %ds
     1af:	5d                   	pop    %bp
     1b0:	5f                   	pop    %di
     1b1:	5e                   	pop    %si
     1b2:	5a                   	pop    %dx
     1b3:	59                   	pop    %cx
     1b4:	5b                   	pop    %bx
     1b5:	cf                   	iret   

000001b6 <install_int36>:
install_int36():
     1b6:	53                   	push   %bx
     1b7:	51                   	push   %cx
     1b8:	52                   	push   %dx
     1b9:	56                   	push   %si
     1ba:	57                   	push   %di
     1bb:	55                   	push   %bp
     1bc:	1e                   	push   %ds
     1bd:	06                   	push   %es
     1be:	16                   	push   %ss
     1bf:	b8 00 00             	mov    $0x0,%ax
     1c2:	8e d8                	mov    %ax,%ds
     1c4:	8c c8                	mov    %cs,%ax
     1c6:	c7 06 d8 00 d9 01    	movw   $0x1d9,0xd8
     1cc:	a3 da 00             	mov    %ax,0xda
     1cf:	17                   	pop    %ss
     1d0:	07                   	pop    %es
     1d1:	1f                   	pop    %ds
     1d2:	5d                   	pop    %bp
     1d3:	5f                   	pop    %di
     1d4:	5e                   	pop    %si
     1d5:	5a                   	pop    %dx
     1d6:	59                   	pop    %cx
     1d7:	5b                   	pop    %bx
     1d8:	c3                   	ret    

000001d9 <new_int36>:
new_int36():
     1d9:	50                   	push   %ax
     1da:	53                   	push   %bx
     1db:	51                   	push   %cx
     1dc:	52                   	push   %dx
     1dd:	56                   	push   %si
     1de:	57                   	push   %di
     1df:	55                   	push   %bp
     1e0:	1e                   	push   %ds
     1e1:	06                   	push   %es
     1e2:	16                   	push   %ss
     1e3:	8e c0                	mov    %ax,%es
     1e5:	26 88 0f             	mov    %cl,%es:(%bx)
     1e8:	17                   	pop    %ss
     1e9:	07                   	pop    %es
     1ea:	1f                   	pop    %ds
     1eb:	5d                   	pop    %bp
     1ec:	5f                   	pop    %di
     1ed:	5e                   	pop    %si
     1ee:	5a                   	pop    %dx
     1ef:	59                   	pop    %cx
     1f0:	5b                   	pop    %bx
     1f1:	58                   	pop    %ax
     1f2:	cf                   	iret   

000001f3 <cstart>:
cstart():
/mnt/e/code/my_operating_system/os/kernel/start.c:10
#include "../include/global.h"
#include "../include/system_call.h"
#include "../include/fsystem.h"
#include "../include/proc.h"

int cstart(){
     1f3:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:12
    // 初始化文件系统
    init_fsystem();
     1f7:	66 e8 f4 00 00 00    	calll  2f1 <init_fsystem>
/mnt/e/code/my_operating_system/os/kernel/start.c:14
    // 清屏
    clean_screen();
     1fd:	66 e8 7f 14 00 00    	calll  1682 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/start.c:16
    // 将光标设置为0 TODO:
    set_cursor(0);
     203:	66 83 ec 0c          	sub    $0xc,%esp
     207:	66 6a 00             	pushl  $0x0
     20a:	66 e8 8a 0a 00 00    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:20


    // 加载文件到内存指定位置
    fs_load_by_name("test_a.bin", 0x2000, 0x0000);
     210:	66 83 c4 0c          	add    $0xc,%esp
     214:	66 6a 00             	pushl  $0x0
     217:	66 68 00 20 00 00    	pushl  $0x2000
     21d:	66 68 76 18 00 00    	pushl  $0x1876
     223:	66 e8 39 03 00 00    	calll  562 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:21
    fs_load_by_name("test_b.bin", 0x3000, 0x0000);
     229:	66 83 c4 0c          	add    $0xc,%esp
     22d:	66 6a 00             	pushl  $0x0
     230:	66 68 00 30 00 00    	pushl  $0x3000
     236:	66 68 81 18 00 00    	pushl  $0x1881
     23c:	66 e8 20 03 00 00    	calll  562 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:24
    // fs_load_by_name("ouch.bin", 0x3000, 0x0000);
    // 初始化进程控制块
    init_process(0, 0x2000);
     242:	66 83 c4 08          	add    $0x8,%esp
     246:	66 68 00 20 00 00    	pushl  $0x2000
     24c:	66 6a 00             	pushl  $0x0
     24f:	66 e8 45 04 00 00    	calll  69a <init_process>
/mnt/e/code/my_operating_system/os/kernel/start.c:25
    init_process(1, 0x3000);
     255:	66 83 c4 08          	add    $0x8,%esp
     259:	66 68 00 30 00 00    	pushl  $0x3000
     25f:	66 6a 01             	pushl  $0x1
     262:	66 e8 32 04 00 00    	calll  69a <init_process>
/mnt/e/code/my_operating_system/os/kernel/start.c:31

    // for (int i = 0; i < CUR_PROCESS_NUM ; i++){
    //     init_process(i, 0x2000 + i * 0x1000);
    // }
    // 初始化启动进程
    cur_process_index = 0;
     268:	c7 06 80 9f 00 00    	movw   $0x0,-0x6080
/mnt/e/code/my_operating_system/os/kernel/start.c:32
    cur_process = (PCB_t*)(&process_table[cur_process_index]);
     26e:	66 c7 06 84 9f 80 5b 	movl   $0x5b80,-0x607c
     275:	00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:35

    // 初始化 系统调用表
    install_system_call(2, test_system_call);
     277:	66 83 c4 08          	add    $0x8,%esp
     27b:	66 68 ac 02 00 00    	pushl  $0x2ac
     281:	66 6a 02             	pushl  $0x2
     284:	66 e8 0c 00 00 00    	calll  296 <install_system_call>
/mnt/e/code/my_operating_system/os/kernel/start.c:37
    return 0;
}
     28a:	66 b8 00 00 00 00    	mov    $0x0,%eax
     290:	66 83 c4 1c          	add    $0x1c,%esp
     294:	66 c3                	retl   

00000296 <install_system_call>:
install_system_call():
/mnt/e/code/my_operating_system/os/service/system_call.c:6
#include "../include/type.h"
#include "../include/stdio.h"
#include "../include/global.h"

void install_system_call(int system_call_number, void (*function)() ){
    system_call[system_call_number] = (u16) function;
     296:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     29c:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
     2a2:	67 89 94 00 a0 9f 00 	mov    %dx,0x9fa0(%eax,%eax,1)
     2a9:	00 
     2aa:	66 c3                	retl   

000002ac <test_system_call>:
test_system_call():
/mnt/e/code/my_operating_system/os/service/system_call.c:12
    return ;
}



void test_system_call(){
     2ac:	66 53                	push   %ebx
     2ae:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/system_call.c:13
    int origin = get_cursor();
     2b2:	66 e8 54 0a 00 00    	calll  d0c <get_cursor>
     2b8:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/system_call.c:14
    set_cursor(1800);
     2bb:	66 83 ec 0c          	sub    $0xc,%esp
     2bf:	66 68 08 07 00 00    	pushl  $0x708
     2c5:	66 e8 cf 09 00 00    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/system_call.c:15
    printf("test custom system call!!! ");
     2cb:	67 66 c7 04 24 8c 18 	movl   $0x188c,(%esp)
     2d2:	00 00 
     2d4:	66 e8 09 10 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/system_call.c:16
    set_cursor(origin);
     2da:	66 0f b7 db          	movzwl %bx,%ebx
     2de:	67 66 89 1c 24       	mov    %ebx,(%esp)
     2e3:	66 e8 b1 09 00 00    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/system_call.c:17
}
     2e9:	66 83 c4 18          	add    $0x18,%esp
     2ed:	66 5b                	pop    %ebx
     2ef:	66 c3                	retl   

000002f1 <init_fsystem>:
init_fsystem():
/mnt/e/code/my_operating_system/os/service/fsystem.c:14
FileDescriptor root[56];
u16 root_sector;
u16 first_cluster_by_sector;
u16 cluster2sector;

void init_fsystem(){
     2f1:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:15
    cluster2sector = 1;
     2f5:	c7 06 40 5b 01 00    	movw   $0x1,0x5b40
/mnt/e/code/my_operating_system/os/service/fsystem.c:16
    root_sector = 37;
     2fb:	c7 06 20 50 25 00    	movw   $0x25,0x5020
/mnt/e/code/my_operating_system/os/service/fsystem.c:17
    first_cluster_by_sector = root_sector + 1;  
     301:	c7 06 42 5b 26 00    	movw   $0x26,0x5b42
/mnt/e/code/my_operating_system/os/service/fsystem.c:18
    read_n_sector(root_sector,1, 0x1000, (u16)&root);
     307:	66 b8 40 54 00 00    	mov    $0x5440,%eax
     30d:	66 0f b7 c0          	movzwl %ax,%eax
     311:	66 50                	push   %eax
     313:	66 68 00 10 00 00    	pushl  $0x1000
     319:	66 6a 01             	pushl  $0x1
     31c:	66 6a 25             	pushl  $0x25
     31f:	66 e8 cc 11 00 00    	calll  14f1 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:19
    read_n_sector(1,2,0x1000, (u16)&FAT_table);// 这个会覆盖掉root吗？
     325:	66 b8 40 50 00 00    	mov    $0x5040,%eax
     32b:	66 0f b7 c0          	movzwl %ax,%eax
     32f:	66 50                	push   %eax
     331:	66 68 00 10 00 00    	pushl  $0x1000
     337:	66 6a 02             	pushl  $0x2
     33a:	66 6a 01             	pushl  $0x1
     33d:	66 e8 ae 11 00 00    	calll  14f1 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:27
    // puti(FAT_table[0]);
    // puti(root[0].cluster_number);
    // puts(&root[0], 10);
    // puts(&root[1], 10);
    // puts(&root[2], 10);
}
     343:	66 83 c4 2c          	add    $0x2c,%esp
     347:	66 c3                	retl   

00000349 <_fs_find_descriptor_number_by_name>:
_fs_find_descriptor_number_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:29

u16 _fs_find_descriptor_number_by_name(char * file_name){
     349:	66 57                	push   %edi
     34b:	66 56                	push   %esi
     34d:	66 53                	push   %ebx
     34f:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:30
    int file_name_length = strlen(file_name);
     355:	66 83 ec 0c          	sub    $0xc,%esp
     359:	66 57                	push   %edi
     35b:	66 e8 db 13 00 00    	calll  173c <strlen>
     361:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:31
    if (file_name_length >= 11) file_name_length = 11;
     364:	66 83 c4 10          	add    $0x10,%esp
     368:	66 83 f8 0a          	cmp    $0xa,%eax
     36c:	7e 06                	jle    374 <_fs_find_descriptor_number_by_name+0x2b>
     36e:	66 be 0b 00 00 00    	mov    $0xb,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:33
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     374:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     37a:	eb 2f                	jmp    3ab <_fs_find_descriptor_number_by_name+0x62>
/mnt/e/code/my_operating_system/os/service/fsystem.c:34
        if (!strncmp((char *)&root[i], file_name, file_name_length)){
     37c:	66 89 d8             	mov    %ebx,%eax
     37f:	66 c1 e0 05          	shl    $0x5,%eax
     383:	66 05 40 54 00 00    	add    $0x5440,%eax
     389:	66 83 ec 04          	sub    $0x4,%esp
     38d:	66 56                	push   %esi
     38f:	66 57                	push   %edi
     391:	66 50                	push   %eax
     393:	66 e8 67 14 00 00    	calll  1800 <strncmp>
     399:	66 83 c4 10          	add    $0x10,%esp
     39d:	66 85 c0             	test   %eax,%eax
     3a0:	75 05                	jne    3a7 <_fs_find_descriptor_number_by_name+0x5e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:35
            return i;
     3a2:	66 89 d8             	mov    %ebx,%eax
     3a5:	eb 10                	jmp    3b7 <_fs_find_descriptor_number_by_name+0x6e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 2)

u16 _fs_find_descriptor_number_by_name(char * file_name){
    int file_name_length = strlen(file_name);
    if (file_name_length >= 11) file_name_length = 11;
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     3a7:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 1)
     3ab:	66 83 fb 09          	cmp    $0x9,%ebx
     3af:	7e cb                	jle    37c <_fs_find_descriptor_number_by_name+0x33>
/mnt/e/code/my_operating_system/os/service/fsystem.c:38
        if (!strncmp((char *)&root[i], file_name, file_name_length)){
            return i;
        }
    }
    return -1;
     3b1:	66 b8 ff ff ff ff    	mov    $0xffffffff,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:39
}
     3b7:	66 5b                	pop    %ebx
     3b9:	66 5e                	pop    %esi
     3bb:	66 5f                	pop    %edi
     3bd:	66 c3                	retl   

000003bf <_fs_find_cluster_code_by_name>:
_fs_find_cluster_code_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:41

u16 _fs_find_cluster_code_by_name(char * file_name){
     3bf:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:42
    int index = _fs_find_descriptor_number_by_name(file_name);
     3c3:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     3c9:	66 e8 7a ff ff ff    	calll  349 <_fs_find_descriptor_number_by_name>
     3cf:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:44
    if (index != -1)
        return root[index].cluster_code;
     3d3:	66 c1 e0 05          	shl    $0x5,%eax
     3d7:	67 66 0f b7 80 5a 54 	movzwl 0x545a(%eax),%eax
     3de:	00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:46
    return 0;
}
     3e0:	66 83 c4 1c          	add    $0x1c,%esp
     3e4:	66 c3                	retl   

000003e6 <_fs_get_file_size_by_cluster_code>:
_fs_get_file_size_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:48

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
     3e6:	67 66 0f b7 54 24 04 	movzwl 0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:49
    int size = 0;
     3ed:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     3f3:	eb 1b                	jmp    410 <_fs_get_file_size_by_cluster_code+0x2a>
/mnt/e/code/my_operating_system/os/service/fsystem.c:51
        size += 512*cluster2sector;
     3f5:	66 0f b7 0e 40 5b    	movzwl 0x5b40,%ecx
     3fb:	66 c1 e1 09          	shl    $0x9,%ecx
     3ff:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:52
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     402:	66 0f b7 d2          	movzwl %dx,%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:53
        cluster_code = FAT_table[cluster_code];
     406:	67 66 0f b7 94 12 40 	movzwl 0x5040(%edx,%edx,1),%edx
     40d:	50 00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    return 0;
}

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     410:	67 66 8d 4a fe       	lea    -0x2(%edx),%ecx
     415:	83 f9 ed             	cmp    $0xffed,%cx
     418:	76 db                	jbe    3f5 <_fs_get_file_size_by_cluster_code+0xf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:56
        size += 512*cluster2sector;
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     41a:	66 f3 c3             	repz retl 

0000041d <_fs_show_file_by_descriptor_number>:
_fs_show_file_by_descriptor_number():
/mnt/e/code/my_operating_system/os/service/fsystem.c:58

void _fs_show_file_by_descriptor_number(u16 index){
     41d:	66 56                	push   %esi
     41f:	66 53                	push   %ebx
     421:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:59
    int cluster_code = root[index].cluster_code;
     425:	67 66 0f b7 44 24 14 	movzwl 0x14(%esp),%eax
     42c:	66 89 c6             	mov    %eax,%esi
     42f:	66 c1 e6 05          	shl    $0x5,%esi
     433:	67 66 0f b7 9e 5a 54 	movzwl 0x545a(%esi),%ebx
     43a:	00 00 
     43c:	66 81 c6 40 54 00 00 	add    $0x5440,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:60
    printf("%d, %d\n" , index,cluster_code);
     443:	66 53                	push   %ebx
     445:	66 50                	push   %eax
     447:	66 68 a8 18 00 00    	pushl  $0x18a8
     44d:	66 e8 90 0e 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:62
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
     453:	67 66 89 1c 24       	mov    %ebx,(%esp)
     458:	66 e8 88 ff ff ff    	calll  3e6 <_fs_get_file_size_by_cluster_code>
     45e:	66 83 c4 0c          	add    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:61
}

void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
     462:	66 0f b7 c0          	movzwl %ax,%eax
     466:	66 50                	push   %eax
     468:	66 56                	push   %esi
     46a:	66 68 b0 18 00 00    	pushl  $0x18b0
     470:	66 e8 6d 0e 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     476:	66 83 c4 10          	add    $0x10,%esp
     47a:	eb 20                	jmp    49c <_fs_show_file_by_descriptor_number+0x7f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:64
        printf("-%d", cluster_code);
     47c:	66 83 ec 08          	sub    $0x8,%esp
     480:	66 53                	push   %ebx
     482:	66 68 c1 18 00 00    	pushl  $0x18c1
     488:	66 e8 55 0e 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:65
        cluster_code = FAT_table[cluster_code];
     48e:	67 66 0f b7 9c 1b 40 	movzwl 0x5040(%ebx,%ebx,1),%ebx
     495:	50 00 00 
     498:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     49c:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     4a1:	66 3d ed ff 00 00    	cmp    $0xffed,%eax
     4a7:	76 d3                	jbe    47c <_fs_show_file_by_descriptor_number+0x5f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:67
        printf("-%d", cluster_code);
        cluster_code = FAT_table[cluster_code];
    }
    printf("-|\n");
     4a9:	66 83 ec 0c          	sub    $0xc,%esp
     4ad:	66 68 c5 18 00 00    	pushl  $0x18c5
     4b3:	66 e8 2a 0e 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:69
    return ;
}
     4b9:	66 83 c4 14          	add    $0x14,%esp
     4bd:	66 5b                	pop    %ebx
     4bf:	66 5e                	pop    %esi
     4c1:	66 c3                	retl   

000004c3 <_fs_load_by_cluster_code>:
_fs_load_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:71

u16 _fs_load_by_cluster_code(u16 cluster_code, u16 segment, u16 offset){
     4c3:	66 55                	push   %ebp
     4c5:	66 57                	push   %edi
     4c7:	66 56                	push   %esi
     4c9:	66 53                	push   %ebx
     4cb:	66 83 ec 0c          	sub    $0xc,%esp
     4cf:	67 66 0f b7 5c 24 20 	movzwl 0x20(%esp),%ebx
     4d6:	67 66 0f b7 6c 24 24 	movzwl 0x24(%esp),%ebp
     4dd:	67 66 0f b7 74 24 28 	movzwl 0x28(%esp),%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:72
    int size = 0;
     4e4:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     4ea:	eb 5b                	jmp    547 <_fs_load_by_cluster_code+0x84>
/mnt/e/code/my_operating_system/os/service/fsystem.c:74
        size += 512*cluster2sector;
     4ec:	66 0f b7 16 40 5b    	movzwl 0x5b40,%edx
     4f2:	66 89 d0             	mov    %edx,%eax
     4f5:	66 c1 e0 09          	shl    $0x9,%eax
     4f9:	66 01 c7             	add    %eax,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:75
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     4fc:	66 0f b7 0e 42 5b    	movzwl 0x5b42,%ecx
     502:	66 0f b7 db          	movzwl %bx,%ebx
     506:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     50b:	66 0f af c2          	imul   %edx,%eax
     50f:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:76
        read_n_sector(sector_number, cluster2sector, segment, offset);
     512:	66 0f b7 ce          	movzwl %si,%ecx
     516:	66 51                	push   %ecx
     518:	66 0f b7 cd          	movzwl %bp,%ecx
     51c:	66 51                	push   %ecx
     51e:	66 52                	push   %edx
     520:	66 0f b7 c0          	movzwl %ax,%eax
     524:	66 50                	push   %eax
     526:	66 e8 c5 0f 00 00    	calll  14f1 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:77
        offset = offset+cluster2sector*512;
     52c:	66 0f b7 06 40 5b    	movzwl 0x5b40,%eax
     532:	66 c1 e0 09          	shl    $0x9,%eax
     536:	66 01 c6             	add    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:78
        cluster_code = FAT_table[cluster_code];
     539:	67 66 0f b7 9c 1b 40 	movzwl 0x5040(%ebx,%ebx,1),%ebx
     540:	50 00 00 
     543:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    return ;
}

u16 _fs_load_by_cluster_code(u16 cluster_code, u16 segment, u16 offset){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     547:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     54c:	83 f8 ed             	cmp    $0xffed,%ax
     54f:	76 9b                	jbe    4ec <_fs_load_by_cluster_code+0x29>
/mnt/e/code/my_operating_system/os/service/fsystem.c:81
        read_n_sector(sector_number, cluster2sector, segment, offset);
        offset = offset+cluster2sector*512;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     551:	66 89 f8             	mov    %edi,%eax
     554:	66 83 c4 0c          	add    $0xc,%esp
     558:	66 5b                	pop    %ebx
     55a:	66 5e                	pop    %esi
     55c:	66 5f                	pop    %edi
     55e:	66 5d                	pop    %ebp
     560:	66 c3                	retl   

00000562 <fs_load_by_name>:
fs_load_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:84


u16 fs_load_by_name(char * file_name, u16 segment, u16 offset){
     562:	66 56                	push   %esi
     564:	66 53                	push   %ebx
     566:	66 83 ec 10          	sub    $0x10,%esp
     56a:	67 66 8b 5c 24 20    	mov    0x20(%esp),%ebx
     570:	67 66 8b 74 24 24    	mov    0x24(%esp),%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:85
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     576:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     57c:	66 e8 3d fe ff ff    	calll  3bf <_fs_find_cluster_code_by_name>
     582:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:86
    if (cluster_code){
     586:	66 83 c4 10          	add    $0x10,%esp
     58a:	66 85 c0             	test   %eax,%eax
     58d:	74 1e                	je     5ad <fs_load_by_name+0x4b>
/mnt/e/code/my_operating_system/os/service/fsystem.c:87
        return _fs_load_by_cluster_code(cluster_code, segment, offset);
     58f:	66 83 ec 04          	sub    $0x4,%esp
     593:	66 0f b7 f6          	movzwl %si,%esi
     597:	66 56                	push   %esi
     599:	66 0f b7 db          	movzwl %bx,%ebx
     59d:	66 53                	push   %ebx
     59f:	66 50                	push   %eax
     5a1:	66 e8 1c ff ff ff    	calll  4c3 <_fs_load_by_cluster_code>
     5a7:	66 83 c4 10          	add    $0x10,%esp
     5ab:	eb 06                	jmp    5b3 <fs_load_by_name+0x51>
/mnt/e/code/my_operating_system/os/service/fsystem.c:90
    }
    else {
        return 0;
     5ad:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:92
    }
}
     5b3:	66 83 c4 04          	add    $0x4,%esp
     5b7:	66 5b                	pop    %ebx
     5b9:	66 5e                	pop    %esi
     5bb:	66 c3                	retl   

000005bd <fs_get_file_size>:
fs_get_file_size():
/mnt/e/code/my_operating_system/os/service/fsystem.c:95


u16 fs_get_file_size(char * file_name){
     5bd:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:96
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     5c1:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     5c7:	66 e8 f2 fd ff ff    	calll  3bf <_fs_find_cluster_code_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:97
    return _fs_get_file_size_by_cluster_code(cluster_code);
     5cd:	66 0f b7 c0          	movzwl %ax,%eax
     5d1:	67 66 89 04 24       	mov    %eax,(%esp)
     5d6:	66 e8 0a fe ff ff    	calll  3e6 <_fs_get_file_size_by_cluster_code>
/mnt/e/code/my_operating_system/os/service/fsystem.c:98
}
     5dc:	66 83 c4 1c          	add    $0x1c,%esp
     5e0:	66 c3                	retl   

000005e2 <fs_show_root_file_table>:
fs_show_root_file_table():
/mnt/e/code/my_operating_system/os/service/fsystem.c:100

void fs_show_root_file_table(){
     5e2:	66 53                	push   %ebx
     5e4:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:101
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
     5e8:	66 68 c9 18 00 00    	pushl  $0x18c9
     5ee:	66 68 d1 18 00 00    	pushl  $0x18d1
     5f4:	66 68 db 18 00 00    	pushl  $0x18db
     5fa:	66 68 e6 18 00 00    	pushl  $0x18e6
     600:	66 e8 dd 0c 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:102
    printf("------------------------------------\n\r");
     606:	67 66 c7 04 24 9c 21 	movl   $0x219c,(%esp)
     60d:	00 00 
     60f:	66 e8 ce 0c 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     615:	66 83 c4 10          	add    $0x10,%esp
     619:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     61f:	eb 18                	jmp    639 <fs_show_root_file_table+0x57>
/mnt/e/code/my_operating_system/os/service/fsystem.c:105 (discriminator 3)
        _fs_show_file_by_descriptor_number(i);
     621:	66 83 ec 0c          	sub    $0xc,%esp
     625:	66 0f b7 c3          	movzwl %bx,%eax
     629:	66 50                	push   %eax
     62b:	66 e8 ec fd ff ff    	calll  41d <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 3)

void fs_show_root_file_table(){
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    printf("------------------------------------\n\r");
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     631:	66 83 c3 01          	add    $0x1,%ebx
     635:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 1)
     639:	66 83 fb 08          	cmp    $0x8,%ebx
     63d:	7e e2                	jle    621 <fs_show_root_file_table+0x3f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:108
        _fs_show_file_by_descriptor_number(i);
    }
    return ;
}
     63f:	66 83 c4 08          	add    $0x8,%esp
     643:	66 5b                	pop    %ebx
     645:	66 c3                	retl   

00000647 <fs_show_file_by_name>:
fs_show_file_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:110

void fs_show_file_by_name(char * file_name){
     647:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:111
    int descriptor_index = _fs_find_descriptor_number_by_name(file_name);
     64b:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     651:	66 e8 f2 fc ff ff    	calll  349 <_fs_find_descriptor_number_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:112
    _fs_show_file_by_descriptor_number(descriptor_index);
     657:	66 0f b7 c0          	movzwl %ax,%eax
     65b:	67 66 89 04 24       	mov    %eax,(%esp)
     660:	66 e8 b7 fd ff ff    	calll  41d <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:114
    return ;
}
     666:	66 83 c4 1c          	add    $0x1c,%esp
     66a:	66 c3                	retl   

0000066c <fs_show_floppy_infomation>:
fs_show_floppy_infomation():
/mnt/e/code/my_operating_system/os/service/fsystem.c:117


void fs_show_floppy_infomation(){
     66c:	66 f3 c3             	repz retl 

0000066f <schedule_process>:
schedule_process():
/mnt/e/code/my_operating_system/os/service/proc.c:11
#include "../include/system_call.h"
#include "../include/fsystem.h"
#include "../include/proc.h"

void schedule_process(){
    cur_process_index = (cur_process_index + 1) % CUR_PROCESS_NUM;
     66f:	66 0f b7 06 80 9f    	movzwl -0x6080,%eax
     675:	66 83 c0 01          	add    $0x1,%eax
     679:	66 83 e0 01          	and    $0x1,%eax
     67d:	a3 80 9f             	mov    %ax,0x9f80
/mnt/e/code/my_operating_system/os/service/proc.c:12
    cur_process = &process_table[cur_process_index];
     680:	66 0f b7 c0          	movzwl %ax,%eax
     684:	66 89 c2             	mov    %eax,%edx
     687:	66 c1 e2 06          	shl    $0x6,%edx
     68b:	67 66 8d 84 82 80 5b 	lea    0x5b80(%edx,%eax,4),%eax
     692:	00 00 
     694:	66 a3 84 9f          	mov    %eax,0x9f84
     698:	66 c3                	retl   

0000069a <init_process>:
init_process():
/mnt/e/code/my_operating_system/os/service/proc.c:16
}


void init_process(int process_index, u16 segment){
     69a:	66 53                	push   %ebx
     69c:	67 66 8b 4c 24 08    	mov    0x8(%esp),%ecx
     6a2:	67 66 8b 54 24 0c    	mov    0xc(%esp),%edx
/mnt/e/code/my_operating_system/os/service/proc.c:18
    PCB_t* this_process = &process_table[process_index];
    this_process->regs.ss = segment;
     6a8:	66 89 c8             	mov    %ecx,%eax
     6ab:	66 c1 e0 06          	shl    $0x6,%eax
     6af:	67 66 8d 1c 88       	lea    (%eax,%ecx,4),%ebx
     6b4:	67 89 93 80 5b 00 00 	mov    %dx,0x5b80(%ebx)
/mnt/e/code/my_operating_system/os/service/proc.c:19
    this_process->regs.sp = 0x5000;
     6bb:	67 c7 83 82 5b 00 00 	movw   $0x5000,0x5b82(%ebx)
     6c2:	00 50 
/mnt/e/code/my_operating_system/os/service/proc.c:20
    this_process->regs.ds = segment;
     6c4:	67 89 93 84 5b 00 00 	mov    %dx,0x5b84(%ebx)
/mnt/e/code/my_operating_system/os/service/proc.c:21
    this_process->regs.es = segment;
     6cb:	67 89 93 86 5b 00 00 	mov    %dx,0x5b86(%ebx)
/mnt/e/code/my_operating_system/os/service/proc.c:22
    this_process->regs.edi = 0;
     6d2:	67 66 c7 83 88 5b 00 	movl   $0x0,0x5b88(%ebx)
     6d9:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:23
    this_process->regs.esi = 0;
     6de:	67 66 c7 83 8c 5b 00 	movl   $0x0,0x5b8c(%ebx)
     6e5:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:24
    this_process->regs.ebp = 0x5000;
     6ea:	67 66 c7 83 90 5b 00 	movl   $0x5000,0x5b90(%ebx)
     6f1:	00 00 50 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:25
    this_process->regs.kernel_esp = 0;
     6f6:	67 66 c7 83 94 5b 00 	movl   $0x0,0x5b94(%ebx)
     6fd:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:26
    this_process->regs.ebx = 0;
     702:	67 66 c7 83 98 5b 00 	movl   $0x0,0x5b98(%ebx)
     709:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:27
    this_process->regs.edx = 0;
     70e:	67 66 c7 83 9c 5b 00 	movl   $0x0,0x5b9c(%ebx)
     715:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:28
    this_process->regs.ecx = 0;
     71a:	67 66 c7 83 a0 5b 00 	movl   $0x0,0x5ba0(%ebx)
     721:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:29
    this_process->regs.eax = 0;
     726:	67 66 c7 83 a4 5b 00 	movl   $0x0,0x5ba4(%ebx)
     72d:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:30
    this_process->regs.ip = 0x0000;
     732:	67 c7 83 a8 5b 00 00 	movw   $0x0,0x5ba8(%ebx)
     739:	00 00 
/mnt/e/code/my_operating_system/os/service/proc.c:31
    this_process->regs.cs = segment;
     73b:	67 89 93 aa 5b 00 00 	mov    %dx,0x5baa(%ebx)
/mnt/e/code/my_operating_system/os/service/proc.c:32
    this_process->regs.flags = 0x1202;
     742:	67 c7 83 ac 5b 00 00 	movw   $0x1202,0x5bac(%ebx)
     749:	02 12 
/mnt/e/code/my_operating_system/os/service/proc.c:33
    this_process->pid = process_index;
     74b:	67 66 89 8b b0 5b 00 	mov    %ecx,0x5bb0(%ebx)
     752:	00 
/mnt/e/code/my_operating_system/os/service/proc.c:35
    // this_process->p_name = 0;TODO:实现strcpy函数再说。
}
     753:	66 5b                	pop    %ebx
     755:	66 c3                	retl   

00000757 <parser>:
parser():
/mnt/e/code/my_operating_system/os/service/tty.c:90
    }
    return ;
}


void parser(){
     757:	66 56                	push   %esi
     759:	66 53                	push   %ebx
     75b:	66 83 ec 74          	sub    $0x74,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:94
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
     75f:	66 be 00 00 00 00    	mov    $0x0,%esi
/mnt/e/code/my_operating_system/os/service/tty.c:93


void parser(){
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
     765:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/tty.c:92
}


void parser(){
    char arguments[10][10];
    int input_start = 0;
     76b:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/tty.c:96
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     771:	eb 63                	jmp    7d6 <parser+0x7f>
/mnt/e/code/my_operating_system/os/service/tty.c:97
        if(input_buf[input_end] == ' ' || input_buf[input_end] == '\0'){
     773:	67 66 0f b6 83 a0 a1 	movzbl 0xa1a0(%ebx),%eax
     77a:	00 00 
     77c:	3c 20                	cmp    $0x20,%al
     77e:	0f 94 c1             	sete   %cl
     781:	84 c0                	test   %al,%al
     783:	0f 94 c0             	sete   %al
     786:	08 c1                	or     %al,%cl
     788:	74 48                	je     7d2 <parser+0x7b>
/mnt/e/code/my_operating_system/os/service/tty.c:98
            if (input_start == input_end){ // 如果并没有参数，那么继续
     78a:	66 39 da             	cmp    %ebx,%edx
     78d:	75 0a                	jne    799 <parser+0x42>
/mnt/e/code/my_operating_system/os/service/tty.c:99
                input_start++;
     78f:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/service/tty.c:100
                input_end++;
     793:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/tty.c:101
                continue;
     797:	eb 3d                	jmp    7d6 <parser+0x7f>
/mnt/e/code/my_operating_system/os/service/tty.c:104
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
     799:	66 89 d9             	mov    %ebx,%ecx
     79c:	66 29 d1             	sub    %edx,%ecx
     79f:	67 66 8d 04 b6       	lea    (%esi,%esi,4),%eax
     7a4:	67 66 8d 44 44 0c    	lea    0xc(%esp,%eax,2),%eax
     7aa:	66 83 ec 04          	sub    $0x4,%esp
     7ae:	66 51                	push   %ecx
     7b0:	66 81 c2 a0 a1 00 00 	add    $0xa1a0,%edx
     7b7:	66 52                	push   %edx
     7b9:	66 50                	push   %eax
     7bb:	66 e8 97 0f 00 00    	calll  1758 <strncpy>
/mnt/e/code/my_operating_system/os/service/tty.c:105
                input_end++;
     7c1:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/tty.c:107
                input_start = input_end;
                arguments_num++;
     7c5:	66 83 c6 01          	add    $0x1,%esi
     7c9:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:106
                continue;
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
                input_end++;
                input_start = input_end;
     7cd:	66 89 da             	mov    %ebx,%edx
     7d0:	eb 04                	jmp    7d6 <parser+0x7f>
/mnt/e/code/my_operating_system/os/service/tty.c:111
                arguments_num++;
            }
        }
        else {// 有参数，还没有读到末尾
            input_end++;
     7d2:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/tty.c:96
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     7d6:	66 3b 1e 00 50       	cmp    0x5000,%ebx
     7db:	7e 96                	jle    773 <parser+0x1c>
/mnt/e/code/my_operating_system/os/service/tty.c:118
        }
    }

    // 完成分词，开始进行解析。

    if(!strcmp(arguments[0],"run")){// 如果返回0，就是相等了
     7dd:	66 83 ec 08          	sub    $0x8,%esp
     7e1:	66 68 f6 18 00 00    	pushl  $0x18f6
     7e7:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     7ed:	66 50                	push   %eax
     7ef:	66 e8 9f 0f 00 00    	calll  1794 <strcmp>
     7f5:	66 83 c4 10          	add    $0x10,%esp
     7f9:	66 85 c0             	test   %eax,%eax
     7fc:	75 34                	jne    832 <loader_code_segment+0x32>
/mnt/e/code/my_operating_system/os/service/tty.c:123
        // 运行一个用户程序。
        // 先从软盘中加载一个指定程序到内存处，然后开始执行。
        // 考虑维护一个空闲空间的指针，然后每加载一个程序，如果可行的话。
        void (**my_program)();
        *my_program = 0x4000;
     7fe:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     804:	67 66 c7 03 00 40 00 	movl   $0x4000,(%ebx)
     80b:	00 
/mnt/e/code/my_operating_system/os/service/tty.c:124
        fs_load_by_name(arguments[1],0x1000,(u16)my_program);
     80c:	66 83 ec 04          	sub    $0x4,%esp
     810:	66 6a 00             	pushl  $0x0
     813:	66 68 00 10 00 00    	pushl  $0x1000
     819:	67 66 8d 44 24 22    	lea    0x22(%esp),%eax
     81f:	66 50                	push   %eax
     821:	66 e8 3b fd ff ff    	calll  562 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/service/tty.c:125
        (*my_program)();
     827:	67 66 ff 13          	calll  *(%ebx)
     82b:	66 83 c4 10          	add    $0x10,%esp
     82f:	e9 1b 01             	jmp    94d <loader_code_segment+0x14d>
/mnt/e/code/my_operating_system/os/service/tty.c:127
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     832:	66 83 ec 08          	sub    $0x8,%esp
     836:	66 68 fa 18 00 00    	pushl  $0x18fa
     83c:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     842:	66 50                	push   %eax
     844:	66 e8 4a 0f 00 00    	calll  1794 <strcmp>
     84a:	66 83 c4 10          	add    $0x10,%esp
     84e:	66 85 c0             	test   %eax,%eax
     851:	75 23                	jne    876 <loader_code_segment+0x76>
/mnt/e/code/my_operating_system/os/service/tty.c:127 (discriminator 1)
     853:	66 83 fe 01          	cmp    $0x1,%esi
     857:	75 1d                	jne    876 <loader_code_segment+0x76>
/mnt/e/code/my_operating_system/os/service/tty.c:128
        printf("\n\n");
     859:	66 83 ec 0c          	sub    $0xc,%esp
     85d:	66 68 fd 18 00 00    	pushl  $0x18fd
     863:	66 e8 7a 0a 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:129
        fs_show_root_file_table();
     869:	66 e8 73 fd ff ff    	calll  5e2 <fs_show_root_file_table>
     86f:	66 83 c4 10          	add    $0x10,%esp
     873:	e9 d7 00             	jmp    94d <loader_code_segment+0x14d>
/mnt/e/code/my_operating_system/os/service/tty.c:131
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     876:	66 83 ec 08          	sub    $0x8,%esp
     87a:	66 68 00 19 00 00    	pushl  $0x1900
     880:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     886:	66 50                	push   %eax
     888:	66 e8 06 0f 00 00    	calll  1794 <strcmp>
     88e:	66 83 c4 10          	add    $0x10,%esp
     892:	66 85 c0             	test   %eax,%eax
     895:	75 23                	jne    8ba <loader_code_segment+0xba>
/mnt/e/code/my_operating_system/os/service/tty.c:131 (discriminator 1)
     897:	66 83 fe 01          	cmp    $0x1,%esi
     89b:	75 1d                	jne    8ba <loader_code_segment+0xba>
/mnt/e/code/my_operating_system/os/service/tty.c:132
        printf("\n\n");
     89d:	66 83 ec 0c          	sub    $0xc,%esp
     8a1:	66 68 fd 18 00 00    	pushl  $0x18fd
     8a7:	66 e8 36 0a 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:133
        reboot();
     8ad:	66 e8 77 0e 00 00    	calll  172a <reboot>
/mnt/e/code/my_operating_system/os/service/tty.c:131
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     8b3:	66 83 c4 10          	add    $0x10,%esp
     8b7:	e9 93 00             	jmp    94d <loader_code_segment+0x14d>
/mnt/e/code/my_operating_system/os/service/tty.c:135
        printf("\n\n");
        reboot();
    }
    else if(!strcmp(arguments[0],"help") && arguments_num == 1){
     8ba:	66 83 ec 08          	sub    $0x8,%esp
     8be:	66 68 07 19 00 00    	pushl  $0x1907
     8c4:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     8ca:	66 50                	push   %eax
     8cc:	66 e8 c2 0e 00 00    	calll  1794 <strcmp>
     8d2:	66 83 c4 10          	add    $0x10,%esp
     8d6:	66 85 c0             	test   %eax,%eax
     8d9:	75 58                	jne    933 <loader_code_segment+0x133>
/mnt/e/code/my_operating_system/os/service/tty.c:135 (discriminator 1)
     8db:	66 83 fe 01          	cmp    $0x1,%esi
     8df:	75 52                	jne    933 <loader_code_segment+0x133>
/mnt/e/code/my_operating_system/os/service/tty.c:136
        printf("\n\n");
     8e1:	66 83 ec 0c          	sub    $0xc,%esp
     8e5:	66 68 fd 18 00 00    	pushl  $0x18fd
     8eb:	66 e8 f2 09 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:137
        printf("ls        : show the file in the root folder.\n");
     8f1:	67 66 c7 04 24 c4 21 	movl   $0x21c4,(%esp)
     8f8:	00 00 
     8fa:	66 e8 e3 09 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:138
        printf("run [name]: run the file in the root folder.\n");
     900:	67 66 c7 04 24 f4 21 	movl   $0x21f4,(%esp)
     907:	00 00 
     909:	66 e8 d4 09 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:139
        printf("help      : show the help message.\n");
     90f:	67 66 c7 04 24 24 22 	movl   $0x2224,(%esp)
     916:	00 00 
     918:	66 e8 c5 09 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:140
        printf("reboot    : reboot the machine.\n");
     91e:	67 66 c7 04 24 48 22 	movl   $0x2248,(%esp)
     925:	00 00 
     927:	66 e8 b6 09 00 00    	calll  12e3 <printf>
     92d:	66 83 c4 10          	add    $0x10,%esp
     931:	eb 1a                	jmp    94d <loader_code_segment+0x14d>
/mnt/e/code/my_operating_system/os/service/tty.c:143
    }
    else {
        printf("\n%s : command not found! \n", input_buf);
     933:	66 83 ec 08          	sub    $0x8,%esp
     937:	66 68 a0 a1 00 00    	pushl  $0xa1a0
     93d:	66 68 0c 19 00 00    	pushl  $0x190c
     943:	66 e8 9a 09 00 00    	calll  12e3 <printf>
     949:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:145
    }
    int current_cursor = get_cursor();
     94d:	66 e8 b9 03 00 00    	calll  d0c <get_cursor>
     953:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/tty.c:146
    command_line_row = (current_cursor / 80);
     957:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     95d:	66 f7 ea             	imul   %edx
     960:	66 c1 fa 05          	sar    $0x5,%edx
     964:	66 89 16 04 40       	mov    %edx,0x4004
/mnt/e/code/my_operating_system/os/service/tty.c:149
    // printf("arguments: %d|%s|%s|",arguments_num, arguments[0],arguments[1]);
    return ;
}
     969:	66 83 c4 74          	add    $0x74,%esp
     96d:	66 5b                	pop    %ebx
     96f:	66 5e                	pop    %esi
     971:	66 c3                	retl   

00000973 <create_a_line>:
create_a_line():
/mnt/e/code/my_operating_system/os/service/tty.c:152

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
     973:	66 83 ec 2c          	sub    $0x2c,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:153
    char message[30] = "walker@walker-pc ~ $ \0";
     977:	66 a1 6c 22          	mov    0x226c,%eax
     97b:	67 66 89 44 24 02    	mov    %eax,0x2(%esp)
     981:	66 a1 70 22          	mov    0x2270,%eax
     985:	67 66 89 44 24 06    	mov    %eax,0x6(%esp)
     98b:	66 a1 74 22          	mov    0x2274,%eax
     98f:	67 66 89 44 24 0a    	mov    %eax,0xa(%esp)
     995:	66 a1 78 22          	mov    0x2278,%eax
     999:	67 66 89 44 24 0e    	mov    %eax,0xe(%esp)
     99f:	66 a1 7c 22          	mov    0x227c,%eax
     9a3:	67 66 89 44 24 12    	mov    %eax,0x12(%esp)
     9a9:	66 0f b7 06 80 22    	movzwl 0x2280,%eax
     9af:	67 89 44 24 16       	mov    %ax,0x16(%esp)
     9b4:	66 0f b6 06 82 22    	movzbl 0x2282,%eax
     9ba:	67 88 44 24 18       	mov    %al,0x18(%esp)
     9bf:	67 66 c7 44 24 19 00 	movl   $0x0,0x19(%esp)
     9c6:	00 00 00 
     9c9:	67 c7 44 24 1d 00 00 	movw   $0x0,0x1d(%esp)
     9d0:	67 c6 44 24 1f 00    	movb   $0x0,0x1f(%esp)
/mnt/e/code/my_operating_system/os/service/tty.c:154
    for (int i = 0; i < MAX_BUF; i++){
     9d6:	66 b8 00 00 00 00    	mov    $0x0,%eax
     9dc:	eb 0c                	jmp    9ea <create_a_line+0x77>
/mnt/e/code/my_operating_system/os/service/tty.c:155 (discriminator 3)
        input_buf[i] = 0;
     9de:	67 c6 80 a0 a1 00 00 	movb   $0x0,0xa1a0(%eax)
     9e5:	00 
/mnt/e/code/my_operating_system/os/service/tty.c:154 (discriminator 3)
}

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    char message[30] = "walker@walker-pc ~ $ \0";
    for (int i = 0; i < MAX_BUF; i++){
     9e6:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/tty.c:154 (discriminator 1)
     9ea:	66 83 f8 63          	cmp    $0x63,%eax
     9ee:	7e ee                	jle    9de <create_a_line+0x6b>
/mnt/e/code/my_operating_system/os/service/tty.c:157
        input_buf[i] = 0;
    }
    message_length = strlen(message);
     9f0:	66 83 ec 0c          	sub    $0xc,%esp
     9f4:	67 66 8d 44 24 0e    	lea    0xe(%esp),%eax
     9fa:	66 50                	push   %eax
     9fc:	66 e8 3a 0d 00 00    	calll  173c <strlen>
     a02:	66 a3 04 50          	mov    %eax,0x5004
/mnt/e/code/my_operating_system/os/service/tty.c:158
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
     a06:	66 03 06 00 50       	add    0x5000,%eax
     a0b:	66 89 c1             	mov    %eax,%ecx
     a0e:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     a14:	66 f7 ea             	imul   %edx
     a17:	66 c1 fa 05          	sar    $0x5,%edx
     a1b:	66 c1 f9 1f          	sar    $0x1f,%ecx
     a1f:	66 29 ca             	sub    %ecx,%edx
     a22:	66 89 d0             	mov    %edx,%eax
     a25:	66 03 06 04 40       	add    0x4004,%eax
     a2a:	66 83 c0 01          	add    $0x1,%eax
     a2e:	66 a3 04 40          	mov    %eax,0x4004
/mnt/e/code/my_operating_system/os/service/tty.c:159
    while(command_line_row > 23){
     a32:	66 83 c4 10          	add    $0x10,%esp
     a36:	eb 0c                	jmp    a44 <create_a_line+0xd1>
/mnt/e/code/my_operating_system/os/service/tty.c:160
        scroll_screen();
     a38:	66 e8 5e 0c 00 00    	calll  169c <scroll_screen>
/mnt/e/code/my_operating_system/os/service/tty.c:161
        command_line_row--;
     a3e:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/service/tty.c:159
    for (int i = 0; i < MAX_BUF; i++){
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    while(command_line_row > 23){
     a44:	66 a1 04 40          	mov    0x4004,%eax
     a48:	66 83 f8 17          	cmp    $0x17,%eax
     a4c:	7f ea                	jg     a38 <create_a_line+0xc5>
/mnt/e/code/my_operating_system/os/service/tty.c:163
        scroll_screen();
        command_line_row--;
    }
    command_line_cursor = 0;
     a4e:	66 c7 06 00 50 00 00 	movl   $0x0,0x5000
     a55:	00 00 
/mnt/e/code/my_operating_system/os/service/tty.c:164
    set_cursor(command_line_row * 80);
     a57:	66 83 ec 0c          	sub    $0xc,%esp
     a5b:	67 66 8d 04 80       	lea    (%eax,%eax,4),%eax
     a60:	66 c1 e0 04          	shl    $0x4,%eax
     a64:	66 0f b7 d0          	movzwl %ax,%edx
     a68:	66 52                	push   %edx
     a6a:	66 e8 2a 02 00 00    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/tty.c:166
    // printf("%d", command_line_row);
    printf("%s", message);
     a70:	66 83 c4 08          	add    $0x8,%esp
     a74:	67 66 8d 44 24 0a    	lea    0xa(%esp),%eax
     a7a:	66 50                	push   %eax
     a7c:	66 68 27 19 00 00    	pushl  $0x1927
     a82:	66 e8 5b 08 00 00    	calll  12e3 <printf>
/mnt/e/code/my_operating_system/os/service/tty.c:167
}
     a88:	66 83 c4 3c          	add    $0x3c,%esp
     a8c:	66 c3                	retl   

00000a8e <tty>:
tty():
/mnt/e/code/my_operating_system/os/service/tty.c:20
int message_length = 0;
int command_line_cursor = 0; // 光标在输入区的偏移量
char input_buf[MAX_BUF]; // 输入缓存区


void tty(){
     a8e:	66 56                	push   %esi
     a90:	66 53                	push   %ebx
     a92:	66 83 ec 04          	sub    $0x4,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:22
    int keyboard_flag = 0;
    new_line_flag = 1;
     a96:	66 c7 06 00 40 01 00 	movl   $0x1,0x4000
     a9d:	00 00 
/mnt/e/code/my_operating_system/os/service/tty.c:23
    command_line_row = -1;
     a9f:	66 c7 06 04 40 ff ff 	movl   $0xffffffff,0x4004
     aa6:	ff ff 
/mnt/e/code/my_operating_system/os/service/tty.c:24
    clean_screen();
     aa8:	66 e8 d4 0b 00 00    	calll  1682 <clean_screen>
/mnt/e/code/my_operating_system/os/service/tty.c:25
    set_cursor(1974);
     aae:	66 83 ec 0c          	sub    $0xc,%esp
     ab2:	66 68 b6 07 00 00    	pushl  $0x7b6
     ab8:	66 e8 dc 01 00 00    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/tty.c:26
    set_cursor(0);
     abe:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
     ac5:	00 00 
     ac7:	66 e8 cd 01 00 00    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/tty.c:27
    print_my_name();
     acd:	66 e8 2d 0c 00 00    	calll  1700 <print_my_name>
     ad3:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:30
    while (1){
        // 使用缓冲区数据更新
        if (new_line_flag){
     ad7:	66 83 3e 00 40 00    	cmpl   $0x0,0x4000
     add:	74 0f                	je     aee <tty+0x60>
/mnt/e/code/my_operating_system/os/service/tty.c:31
            create_a_line();
     adf:	66 e8 8e fe ff ff    	calll  973 <create_a_line>
/mnt/e/code/my_operating_system/os/service/tty.c:32
            new_line_flag = 0;
     ae5:	66 c7 06 00 40 00 00 	movl   $0x0,0x4000
     aec:	00 00 
/mnt/e/code/my_operating_system/os/service/tty.c:35
        }

        if(command_line_row == 23 && message_length + command_line_cursor > 80){
     aee:	66 83 3e 04 40 17    	cmpl   $0x17,0x4004
     af4:	75 2f                	jne    b25 <tty+0x97>
/mnt/e/code/my_operating_system/os/service/tty.c:35 (discriminator 1)
     af6:	66 a1 00 50          	mov    0x5000,%eax
     afa:	66 03 06 04 50       	add    0x5004,%eax
     aff:	66 83 f8 50          	cmp    $0x50,%eax
     b03:	7e 20                	jle    b25 <tty+0x97>
/mnt/e/code/my_operating_system/os/service/tty.c:36
            scroll_screen();
     b05:	66 e8 91 0b 00 00    	calll  169c <scroll_screen>
/mnt/e/code/my_operating_system/os/service/tty.c:37
            command_line_row--;
     b0b:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/service/tty.c:38
            set_cursor(1840);
     b11:	66 83 ec 0c          	sub    $0xc,%esp
     b15:	66 68 30 07 00 00    	pushl  $0x730
     b1b:	66 e8 79 01 00 00    	calll  c9a <set_cursor>
     b21:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:40
        }
        putc(' ');// 用来删除光标处的文字，与输入退格的时候光标-1配合使用
     b25:	66 83 ec 0c          	sub    $0xc,%esp
     b29:	66 6a 20             	pushl  $0x20
     b2c:	66 e8 36 02 00 00    	calll  d68 <putc>
/mnt/e/code/my_operating_system/os/service/tty.c:43

        // command_line_row = get_cursor() / 80;
        set_cursor(80*command_line_row + message_length);
     b32:	66 8b 16 04 40       	mov    0x4004,%edx
     b37:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     b3c:	66 89 d0             	mov    %edx,%eax
     b3f:	66 c1 e0 04          	shl    $0x4,%eax
     b43:	03 06 04 50          	add    0x5004,%ax
     b47:	66 0f b7 c0          	movzwl %ax,%eax
     b4b:	67 66 89 04 24       	mov    %eax,(%esp)
     b50:	66 e8 44 01 00 00    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/tty.c:44
        puts(input_buf, command_line_cursor);
     b56:	66 83 c4 08          	add    $0x8,%esp
     b5a:	66 ff 36 00 50       	pushl  0x5000
     b5f:	66 68 a0 a1 00 00    	pushl  $0xa1a0
     b65:	66 e8 f2 03 00 00    	calll  f5d <puts>
/mnt/e/code/my_operating_system/os/service/tty.c:47

        // 更新完了 检测键盘
        keyboard_flag = check_keyboard();
     b6b:	66 e8 fb 0a 00 00    	calll  166c <check_keyboard>
/mnt/e/code/my_operating_system/os/service/tty.c:50

        // 如果返回1，则有输入，处理输入信息，否则继续循环。
        if (keyboard_flag){
     b71:	66 83 c4 10          	add    $0x10,%esp
     b75:	85 c0                	test   %ax,%ax
     b77:	0f 84 5c ff          	je     ad7 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:52
            // 处理键盘事件
            u16 keyboard_code =  get_keyboard();
     b7b:	66 e8 fb 0a 00 00    	calll  167c <get_keyboard>
/mnt/e/code/my_operating_system/os/service/tty.c:53
            u8 ascii_code = keyboard_code;
     b81:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/tty.c:55
            u8 scan_code = keyboard_code >> 8;
            if (isprint(ascii_code)){
     b84:	66 83 ec 0c          	sub    $0xc,%esp
     b88:	66 0f b6 c0          	movzbl %al,%eax
     b8c:	66 50                	push   %eax
     b8e:	66 e8 aa 08 00 00    	calll  143e <isprint>
     b94:	66 83 c4 10          	add    $0x10,%esp
     b98:	66 85 c0             	test   %eax,%eax
     b9b:	74 20                	je     bbd <tty+0x12f>
/mnt/e/code/my_operating_system/os/service/tty.c:56
                if (command_line_cursor <= MAX_BUF){
     b9d:	66 a1 00 50          	mov    0x5000,%eax
     ba1:	66 83 f8 64          	cmp    $0x64,%eax
     ba5:	0f 8f 2e ff          	jg     ad7 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:57
                    input_buf[command_line_cursor++] = ascii_code;
     ba9:	67 66 8d 50 01       	lea    0x1(%eax),%edx
     bae:	66 89 16 00 50       	mov    %edx,0x5000
     bb3:	67 88 98 a0 a1 00 00 	mov    %bl,0xa1a0(%eax)
     bba:	e9 1a ff             	jmp    ad7 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:60
                }
            }
            else if (ascii_code == 13){
     bbd:	80 fb 0d             	cmp    $0xd,%bl
     bc0:	75 1e                	jne    be0 <tty+0x152>
/mnt/e/code/my_operating_system/os/service/tty.c:61
                new_line_flag = 1;
     bc2:	66 c7 06 00 40 01 00 	movl   $0x1,0x4000
     bc9:	00 00 
/mnt/e/code/my_operating_system/os/service/tty.c:62
                input_buf[command_line_cursor] = '\0';
     bcb:	66 a1 00 50          	mov    0x5000,%eax
     bcf:	67 c6 80 a0 a1 00 00 	movb   $0x0,0xa1a0(%eax)
     bd6:	00 
/mnt/e/code/my_operating_system/os/service/tty.c:63
                parser();
     bd7:	66 e8 7a fb ff ff    	calll  757 <parser>
     bdd:	e9 f7 fe             	jmp    ad7 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:65
            }
            else if (ascii_code == 8){
     be0:	80 fb 08             	cmp    $0x8,%bl
     be3:	75 3e                	jne    c23 <tty+0x195>
/mnt/e/code/my_operating_system/os/service/tty.c:66
                if(command_line_cursor){
     be5:	66 a1 00 50          	mov    0x5000,%eax
     be9:	66 85 c0             	test   %eax,%eax
     bec:	0f 84 e7 fe          	je     ad7 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:67
                    input_buf[--command_line_cursor] = 0;
     bf0:	67 66 8d 50 ff       	lea    -0x1(%eax),%edx
     bf5:	66 89 16 00 50       	mov    %edx,0x5000
     bfa:	67 c6 80 9f a1 00 00 	movb   $0x0,0xa19f(%eax)
     c01:	00 
/mnt/e/code/my_operating_system/os/service/tty.c:69
                    // 将光标设置为前一个位置，方便删除
                    int cur_cursor = get_cursor();
     c02:	66 e8 04 01 00 00    	calll  d0c <get_cursor>
/mnt/e/code/my_operating_system/os/service/tty.c:70
                    set_cursor(cur_cursor-1);
     c08:	66 83 ec 0c          	sub    $0xc,%esp
     c0c:	66 83 e8 01          	sub    $0x1,%eax
     c10:	66 0f b7 c0          	movzwl %ax,%eax
     c14:	66 50                	push   %eax
     c16:	66 e8 7e 00 00 00    	calll  c9a <set_cursor>
     c1c:	66 83 c4 10          	add    $0x10,%esp
     c20:	e9 b4 fe             	jmp    ad7 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:73
                }
            }
            else if (ascii_code == 27){
     c23:	80 fb 1b             	cmp    $0x1b,%bl
     c26:	0f 85 ad fe          	jne    ad7 <tty+0x49>
/mnt/e/code/my_operating_system/os/service/tty.c:74
                __asm__("mov $0x4c00, %ax");
     c2a:	b8 00 4c             	mov    $0x4c00,%ax
/mnt/e/code/my_operating_system/os/service/tty.c:75
                __asm__("int $0x40");
     c2d:	cd 40                	int    $0x40
     c2f:	e9 a5 fe             	jmp    ad7 <tty+0x49>

00000c32 <tty_scroll_screen>:
tty_scroll_screen():
/mnt/e/code/my_operating_system/os/service/tty.c:170
    // printf("%d", command_line_row);
    printf("%s", message);
}


void tty_scroll_screen(){
     c32:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/tty.c:171
    if (get_cursor()/80 > 24){
     c36:	66 e8 d0 00 00 00    	calll  d0c <get_cursor>
     c3c:	3d cf 07             	cmp    $0x7cf,%ax
     c3f:	76 0c                	jbe    c4d <tty_scroll_screen+0x1b>
/mnt/e/code/my_operating_system/os/service/tty.c:172
        scroll_screen();
     c41:	66 e8 55 0a 00 00    	calll  169c <scroll_screen>
/mnt/e/code/my_operating_system/os/service/tty.c:173
        command_line_row--;
     c47:	66 83 2e 04 40 01    	subl   $0x1,0x4004
/mnt/e/code/my_operating_system/os/service/tty.c:176
    }
    return ;
     c4d:	66 83 c4 0c          	add    $0xc,%esp
     c51:	66 c3                	retl   

00000c53 <_put_char>:
_put_char():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:5
#include "../include/basic.h"
#include "../include/type.h"
#include "../include/string.h"

void _put_char(char c, u16 cursor_index){
     c53:	66 53                	push   %ebx
     c55:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:7
    int _address = 0xb8000;
    int _offset = cursor_index * 2;
     c59:	67 66 0f b7 5c 24 1c 	movzwl 0x1c(%esp),%ebx
     c60:	66 01 db             	add    %ebx,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:8
    write_memory_byte(_address+_offset, c);
     c63:	67 66 8d 83 00 80 0b 	lea    0xb8000(%ebx),%eax
     c6a:	00 
     c6b:	67 66 0f b6 54 24 18 	movzbl 0x18(%esp),%edx
     c72:	66 52                	push   %edx
     c74:	66 50                	push   %eax
     c76:	66 e8 a0 09 00 00    	calll  161c <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:9
    write_memory_byte(_address+_offset+1, 0x1f);
     c7c:	66 81 c3 01 80 0b 00 	add    $0xb8001,%ebx
     c83:	66 83 c4 08          	add    $0x8,%esp
     c87:	66 6a 1f             	pushl  $0x1f
     c8a:	66 53                	push   %ebx
     c8c:	66 e8 8a 09 00 00    	calll  161c <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:11
    return ;
}
     c92:	66 83 c4 18          	add    $0x18,%esp
     c96:	66 5b                	pop    %ebx
     c98:	66 c3                	retl   

00000c9a <set_cursor>:
set_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:13

void set_cursor(u16 cursor_index){
     c9a:	66 56                	push   %esi
     c9c:	66 53                	push   %ebx
     c9e:	66 83 ec 0c          	sub    $0xc,%esp
     ca2:	67 66 8b 5c 24 18    	mov    0x18(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:16
    // short cursor_index = 80 * row + column;     // 计算光标寄存器的值
    u8 low_eight = cursor_index; // 取低八位，高位被截断
    u8 high_eight = cursor_index >> 8; // 取高八位
     ca8:	66 89 d8             	mov    %ebx,%eax
     cab:	c1 e8 08             	shr    $0x8,%ax
     cae:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:17
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     cb1:	66 6a 0e             	pushl  $0xe
     cb4:	66 68 d4 03 00 00    	pushl  $0x3d4
     cba:	66 e8 10 09 00 00    	calll  15d0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:18
    write_port_byte(0x3d5, high_eight);// 将光标索引高八位写入端口
     cc0:	66 83 c4 08          	add    $0x8,%esp
     cc4:	66 89 f0             	mov    %esi,%eax
     cc7:	66 0f b6 f0          	movzbl %al,%esi
     ccb:	66 56                	push   %esi
     ccd:	66 68 d5 03 00 00    	pushl  $0x3d5
     cd3:	66 e8 f7 08 00 00    	calll  15d0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:19
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     cd9:	66 83 c4 08          	add    $0x8,%esp
     cdd:	66 6a 0f             	pushl  $0xf
     ce0:	66 68 d4 03 00 00    	pushl  $0x3d4
     ce6:	66 e8 e4 08 00 00    	calll  15d0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:20
    write_port_byte(0x3d5, low_eight);// 将光标索引低八位写入端口
     cec:	66 83 c4 08          	add    $0x8,%esp
     cf0:	66 0f b6 db          	movzbl %bl,%ebx
     cf4:	66 53                	push   %ebx
     cf6:	66 68 d5 03 00 00    	pushl  $0x3d5
     cfc:	66 e8 ce 08 00 00    	calll  15d0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:22
    return ;
}
     d02:	66 83 c4 14          	add    $0x14,%esp
     d06:	66 5b                	pop    %ebx
     d08:	66 5e                	pop    %esi
     d0a:	66 c3                	retl   

00000d0c <get_cursor>:
get_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:24

u16 get_cursor(){
     d0c:	66 53                	push   %ebx
     d0e:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:27
    u8 low_eight = 0, high_eight = 0;
    u16 cursor_index = 0;
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     d12:	66 6a 0e             	pushl  $0xe
     d15:	66 68 d4 03 00 00    	pushl  $0x3d4
     d1b:	66 e8 af 08 00 00    	calll  15d0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:28
    high_eight = read_port_byte(0x3d5);// 将光标索引高八位写入端口
     d21:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     d28:	00 00 
     d2a:	66 e8 c8 08 00 00    	calll  15f8 <read_port_byte>
     d30:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:29
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     d33:	66 83 c4 08          	add    $0x8,%esp
     d37:	66 6a 0f             	pushl  $0xf
     d3a:	66 68 d4 03 00 00    	pushl  $0x3d4
     d40:	66 e8 8a 08 00 00    	calll  15d0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:30
    low_eight = read_port_byte(0x3d5);// 将光标索引低八位写入端口
     d46:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     d4d:	00 00 
     d4f:	66 e8 a3 08 00 00    	calll  15f8 <read_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:32
    cursor_index = high_eight;
    cursor_index = (cursor_index << 8) + low_eight;
     d55:	66 c1 e3 08          	shl    $0x8,%ebx
     d59:	66 0f b6 c0          	movzbl %al,%eax
     d5d:	66 01 d8             	add    %ebx,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:34
    return cursor_index;
}
     d60:	66 83 c4 18          	add    $0x18,%esp
     d64:	66 5b                	pop    %ebx
     d66:	66 c3                	retl   

00000d68 <putc>:
putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:36

void putc(char c){
     d68:	66 57                	push   %edi
     d6a:	66 56                	push   %esi
     d6c:	66 53                	push   %ebx
     d6e:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:37
    u16 cursor_index = get_cursor();
     d74:	66 e8 92 ff ff ff    	calll  d0c <get_cursor>
     d7a:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:38
    u16 row = cursor_index / 80;
     d7d:	66 0f b7 d8          	movzwl %ax,%ebx
     d81:	66 69 db cd cc 00 00 	imul   $0xcccd,%ebx,%ebx
     d88:	66 c1 eb 10          	shr    $0x10,%ebx
     d8c:	c1 eb 06             	shr    $0x6,%bx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:40
    u16 col = cursor_index % 80;
    if (cursor_index >= 1920){
     d8f:	3d 7f 07             	cmp    $0x77f,%ax
     d92:	76 0c                	jbe    da0 <putc+0x38>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:41
        scroll_screen();
     d94:	66 e8 02 09 00 00    	calll  169c <scroll_screen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:42
        cursor_index = 1840;
     d9a:	66 be 30 07 00 00    	mov    $0x730,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:44
    }
    switch (c) {
     da0:	66 89 f8             	mov    %edi,%eax
     da3:	3c 0a                	cmp    $0xa,%al
     da5:	74 06                	je     dad <putc+0x45>
     da7:	3c 0d                	cmp    $0xd,%al
     da9:	74 25                	je     dd0 <putc+0x68>
     dab:	eb 45                	jmp    df2 <putc+0x8a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:46
        case '\n':
            set_cursor((row+1)*80); // 回车，移到下一行
     dad:	66 83 ec 0c          	sub    $0xc,%esp
     db1:	67 66 8d 5c 9b 05    	lea    0x5(%ebx,%ebx,4),%ebx
     db7:	66 89 d8             	mov    %ebx,%eax
     dba:	66 c1 e0 04          	shl    $0x4,%eax
     dbe:	66 0f b7 c0          	movzwl %ax,%eax
     dc2:	66 50                	push   %eax
     dc4:	66 e8 d0 fe ff ff    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:47
            break;
     dca:	66 83 c4 10          	add    $0x10,%esp
     dce:	eb 52                	jmp    e22 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:49
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     dd0:	66 83 ec 0c          	sub    $0xc,%esp
     dd4:	67 66 8d 1c 9b       	lea    (%ebx,%ebx,4),%ebx
     dd9:	66 89 d8             	mov    %ebx,%eax
     ddc:	66 c1 e0 04          	shl    $0x4,%eax
     de0:	66 0f b7 c0          	movzwl %ax,%eax
     de4:	66 50                	push   %eax
     de6:	66 e8 ae fe ff ff    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:50
            break;
     dec:	66 83 c4 10          	add    $0x10,%esp
     df0:	eb 30                	jmp    e22 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:52
        default:
            _put_char(c, cursor_index);
     df2:	66 83 ec 08          	sub    $0x8,%esp
     df6:	66 0f b7 c6          	movzwl %si,%eax
     dfa:	66 50                	push   %eax
     dfc:	66 89 f8             	mov    %edi,%eax
     dff:	66 0f be f8          	movsbl %al,%edi
     e03:	66 57                	push   %edi
     e05:	66 e8 48 fe ff ff    	calll  c53 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:53
            set_cursor(cursor_index+1);
     e0b:	66 83 c6 01          	add    $0x1,%esi
     e0f:	66 0f b7 f6          	movzwl %si,%esi
     e13:	67 66 89 34 24       	mov    %esi,(%esp)
     e18:	66 e8 7c fe ff ff    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:54
            break;
     e1e:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:57
    }
    return ;
}
     e22:	66 5b                	pop    %ebx
     e24:	66 5e                	pop    %esi
     e26:	66 5f                	pop    %edi
     e28:	66 c3                	retl   

00000e2a <_putc>:
_putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:59

void _putc(char c){
     e2a:	66 56                	push   %esi
     e2c:	66 53                	push   %ebx
     e2e:	66 83 ec 04          	sub    $0x4,%esp
     e32:	67 66 8b 5c 24 10    	mov    0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:60
    u16 cursor_index = get_cursor();
     e38:	66 e8 ce fe ff ff    	calll  d0c <get_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:61
    u16 row = cursor_index / 80;
     e3e:	66 0f b7 d0          	movzwl %ax,%edx
     e42:	66 69 d2 cd cc 00 00 	imul   $0xcccd,%edx,%edx
     e49:	66 c1 ea 10          	shr    $0x10,%edx
     e4d:	c1 ea 06             	shr    $0x6,%dx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:62
    u16 col = cursor_index % 80;
     e50:	67 66 8d 34 92       	lea    (%edx,%edx,4),%esi
     e55:	66 c1 e6 04          	shl    $0x4,%esi
     e59:	66 89 f1             	mov    %esi,%ecx
     e5c:	66 89 c6             	mov    %eax,%esi
     e5f:	66 29 ce             	sub    %ecx,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:63
    switch (c) {
     e62:	80 fb 0a             	cmp    $0xa,%bl
     e65:	74 07                	je     e6e <_putc+0x44>
     e67:	80 fb 0d             	cmp    $0xd,%bl
     e6a:	74 2b                	je     e97 <_putc+0x6d>
     e6c:	eb 4b                	jmp    eb9 <_putc+0x8f>
     e6e:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:65
        case '\n':
            set_cursor((row+1)*80+col); // 回车，移到下一行
     e71:	66 83 ec 0c          	sub    $0xc,%esp
     e75:	67 66 8d 54 92 05    	lea    0x5(%edx,%edx,4),%edx
     e7b:	66 89 d0             	mov    %edx,%eax
     e7e:	66 c1 e0 04          	shl    $0x4,%eax
     e82:	66 01 c1             	add    %eax,%ecx
     e85:	66 0f b7 c9          	movzwl %cx,%ecx
     e89:	66 51                	push   %ecx
     e8b:	66 e8 09 fe ff ff    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:66
            break;
     e91:	66 83 c4 10          	add    $0x10,%esp
     e95:	eb 3c                	jmp    ed3 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:68
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     e97:	66 83 ec 0c          	sub    $0xc,%esp
     e9b:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     ea0:	66 89 d0             	mov    %edx,%eax
     ea3:	66 c1 e0 04          	shl    $0x4,%eax
     ea7:	66 0f b7 c0          	movzwl %ax,%eax
     eab:	66 50                	push   %eax
     ead:	66 e8 e7 fd ff ff    	calll  c9a <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:69
            break;
     eb3:	66 83 c4 10          	add    $0x10,%esp
     eb7:	eb 1a                	jmp    ed3 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:71
        default:
            _put_char(c, cursor_index);
     eb9:	66 83 ec 08          	sub    $0x8,%esp
     ebd:	66 0f b7 c0          	movzwl %ax,%eax
     ec1:	66 50                	push   %eax
     ec3:	66 0f be db          	movsbl %bl,%ebx
     ec7:	66 53                	push   %ebx
     ec9:	66 e8 84 fd ff ff    	calll  c53 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:73
            // set_cursor(cursor_index+1);
            break;
     ecf:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:76
    }
    return ;
}
     ed3:	66 83 c4 04          	add    $0x4,%esp
     ed7:	66 5b                	pop    %ebx
     ed9:	66 5e                	pop    %esi
     edb:	66 c3                	retl   

00000edd <puti>:
puti():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:78

void puti(u32 n){
     edd:	66 56                	push   %esi
     edf:	66 53                	push   %ebx
     ee1:	66 83 ec 44          	sub    $0x44,%esp
     ee5:	67 66 8b 4c 24 50    	mov    0x50(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:79
    int len = 0;
     eeb:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     ef1:	eb 2d                	jmp    f20 <puti+0x43>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:82
        num[len] = n % 10;
     ef3:	66 ba cd cc cc cc    	mov    $0xcccccccd,%edx
     ef9:	66 89 c8             	mov    %ecx,%eax
     efc:	66 f7 e2             	mul    %edx
     eff:	66 c1 ea 03          	shr    $0x3,%edx
     f03:	66 89 d6             	mov    %edx,%esi
     f06:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     f0b:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     f10:	66 29 c1             	sub    %eax,%ecx
     f13:	67 66 89 4c 9c 04    	mov    %ecx,0x4(%esp,%ebx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:83
        n = n / 10;
     f19:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:84
        len++;
     f1c:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
}

void puti(u32 n){
    int len = 0;
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     f20:	66 85 c9             	test   %ecx,%ecx
     f23:	75 ce                	jne    ef3 <puti+0x16>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     f25:	66 83 eb 01          	sub    $0x1,%ebx
     f29:	eb 23                	jmp    f4e <puti+0x71>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:87 (discriminator 3)
        putc(num[i]+'0');
     f2b:	66 83 ec 0c          	sub    $0xc,%esp
     f2f:	67 66 0f b6 44 9c 10 	movzbl 0x10(%esp,%ebx,4),%eax
     f36:	66 83 c0 30          	add    $0x30,%eax
     f3a:	66 0f be c0          	movsbl %al,%eax
     f3e:	66 50                	push   %eax
     f40:	66 e8 22 fe ff ff    	calll  d68 <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 3)
    while (n != 0){
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     f46:	66 83 eb 01          	sub    $0x1,%ebx
     f4a:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 1)
     f4e:	66 85 db             	test   %ebx,%ebx
     f51:	79 d8                	jns    f2b <puti+0x4e>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:90
        putc(num[i]+'0');
    }
    return ;
}
     f53:	66 83 c4 44          	add    $0x44,%esp
     f57:	66 5b                	pop    %ebx
     f59:	66 5e                	pop    %esi
     f5b:	66 c3                	retl   

00000f5d <puts>:
puts():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:92

void puts(char * str, int size){
     f5d:	66 57                	push   %edi
     f5f:	66 56                	push   %esi
     f61:	66 53                	push   %ebx
     f63:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
     f69:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:93
    int i = 0;
     f6f:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    while (i < size){
     f75:	eb 1a                	jmp    f91 <puts+0x34>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:95
        putc(str[i]);
     f77:	66 83 ec 0c          	sub    $0xc,%esp
     f7b:	67 66 0f be 04 1f    	movsbl (%edi,%ebx,1),%eax
     f81:	66 50                	push   %eax
     f83:	66 e8 df fd ff ff    	calll  d68 <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:96
        i++;
     f89:	66 83 c3 01          	add    $0x1,%ebx
     f8d:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    return ;
}

void puts(char * str, int size){
    int i = 0;
    while (i < size){
     f91:	66 39 f3             	cmp    %esi,%ebx
     f94:	7c e1                	jl     f77 <puts+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:99
        putc(str[i]);
        i++;
    }
    return ;
}
     f96:	66 5b                	pop    %ebx
     f98:	66 5e                	pop    %esi
     f9a:	66 5f                	pop    %edi
     f9c:	66 c3                	retl   

00000f9e <sprintf>:
sprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:103



void sprintf(char * dest , char * format, ...){
     f9e:	66 55                	push   %ebp
     fa0:	66 57                	push   %edi
     fa2:	66 56                	push   %esi
     fa4:	66 53                	push   %ebx
     fa6:	66 83 ec 5c          	sub    $0x5c,%esp
     faa:	67 66 8b 6c 24 70    	mov    0x70(%esp),%ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:106
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     fb0:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:105



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     fb6:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:104
}



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
     fbc:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     fc2:	e9 33 01             	jmp    10f8 <core_header_data_segment+0xf8>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:109
        if (format[src_index] == '%'){
     fc5:	3c 25                	cmp    $0x25,%al
     fc7:	0f 85 1b 01          	jne    10e6 <core_header_data_segment+0xe6>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:111
            src_index++;
            switch(format[src_index]){
     fcb:	67 66 0f b6 44 39 01 	movzbl 0x1(%ecx,%edi,1),%eax
     fd2:	3c 64                	cmp    $0x64,%al
     fd4:	74 28                	je     ffe <sprintf+0x60>
     fd6:	3c 73                	cmp    $0x73,%al
     fd8:	0f 84 b5 00          	je     1091 <core_header_data_segment+0x91>
     fdc:	3c 63                	cmp    $0x63,%al
     fde:	0f 85 fe 00          	jne    10e0 <core_header_data_segment+0xe0>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     fe2:	67 66 8b 44 94 78    	mov    0x78(%esp,%edx,4),%eax
     fe8:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:114
                    src_index++;
     fed:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     ff1:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     ff6:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:115
                    src_index++;
                    break;
     ffb:	e9 fa 00             	jmp    10f8 <core_header_data_segment+0xf8>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     ffe:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1003:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    1009:	67 66 8b 4c 94 78    	mov    0x78(%esp,%edx,4),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:119
                    int len = 0; 
    100f:	66 be 00 00 00 00    	mov    $0x0,%esi
    1015:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                    int num[INT_LENGTH];
                    while (n != 0){
    101b:	eb 37                	jmp    1054 <core_header_data_segment+0x54>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:122
                        num[len] = n % 10;
    101d:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    1023:	66 89 c8             	mov    %ecx,%eax
    1026:	66 f7 ea             	imul   %edx
    1029:	66 c1 fa 02          	sar    $0x2,%edx
    102d:	66 89 c8             	mov    %ecx,%eax
    1030:	66 c1 f8 1f          	sar    $0x1f,%eax
    1034:	66 29 c2             	sub    %eax,%edx
    1037:	66 89 d7             	mov    %edx,%edi
    103a:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
    103f:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    1044:	66 29 c1             	sub    %eax,%ecx
    1047:	67 66 89 4c b4 14    	mov    %ecx,0x14(%esp,%esi,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:123
                        n = n / 10;
    104d:	66 89 f9             	mov    %edi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:124
                        len++;
    1050:	66 83 c6 01          	add    $0x1,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
    1054:	66 85 c9             	test   %ecx,%ecx
    1057:	75 c4                	jne    101d <core_header_data_segment+0x1d>
    1059:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    105f:	67 66 8d 46 ff       	lea    -0x1(%esi),%eax
    1064:	eb 1a                	jmp    1080 <core_header_data_segment+0x80>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
    1066:	67 66 0f b6 74 84 14 	movzbl 0x14(%esp,%eax,4),%esi
    106d:	67 66 8d 56 30       	lea    0x30(%esi),%edx
    1072:	67 88 54 1d 00       	mov    %dl,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1077:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
    107b:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1080:	66 85 c0             	test   %eax,%eax
    1083:	79 e1                	jns    1066 <core_header_data_segment+0x66>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:129
                        dest[des_index++] = num[i]+'0';
                    }
                    src_index++;
    1085:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                    dest[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    1089:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    108f:	eb 67                	jmp    10f8 <core_header_data_segment+0xf8>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
    1091:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1096:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    109c:	67 66 8b 74 94 78    	mov    0x78(%esp,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:134
                    u32 str_len = strlen(str);
    10a2:	66 83 ec 0c          	sub    $0xc,%esp
    10a6:	66 56                	push   %esi
    10a8:	66 e8 8e 06 00 00    	calll  173c <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    u32 i = 0;
                    while (i < str_len){
    10ae:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:135
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    10b2:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    while (i < str_len){
    10b8:	eb 15                	jmp    10cf <core_header_data_segment+0xcf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:137
                        dest[des_index++] = str[i++];
    10ba:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    10c0:	67 88 4c 1d 00       	mov    %cl,0x0(%ebp,%ebx,1)
    10c5:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    10ca:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    10cf:	66 39 c2             	cmp    %eax,%edx
    10d2:	72 e6                	jb     10ba <core_header_data_segment+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:139
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
    10d4:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
    10d8:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:140
                    u32 i = 0;
                    while (i < str_len){
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    10de:	eb 18                	jmp    10f8 <core_header_data_segment+0xf8>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:143
                }
                default :
                    src_index++;
    10e0:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:144
                    break;
    10e4:	eb 12                	jmp    10f8 <core_header_data_segment+0xf8>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:147
            }
        }
        else if (format[src_index] == '\\') {
    10e6:	3c 5c                	cmp    $0x5c,%al
    10e8:	74 0e                	je     10f8 <core_header_data_segment+0xf8>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:166
                        break;
                }
            }
        }
        else {
            dest[des_index++] = format[src_index++];
    10ea:	66 83 c7 01          	add    $0x1,%edi
    10ee:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
    10f3:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    10f8:	67 66 8b 4c 24 74    	mov    0x74(%esp),%ecx
    10fe:	67 66 0f b6 04 39    	movzbl (%ecx,%edi,1),%eax
    1104:	84 c0                	test   %al,%al
    1106:	0f 85 bb fe          	jne    fc5 <sprintf+0x27>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:169
        }
        else {
            dest[des_index++] = format[src_index++];
        }
    }
    dest[des_index] = 0;
    110a:	67 c6 44 1d 00 00    	movb   $0x0,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:171
    return ;
}
    1110:	66 83 c4 5c          	add    $0x5c,%esp
    1114:	66 5b                	pop    %ebx
    1116:	66 5e                	pop    %esi
    1118:	66 5f                	pop    %edi
    111a:	66 5d                	pop    %ebp
    111c:	66 c3                	retl   

0000111e <vprintf>:
vprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:174


void vprintf(char * format, va_list va){
    111e:	66 55                	push   %ebp
    1120:	66 57                	push   %edi
    1122:	66 56                	push   %esi
    1124:	66 53                	push   %ebx
    1126:	66 81 ec 5c 04 00 00 	sub    $0x45c,%esp
    112d:	67 66 8b ac 24 70 04 	mov    0x470(%esp),%ebp
    1134:	00 00 
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:178
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    1136:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:177


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    113c:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:176
}


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    1142:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    1148:	e9 4c 01             	jmp    1297 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:181
        if (format[src_index] == '%'){
    114b:	3c 25                	cmp    $0x25,%al
    114d:	0f 85 34 01          	jne    1285 <vprintf+0x167>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:183
            src_index++;
            switch(format[src_index]){
    1151:	67 66 0f b6 44 3d 01 	movzbl 0x1(%ebp,%edi,1),%eax
    1158:	3c 64                	cmp    $0x64,%al
    115a:	74 30                	je     118c <vprintf+0x6e>
    115c:	3c 73                	cmp    $0x73,%al
    115e:	0f 84 c6 00          	je     1228 <vprintf+0x10a>
    1162:	3c 63                	cmp    $0x63,%al
    1164:	0f 85 17 01          	jne    127f <vprintf+0x161>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
    1168:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    116f:	00 00 
    1171:	67 66 8b 04 90       	mov    (%eax,%edx,4),%eax
    1176:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:186
                    src_index++;
    117b:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
    117f:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
    1184:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:187
                    src_index++;
                    break;
    1189:	e9 0b 01             	jmp    1297 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    118c:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1191:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    1197:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    119e:	00 00 
    11a0:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:191
                    int len = 0; 
    11a5:	66 b9 00 00 00 00    	mov    $0x0,%ecx
    11ab:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                    int num[INT_LENGTH];
                    while (n != 0){
    11b1:	eb 3a                	jmp    11ed <vprintf+0xcf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:194
                        num[len] = n % 10;
    11b3:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    11b9:	66 89 f0             	mov    %esi,%eax
    11bc:	66 f7 ea             	imul   %edx
    11bf:	66 c1 fa 02          	sar    $0x2,%edx
    11c3:	66 89 f0             	mov    %esi,%eax
    11c6:	66 c1 f8 1f          	sar    $0x1f,%eax
    11ca:	66 29 c2             	sub    %eax,%edx
    11cd:	66 89 d7             	mov    %edx,%edi
    11d0:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
    11d5:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    11da:	66 89 f2             	mov    %esi,%edx
    11dd:	66 29 c2             	sub    %eax,%edx
    11e0:	67 66 89 54 8c 14    	mov    %edx,0x14(%esp,%ecx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:195
                        n = n / 10;
    11e6:	66 89 fe             	mov    %edi,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:196
                        len++;
    11e9:	66 83 c1 01          	add    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
    11ed:	66 85 f6             	test   %esi,%esi
    11f0:	75 c1                	jne    11b3 <vprintf+0x95>
    11f2:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    11f8:	66 83 e9 01          	sub    $0x1,%ecx
    11fc:	eb 19                	jmp    1217 <vprintf+0xf9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    11fe:	67 66 0f b6 44 8c 14 	movzbl 0x14(%esp,%ecx,4),%eax
    1205:	66 83 c0 30          	add    $0x30,%eax
    1209:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    120e:	66 83 e9 01          	sub    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    1212:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    1217:	66 85 c9             	test   %ecx,%ecx
    121a:	79 e2                	jns    11fe <vprintf+0xe0>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:201
                        buf[des_index++] = num[i]+'0';
                    }
                    src_index++;
    121c:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                    buf[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    1220:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    1226:	eb 6f                	jmp    1297 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
    1228:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    122d:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    1233:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    123a:	00 00 
    123c:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:206
                    u32 str_len = strlen(str);
    1241:	66 83 ec 0c          	sub    $0xc,%esp
    1245:	66 56                	push   %esi
    1247:	66 e8 ef 04 00 00    	calll  173c <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    u32 i = 0;
                    while (i < str_len){
    124d:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:207
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    1251:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    while (i < str_len){
    1257:	eb 15                	jmp    126e <vprintf+0x150>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:209
                        buf[des_index++] = str[i++];
    1259:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    125f:	67 88 4c 1c 50       	mov    %cl,0x50(%esp,%ebx,1)
    1264:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    1269:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    126e:	66 39 c2             	cmp    %eax,%edx
    1271:	72 e6                	jb     1259 <vprintf+0x13b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:211
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
    1273:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(char **)(arg_addr + arg_num++);
    1277:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:212
                    u32 i = 0;
                    while (i < str_len){
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    127d:	eb 18                	jmp    1297 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:215
                }
                default :
                    src_index++;
    127f:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:216
                    break;
    1283:	eb 12                	jmp    1297 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:219
            }
        }
        else if (format[src_index] == '\\') {
    1285:	3c 5c                	cmp    $0x5c,%al
    1287:	74 0e                	je     1297 <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:238
                        break;
                }
            }
        }
        else {
            buf[des_index++] = format[src_index++];
    1289:	66 83 c7 01          	add    $0x1,%edi
    128d:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
    1292:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    1297:	67 66 0f b6 44 3d 00 	movzbl 0x0(%ebp,%edi,1),%eax
    129e:	84 c0                	test   %al,%al
    12a0:	0f 85 a7 fe          	jne    114b <vprintf+0x2d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:241
        }
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    12a4:	67 c6 44 1c 50 00    	movb   $0x0,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242
    for (int i = 0; i < des_index; i++){
    12aa:	66 be 00 00 00 00    	mov    $0x0,%esi
    12b0:	eb 1b                	jmp    12cd <vprintf+0x1af>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:243 (discriminator 3)
        putc(buf[i]);
    12b2:	66 83 ec 0c          	sub    $0xc,%esp
    12b6:	67 66 0f be 44 34 5c 	movsbl 0x5c(%esp,%esi,1),%eax
    12bd:	66 50                	push   %eax
    12bf:	66 e8 a3 fa ff ff    	calll  d68 <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 3)
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    for (int i = 0; i < des_index; i++){
    12c5:	66 83 c6 01          	add    $0x1,%esi
    12c9:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 1)
    12cd:	66 39 f3             	cmp    %esi,%ebx
    12d0:	7f e0                	jg     12b2 <vprintf+0x194>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:246
        putc(buf[i]);
    }
    return ;
}
    12d2:	66 81 c4 5c 04 00 00 	add    $0x45c,%esp
    12d9:	66 5b                	pop    %ebx
    12db:	66 5e                	pop    %esi
    12dd:	66 5f                	pop    %edi
    12df:	66 5d                	pop    %ebp
    12e1:	66 c3                	retl   

000012e3 <printf>:
printf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:248

void printf(char * format, ...){
    12e3:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:249
    vprintf(format, &format+1);// 其实这里由于format是个指针，是32位的，所以这里对format的地址+1，也会加4个字节。
    12e7:	67 66 8d 44 24 1c    	lea    0x1c(%esp),%eax
    12ed:	66 50                	push   %eax
    12ef:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    12f5:	66 e8 23 fe ff ff    	calll  111e <vprintf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:251
    return ;
}
    12fb:	66 83 c4 1c          	add    $0x1c,%esp
    12ff:	66 c3                	retl   

00001301 <isalpha>:
isalpha():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:270
//     return ;
// }



int isalpha (int ch){
    1301:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:271
    if ('a' <= ch && ch <= 'z')
    1307:	67 66 8d 50 9f       	lea    -0x61(%eax),%edx
    130c:	66 83 fa 19          	cmp    $0x19,%edx
    1310:	76 12                	jbe    1324 <isalpha+0x23>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:273
        return 1;
    if ('A' <= ch && ch <= 'Z')
    1312:	66 83 e8 41          	sub    $0x41,%eax
    1316:	66 83 f8 19          	cmp    $0x19,%eax
    131a:	77 10                	ja     132c <isalpha+0x2b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:274
        return 1;
    131c:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1322:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:272



int isalpha (int ch){
    if ('a' <= ch && ch <= 'z')
        return 1;
    1324:	66 b8 01 00 00 00    	mov    $0x1,%eax
    132a:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:275
    if ('A' <= ch && ch <= 'Z')
        return 1;
    return 0;
    132c:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:276
}
    1332:	66 c3                	retl   

00001334 <isdigit>:
isdigit():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:278
int isdigit (int ch){
    if ('0' <= ch && ch <= '9')
    1334:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
    133a:	66 83 e8 30          	sub    $0x30,%eax
    133e:	66 83 f8 09          	cmp    $0x9,%eax
    1342:	77 08                	ja     134c <isdigit+0x18>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:279
        return 1;
    1344:	66 b8 01 00 00 00    	mov    $0x1,%eax
    134a:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:280
    return 0;
    134c:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:281
}
    1352:	66 c3                	retl   

00001354 <isalnum>:
isalnum():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:283

int isalnum (int ch){
    1354:	66 53                	push   %ebx
    1356:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284
    if ( isalpha(ch) || isdigit(ch) ){
    135c:	66 53                	push   %ebx
    135e:	66 e8 9d ff ff ff    	calll  1301 <isalpha>
    1364:	66 83 c4 04          	add    $0x4,%esp
    1368:	66 85 c0             	test   %eax,%eax
    136b:	75 13                	jne    1380 <isalnum+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284 (discriminator 1)
    136d:	66 53                	push   %ebx
    136f:	66 e8 bf ff ff ff    	calll  1334 <isdigit>
    1375:	66 83 c4 04          	add    $0x4,%esp
    1379:	66 85 c0             	test   %eax,%eax
    137c:	75 0a                	jne    1388 <isalnum+0x34>
    137e:	eb 0e                	jmp    138e <isalnum+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:285
        return 1;
    1380:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1386:	eb 06                	jmp    138e <isalnum+0x3a>
    1388:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:288
    }
    return 0;
}
    138e:	66 5b                	pop    %ebx
    1390:	66 c3                	retl   

00001392 <ispunct>:
ispunct():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:289
int ispunct (int ch){
    1392:	66 83 ec 30          	sub    $0x30,%esp
    1396:	67 66 8b 4c 24 34    	mov    0x34(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:290
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    139c:	67 66 c7 44 24 0e 21 	movl   $0x24232221,0xe(%esp)
    13a3:	22 23 24 
    13a6:	67 66 c7 44 24 12 25 	movl   $0x28272625,0x12(%esp)
    13ad:	26 27 28 
    13b0:	67 66 c7 44 24 16 29 	movl   $0x2c2b2a29,0x16(%esp)
    13b7:	2a 2b 2c 
    13ba:	67 66 c7 44 24 1a 2d 	movl   $0x3a2f2e2d,0x1a(%esp)
    13c1:	2e 2f 3a 
    13c4:	67 66 c7 44 24 1e 3b 	movl   $0x3e3d3c3b,0x1e(%esp)
    13cb:	3c 3d 3e 
    13ce:	67 66 c7 44 24 22 3f 	movl   $0x5c5b403f,0x22(%esp)
    13d5:	40 5b 5c 
    13d8:	67 66 c7 44 24 26 5d 	movl   $0x605f5e5d,0x26(%esp)
    13df:	5e 5f 60 
    13e2:	67 66 c7 44 24 2a 7b 	movl   $0x7e7d7c7b,0x2a(%esp)
    13e9:	7c 7d 7e 
    13ec:	67 c7 44 24 2e 00 00 	movw   $0x0,0x2e(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291
    for (int i = 0; i < 33; i++){
    13f3:	66 b8 00 00 00 00    	mov    $0x0,%eax
    13f9:	eb 10                	jmp    140b <ispunct+0x79>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:292
        if (ch == punct[i])
    13fb:	67 66 0f be 54 04 0e 	movsbl 0xe(%esp,%eax,1),%edx
    1402:	66 39 ca             	cmp    %ecx,%edx
    1405:	74 12                	je     1419 <ispunct+0x87>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 2)
    }
    return 0;
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
    1407:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 1)
    140b:	66 83 f8 20          	cmp    $0x20,%eax
    140f:	7e ea                	jle    13fb <ispunct+0x69>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:295
        if (ch == punct[i])
            return 1;
    }
    return 0;
    1411:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1417:	eb 06                	jmp    141f <ispunct+0x8d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:293
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
        if (ch == punct[i])
            return 1;
    1419:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:296
    }
    return 0;
}
    141f:	66 83 c4 30          	add    $0x30,%esp
    1423:	66 c3                	retl   

00001425 <isblank>:
isblank():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:298
int isblank (int ch){
    if (ch == ' ')
    1425:	67 66 83 7c 24 04 20 	cmpl   $0x20,0x4(%esp)
    142c:	75 08                	jne    1436 <isblank+0x11>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:299
        return 1;
    142e:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1434:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:300
    return 0;
    1436:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:301
}
    143c:	66 c3                	retl   

0000143e <isprint>:
isprint():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:302
int isprint (int ch){
    143e:	66 53                	push   %ebx
    1440:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303
    if (isalpha(ch) || isdigit(ch) || isalnum(ch) || ispunct(ch) || isblank(ch)){
    1446:	66 53                	push   %ebx
    1448:	66 e8 b3 fe ff ff    	calll  1301 <isalpha>
    144e:	66 83 c4 04          	add    $0x4,%esp
    1452:	66 85 c0             	test   %eax,%eax
    1455:	75 46                	jne    149d <isprint+0x5f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 1)
    1457:	66 53                	push   %ebx
    1459:	66 e8 d5 fe ff ff    	calll  1334 <isdigit>
    145f:	66 83 c4 04          	add    $0x4,%esp
    1463:	66 85 c0             	test   %eax,%eax
    1466:	75 3d                	jne    14a5 <isprint+0x67>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 2)
    1468:	66 53                	push   %ebx
    146a:	66 e8 e4 fe ff ff    	calll  1354 <isalnum>
    1470:	66 83 c4 04          	add    $0x4,%esp
    1474:	66 85 c0             	test   %eax,%eax
    1477:	75 34                	jne    14ad <isprint+0x6f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 3)
    1479:	66 53                	push   %ebx
    147b:	66 e8 11 ff ff ff    	calll  1392 <ispunct>
    1481:	66 83 c4 04          	add    $0x4,%esp
    1485:	66 85 c0             	test   %eax,%eax
    1488:	75 2b                	jne    14b5 <isprint+0x77>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 4)
    148a:	66 53                	push   %ebx
    148c:	66 e8 93 ff ff ff    	calll  1425 <isblank>
    1492:	66 83 c4 04          	add    $0x4,%esp
    1496:	66 85 c0             	test   %eax,%eax
    1499:	75 22                	jne    14bd <isprint+0x7f>
    149b:	eb 26                	jmp    14c3 <isprint+0x85>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:304
        return 1;
    149d:	66 b8 01 00 00 00    	mov    $0x1,%eax
    14a3:	eb 1e                	jmp    14c3 <isprint+0x85>
    14a5:	66 b8 01 00 00 00    	mov    $0x1,%eax
    14ab:	eb 16                	jmp    14c3 <isprint+0x85>
    14ad:	66 b8 01 00 00 00    	mov    $0x1,%eax
    14b3:	eb 0e                	jmp    14c3 <isprint+0x85>
    14b5:	66 b8 01 00 00 00    	mov    $0x1,%eax
    14bb:	eb 06                	jmp    14c3 <isprint+0x85>
    14bd:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:307
    }
    return 0;
}
    14c3:	66 5b                	pop    %ebx
    14c5:	66 c3                	retl   

000014c7 <iscntrl>:
iscntrl():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:308
int iscntrl (int ch){
    14c7:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:310
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
    14cd:	66 83 f8 1f          	cmp    $0x1f,%eax
    14d1:	76 0e                	jbe    14e1 <iscntrl+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:312
        return 1;
    if (ch == 0x7f)
    14d3:	66 83 f8 7f          	cmp    $0x7f,%eax
    14d7:	75 10                	jne    14e9 <iscntrl+0x22>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:313
        return 1;
    14d9:	66 b8 01 00 00 00    	mov    $0x1,%eax
    14df:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:311
    return 0;
}
int iscntrl (int ch){
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
        return 1;
    14e1:	66 b8 01 00 00 00    	mov    $0x1,%eax
    14e7:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:314
    if (ch == 0x7f)
        return 1;
    return 0;
    14e9:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:315
}
    14ef:	66 c3                	retl   

000014f1 <read_n_sector>:
read_n_sector():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:321

/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    14f1:	66 55                	push   %ebp
    14f3:	66 57                	push   %edi
    14f5:	66 56                	push   %esi
    14f7:	66 53                	push   %ebx
    14f9:	66 83 ec 1c          	sub    $0x1c,%esp
    14fd:	67 66 0f b7 7c 24 30 	movzwl 0x30(%esp),%edi
    1504:	67 66 0f b7 74 24 34 	movzwl 0x34(%esp),%esi
    150b:	67 66 0f b7 44 24 38 	movzwl 0x38(%esp),%eax
    1512:	67 89 44 24 0c       	mov    %ax,0xc(%esp)
    1517:	67 66 0f b7 44 24 3c 	movzwl 0x3c(%esp),%eax
    151e:	67 89 44 24 0e       	mov    %ax,0xe(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322
    for (int i = 0; i < number; i++){
    1523:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    1529:	eb 7d                	jmp    15a8 <read_n_sector+0xb7>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:323 (discriminator 3)
        int sector = (sector_code+i) % 18+1;
    152b:	66 0f b7 ef          	movzwl %di,%ebp
    152f:	66 01 dd             	add    %ebx,%ebp
    1532:	66 ba 39 8e e3 38    	mov    $0x38e38e39,%edx
    1538:	66 89 e8             	mov    %ebp,%eax
    153b:	66 f7 ea             	imul   %edx
    153e:	66 c1 fa 02          	sar    $0x2,%edx
    1542:	66 89 e8             	mov    %ebp,%eax
    1545:	66 c1 f8 1f          	sar    $0x1f,%eax
    1549:	66 29 c2             	sub    %eax,%edx
    154c:	66 89 d1             	mov    %edx,%ecx
    154f:	67 66 8d 14 d2       	lea    (%edx,%edx,8),%edx
    1554:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    1559:	66 89 ea             	mov    %ebp,%edx
    155c:	66 29 c2             	sub    %eax,%edx
    155f:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:325 (discriminator 3)
        int mid = (sector_code+i) / 18;
        int cylinder = mid >> 1;
    1563:	66 89 cd             	mov    %ecx,%ebp
    1566:	66 d1 fd             	sar    %ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:327 (discriminator 3)
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    1569:	66 83 ec 0c          	sub    $0xc,%esp
    156d:	66 89 d8             	mov    %ebx,%eax
    1570:	66 c1 e0 09          	shl    $0x9,%eax
    1574:	67 03 44 24 1a       	add    0x1a(%esp),%ax
    1579:	66 0f b7 c0          	movzwl %ax,%eax
    157d:	66 50                	push   %eax
    157f:	67 66 0f b7 44 24 1c 	movzwl 0x1c(%esp),%eax
    1586:	66 50                	push   %eax
    1588:	66 0f b7 d2          	movzwl %dx,%edx
    158c:	66 52                	push   %edx
    158e:	66 0f b7 ed          	movzwl %bp,%ebp
    1592:	66 55                	push   %ebp
    1594:	66 83 e1 01          	and    $0x1,%ecx
    1598:	66 51                	push   %ecx
    159a:	66 e8 2c 01 00 00    	calll  16cc <read_sector>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 3)
/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    for (int i = 0; i < number; i++){
    15a0:	66 83 c3 01          	add    $0x1,%ebx
    15a4:	66 83 c4 20          	add    $0x20,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 1)
    15a8:	66 0f b7 c6          	movzwl %si,%eax
    15ac:	66 39 c3             	cmp    %eax,%ebx
    15af:	0f 8c 78 ff          	jl     152b <read_n_sector+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:330
        int cylinder = mid >> 1;
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    }
    return ;
}
    15b3:	66 83 c4 1c          	add    $0x1c,%esp
    15b7:	66 5b                	pop    %ebx
    15b9:	66 5e                	pop    %esi
    15bb:	66 5f                	pop    %edi
    15bd:	66 5d                	pop    %ebp
    15bf:	66 c3                	retl   
    15c1:	66 90                	xchg   %eax,%eax
    15c3:	66 90                	xchg   %eax,%eax
    15c5:	66 90                	xchg   %eax,%eax
    15c7:	66 90                	xchg   %eax,%eax
    15c9:	66 90                	xchg   %eax,%eax
    15cb:	66 90                	xchg   %eax,%eax
    15cd:	66 90                	xchg   %eax,%eax
    15cf:	90                   	nop

000015d0 <write_port_byte>:
write_port_byte():
    15d0:	66 55                	push   %ebp
    15d2:	66 89 e5             	mov    %esp,%ebp
    15d5:	53                   	push   %bx
    15d6:	51                   	push   %cx
    15d7:	52                   	push   %dx
    15d8:	56                   	push   %si
    15d9:	57                   	push   %di
    15da:	55                   	push   %bp
    15db:	1e                   	push   %ds
    15dc:	06                   	push   %es
    15dd:	16                   	push   %ss
    15de:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    15e2:	67 8a 45 0c          	mov    0xc(%ebp),%al
    15e6:	cd 34                	int    $0x34
    15e8:	17                   	pop    %ss
    15e9:	07                   	pop    %es
    15ea:	1f                   	pop    %ds
    15eb:	5d                   	pop    %bp
    15ec:	5f                   	pop    %di
    15ed:	5e                   	pop    %si
    15ee:	5a                   	pop    %dx
    15ef:	59                   	pop    %cx
    15f0:	5b                   	pop    %bx
    15f1:	66 89 ec             	mov    %ebp,%esp
    15f4:	66 5d                	pop    %ebp
    15f6:	66 c3                	retl   

000015f8 <read_port_byte>:
read_port_byte():
    15f8:	66 55                	push   %ebp
    15fa:	66 89 e5             	mov    %esp,%ebp
    15fd:	53                   	push   %bx
    15fe:	51                   	push   %cx
    15ff:	52                   	push   %dx
    1600:	56                   	push   %si
    1601:	57                   	push   %di
    1602:	55                   	push   %bp
    1603:	1e                   	push   %ds
    1604:	06                   	push   %es
    1605:	16                   	push   %ss
    1606:	67 8b 45 08          	mov    0x8(%ebp),%ax
    160a:	cd 33                	int    $0x33
    160c:	17                   	pop    %ss
    160d:	07                   	pop    %es
    160e:	1f                   	pop    %ds
    160f:	5d                   	pop    %bp
    1610:	5f                   	pop    %di
    1611:	5e                   	pop    %si
    1612:	5a                   	pop    %dx
    1613:	59                   	pop    %cx
    1614:	5b                   	pop    %bx
    1615:	66 89 ec             	mov    %ebp,%esp
    1618:	66 5d                	pop    %ebp
    161a:	66 c3                	retl   

0000161c <write_memory_byte>:
write_memory_byte():
    161c:	66 55                	push   %ebp
    161e:	66 89 e5             	mov    %esp,%ebp
    1621:	50                   	push   %ax
    1622:	53                   	push   %bx
    1623:	52                   	push   %dx
    1624:	1e                   	push   %ds
    1625:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1629:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    162d:	c1 e0 0c             	shl    $0xc,%ax
    1630:	67 8a 4d 0c          	mov    0xc(%ebp),%cl
    1634:	cd 36                	int    $0x36
    1636:	1f                   	pop    %ds
    1637:	5a                   	pop    %dx
    1638:	5b                   	pop    %bx
    1639:	58                   	pop    %ax
    163a:	66 89 ec             	mov    %ebp,%esp
    163d:	66 5d                	pop    %ebp
    163f:	66 c3                	retl   

00001641 <read_memory_byte>:
read_memory_byte():
    1641:	66 55                	push   %ebp
    1643:	66 89 e5             	mov    %esp,%ebp
    1646:	53                   	push   %bx
    1647:	51                   	push   %cx
    1648:	52                   	push   %dx
    1649:	56                   	push   %si
    164a:	57                   	push   %di
    164b:	55                   	push   %bp
    164c:	1e                   	push   %ds
    164d:	06                   	push   %es
    164e:	16                   	push   %ss
    164f:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1653:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    1657:	c1 e0 0c             	shl    $0xc,%ax
    165a:	cd 35                	int    $0x35
    165c:	17                   	pop    %ss
    165d:	07                   	pop    %es
    165e:	1f                   	pop    %ds
    165f:	5d                   	pop    %bp
    1660:	5f                   	pop    %di
    1661:	5e                   	pop    %si
    1662:	5a                   	pop    %dx
    1663:	59                   	pop    %cx
    1664:	5b                   	pop    %bx
    1665:	66 89 ec             	mov    %ebp,%esp
    1668:	66 5d                	pop    %ebp
    166a:	66 c3                	retl   

0000166c <check_keyboard>:
check_keyboard():
    166c:	b4 01                	mov    $0x1,%ah
    166e:	cd 16                	int    $0x16
    1670:	74 05                	je     1677 <check_keyboard.have_key>
    1672:	b8 00 00             	mov    $0x0,%ax
    1675:	eb 03                	jmp    167a <check_keyboard.check_keyboard_return>

00001677 <check_keyboard.have_key>:
check_keyboard.have_key():
    1677:	b8 01 00             	mov    $0x1,%ax

0000167a <check_keyboard.check_keyboard_return>:
check_keyboard.check_keyboard_return():
    167a:	66 c3                	retl   

0000167c <get_keyboard>:
get_keyboard():
    167c:	b4 00                	mov    $0x0,%ah
    167e:	cd 16                	int    $0x16
    1680:	66 c3                	retl   

00001682 <clean_screen>:
clean_screen():
    1682:	50                   	push   %ax
    1683:	53                   	push   %bx
    1684:	51                   	push   %cx
    1685:	52                   	push   %dx
    1686:	b4 06                	mov    $0x6,%ah
    1688:	b0 00                	mov    $0x0,%al
    168a:	b5 00                	mov    $0x0,%ch
    168c:	b1 00                	mov    $0x0,%cl
    168e:	b6 17                	mov    $0x17,%dh
    1690:	b2 4f                	mov    $0x4f,%dl
    1692:	b7 1f                	mov    $0x1f,%bh
    1694:	cd 10                	int    $0x10
    1696:	5a                   	pop    %dx
    1697:	59                   	pop    %cx
    1698:	5b                   	pop    %bx
    1699:	58                   	pop    %ax
    169a:	66 c3                	retl   

0000169c <scroll_screen>:
scroll_screen():
    169c:	50                   	push   %ax
    169d:	53                   	push   %bx
    169e:	51                   	push   %cx
    169f:	52                   	push   %dx
    16a0:	b4 06                	mov    $0x6,%ah
    16a2:	b0 01                	mov    $0x1,%al
    16a4:	b5 00                	mov    $0x0,%ch
    16a6:	b1 00                	mov    $0x0,%cl
    16a8:	b6 17                	mov    $0x17,%dh
    16aa:	b2 4f                	mov    $0x4f,%dl
    16ac:	b7 10                	mov    $0x10,%bh
    16ae:	cd 10                	int    $0x10
    16b0:	5a                   	pop    %dx
    16b1:	59                   	pop    %cx
    16b2:	5b                   	pop    %bx
    16b3:	58                   	pop    %ax
    16b4:	66 c3                	retl   

000016b6 <get_random>:
get_random():
    16b6:	53                   	push   %bx
    16b7:	b8 00 00             	mov    $0x0,%ax
    16ba:	e6 43                	out    %al,$0x43
    16bc:	e4 40                	in     $0x40,%al
    16be:	b3 08                	mov    $0x8,%bl
    16c0:	f6 f3                	div    %bl
    16c2:	88 e0                	mov    %ah,%al
    16c4:	b4 00                	mov    $0x0,%ah
    16c6:	83 c0 72             	add    $0x72,%ax
    16c9:	5b                   	pop    %bx
    16ca:	66 c3                	retl   

000016cc <read_sector>:
read_sector():
    16cc:	66 55                	push   %ebp
    16ce:	66 89 e5             	mov    %esp,%ebp
    16d1:	50                   	push   %ax
    16d2:	53                   	push   %bx
    16d3:	51                   	push   %cx
    16d4:	52                   	push   %dx
    16d5:	06                   	push   %es
    16d6:	67 8b 45 14          	mov    0x14(%ebp),%ax
    16da:	8e c0                	mov    %ax,%es
    16dc:	67 8b 5d 18          	mov    0x18(%ebp),%bx
    16e0:	b4 02                	mov    $0x2,%ah
    16e2:	b0 01                	mov    $0x1,%al
    16e4:	b2 00                	mov    $0x0,%dl
    16e6:	67 8a 75 08          	mov    0x8(%ebp),%dh
    16ea:	67 8a 6d 0c          	mov    0xc(%ebp),%ch
    16ee:	67 8a 4d 10          	mov    0x10(%ebp),%cl
    16f2:	cd 13                	int    $0x13
    16f4:	07                   	pop    %es
    16f5:	5a                   	pop    %dx
    16f6:	59                   	pop    %cx
    16f7:	5b                   	pop    %bx
    16f8:	58                   	pop    %ax
    16f9:	66 89 ec             	mov    %ebp,%esp
    16fc:	66 5d                	pop    %ebp
    16fe:	66 c3                	retl   

00001700 <print_my_name>:
print_my_name():
    1700:	50                   	push   %ax
    1701:	53                   	push   %bx
    1702:	51                   	push   %cx
    1703:	52                   	push   %dx
    1704:	1e                   	push   %ds
    1705:	06                   	push   %es
    1706:	55                   	push   %bp
    1707:	b8 00 10             	mov    $0x1000,%ax
    170a:	8e c0                	mov    %ax,%es
    170c:	b8 08 40             	mov    $0x4008,%ax
    170f:	89 c5                	mov    %ax,%bp
    1711:	b4 13                	mov    $0x13,%ah
    1713:	b0 00                	mov    $0x0,%al
    1715:	b7 00                	mov    $0x0,%bh
    1717:	b3 0f                	mov    $0xf,%bl
    1719:	b9 19 00             	mov    $0x19,%cx
    171c:	b6 18                	mov    $0x18,%dh
    171e:	b2 01                	mov    $0x1,%dl
    1720:	cd 10                	int    $0x10
    1722:	5d                   	pop    %bp
    1723:	07                   	pop    %es
    1724:	1f                   	pop    %ds
    1725:	5a                   	pop    %dx
    1726:	59                   	pop    %cx
    1727:	5b                   	pop    %bx
    1728:	58                   	pop    %ax
    1729:	c3                   	ret    

0000172a <reboot>:
reboot():
    172a:	b4 06                	mov    $0x6,%ah
    172c:	b0 00                	mov    $0x0,%al
    172e:	b5 00                	mov    $0x0,%ch
    1730:	b1 00                	mov    $0x0,%cl
    1732:	b6 18                	mov    $0x18,%dh
    1734:	b2 4f                	mov    $0x4f,%dl
    1736:	b7 1f                	mov    $0x1f,%bh
    1738:	cd 10                	int    $0x10
    173a:	cd 19                	int    $0x19

0000173c <strlen>:
strlen():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:3
#include "../include/type.h"

size_t strlen(char * str){
    173c:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:4
    u32 len = 0;
    1742:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
    while (str[len] != 0){
    1748:	eb 04                	jmp    174e <strlen+0x12>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:6
        len++;
    174a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
#include "../include/type.h"

size_t strlen(char * str){
    u32 len = 0;
    while (str[len] != 0){
    174e:	67 80 3c 02 00       	cmpb   $0x0,(%edx,%eax,1)
    1753:	75 f5                	jne    174a <strlen+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:9
        len++;
    }
    return len;
}
    1755:	66 f3 c3             	repz retl 

00001758 <strncpy>:
strncpy():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:11

void strncpy(char * dest, char * src, u32 size){
    1758:	66 56                	push   %esi
    175a:	66 53                	push   %ebx
    175c:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    1762:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    1768:	67 66 8b 4c 24 14    	mov    0x14(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12
    for (int i = 0; i < size; i++){
    176e:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1774:	eb 0e                	jmp    1784 <strncpy+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:13 (discriminator 3)
        dest[i] = src[i];
    1776:	67 66 0f b6 14 06    	movzbl (%esi,%eax,1),%edx
    177c:	67 88 14 03          	mov    %dl,(%ebx,%eax,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 3)
    }
    return len;
}

void strncpy(char * dest, char * src, u32 size){
    for (int i = 0; i < size; i++){
    1780:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 1)
    1784:	66 39 c8             	cmp    %ecx,%eax
    1787:	72 ed                	jb     1776 <strncpy+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:15
        dest[i] = src[i];
    }
    dest[size] = '\0';
    1789:	67 c6 04 0b 00       	movb   $0x0,(%ebx,%ecx,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:16
}
    178e:	66 5b                	pop    %ebx
    1790:	66 5e                	pop    %esi
    1792:	66 c3                	retl   

00001794 <strcmp>:
strcmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:18

int strcmp(char * lhs, char * rhs){
    1794:	66 57                	push   %edi
    1796:	66 56                	push   %esi
    1798:	66 53                	push   %ebx
    179a:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    17a0:	67 66 8b 7c 24 14    	mov    0x14(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:19
    int lhs_len = strlen(lhs);
    17a6:	66 56                	push   %esi
    17a8:	66 e8 8e ff ff ff    	calll  173c <strlen>
    17ae:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:20
    int rhs_len = strlen(rhs);
    17b1:	67 66 89 3c 24       	mov    %edi,(%esp)
    17b6:	66 e8 80 ff ff ff    	calll  173c <strlen>
    17bc:	66 83 c4 04          	add    $0x4,%esp
/mnt/e/code/my_operating_system/os/service/../lib/string.c:21
    if (lhs_len != rhs_len){
    17c0:	66 39 c3             	cmp    %eax,%ebx
    17c3:	75 25                	jne    17ea <strcmp+0x56>
    17c5:	66 b8 00 00 00 00    	mov    $0x0,%eax
    17cb:	eb 10                	jmp    17dd <strcmp+0x49>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:25
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
    17cd:	67 66 0f b6 14 07    	movzbl (%edi,%eax,1),%edx
    17d3:	67 38 14 06          	cmp    %dl,(%esi,%eax,1)
    17d7:	75 19                	jne    17f2 <strcmp+0x5e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 2)
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
    17d9:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 1)
    17dd:	66 39 d8             	cmp    %ebx,%eax
    17e0:	7c eb                	jl     17cd <strcmp+0x39>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:28
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    17e2:	66 b8 00 00 00 00    	mov    $0x0,%eax
    17e8:	eb 0e                	jmp    17f8 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:22

int strcmp(char * lhs, char * rhs){
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    17ea:	66 b8 01 00 00 00    	mov    $0x1,%eax
    17f0:	eb 06                	jmp    17f8 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:26
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
            return 1;
    17f2:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:29
    }
    return 0;
}
    17f8:	66 5b                	pop    %ebx
    17fa:	66 5e                	pop    %esi
    17fc:	66 5f                	pop    %edi
    17fe:	66 c3                	retl   

00001800 <strncmp>:
strncmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:31

int strncmp(char * lhs, char * rhs, int size){
    1800:	66 56                	push   %esi
    1802:	66 53                	push   %ebx
    1804:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    180a:	67 66 8b 4c 24 10    	mov    0x10(%esp),%ecx
    1810:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32
    for (int i = 0; i < size; i++){
    1816:	66 b8 00 00 00 00    	mov    $0x0,%eax
    181c:	eb 10                	jmp    182e <strncmp+0x2e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:33
        if (lhs[i] != rhs[i])
    181e:	67 66 0f b6 14 01    	movzbl (%ecx,%eax,1),%edx
    1824:	67 38 14 03          	cmp    %dl,(%ebx,%eax,1)
    1828:	75 11                	jne    183b <strncmp+0x3b>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 2)
    }
    return 0;
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
    182a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 1)
    182e:	66 39 f0             	cmp    %esi,%eax
    1831:	7c eb                	jl     181e <strncmp+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:36
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    1833:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1839:	eb 06                	jmp    1841 <strncmp+0x41>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:34
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
        if (lhs[i] != rhs[i])
            return 1;
    183b:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:37
    }
    return 0;
    1841:	66 5b                	pop    %ebx
    1843:	66 5e                	pop    %esi
    1845:	66 c3                	retl   

00001847 <move_name>:
move_name():
/mnt/e/code/my_operating_system/os/service/../lib/style.c:9

void move_name(){
    u16 *text_line = (u16*)(1920*2);
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    1847:	66 0f b7 0e 9e 0f    	movzwl 0xf9e,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10
    for (int i =78; i >= 0; i--){
    184d:	66 b8 4e 00 00 00    	mov    $0x4e,%eax
    1853:	eb 16                	jmp    186b <move_name+0x24>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:11 (discriminator 3)
        text_line[i+1] = text_line[i];
    1855:	67 66 0f b7 94 00 00 	movzwl 0xf00(%eax,%eax,1),%edx
    185c:	0f 00 00 
    185f:	67 89 94 00 02 0f 00 	mov    %dx,0xf02(%eax,%eax,1)
    1866:	00 
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 3)
void move_name(){
    u16 *text_line = (u16*)(1920*2);
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    for (int i =78; i >= 0; i--){
    1867:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 1)
    186b:	66 85 c0             	test   %eax,%eax
    186e:	79 e5                	jns    1855 <move_name+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:13
        text_line[i+1] = text_line[i];
    }
    text_line[0] = last_char;
    1870:	89 0e 00 0f          	mov    %cx,0xf00
    1874:	66 c3                	retl   
