
kernel.debug:     file format elf32-i386


Disassembly of section .text:

00000000 <_start>:
_start():
       0:	e8 9c 00             	call   9f <install_int8>
       3:	e8 ef 00             	call   f5 <install_int33>
       6:	e8 25 01             	call   12e <install_int34>
       9:	e8 5f 01             	call   16b <install_int35>
       c:	e8 97 01             	call   1a6 <install_int36>
       f:	e8 3c 00             	call   4e <install_int40>
      12:	66 e8 86 02 00 00    	calll  29e <cstart>

00000018 <start_tty>:
start_tty():
      18:	e8 11 00             	call   2c <restart>
      1b:	ea 00 00 00 15       	ljmp   $0x1500,$0x0
      20:	66 e8 fb 05 00 00    	calll  621 <tty>
      26:	b4 02                	mov    $0x2,%ah
      28:	cd 40                	int    $0x40
      2a:	eb fe                	jmp    2a <core_code_entry_header_offset>

0000002c <restart>:
restart():
      2c:	be c4 2c             	mov    $0x2cc4,%si
      2f:	8e 06 c0 2c          	mov    0x2cc0,%es
      33:	8b 3e c2 2c          	mov    0x2cc2,%di
      37:	b9 2a 00             	mov    $0x2a,%cx
      3a:	83 ef 2a             	sub    $0x2a,%di
      3d:	fc                   	cld    
      3e:	f3 a4                	rep movsb %ds:(%si),%es:(%di)
      40:	8c c0                	mov    %es,%ax
      42:	83 ef 2a             	sub    $0x2a,%di
      45:	8e d0                	mov    %ax,%ss
      47:	89 fc                	mov    %di,%sp
      49:	1f                   	pop    %ds
      4a:	07                   	pop    %es
      4b:	66 61                	popal  
      4d:	cf                   	iret   

0000004e <install_int40>:
install_int40():
      4e:	53                   	push   %bx
      4f:	51                   	push   %cx
      50:	52                   	push   %dx
      51:	56                   	push   %si
      52:	57                   	push   %di
      53:	55                   	push   %bp
      54:	1e                   	push   %ds
      55:	06                   	push   %es
      56:	16                   	push   %ss
      57:	b8 00 00             	mov    $0x0,%ax
      5a:	8e d8                	mov    %ax,%ds
      5c:	8c c8                	mov    %cs,%ax
      5e:	c7 06 00 01 71 00    	movw   $0x71,0x100
      64:	a3 02 01             	mov    %ax,0x102
      67:	17                   	pop    %ss
      68:	07                   	pop    %es
      69:	1f                   	pop    %ds
      6a:	5d                   	pop    %bp
      6b:	5f                   	pop    %di
      6c:	5e                   	pop    %si
      6d:	5a                   	pop    %dx
      6e:	59                   	pop    %cx
      6f:	5b                   	pop    %bx
      70:	c3                   	ret    

00000071 <new_int40>:
new_int40():
      71:	80 fc 4c             	cmp    $0x4c,%ah
      74:	74 11                	je     87 <new_int40.return_kernel>
      76:	88 e3                	mov    %ah,%bl
      78:	31 c0                	xor    %ax,%ax
      7a:	b0 02                	mov    $0x2,%al
      7c:	f6 e3                	mul    %bl
      7e:	89 c6                	mov    %ax,%si
      80:	bb e0 70             	mov    $0x70e0,%bx
      83:	66 ff 10             	calll  *(%bx,%si)
      86:	cf                   	iret   

00000087 <new_int40.return_kernel>:
new_int40.return_kernel():
      87:	59                   	pop    %cx
      88:	59                   	pop    %cx
      89:	59                   	pop    %cx
      8a:	b8 00 10             	mov    $0x1000,%ax
      8d:	8e d8                	mov    %ax,%ds
      8f:	8e c0                	mov    %ax,%es
      91:	8e d0                	mov    %ax,%ss
      93:	bc 00 50             	mov    $0x5000,%sp
      96:	51                   	push   %cx
      97:	68 00 10             	push   $0x1000
      9a:	68 18 00             	push   $0x18
      9d:	fb                   	sti    
      9e:	cf                   	iret   

0000009f <install_int8>:
install_int8():
      9f:	53                   	push   %bx
      a0:	51                   	push   %cx
      a1:	52                   	push   %dx
      a2:	56                   	push   %si
      a3:	57                   	push   %di
      a4:	55                   	push   %bp
      a5:	1e                   	push   %ds
      a6:	06                   	push   %es
      a7:	16                   	push   %ss
      a8:	b0 34                	mov    $0x34,%al
      aa:	e6 43                	out    %al,$0x43
      ac:	b8 ff ff             	mov    $0xffff,%ax
      af:	e6 40                	out    %al,$0x40
      b1:	88 e0                	mov    %ah,%al
      b3:	e6 40                	out    %al,$0x40
      b5:	b8 00 00             	mov    $0x0,%ax
      b8:	8e d8                	mov    %ax,%ds
      ba:	8c c8                	mov    %cs,%ax
      bc:	a3 22 00             	mov    %ax,0x22
      bf:	c7 06 20 00 cf 00    	movw   $0xcf,0x20
      c5:	17                   	pop    %ss
      c6:	07                   	pop    %es
      c7:	1f                   	pop    %ds
      c8:	5d                   	pop    %bp
      c9:	5f                   	pop    %di
      ca:	5e                   	pop    %si
      cb:	5a                   	pop    %dx
      cc:	59                   	pop    %cx
      cd:	5b                   	pop    %bx
      ce:	c3                   	ret    

000000cf <new_int8>:
new_int8():
      cf:	50                   	push   %ax
      d0:	53                   	push   %bx
      d1:	51                   	push   %cx
      d2:	52                   	push   %dx
      d3:	56                   	push   %si
      d4:	57                   	push   %di
      d5:	55                   	push   %bp
      d6:	1e                   	push   %ds
      d7:	06                   	push   %es
      d8:	16                   	push   %ss
      d9:	b8 00 b8             	mov    $0xb800,%ax
      dc:	8e d8                	mov    %ax,%ds
      de:	66 e8 43 16 00 00    	calll  1727 <move_name>
      e4:	b0 20                	mov    $0x20,%al
      e6:	e6 20                	out    %al,$0x20
      e8:	e6 a0                	out    %al,$0xa0
      ea:	17                   	pop    %ss
      eb:	07                   	pop    %es
      ec:	1f                   	pop    %ds
      ed:	5d                   	pop    %bp
      ee:	5f                   	pop    %di
      ef:	5e                   	pop    %si
      f0:	5a                   	pop    %dx
      f1:	59                   	pop    %cx
      f2:	5b                   	pop    %bx
      f3:	58                   	pop    %ax
      f4:	cf                   	iret   

000000f5 <install_int33>:
install_int33():
      f5:	53                   	push   %bx
      f6:	51                   	push   %cx
      f7:	52                   	push   %dx
      f8:	56                   	push   %si
      f9:	57                   	push   %di
      fa:	55                   	push   %bp
      fb:	1e                   	push   %ds
      fc:	06                   	push   %es
      fd:	16                   	push   %ss
      fe:	b8 00 00             	mov    $0x0,%ax
     101:	8e d8                	mov    %ax,%ds
     103:	8c c8                	mov    %cs,%ax
     105:	c7 06 cc 00 18 01    	movw   $0x118,0xcc
     10b:	a3 ce 00             	mov    %ax,0xce
     10e:	17                   	pop    %ss
     10f:	07                   	pop    %es
     110:	1f                   	pop    %ds
     111:	5d                   	pop    %bp
     112:	5f                   	pop    %di
     113:	5e                   	pop    %si
     114:	5a                   	pop    %dx
     115:	59                   	pop    %cx
     116:	5b                   	pop    %bx
     117:	c3                   	ret    

00000118 <new_int33>:
new_int33():
     118:	53                   	push   %bx
     119:	51                   	push   %cx
     11a:	52                   	push   %dx
     11b:	56                   	push   %si
     11c:	57                   	push   %di
     11d:	55                   	push   %bp
     11e:	1e                   	push   %ds
     11f:	06                   	push   %es
     120:	16                   	push   %ss
     121:	89 c2                	mov    %ax,%dx
     123:	ec                   	in     (%dx),%al
     124:	17                   	pop    %ss
     125:	07                   	pop    %es
     126:	1f                   	pop    %ds
     127:	5d                   	pop    %bp
     128:	5f                   	pop    %di
     129:	5e                   	pop    %si
     12a:	5a                   	pop    %dx
     12b:	59                   	pop    %cx
     12c:	5b                   	pop    %bx
     12d:	cf                   	iret   

0000012e <install_int34>:
install_int34():
     12e:	53                   	push   %bx
     12f:	51                   	push   %cx
     130:	52                   	push   %dx
     131:	56                   	push   %si
     132:	57                   	push   %di
     133:	55                   	push   %bp
     134:	1e                   	push   %ds
     135:	06                   	push   %es
     136:	16                   	push   %ss
     137:	b8 00 00             	mov    $0x0,%ax
     13a:	8e d8                	mov    %ax,%ds
     13c:	8c c8                	mov    %cs,%ax
     13e:	c7 06 d0 00 51 01    	movw   $0x151,0xd0
     144:	a3 d2 00             	mov    %ax,0xd2
     147:	17                   	pop    %ss
     148:	07                   	pop    %es
     149:	1f                   	pop    %ds
     14a:	5d                   	pop    %bp
     14b:	5f                   	pop    %di
     14c:	5e                   	pop    %si
     14d:	5a                   	pop    %dx
     14e:	59                   	pop    %cx
     14f:	5b                   	pop    %bx
     150:	c3                   	ret    

00000151 <new_int34>:
new_int34():
     151:	50                   	push   %ax
     152:	53                   	push   %bx
     153:	51                   	push   %cx
     154:	52                   	push   %dx
     155:	56                   	push   %si
     156:	57                   	push   %di
     157:	55                   	push   %bp
     158:	1e                   	push   %ds
     159:	06                   	push   %es
     15a:	16                   	push   %ss
     15b:	89 da                	mov    %bx,%dx
     15d:	88 c0                	mov    %al,%al
     15f:	ee                   	out    %al,(%dx)
     160:	17                   	pop    %ss
     161:	07                   	pop    %es
     162:	1f                   	pop    %ds
     163:	5d                   	pop    %bp
     164:	5f                   	pop    %di
     165:	5e                   	pop    %si
     166:	5a                   	pop    %dx
     167:	59                   	pop    %cx
     168:	5b                   	pop    %bx
     169:	58                   	pop    %ax
     16a:	cf                   	iret   

0000016b <install_int35>:
install_int35():
     16b:	53                   	push   %bx
     16c:	51                   	push   %cx
     16d:	52                   	push   %dx
     16e:	56                   	push   %si
     16f:	57                   	push   %di
     170:	55                   	push   %bp
     171:	1e                   	push   %ds
     172:	06                   	push   %es
     173:	16                   	push   %ss
     174:	b8 00 00             	mov    $0x0,%ax
     177:	8e d8                	mov    %ax,%ds
     179:	8c c8                	mov    %cs,%ax
     17b:	c7 06 d4 00 8e 01    	movw   $0x18e,0xd4
     181:	a3 d6 00             	mov    %ax,0xd6
     184:	17                   	pop    %ss
     185:	07                   	pop    %es
     186:	1f                   	pop    %ds
     187:	5d                   	pop    %bp
     188:	5f                   	pop    %di
     189:	5e                   	pop    %si
     18a:	5a                   	pop    %dx
     18b:	59                   	pop    %cx
     18c:	5b                   	pop    %bx
     18d:	c3                   	ret    

0000018e <new_int35>:
new_int35():
     18e:	53                   	push   %bx
     18f:	51                   	push   %cx
     190:	52                   	push   %dx
     191:	56                   	push   %si
     192:	57                   	push   %di
     193:	55                   	push   %bp
     194:	1e                   	push   %ds
     195:	06                   	push   %es
     196:	16                   	push   %ss
     197:	8e c0                	mov    %ax,%es
     199:	26 8a 07             	mov    %es:(%bx),%al
     19c:	17                   	pop    %ss
     19d:	07                   	pop    %es
     19e:	1f                   	pop    %ds
     19f:	5d                   	pop    %bp
     1a0:	5f                   	pop    %di
     1a1:	5e                   	pop    %si
     1a2:	5a                   	pop    %dx
     1a3:	59                   	pop    %cx
     1a4:	5b                   	pop    %bx
     1a5:	cf                   	iret   

000001a6 <install_int36>:
install_int36():
     1a6:	53                   	push   %bx
     1a7:	51                   	push   %cx
     1a8:	52                   	push   %dx
     1a9:	56                   	push   %si
     1aa:	57                   	push   %di
     1ab:	55                   	push   %bp
     1ac:	1e                   	push   %ds
     1ad:	06                   	push   %es
     1ae:	16                   	push   %ss
     1af:	b8 00 00             	mov    $0x0,%ax
     1b2:	8e d8                	mov    %ax,%ds
     1b4:	8c c8                	mov    %cs,%ax
     1b6:	c7 06 d8 00 c9 01    	movw   $0x1c9,0xd8
     1bc:	a3 da 00             	mov    %ax,0xda
     1bf:	17                   	pop    %ss
     1c0:	07                   	pop    %es
     1c1:	1f                   	pop    %ds
     1c2:	5d                   	pop    %bp
     1c3:	5f                   	pop    %di
     1c4:	5e                   	pop    %si
     1c5:	5a                   	pop    %dx
     1c6:	59                   	pop    %cx
     1c7:	5b                   	pop    %bx
     1c8:	c3                   	ret    

000001c9 <new_int36>:
new_int36():
     1c9:	50                   	push   %ax
     1ca:	53                   	push   %bx
     1cb:	51                   	push   %cx
     1cc:	52                   	push   %dx
     1cd:	56                   	push   %si
     1ce:	57                   	push   %di
     1cf:	55                   	push   %bp
     1d0:	1e                   	push   %ds
     1d1:	06                   	push   %es
     1d2:	16                   	push   %ss
     1d3:	8e c0                	mov    %ax,%es
     1d5:	26 88 0f             	mov    %cl,%es:(%bx)
     1d8:	17                   	pop    %ss
     1d9:	07                   	pop    %es
     1da:	1f                   	pop    %ds
     1db:	5d                   	pop    %bp
     1dc:	5f                   	pop    %di
     1dd:	5e                   	pop    %si
     1de:	5a                   	pop    %dx
     1df:	59                   	pop    %cx
     1e0:	5b                   	pop    %bx
     1e1:	58                   	pop    %ax
     1e2:	cf                   	iret   

000001e3 <init_process>:
init_process():
/mnt/e/code/my_operating_system/os/kernel/start.c:27


    return 0;
}

void init_process(int process_index){
     1e3:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/start.c:30
    PCB_t* this_process = &process_block[process_index];
    u16 segment = 0x1500;
    this_process->regs.ss = segment;
     1e9:	66 89 d0             	mov    %edx,%eax
     1ec:	66 c1 e0 06          	shl    $0x6,%eax
     1f0:	67 66 8d 0c 90       	lea    (%eax,%edx,4),%ecx
     1f5:	67 c7 81 c0 2c 00 00 	movw   $0x1500,0x2cc0(%ecx)
     1fc:	00 15 
/mnt/e/code/my_operating_system/os/kernel/start.c:31
    this_process->regs.sp = 0x5000;
     1fe:	67 c7 81 c2 2c 00 00 	movw   $0x5000,0x2cc2(%ecx)
     205:	00 50 
/mnt/e/code/my_operating_system/os/kernel/start.c:32
    this_process->regs.ds = segment;
     207:	67 c7 81 c4 2c 00 00 	movw   $0x1500,0x2cc4(%ecx)
     20e:	00 15 
/mnt/e/code/my_operating_system/os/kernel/start.c:33
    this_process->regs.es = segment;
     210:	67 c7 81 c6 2c 00 00 	movw   $0x1500,0x2cc6(%ecx)
     217:	00 15 
/mnt/e/code/my_operating_system/os/kernel/start.c:34
    this_process->regs.edi = 0;
     219:	67 66 c7 81 c8 2c 00 	movl   $0x0,0x2cc8(%ecx)
     220:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:35
    this_process->regs.esi = 0;
     225:	67 66 c7 81 cc 2c 00 	movl   $0x0,0x2ccc(%ecx)
     22c:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:36
    this_process->regs.ebp = 0x5000;
     231:	67 66 c7 81 d0 2c 00 	movl   $0x5000,0x2cd0(%ecx)
     238:	00 00 50 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:37
    this_process->regs.kernel_esp = 0;
     23d:	67 66 c7 81 d4 2c 00 	movl   $0x0,0x2cd4(%ecx)
     244:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:38
    this_process->regs.ebx = 0;
     249:	67 66 c7 81 d8 2c 00 	movl   $0x0,0x2cd8(%ecx)
     250:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:39
    this_process->regs.edx = 0;
     255:	67 66 c7 81 dc 2c 00 	movl   $0x0,0x2cdc(%ecx)
     25c:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:40
    this_process->regs.ecx = 0;
     261:	67 66 c7 81 e0 2c 00 	movl   $0x0,0x2ce0(%ecx)
     268:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:41
    this_process->regs.eax = 0;
     26d:	67 66 c7 81 e4 2c 00 	movl   $0x0,0x2ce4(%ecx)
     274:	00 00 00 00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:42
    this_process->regs.ip = 0x0000;
     279:	67 c7 81 e8 2c 00 00 	movw   $0x0,0x2ce8(%ecx)
     280:	00 00 
/mnt/e/code/my_operating_system/os/kernel/start.c:43
    this_process->regs.cs = segment;
     282:	67 c7 81 ea 2c 00 00 	movw   $0x1500,0x2cea(%ecx)
     289:	00 15 
/mnt/e/code/my_operating_system/os/kernel/start.c:44
    this_process->regs.flags = 0x1202;
     28b:	67 c7 81 ec 2c 00 00 	movw   $0x1202,0x2cec(%ecx)
     292:	02 12 
/mnt/e/code/my_operating_system/os/kernel/start.c:45
    this_process->pid = process_index;
     294:	67 66 89 91 f0 2c 00 	mov    %edx,0x2cf0(%ecx)
     29b:	00 
     29c:	66 c3                	retl   

0000029e <cstart>:
cstart():
/mnt/e/code/my_operating_system/os/kernel/start.c:11
#include "../include/system_call.h"
#include "../include/fsystem.h"
#include "../include/proc.h"

void test_system_call();
int cstart(){
     29e:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:13
    // 初始化文件系统
    init_fsystem();
     2a2:	66 e8 3e 05 00 00    	calll  7e6 <init_fsystem>
/mnt/e/code/my_operating_system/os/kernel/start.c:15
    // 清屏
    clean_screen();
     2a8:	66 e8 b4 12 00 00    	calll  1562 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/start.c:17
    // 将光标设置为0 TODO:
    set_cursor(0);
     2ae:	66 83 ec 0c          	sub    $0xc,%esp
     2b2:	66 6a 00             	pushl  $0x0
     2b5:	66 e8 c2 08 00 00    	calll  b7d <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:19
    // install_system_call(2, test_system_call);
    fs_load_by_name("test_b.bin", 0x5000);
     2bb:	66 83 c4 08          	add    $0x8,%esp
     2bf:	66 68 00 50 00 00    	pushl  $0x5000
     2c5:	66 68 56 17 00 00    	pushl  $0x1756
     2cb:	66 e8 72 07 00 00    	calll  a43 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/start.c:21
    // while (1){}
    init_process(0);
     2d1:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
     2d8:	00 00 
     2da:	66 e8 03 ff ff ff    	calll  1e3 <init_process>
/mnt/e/code/my_operating_system/os/kernel/start.c:25


    return 0;
}
     2e0:	66 b8 00 00 00 00    	mov    $0x0,%eax
     2e6:	66 83 c4 1c          	add    $0x1c,%esp
     2ea:	66 c3                	retl   

000002ec <parser>:
parser():
/mnt/e/code/my_operating_system/os/kernel/tty.c:89
    }
    return ;
}


void parser(){
     2ec:	66 56                	push   %esi
     2ee:	66 53                	push   %ebx
     2f0:	66 83 ec 74          	sub    $0x74,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:93
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
     2f4:	66 be 00 00 00 00    	mov    $0x0,%esi
/mnt/e/code/my_operating_system/os/kernel/tty.c:92


void parser(){
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
     2fa:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:91
}


void parser(){
    char arguments[10][10];
    int input_start = 0;
     300:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     306:	eb 64                	jmp    36c <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:96
        if(input_buf[input_end] == ' ' || input_buf[input_end] == '\0'){
     308:	67 66 0f b6 83 00 21 	movzbl 0x2100(%ebx),%eax
     30f:	00 00 
     311:	3c 20                	cmp    $0x20,%al
     313:	0f 94 c1             	sete   %cl
     316:	84 c0                	test   %al,%al
     318:	0f 94 c0             	sete   %al
     31b:	08 c1                	or     %al,%cl
     31d:	74 49                	je     368 <parser+0x7c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:97
            if (input_start == input_end){ // 如果并没有参数，那么继续
     31f:	66 39 da             	cmp    %ebx,%edx
     322:	75 0a                	jne    32e <parser+0x42>
/mnt/e/code/my_operating_system/os/kernel/tty.c:98
                input_start++;
     324:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:99
                input_end++;
     328:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:100
                continue;
     32c:	eb 3e                	jmp    36c <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:103
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
     32e:	66 89 d9             	mov    %ebx,%ecx
     331:	66 29 d1             	sub    %edx,%ecx
     334:	67 66 8d 04 b6       	lea    (%esi,%esi,4),%eax
     339:	67 66 8d 44 44 0c    	lea    0xc(%esp,%eax,2),%eax
     33f:	66 83 ec 04          	sub    $0x4,%esp
     343:	66 51                	push   %ecx
     345:	66 81 c2 00 21 00 00 	add    $0x2100,%edx
     34c:	66 52                	push   %edx
     34e:	66 50                	push   %eax
     350:	66 e8 e2 12 00 00    	calll  1638 <strncpy>
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
     356:	67 66 8d 53 01       	lea    0x1(%ebx),%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:106
                input_start = input_end;
                arguments_num++;
     35b:	66 83 c6 01          	add    $0x1,%esi
     35f:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
                continue;
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
                input_end++;
     363:	66 89 d3             	mov    %edx,%ebx
     366:	eb 04                	jmp    36c <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:110
                input_start = input_end;
                arguments_num++;
            }
        }
        else {// 有参数，还没有读到末尾
            input_end++;
     368:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     36c:	66 3b 1e e0 20       	cmp    0x20e0,%ebx
     371:	7e 95                	jle    308 <parser+0x1c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:117
        }
    }

    // 完成分词，开始进行解析。

    if(!strcmp(arguments[0],"run")){// 如果返回0，就是相等了
     373:	66 83 ec 08          	sub    $0x8,%esp
     377:	66 68 61 17 00 00    	pushl  $0x1761
     37d:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     383:	66 50                	push   %eax
     385:	66 e8 e9 12 00 00    	calll  1674 <strcmp>
     38b:	66 83 c4 10          	add    $0x10,%esp
     38f:	66 85 c0             	test   %eax,%eax
     392:	75 31                	jne    3c5 <parser+0xd9>
/mnt/e/code/my_operating_system/os/kernel/tty.c:122
        // 运行一个用户程序。
        // 先从软盘中加载一个指定程序到内存处，然后开始执行。
        // 考虑维护一个空闲空间的指针，然后每加载一个程序，如果可行的话。
        void (**my_program)();
        *my_program = 0x4000;
     394:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     39a:	67 66 c7 03 00 40 00 	movl   $0x4000,(%ebx)
     3a1:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:123
        fs_load_by_name(arguments[1],*my_program);
     3a2:	66 83 ec 08          	sub    $0x8,%esp
     3a6:	66 68 00 40 00 00    	pushl  $0x4000
     3ac:	67 66 8d 44 24 22    	lea    0x22(%esp),%eax
     3b2:	66 50                	push   %eax
     3b4:	66 e8 89 06 00 00    	calll  a43 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/tty.c:124
        (*my_program)();
     3ba:	67 66 ff 13          	calll  *(%ebx)
     3be:	66 83 c4 10          	add    $0x10,%esp
     3c2:	e9 1b 01             	jmp    4e0 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     3c5:	66 83 ec 08          	sub    $0x8,%esp
     3c9:	66 68 65 17 00 00    	pushl  $0x1765
     3cf:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     3d5:	66 50                	push   %eax
     3d7:	66 e8 97 12 00 00    	calll  1674 <strcmp>
     3dd:	66 83 c4 10          	add    $0x10,%esp
     3e1:	66 85 c0             	test   %eax,%eax
     3e4:	75 23                	jne    409 <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126 (discriminator 1)
     3e6:	66 83 fe 01          	cmp    $0x1,%esi
     3ea:	75 1d                	jne    409 <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:127
        printf("\n\n");
     3ec:	66 83 ec 0c          	sub    $0xc,%esp
     3f0:	66 68 68 17 00 00    	pushl  $0x1768
     3f6:	66 e8 ca 0d 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:128
        fs_show_root_file_table();
     3fc:	66 e8 a7 06 00 00    	calll  aa9 <fs_show_root_file_table>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
        void (**my_program)();
        *my_program = 0x4000;
        fs_load_by_name(arguments[1],*my_program);
        (*my_program)();
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     402:	66 83 c4 10          	add    $0x10,%esp
     406:	e9 d7 00             	jmp    4e0 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     409:	66 83 ec 08          	sub    $0x8,%esp
     40d:	66 68 6b 17 00 00    	pushl  $0x176b
     413:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     419:	66 50                	push   %eax
     41b:	66 e8 53 12 00 00    	calll  1674 <strcmp>
     421:	66 83 c4 10          	add    $0x10,%esp
     425:	66 85 c0             	test   %eax,%eax
     428:	75 23                	jne    44d <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130 (discriminator 1)
     42a:	66 83 fe 01          	cmp    $0x1,%esi
     42e:	75 1d                	jne    44d <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:131
        printf("\n\n");
     430:	66 83 ec 0c          	sub    $0xc,%esp
     434:	66 68 68 17 00 00    	pushl  $0x1768
     43a:	66 e8 86 0d 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:132
        reboot();
     440:	66 e8 c4 11 00 00    	calll  160a <reboot>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     446:	66 83 c4 10          	add    $0x10,%esp
     44a:	e9 93 00             	jmp    4e0 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134
        printf("\n\n");
        reboot();
    }
    else if(!strcmp(arguments[0],"help") && arguments_num == 1){
     44d:	66 83 ec 08          	sub    $0x8,%esp
     451:	66 68 72 17 00 00    	pushl  $0x1772
     457:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     45d:	66 50                	push   %eax
     45f:	66 e8 0f 12 00 00    	calll  1674 <strcmp>
     465:	66 83 c4 10          	add    $0x10,%esp
     469:	66 85 c0             	test   %eax,%eax
     46c:	75 58                	jne    4c6 <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134 (discriminator 1)
     46e:	66 83 fe 01          	cmp    $0x1,%esi
     472:	75 52                	jne    4c6 <parser+0x1da>
/mnt/e/code/my_operating_system/os/kernel/tty.c:135
        printf("\n\n");
     474:	66 83 ec 0c          	sub    $0xc,%esp
     478:	66 68 68 17 00 00    	pushl  $0x1768
     47e:	66 e8 42 0d 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:136
        printf("ls        : show the file in the root folder.\n");
     484:	67 66 c7 04 24 ac 1f 	movl   $0x1fac,(%esp)
     48b:	00 00 
     48d:	66 e8 33 0d 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:137
        printf("run [name]: run the file in the root folder.\n");
     493:	67 66 c7 04 24 dc 1f 	movl   $0x1fdc,(%esp)
     49a:	00 00 
     49c:	66 e8 24 0d 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:138
        printf("help      : show the help message.\n");
     4a2:	67 66 c7 04 24 0c 20 	movl   $0x200c,(%esp)
     4a9:	00 00 
     4ab:	66 e8 15 0d 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:139
        printf("reboot    : reboot the machine.\n");
     4b1:	67 66 c7 04 24 30 20 	movl   $0x2030,(%esp)
     4b8:	00 00 
     4ba:	66 e8 06 0d 00 00    	calll  11c6 <printf>
     4c0:	66 83 c4 10          	add    $0x10,%esp
     4c4:	eb 1a                	jmp    4e0 <parser+0x1f4>
/mnt/e/code/my_operating_system/os/kernel/tty.c:142
    }
    else {
        printf("\n%s : command not found! \n", input_buf);
     4c6:	66 83 ec 08          	sub    $0x8,%esp
     4ca:	66 68 00 21 00 00    	pushl  $0x2100
     4d0:	66 68 77 17 00 00    	pushl  $0x1777
     4d6:	66 e8 ea 0c 00 00    	calll  11c6 <printf>
     4dc:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:144
    }
    int current_cursor = get_cursor();
     4e0:	66 e8 09 07 00 00    	calll  bef <get_cursor>
     4e6:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:145
    command_line_row = (current_cursor / 80);
     4ea:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     4f0:	66 f7 ea             	imul   %edx
     4f3:	66 c1 fa 05          	sar    $0x5,%edx
     4f7:	66 89 16 a0 20       	mov    %edx,0x20a0
/mnt/e/code/my_operating_system/os/kernel/tty.c:148
    // printf("arguments: %d|%s|%s|",arguments_num, arguments[0],arguments[1]);
    return ;
}
     4fc:	66 83 c4 74          	add    $0x74,%esp
     500:	66 5b                	pop    %ebx
     502:	66 5e                	pop    %esi
     504:	66 c3                	retl   

00000506 <create_a_line>:
create_a_line():
/mnt/e/code/my_operating_system/os/kernel/tty.c:151

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
     506:	66 83 ec 2c          	sub    $0x2c,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:152
    char message[30] = "walker@walker-pc ~ $ \0";
     50a:	66 a1 7c 20          	mov    0x207c,%eax
     50e:	67 66 89 44 24 02    	mov    %eax,0x2(%esp)
     514:	66 a1 80 20          	mov    0x2080,%eax
     518:	67 66 89 44 24 06    	mov    %eax,0x6(%esp)
     51e:	66 a1 84 20          	mov    0x2084,%eax
     522:	67 66 89 44 24 0a    	mov    %eax,0xa(%esp)
     528:	66 a1 88 20          	mov    0x2088,%eax
     52c:	67 66 89 44 24 0e    	mov    %eax,0xe(%esp)
     532:	66 a1 8c 20          	mov    0x208c,%eax
     536:	67 66 89 44 24 12    	mov    %eax,0x12(%esp)
     53c:	66 0f b7 06 90 20    	movzwl 0x2090,%eax
     542:	67 89 44 24 16       	mov    %ax,0x16(%esp)
     547:	66 0f b6 06 92 20    	movzbl 0x2092,%eax
     54d:	67 88 44 24 18       	mov    %al,0x18(%esp)
     552:	67 66 c7 44 24 19 00 	movl   $0x0,0x19(%esp)
     559:	00 00 00 
     55c:	67 c7 44 24 1d 00 00 	movw   $0x0,0x1d(%esp)
     563:	67 c6 44 24 1f 00    	movb   $0x0,0x1f(%esp)
/mnt/e/code/my_operating_system/os/kernel/tty.c:153
    for (int i = 0; i < MAX_BUF; i++){
     569:	66 b8 00 00 00 00    	mov    $0x0,%eax
     56f:	eb 0c                	jmp    57d <create_a_line+0x77>
/mnt/e/code/my_operating_system/os/kernel/tty.c:154 (discriminator 3)
        input_buf[i] = 0;
     571:	67 c6 80 00 21 00 00 	movb   $0x0,0x2100(%eax)
     578:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 3)
}

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    char message[30] = "walker@walker-pc ~ $ \0";
    for (int i = 0; i < MAX_BUF; i++){
     579:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 1)
     57d:	66 83 f8 63          	cmp    $0x63,%eax
     581:	7e ee                	jle    571 <create_a_line+0x6b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:156
        input_buf[i] = 0;
    }
    message_length = strlen(message);
     583:	66 83 ec 0c          	sub    $0xc,%esp
     587:	67 66 8d 44 24 0e    	lea    0xe(%esp),%eax
     58d:	66 50                	push   %eax
     58f:	66 e8 87 10 00 00    	calll  161c <strlen>
     595:	66 a3 e4 20          	mov    %eax,0x20e4
/mnt/e/code/my_operating_system/os/kernel/tty.c:157
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
     599:	66 03 06 e0 20       	add    0x20e0,%eax
     59e:	66 89 c1             	mov    %eax,%ecx
     5a1:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     5a7:	66 f7 ea             	imul   %edx
     5aa:	66 c1 fa 05          	sar    $0x5,%edx
     5ae:	66 c1 f9 1f          	sar    $0x1f,%ecx
     5b2:	66 29 ca             	sub    %ecx,%edx
     5b5:	66 89 d0             	mov    %edx,%eax
     5b8:	66 03 06 a0 20       	add    0x20a0,%eax
     5bd:	66 83 c0 01          	add    $0x1,%eax
     5c1:	66 a3 a0 20          	mov    %eax,0x20a0
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    while(command_line_row > 23){
     5c5:	66 83 c4 10          	add    $0x10,%esp
     5c9:	eb 0c                	jmp    5d7 <create_a_line+0xd1>
/mnt/e/code/my_operating_system/os/kernel/tty.c:159
        scroll_screen();
     5cb:	66 e8 ab 0f 00 00    	calll  157c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:160
        command_line_row--;
     5d1:	66 83 2e a0 20 01    	subl   $0x1,0x20a0
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    for (int i = 0; i < MAX_BUF; i++){
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    while(command_line_row > 23){
     5d7:	66 a1 a0 20          	mov    0x20a0,%eax
     5db:	66 83 f8 17          	cmp    $0x17,%eax
     5df:	7f ea                	jg     5cb <create_a_line+0xc5>
/mnt/e/code/my_operating_system/os/kernel/tty.c:162
        scroll_screen();
        command_line_row--;
    }
    command_line_cursor = 0;
     5e1:	66 c7 06 e0 20 00 00 	movl   $0x0,0x20e0
     5e8:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:163
    set_cursor(command_line_row * 80);
     5ea:	66 83 ec 0c          	sub    $0xc,%esp
     5ee:	67 66 8d 04 80       	lea    (%eax,%eax,4),%eax
     5f3:	66 c1 e0 04          	shl    $0x4,%eax
     5f7:	66 0f b7 d0          	movzwl %ax,%edx
     5fb:	66 52                	push   %edx
     5fd:	66 e8 7a 05 00 00    	calll  b7d <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:165
    // printf("%d", command_line_row);
    printf("%s", message);
     603:	66 83 c4 08          	add    $0x8,%esp
     607:	67 66 8d 44 24 0a    	lea    0xa(%esp),%eax
     60d:	66 50                	push   %eax
     60f:	66 68 92 17 00 00    	pushl  $0x1792
     615:	66 e8 ab 0b 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:166
}
     61b:	66 83 c4 3c          	add    $0x3c,%esp
     61f:	66 c3                	retl   

00000621 <tty>:
tty():
/mnt/e/code/my_operating_system/os/kernel/tty.c:19
int message_length = 0;
int command_line_cursor = 0; // 光标在输入区的偏移量
char input_buf[MAX_BUF]; // 输入缓存区


void tty(){
     621:	66 56                	push   %esi
     623:	66 53                	push   %ebx
     625:	66 83 ec 04          	sub    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:21
    int keyboard_flag = 0;
    new_line_flag = 1;
     629:	66 c7 06 9c 20 01 00 	movl   $0x1,0x209c
     630:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:22
    command_line_row = -1;
     632:	66 c7 06 a0 20 ff ff 	movl   $0xffffffff,0x20a0
     639:	ff ff 
/mnt/e/code/my_operating_system/os/kernel/tty.c:23
    clean_screen();
     63b:	66 e8 21 0f 00 00    	calll  1562 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:24
    set_cursor(1974);
     641:	66 83 ec 0c          	sub    $0xc,%esp
     645:	66 68 b6 07 00 00    	pushl  $0x7b6
     64b:	66 e8 2c 05 00 00    	calll  b7d <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:25
    set_cursor(0);
     651:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
     658:	00 00 
     65a:	66 e8 1d 05 00 00    	calll  b7d <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:26
    print_my_name();
     660:	66 e8 7a 0f 00 00    	calll  15e0 <print_my_name>
     666:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:29
    while (1){
        // 使用缓冲区数据更新
        if (new_line_flag){
     66a:	66 83 3e 9c 20 00    	cmpl   $0x0,0x209c
     670:	74 0f                	je     681 <tty+0x60>
/mnt/e/code/my_operating_system/os/kernel/tty.c:30
            create_a_line();
     672:	66 e8 8e fe ff ff    	calll  506 <create_a_line>
/mnt/e/code/my_operating_system/os/kernel/tty.c:31
            new_line_flag = 0;
     678:	66 c7 06 9c 20 00 00 	movl   $0x0,0x209c
     67f:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:34
        }

        if(command_line_row == 23 && message_length + command_line_cursor > 80){
     681:	66 83 3e a0 20 17    	cmpl   $0x17,0x20a0
     687:	75 2f                	jne    6b8 <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:34 (discriminator 1)
     689:	66 a1 e0 20          	mov    0x20e0,%eax
     68d:	66 03 06 e4 20       	add    0x20e4,%eax
     692:	66 83 f8 50          	cmp    $0x50,%eax
     696:	7e 20                	jle    6b8 <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:35
            scroll_screen();
     698:	66 e8 de 0e 00 00    	calll  157c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:36
            command_line_row--;
     69e:	66 83 2e a0 20 01    	subl   $0x1,0x20a0
/mnt/e/code/my_operating_system/os/kernel/tty.c:37
            set_cursor(1840);
     6a4:	66 83 ec 0c          	sub    $0xc,%esp
     6a8:	66 68 30 07 00 00    	pushl  $0x730
     6ae:	66 e8 c9 04 00 00    	calll  b7d <set_cursor>
     6b4:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:39
        }
        putc(' ');// 用来删除光标处的文字，与输入退格的时候光标-1配合使用
     6b8:	66 83 ec 0c          	sub    $0xc,%esp
     6bc:	66 6a 20             	pushl  $0x20
     6bf:	66 e8 86 05 00 00    	calll  c4b <putc>
/mnt/e/code/my_operating_system/os/kernel/tty.c:42

        // command_line_row = get_cursor() / 80;
        set_cursor(80*command_line_row + message_length);
     6c5:	66 8b 16 a0 20       	mov    0x20a0,%edx
     6ca:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     6cf:	66 89 d0             	mov    %edx,%eax
     6d2:	66 c1 e0 04          	shl    $0x4,%eax
     6d6:	03 06 e4 20          	add    0x20e4,%ax
     6da:	66 0f b7 c0          	movzwl %ax,%eax
     6de:	67 66 89 04 24       	mov    %eax,(%esp)
     6e3:	66 e8 94 04 00 00    	calll  b7d <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:43
        puts(input_buf, command_line_cursor);
     6e9:	66 83 c4 08          	add    $0x8,%esp
     6ed:	66 ff 36 e0 20       	pushl  0x20e0
     6f2:	66 68 00 21 00 00    	pushl  $0x2100
     6f8:	66 e8 42 07 00 00    	calll  e40 <puts>
/mnt/e/code/my_operating_system/os/kernel/tty.c:46

        // 更新完了 检测键盘
        keyboard_flag = check_keyboard();
     6fe:	66 e8 48 0e 00 00    	calll  154c <check_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:49

        // 如果返回1，则有输入，处理输入信息，否则继续循环。
        if (keyboard_flag){
     704:	66 83 c4 10          	add    $0x10,%esp
     708:	85 c0                	test   %ax,%ax
     70a:	0f 84 5c ff          	je     66a <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:51
            // 处理键盘事件
            u16 keyboard_code =  get_keyboard();
     70e:	66 e8 48 0e 00 00    	calll  155c <get_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:52
            u8 ascii_code = keyboard_code;
     714:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:54
            u8 scan_code = keyboard_code >> 8;
            if (isprint(ascii_code)){
     717:	66 83 ec 0c          	sub    $0xc,%esp
     71b:	66 0f b6 c0          	movzbl %al,%eax
     71f:	66 50                	push   %eax
     721:	66 e8 fa 0b 00 00    	calll  1321 <isprint>
     727:	66 83 c4 10          	add    $0x10,%esp
     72b:	66 85 c0             	test   %eax,%eax
     72e:	74 20                	je     750 <tty+0x12f>
/mnt/e/code/my_operating_system/os/kernel/tty.c:55
                if (command_line_cursor <= MAX_BUF){
     730:	66 a1 e0 20          	mov    0x20e0,%eax
     734:	66 83 f8 64          	cmp    $0x64,%eax
     738:	0f 8f 2e ff          	jg     66a <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:56
                    input_buf[command_line_cursor++] = ascii_code;
     73c:	67 66 8d 50 01       	lea    0x1(%eax),%edx
     741:	66 89 16 e0 20       	mov    %edx,0x20e0
     746:	67 88 98 00 21 00 00 	mov    %bl,0x2100(%eax)
     74d:	e9 1a ff             	jmp    66a <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:59
                }
            }
            else if (ascii_code == 13){
     750:	80 fb 0d             	cmp    $0xd,%bl
     753:	75 1e                	jne    773 <tty+0x152>
/mnt/e/code/my_operating_system/os/kernel/tty.c:60
                new_line_flag = 1;
     755:	66 c7 06 9c 20 01 00 	movl   $0x1,0x209c
     75c:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:61
                input_buf[command_line_cursor] = '\0';
     75e:	66 a1 e0 20          	mov    0x20e0,%eax
     762:	67 c6 80 00 21 00 00 	movb   $0x0,0x2100(%eax)
     769:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:62
                parser();
     76a:	66 e8 7c fb ff ff    	calll  2ec <parser>
     770:	e9 f7 fe             	jmp    66a <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:64
            }
            else if (ascii_code == 8){
     773:	80 fb 08             	cmp    $0x8,%bl
     776:	75 3e                	jne    7b6 <tty+0x195>
/mnt/e/code/my_operating_system/os/kernel/tty.c:65
                if(command_line_cursor){
     778:	66 a1 e0 20          	mov    0x20e0,%eax
     77c:	66 85 c0             	test   %eax,%eax
     77f:	0f 84 e7 fe          	je     66a <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:66
                    input_buf[--command_line_cursor] = 0;
     783:	67 66 8d 50 ff       	lea    -0x1(%eax),%edx
     788:	66 89 16 e0 20       	mov    %edx,0x20e0
     78d:	67 c6 80 ff 20 00 00 	movb   $0x0,0x20ff(%eax)
     794:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:68
                    // 将光标设置为前一个位置，方便删除
                    int cur_cursor = get_cursor();
     795:	66 e8 54 04 00 00    	calll  bef <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:69
                    set_cursor(cur_cursor-1);
     79b:	66 83 ec 0c          	sub    $0xc,%esp
     79f:	66 83 e8 01          	sub    $0x1,%eax
     7a3:	66 0f b7 c0          	movzwl %ax,%eax
     7a7:	66 50                	push   %eax
     7a9:	66 e8 ce 03 00 00    	calll  b7d <set_cursor>
     7af:	66 83 c4 10          	add    $0x10,%esp
     7b3:	e9 b4 fe             	jmp    66a <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:72
                }
            }
            else if (ascii_code == 27){
     7b6:	80 fb 1b             	cmp    $0x1b,%bl
     7b9:	0f 85 ad fe          	jne    66a <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:73
                __asm__("mov $0x4c00, %ax");
     7bd:	b8 00 4c             	mov    $0x4c00,%ax
/mnt/e/code/my_operating_system/os/kernel/tty.c:74
                __asm__("int $0x40");
     7c0:	cd 40                	int    $0x40
     7c2:	e9 a5 fe             	jmp    66a <tty+0x49>

000007c5 <tty_scroll_screen>:
tty_scroll_screen():
/mnt/e/code/my_operating_system/os/kernel/tty.c:169
    // printf("%d", command_line_row);
    printf("%s", message);
}


void tty_scroll_screen(){
     7c5:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:170
    if (get_cursor()/80 > 24){
     7c9:	66 e8 20 04 00 00    	calll  bef <get_cursor>
     7cf:	3d cf 07             	cmp    $0x7cf,%ax
     7d2:	76 0c                	jbe    7e0 <tty_scroll_screen+0x1b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:171
        scroll_screen();
     7d4:	66 e8 a2 0d 00 00    	calll  157c <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:172
        command_line_row--;
     7da:	66 83 2e a0 20 01    	subl   $0x1,0x20a0
/mnt/e/code/my_operating_system/os/kernel/tty.c:175
    }
    return ;
     7e0:	66 83 c4 0c          	add    $0xc,%esp
     7e4:	66 c3                	retl   

000007e6 <init_fsystem>:
init_fsystem():
/mnt/e/code/my_operating_system/os/service/fsystem.c:14
FileDescriptor root[56];
u16 root_sector;
u16 first_cluster_by_sector;
u16 cluster2sector;

void init_fsystem(){
     7e6:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:15
    cluster2sector = 1;
     7ea:	c7 06 a0 2c 01 00    	movw   $0x1,0x2ca0
/mnt/e/code/my_operating_system/os/service/fsystem.c:16
    root_sector = 37;
     7f0:	c7 06 80 21 25 00    	movw   $0x25,0x2180
/mnt/e/code/my_operating_system/os/service/fsystem.c:17
    first_cluster_by_sector = root_sector + 1;  
     7f6:	c7 06 a2 2c 26 00    	movw   $0x26,0x2ca2
/mnt/e/code/my_operating_system/os/service/fsystem.c:18
    read_n_sector(root_sector,1, 0x1000, root);
     7fc:	66 b8 a0 25 00 00    	mov    $0x25a0,%eax
     802:	66 0f b7 c0          	movzwl %ax,%eax
     806:	66 50                	push   %eax
     808:	66 68 00 10 00 00    	pushl  $0x1000
     80e:	66 6a 01             	pushl  $0x1
     811:	66 6a 25             	pushl  $0x25
     814:	66 e8 ba 0b 00 00    	calll  13d4 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:19
    read_n_sector(1,2,0x1000, FAT_table);// 这个会覆盖掉root吗？
     81a:	66 b8 a0 21 00 00    	mov    $0x21a0,%eax
     820:	66 0f b7 c0          	movzwl %ax,%eax
     824:	66 50                	push   %eax
     826:	66 68 00 10 00 00    	pushl  $0x1000
     82c:	66 6a 02             	pushl  $0x2
     82f:	66 6a 01             	pushl  $0x1
     832:	66 e8 9c 0b 00 00    	calll  13d4 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:27
    // puti(FAT_table[0]);
    // puti(root[0].cluster_number);
    // puts(&root[0], 10);
    // puts(&root[1], 10);
    // puts(&root[2], 10);
}
     838:	66 83 c4 2c          	add    $0x2c,%esp
     83c:	66 c3                	retl   

0000083e <_fs_find_descriptor_number_by_name>:
_fs_find_descriptor_number_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:29

u16 _fs_find_descriptor_number_by_name(char * file_name){
     83e:	66 57                	push   %edi
     840:	66 56                	push   %esi
     842:	66 53                	push   %ebx
     844:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:30
    int file_name_length = strlen(file_name);
     84a:	66 83 ec 0c          	sub    $0xc,%esp
     84e:	66 57                	push   %edi
     850:	66 e8 c6 0d 00 00    	calll  161c <strlen>
     856:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:31
    if (file_name_length >= 11) file_name_length = 11;
     859:	66 83 c4 10          	add    $0x10,%esp
     85d:	66 83 f8 0a          	cmp    $0xa,%eax
     861:	7e 06                	jle    869 <_fs_find_descriptor_number_by_name+0x2b>
     863:	66 be 0b 00 00 00    	mov    $0xb,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:33
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     869:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     86f:	eb 2f                	jmp    8a0 <_fs_find_descriptor_number_by_name+0x62>
/mnt/e/code/my_operating_system/os/service/fsystem.c:34
        if (!strncmp(&root[i], file_name, file_name_length)){
     871:	66 89 d8             	mov    %ebx,%eax
     874:	66 c1 e0 05          	shl    $0x5,%eax
     878:	66 05 a0 25 00 00    	add    $0x25a0,%eax
     87e:	66 83 ec 04          	sub    $0x4,%esp
     882:	66 56                	push   %esi
     884:	66 57                	push   %edi
     886:	66 50                	push   %eax
     888:	66 e8 52 0e 00 00    	calll  16e0 <strncmp>
     88e:	66 83 c4 10          	add    $0x10,%esp
     892:	66 85 c0             	test   %eax,%eax
     895:	75 05                	jne    89c <_fs_find_descriptor_number_by_name+0x5e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:35
            return i;
     897:	66 89 d8             	mov    %ebx,%eax
     89a:	eb 10                	jmp    8ac <_fs_find_descriptor_number_by_name+0x6e>
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 2)

u16 _fs_find_descriptor_number_by_name(char * file_name){
    int file_name_length = strlen(file_name);
    if (file_name_length >= 11) file_name_length = 11;
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
     89c:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/fsystem.c:33 (discriminator 1)
     8a0:	66 83 fb 09          	cmp    $0x9,%ebx
     8a4:	7e cb                	jle    871 <_fs_find_descriptor_number_by_name+0x33>
/mnt/e/code/my_operating_system/os/service/fsystem.c:38
        if (!strncmp(&root[i], file_name, file_name_length)){
            return i;
        }
    }
    return -1;
     8a6:	66 b8 ff ff ff ff    	mov    $0xffffffff,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:39
}
     8ac:	66 5b                	pop    %ebx
     8ae:	66 5e                	pop    %esi
     8b0:	66 5f                	pop    %edi
     8b2:	66 c3                	retl   

000008b4 <_fs_find_cluster_code_by_name>:
_fs_find_cluster_code_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:41

u16 _fs_find_cluster_code_by_name(char * file_name){
     8b4:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:42
    int index = _fs_find_descriptor_number_by_name(file_name);
     8b8:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     8be:	66 e8 7a ff ff ff    	calll  83e <_fs_find_descriptor_number_by_name>
     8c4:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:44
    if (index != -1)
        return root[index].cluster_code;
     8c8:	66 c1 e0 05          	shl    $0x5,%eax
     8cc:	67 66 0f b7 80 ba 25 	movzwl 0x25ba(%eax),%eax
     8d3:	00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:46
    return 0;
}
     8d5:	66 83 c4 1c          	add    $0x1c,%esp
     8d9:	66 c3                	retl   

000008db <_fs_get_file_size_by_cluster_code>:
_fs_get_file_size_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:48

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
     8db:	67 66 0f b7 54 24 04 	movzwl 0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:49
    int size = 0;
     8e2:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     8e8:	eb 1b                	jmp    905 <_fs_get_file_size_by_cluster_code+0x2a>
/mnt/e/code/my_operating_system/os/service/fsystem.c:51
        size += 512*cluster2sector;
     8ea:	66 0f b7 0e a0 2c    	movzwl 0x2ca0,%ecx
     8f0:	66 c1 e1 09          	shl    $0x9,%ecx
     8f4:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:52
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     8f7:	66 0f b7 d2          	movzwl %dx,%edx
/mnt/e/code/my_operating_system/os/service/fsystem.c:53
        cluster_code = FAT_table[cluster_code];
     8fb:	67 66 0f b7 94 12 a0 	movzwl 0x21a0(%edx,%edx,1),%edx
     902:	21 00 00 
/mnt/e/code/my_operating_system/os/service/fsystem.c:50
    return 0;
}

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     905:	67 66 8d 4a fe       	lea    -0x2(%edx),%ecx
     90a:	83 f9 ed             	cmp    $0xffed,%cx
     90d:	76 db                	jbe    8ea <_fs_get_file_size_by_cluster_code+0xf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:56
        size += 512*cluster2sector;
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     90f:	66 f3 c3             	repz retl 

00000912 <_fs_show_file_by_descriptor_number>:
_fs_show_file_by_descriptor_number():
/mnt/e/code/my_operating_system/os/service/fsystem.c:58

void _fs_show_file_by_descriptor_number(u16 index){
     912:	66 56                	push   %esi
     914:	66 53                	push   %ebx
     916:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:59
    int cluster_code = root[index].cluster_code;
     91a:	67 66 0f b7 44 24 14 	movzwl 0x14(%esp),%eax
     921:	66 89 c6             	mov    %eax,%esi
     924:	66 c1 e6 05          	shl    $0x5,%esi
     928:	67 66 0f b7 9e ba 25 	movzwl 0x25ba(%esi),%ebx
     92f:	00 00 
     931:	66 81 c6 a0 25 00 00 	add    $0x25a0,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:60
    printf("%d, %d\n" , index,cluster_code);
     938:	66 53                	push   %ebx
     93a:	66 50                	push   %eax
     93c:	66 68 95 17 00 00    	pushl  $0x1795
     942:	66 e8 7e 08 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:62
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
     948:	67 66 89 1c 24       	mov    %ebx,(%esp)
     94d:	66 e8 88 ff ff ff    	calll  8db <_fs_get_file_size_by_cluster_code>
     953:	66 83 c4 0c          	add    $0xc,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:61
}

void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
     957:	66 0f b7 c0          	movzwl %ax,%eax
     95b:	66 50                	push   %eax
     95d:	66 56                	push   %esi
     95f:	66 68 9d 17 00 00    	pushl  $0x179d
     965:	66 e8 5b 08 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     96b:	66 83 c4 10          	add    $0x10,%esp
     96f:	eb 20                	jmp    991 <_fs_show_file_by_descriptor_number+0x7f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:64
        printf("-%d", cluster_code);
     971:	66 83 ec 08          	sub    $0x8,%esp
     975:	66 53                	push   %ebx
     977:	66 68 ae 17 00 00    	pushl  $0x17ae
     97d:	66 e8 43 08 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:65
        cluster_code = FAT_table[cluster_code];
     983:	67 66 0f b7 9c 1b a0 	movzwl 0x21a0(%ebx,%ebx,1),%ebx
     98a:	21 00 00 
     98d:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:63
void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     991:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     996:	66 3d ed ff 00 00    	cmp    $0xffed,%eax
     99c:	76 d3                	jbe    971 <_fs_show_file_by_descriptor_number+0x5f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:67
        printf("-%d", cluster_code);
        cluster_code = FAT_table[cluster_code];
    }
    printf("-|\n");
     99e:	66 83 ec 0c          	sub    $0xc,%esp
     9a2:	66 68 b2 17 00 00    	pushl  $0x17b2
     9a8:	66 e8 18 08 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:69
    return ;
}
     9ae:	66 83 c4 14          	add    $0x14,%esp
     9b2:	66 5b                	pop    %ebx
     9b4:	66 5e                	pop    %esi
     9b6:	66 c3                	retl   

000009b8 <_fs_load_by_cluster_code>:
_fs_load_by_cluster_code():
/mnt/e/code/my_operating_system/os/service/fsystem.c:71

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
     9b8:	66 57                	push   %edi
     9ba:	66 56                	push   %esi
     9bc:	66 53                	push   %ebx
     9be:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
     9c4:	67 66 0f b7 5c 24 10 	movzwl 0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/fsystem.c:72
    int size = 0;
     9cb:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     9d1:	eb 5b                	jmp    a2e <_fs_load_by_cluster_code+0x76>
/mnt/e/code/my_operating_system/os/service/fsystem.c:74
        size += 512*cluster2sector;
     9d3:	66 0f b7 16 a0 2c    	movzwl 0x2ca0,%edx
     9d9:	66 89 d0             	mov    %edx,%eax
     9dc:	66 c1 e0 09          	shl    $0x9,%eax
     9e0:	66 01 c7             	add    %eax,%edi
/mnt/e/code/my_operating_system/os/service/fsystem.c:75
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
     9e3:	66 0f b7 0e a2 2c    	movzwl 0x2ca2,%ecx
     9e9:	66 0f b7 db          	movzwl %bx,%ebx
     9ed:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     9f2:	66 0f af c2          	imul   %edx,%eax
     9f6:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:76
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
     9f9:	66 0f b7 ce          	movzwl %si,%ecx
     9fd:	66 51                	push   %ecx
     9ff:	66 68 00 10 00 00    	pushl  $0x1000
     a05:	66 52                	push   %edx
     a07:	66 0f b7 c0          	movzwl %ax,%eax
     a0b:	66 50                	push   %eax
     a0d:	66 e8 c1 09 00 00    	calll  13d4 <read_n_sector>
/mnt/e/code/my_operating_system/os/service/fsystem.c:77
        program = program+cluster2sector*512;
     a13:	66 0f b7 06 a0 2c    	movzwl 0x2ca0,%eax
     a19:	66 c1 e0 09          	shl    $0x9,%eax
     a1d:	66 01 c6             	add    %eax,%esi
/mnt/e/code/my_operating_system/os/service/fsystem.c:78
        cluster_code = FAT_table[cluster_code];
     a20:	67 66 0f b7 9c 1b a0 	movzwl 0x21a0(%ebx,%ebx,1),%ebx
     a27:	21 00 00 
     a2a:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:73
    return ;
}

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
     a2e:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
     a33:	83 f8 ed             	cmp    $0xffed,%ax
     a36:	76 9b                	jbe    9d3 <_fs_load_by_cluster_code+0x1b>
/mnt/e/code/my_operating_system/os/service/fsystem.c:81
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
        program = program+cluster2sector*512;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
     a38:	66 89 f8             	mov    %edi,%eax
     a3b:	66 5b                	pop    %ebx
     a3d:	66 5e                	pop    %esi
     a3f:	66 5f                	pop    %edi
     a41:	66 c3                	retl   

00000a43 <fs_load_by_name>:
fs_load_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:84


u16 fs_load_by_name(char * file_name, void (*program)()){
     a43:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:85
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     a47:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     a4d:	66 e8 61 fe ff ff    	calll  8b4 <_fs_find_cluster_code_by_name>
     a53:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:86
    if (cluster_code){
     a57:	66 83 c4 10          	add    $0x10,%esp
     a5b:	66 85 c0             	test   %eax,%eax
     a5e:	74 18                	je     a78 <fs_load_by_name+0x35>
/mnt/e/code/my_operating_system/os/service/fsystem.c:87
        return _fs_load_by_cluster_code(cluster_code, program);
     a60:	66 83 ec 08          	sub    $0x8,%esp
     a64:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     a6a:	66 50                	push   %eax
     a6c:	66 e8 46 ff ff ff    	calll  9b8 <_fs_load_by_cluster_code>
     a72:	66 83 c4 10          	add    $0x10,%esp
     a76:	eb 06                	jmp    a7e <fs_load_by_name+0x3b>
/mnt/e/code/my_operating_system/os/service/fsystem.c:90
    }
    else {
        return 0;
     a78:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/fsystem.c:92
    }
}
     a7e:	66 83 c4 0c          	add    $0xc,%esp
     a82:	66 c3                	retl   

00000a84 <fs_get_file_size>:
fs_get_file_size():
/mnt/e/code/my_operating_system/os/service/fsystem.c:95


u16 fs_get_file_size(char * file_name){
     a84:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:96
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
     a88:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     a8e:	66 e8 20 fe ff ff    	calll  8b4 <_fs_find_cluster_code_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:97
    return _fs_get_file_size_by_cluster_code(cluster_code);
     a94:	66 0f b7 c0          	movzwl %ax,%eax
     a98:	67 66 89 04 24       	mov    %eax,(%esp)
     a9d:	66 e8 38 fe ff ff    	calll  8db <_fs_get_file_size_by_cluster_code>
/mnt/e/code/my_operating_system/os/service/fsystem.c:98
}
     aa3:	66 83 c4 1c          	add    $0x1c,%esp
     aa7:	66 c3                	retl   

00000aa9 <fs_show_root_file_table>:
fs_show_root_file_table():
/mnt/e/code/my_operating_system/os/service/fsystem.c:100

void fs_show_root_file_table(){
     aa9:	66 53                	push   %ebx
     aab:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:101
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
     aaf:	66 68 b6 17 00 00    	pushl  $0x17b6
     ab5:	66 68 be 17 00 00    	pushl  $0x17be
     abb:	66 68 c8 17 00 00    	pushl  $0x17c8
     ac1:	66 68 d3 17 00 00    	pushl  $0x17d3
     ac7:	66 e8 f9 06 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:102
    printf("------------------------------------\n\r");
     acd:	67 66 c7 04 24 54 20 	movl   $0x2054,(%esp)
     ad4:	00 00 
     ad6:	66 e8 ea 06 00 00    	calll  11c6 <printf>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     adc:	66 83 c4 10          	add    $0x10,%esp
     ae0:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     ae6:	eb 18                	jmp    b00 <fs_show_root_file_table+0x57>
/mnt/e/code/my_operating_system/os/service/fsystem.c:105 (discriminator 3)
        _fs_show_file_by_descriptor_number(i);
     ae8:	66 83 ec 0c          	sub    $0xc,%esp
     aec:	66 0f b7 c3          	movzwl %bx,%eax
     af0:	66 50                	push   %eax
     af2:	66 e8 1a fe ff ff    	calll  912 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 3)

void fs_show_root_file_table(){
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    printf("------------------------------------\n\r");
    int file_number = 9;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
     af8:	66 83 c3 01          	add    $0x1,%ebx
     afc:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:104 (discriminator 1)
     b00:	66 83 fb 08          	cmp    $0x8,%ebx
     b04:	7e e2                	jle    ae8 <fs_show_root_file_table+0x3f>
/mnt/e/code/my_operating_system/os/service/fsystem.c:108
        _fs_show_file_by_descriptor_number(i);
    }
    return ;
}
     b06:	66 83 c4 08          	add    $0x8,%esp
     b0a:	66 5b                	pop    %ebx
     b0c:	66 c3                	retl   

00000b0e <fs_show_file_by_name>:
fs_show_file_by_name():
/mnt/e/code/my_operating_system/os/service/fsystem.c:110

void fs_show_file_by_name(char * file_name){
     b0e:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/service/fsystem.c:111
    int descriptor_index = _fs_find_descriptor_number_by_name(file_name);
     b12:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     b18:	66 e8 20 fd ff ff    	calll  83e <_fs_find_descriptor_number_by_name>
/mnt/e/code/my_operating_system/os/service/fsystem.c:112
    _fs_show_file_by_descriptor_number(descriptor_index);
     b1e:	66 0f b7 c0          	movzwl %ax,%eax
     b22:	67 66 89 04 24       	mov    %eax,(%esp)
     b27:	66 e8 e5 fd ff ff    	calll  912 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/service/fsystem.c:114
    return ;
}
     b2d:	66 83 c4 1c          	add    $0x1c,%esp
     b31:	66 c3                	retl   

00000b33 <fs_show_floppy_infomation>:
fs_show_floppy_infomation():
/mnt/e/code/my_operating_system/os/service/fsystem.c:117


void fs_show_floppy_infomation(){
     b33:	66 f3 c3             	repz retl 

00000b36 <_put_char>:
_put_char():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:5
#include "../include/basic.h"
#include "../include/type.h"
#include "../include/string.h"

void _put_char(char c, u16 cursor_index){
     b36:	66 53                	push   %ebx
     b38:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:7
    int _address = 0xb8000;
    int _offset = cursor_index * 2;
     b3c:	67 66 0f b7 5c 24 1c 	movzwl 0x1c(%esp),%ebx
     b43:	66 01 db             	add    %ebx,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:8
    write_memory_byte(_address+_offset, c);
     b46:	67 66 8d 83 00 80 0b 	lea    0xb8000(%ebx),%eax
     b4d:	00 
     b4e:	67 66 0f b6 54 24 18 	movzbl 0x18(%esp),%edx
     b55:	66 52                	push   %edx
     b57:	66 50                	push   %eax
     b59:	66 e8 9d 09 00 00    	calll  14fc <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:9
    write_memory_byte(_address+_offset+1, 0x1f);
     b5f:	66 81 c3 01 80 0b 00 	add    $0xb8001,%ebx
     b66:	66 83 c4 08          	add    $0x8,%esp
     b6a:	66 6a 1f             	pushl  $0x1f
     b6d:	66 53                	push   %ebx
     b6f:	66 e8 87 09 00 00    	calll  14fc <write_memory_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:11
    return ;
}
     b75:	66 83 c4 18          	add    $0x18,%esp
     b79:	66 5b                	pop    %ebx
     b7b:	66 c3                	retl   

00000b7d <set_cursor>:
set_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:13

void set_cursor(u16 cursor_index){
     b7d:	66 56                	push   %esi
     b7f:	66 53                	push   %ebx
     b81:	66 83 ec 0c          	sub    $0xc,%esp
     b85:	67 66 8b 5c 24 18    	mov    0x18(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:16
    // short cursor_index = 80 * row + column;     // 计算光标寄存器的值
    u8 low_eight = cursor_index; // 取低八位，高位被截断
    u8 high_eight = cursor_index >> 8; // 取高八位
     b8b:	66 89 d8             	mov    %ebx,%eax
     b8e:	c1 e8 08             	shr    $0x8,%ax
     b91:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:17
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     b94:	66 6a 0e             	pushl  $0xe
     b97:	66 68 d4 03 00 00    	pushl  $0x3d4
     b9d:	66 e8 0d 09 00 00    	calll  14b0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:18
    write_port_byte(0x3d5, high_eight);// 将光标索引高八位写入端口
     ba3:	66 83 c4 08          	add    $0x8,%esp
     ba7:	66 89 f0             	mov    %esi,%eax
     baa:	66 0f b6 f0          	movzbl %al,%esi
     bae:	66 56                	push   %esi
     bb0:	66 68 d5 03 00 00    	pushl  $0x3d5
     bb6:	66 e8 f4 08 00 00    	calll  14b0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:19
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     bbc:	66 83 c4 08          	add    $0x8,%esp
     bc0:	66 6a 0f             	pushl  $0xf
     bc3:	66 68 d4 03 00 00    	pushl  $0x3d4
     bc9:	66 e8 e1 08 00 00    	calll  14b0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:20
    write_port_byte(0x3d5, low_eight);// 将光标索引低八位写入端口
     bcf:	66 83 c4 08          	add    $0x8,%esp
     bd3:	66 0f b6 db          	movzbl %bl,%ebx
     bd7:	66 53                	push   %ebx
     bd9:	66 68 d5 03 00 00    	pushl  $0x3d5
     bdf:	66 e8 cb 08 00 00    	calll  14b0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:22
    return ;
}
     be5:	66 83 c4 14          	add    $0x14,%esp
     be9:	66 5b                	pop    %ebx
     beb:	66 5e                	pop    %esi
     bed:	66 c3                	retl   

00000bef <get_cursor>:
get_cursor():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:24

u16 get_cursor(){
     bef:	66 53                	push   %ebx
     bf1:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:27
    u8 low_eight = 0, high_eight = 0;
    u16 cursor_index = 0;
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     bf5:	66 6a 0e             	pushl  $0xe
     bf8:	66 68 d4 03 00 00    	pushl  $0x3d4
     bfe:	66 e8 ac 08 00 00    	calll  14b0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:28
    high_eight = read_port_byte(0x3d5);// 将光标索引高八位写入端口
     c04:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     c0b:	00 00 
     c0d:	66 e8 c5 08 00 00    	calll  14d8 <read_port_byte>
     c13:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:29
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     c16:	66 83 c4 08          	add    $0x8,%esp
     c1a:	66 6a 0f             	pushl  $0xf
     c1d:	66 68 d4 03 00 00    	pushl  $0x3d4
     c23:	66 e8 87 08 00 00    	calll  14b0 <write_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:30
    low_eight = read_port_byte(0x3d5);// 将光标索引低八位写入端口
     c29:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     c30:	00 00 
     c32:	66 e8 a0 08 00 00    	calll  14d8 <read_port_byte>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:32
    cursor_index = high_eight;
    cursor_index = (cursor_index << 8) + low_eight;
     c38:	66 c1 e3 08          	shl    $0x8,%ebx
     c3c:	66 0f b6 c0          	movzbl %al,%eax
     c40:	66 01 d8             	add    %ebx,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:34
    return cursor_index;
}
     c43:	66 83 c4 18          	add    $0x18,%esp
     c47:	66 5b                	pop    %ebx
     c49:	66 c3                	retl   

00000c4b <putc>:
putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:36

void putc(char c){
     c4b:	66 57                	push   %edi
     c4d:	66 56                	push   %esi
     c4f:	66 53                	push   %ebx
     c51:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:37
    u16 cursor_index = get_cursor();
     c57:	66 e8 92 ff ff ff    	calll  bef <get_cursor>
     c5d:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:38
    u16 row = cursor_index / 80;
     c60:	66 0f b7 d8          	movzwl %ax,%ebx
     c64:	66 69 db cd cc 00 00 	imul   $0xcccd,%ebx,%ebx
     c6b:	66 c1 eb 10          	shr    $0x10,%ebx
     c6f:	c1 eb 06             	shr    $0x6,%bx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:40
    u16 col = cursor_index % 80;
    if (cursor_index >= 1920){
     c72:	3d 7f 07             	cmp    $0x77f,%ax
     c75:	76 0c                	jbe    c83 <putc+0x38>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:41
        scroll_screen();
     c77:	66 e8 ff 08 00 00    	calll  157c <scroll_screen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:42
        cursor_index = 1840;
     c7d:	66 be 30 07 00 00    	mov    $0x730,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:44
    }
    switch (c) {
     c83:	66 89 f8             	mov    %edi,%eax
     c86:	3c 0a                	cmp    $0xa,%al
     c88:	74 06                	je     c90 <putc+0x45>
     c8a:	3c 0d                	cmp    $0xd,%al
     c8c:	74 25                	je     cb3 <putc+0x68>
     c8e:	eb 45                	jmp    cd5 <putc+0x8a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:46
        case '\n':
            set_cursor((row+1)*80); // 回车，移到下一行
     c90:	66 83 ec 0c          	sub    $0xc,%esp
     c94:	67 66 8d 5c 9b 05    	lea    0x5(%ebx,%ebx,4),%ebx
     c9a:	66 89 d8             	mov    %ebx,%eax
     c9d:	66 c1 e0 04          	shl    $0x4,%eax
     ca1:	66 0f b7 c0          	movzwl %ax,%eax
     ca5:	66 50                	push   %eax
     ca7:	66 e8 d0 fe ff ff    	calll  b7d <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:47
            break;
     cad:	66 83 c4 10          	add    $0x10,%esp
     cb1:	eb 52                	jmp    d05 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:49
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     cb3:	66 83 ec 0c          	sub    $0xc,%esp
     cb7:	67 66 8d 1c 9b       	lea    (%ebx,%ebx,4),%ebx
     cbc:	66 89 d8             	mov    %ebx,%eax
     cbf:	66 c1 e0 04          	shl    $0x4,%eax
     cc3:	66 0f b7 c0          	movzwl %ax,%eax
     cc7:	66 50                	push   %eax
     cc9:	66 e8 ae fe ff ff    	calll  b7d <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:50
            break;
     ccf:	66 83 c4 10          	add    $0x10,%esp
     cd3:	eb 30                	jmp    d05 <putc+0xba>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:52
        default:
            _put_char(c, cursor_index);
     cd5:	66 83 ec 08          	sub    $0x8,%esp
     cd9:	66 0f b7 c6          	movzwl %si,%eax
     cdd:	66 50                	push   %eax
     cdf:	66 89 f8             	mov    %edi,%eax
     ce2:	66 0f be f8          	movsbl %al,%edi
     ce6:	66 57                	push   %edi
     ce8:	66 e8 48 fe ff ff    	calll  b36 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:53
            set_cursor(cursor_index+1);
     cee:	66 83 c6 01          	add    $0x1,%esi
     cf2:	66 0f b7 f6          	movzwl %si,%esi
     cf6:	67 66 89 34 24       	mov    %esi,(%esp)
     cfb:	66 e8 7c fe ff ff    	calll  b7d <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:54
            break;
     d01:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:57
    }
    return ;
}
     d05:	66 5b                	pop    %ebx
     d07:	66 5e                	pop    %esi
     d09:	66 5f                	pop    %edi
     d0b:	66 c3                	retl   

00000d0d <_putc>:
_putc():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:59

void _putc(char c){
     d0d:	66 56                	push   %esi
     d0f:	66 53                	push   %ebx
     d11:	66 83 ec 04          	sub    $0x4,%esp
     d15:	67 66 8b 5c 24 10    	mov    0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:60
    u16 cursor_index = get_cursor();
     d1b:	66 e8 ce fe ff ff    	calll  bef <get_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:61
    u16 row = cursor_index / 80;
     d21:	66 0f b7 d0          	movzwl %ax,%edx
     d25:	66 69 d2 cd cc 00 00 	imul   $0xcccd,%edx,%edx
     d2c:	66 c1 ea 10          	shr    $0x10,%edx
     d30:	c1 ea 06             	shr    $0x6,%dx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:62
    u16 col = cursor_index % 80;
     d33:	67 66 8d 34 92       	lea    (%edx,%edx,4),%esi
     d38:	66 c1 e6 04          	shl    $0x4,%esi
     d3c:	66 89 f1             	mov    %esi,%ecx
     d3f:	66 89 c6             	mov    %eax,%esi
     d42:	66 29 ce             	sub    %ecx,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:63
    switch (c) {
     d45:	80 fb 0a             	cmp    $0xa,%bl
     d48:	74 07                	je     d51 <_putc+0x44>
     d4a:	80 fb 0d             	cmp    $0xd,%bl
     d4d:	74 2b                	je     d7a <_putc+0x6d>
     d4f:	eb 4b                	jmp    d9c <_putc+0x8f>
     d51:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:65
        case '\n':
            set_cursor((row+1)*80+col); // 回车，移到下一行
     d54:	66 83 ec 0c          	sub    $0xc,%esp
     d58:	67 66 8d 54 92 05    	lea    0x5(%edx,%edx,4),%edx
     d5e:	66 89 d0             	mov    %edx,%eax
     d61:	66 c1 e0 04          	shl    $0x4,%eax
     d65:	66 01 c1             	add    %eax,%ecx
     d68:	66 0f b7 c9          	movzwl %cx,%ecx
     d6c:	66 51                	push   %ecx
     d6e:	66 e8 09 fe ff ff    	calll  b7d <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:66
            break;
     d74:	66 83 c4 10          	add    $0x10,%esp
     d78:	eb 3c                	jmp    db6 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:68
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     d7a:	66 83 ec 0c          	sub    $0xc,%esp
     d7e:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     d83:	66 89 d0             	mov    %edx,%eax
     d86:	66 c1 e0 04          	shl    $0x4,%eax
     d8a:	66 0f b7 c0          	movzwl %ax,%eax
     d8e:	66 50                	push   %eax
     d90:	66 e8 e7 fd ff ff    	calll  b7d <set_cursor>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:69
            break;
     d96:	66 83 c4 10          	add    $0x10,%esp
     d9a:	eb 1a                	jmp    db6 <_putc+0xa9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:71
        default:
            _put_char(c, cursor_index);
     d9c:	66 83 ec 08          	sub    $0x8,%esp
     da0:	66 0f b7 c0          	movzwl %ax,%eax
     da4:	66 50                	push   %eax
     da6:	66 0f be db          	movsbl %bl,%ebx
     daa:	66 53                	push   %ebx
     dac:	66 e8 84 fd ff ff    	calll  b36 <_put_char>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:73
            // set_cursor(cursor_index+1);
            break;
     db2:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:76
    }
    return ;
}
     db6:	66 83 c4 04          	add    $0x4,%esp
     dba:	66 5b                	pop    %ebx
     dbc:	66 5e                	pop    %esi
     dbe:	66 c3                	retl   

00000dc0 <puti>:
puti():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:78

void puti(u32 n){
     dc0:	66 56                	push   %esi
     dc2:	66 53                	push   %ebx
     dc4:	66 83 ec 44          	sub    $0x44,%esp
     dc8:	67 66 8b 4c 24 50    	mov    0x50(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:79
    int len = 0;
     dce:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     dd4:	eb 2d                	jmp    e03 <puti+0x43>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:82
        num[len] = n % 10;
     dd6:	66 ba cd cc cc cc    	mov    $0xcccccccd,%edx
     ddc:	66 89 c8             	mov    %ecx,%eax
     ddf:	66 f7 e2             	mul    %edx
     de2:	66 c1 ea 03          	shr    $0x3,%edx
     de6:	66 89 d6             	mov    %edx,%esi
     de9:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     dee:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     df3:	66 29 c1             	sub    %eax,%ecx
     df6:	67 66 89 4c 9c 04    	mov    %ecx,0x4(%esp,%ebx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:83
        n = n / 10;
     dfc:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:84
        len++;
     dff:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:81
}

void puti(u32 n){
    int len = 0;
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     e03:	66 85 c9             	test   %ecx,%ecx
     e06:	75 ce                	jne    dd6 <puti+0x16>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     e08:	66 83 eb 01          	sub    $0x1,%ebx
     e0c:	eb 23                	jmp    e31 <puti+0x71>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:87 (discriminator 3)
        putc(num[i]+'0');
     e0e:	66 83 ec 0c          	sub    $0xc,%esp
     e12:	67 66 0f b6 44 9c 10 	movzbl 0x10(%esp,%ebx,4),%eax
     e19:	66 83 c0 30          	add    $0x30,%eax
     e1d:	66 0f be c0          	movsbl %al,%eax
     e21:	66 50                	push   %eax
     e23:	66 e8 22 fe ff ff    	calll  c4b <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 3)
    while (n != 0){
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     e29:	66 83 eb 01          	sub    $0x1,%ebx
     e2d:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:86 (discriminator 1)
     e31:	66 85 db             	test   %ebx,%ebx
     e34:	79 d8                	jns    e0e <puti+0x4e>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:90
        putc(num[i]+'0');
    }
    return ;
}
     e36:	66 83 c4 44          	add    $0x44,%esp
     e3a:	66 5b                	pop    %ebx
     e3c:	66 5e                	pop    %esi
     e3e:	66 c3                	retl   

00000e40 <puts>:
puts():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:92

void puts(char * str, int size){
     e40:	66 57                	push   %edi
     e42:	66 56                	push   %esi
     e44:	66 53                	push   %ebx
     e46:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
     e4c:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:93
    int i = 0;
     e52:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    while (i < size){
     e58:	eb 1a                	jmp    e74 <puts+0x34>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:95
        putc(str[i]);
     e5a:	66 83 ec 0c          	sub    $0xc,%esp
     e5e:	67 66 0f be 04 1f    	movsbl (%edi,%ebx,1),%eax
     e64:	66 50                	push   %eax
     e66:	66 e8 df fd ff ff    	calll  c4b <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:96
        i++;
     e6c:	66 83 c3 01          	add    $0x1,%ebx
     e70:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:94
    return ;
}

void puts(char * str, int size){
    int i = 0;
    while (i < size){
     e74:	66 39 f3             	cmp    %esi,%ebx
     e77:	7c e1                	jl     e5a <puts+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:99
        putc(str[i]);
        i++;
    }
    return ;
}
     e79:	66 5b                	pop    %ebx
     e7b:	66 5e                	pop    %esi
     e7d:	66 5f                	pop    %edi
     e7f:	66 c3                	retl   

00000e81 <sprintf>:
sprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:103



void sprintf(char * dest , char * format, ...){
     e81:	66 55                	push   %ebp
     e83:	66 57                	push   %edi
     e85:	66 56                	push   %esi
     e87:	66 53                	push   %ebx
     e89:	66 83 ec 5c          	sub    $0x5c,%esp
     e8d:	67 66 8b 6c 24 70    	mov    0x70(%esp),%ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:106
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     e93:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:105



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     e99:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:104
}



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
     e9f:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     ea5:	e9 33 01             	jmp    fdb <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:109
        if (format[src_index] == '%'){
     ea8:	3c 25                	cmp    $0x25,%al
     eaa:	0f 85 1b 01          	jne    fc9 <sprintf+0x148>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:111
            src_index++;
            switch(format[src_index]){
     eae:	67 66 0f b6 44 39 01 	movzbl 0x1(%ecx,%edi,1),%eax
     eb5:	3c 64                	cmp    $0x64,%al
     eb7:	74 28                	je     ee1 <sprintf+0x60>
     eb9:	3c 73                	cmp    $0x73,%al
     ebb:	0f 84 b5 00          	je     f74 <sprintf+0xf3>
     ebf:	3c 63                	cmp    $0x63,%al
     ec1:	0f 85 fe 00          	jne    fc3 <sprintf+0x142>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     ec5:	67 66 8b 44 94 78    	mov    0x78(%esp,%edx,4),%eax
     ecb:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:114
                    src_index++;
     ed0:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:113
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     ed4:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     ed9:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:115
                    src_index++;
                    break;
     ede:	e9 fa 00             	jmp    fdb <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     ee1:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     ee6:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     eec:	67 66 8b 4c 94 78    	mov    0x78(%esp,%edx,4),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:119
                    int len = 0; 
     ef2:	66 be 00 00 00 00    	mov    $0x0,%esi
     ef8:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                    int num[INT_LENGTH];
                    while (n != 0){
     efe:	eb 37                	jmp    f37 <sprintf+0xb6>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:122
                        num[len] = n % 10;
     f00:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     f06:	66 89 c8             	mov    %ecx,%eax
     f09:	66 f7 ea             	imul   %edx
     f0c:	66 c1 fa 02          	sar    $0x2,%edx
     f10:	66 89 c8             	mov    %ecx,%eax
     f13:	66 c1 f8 1f          	sar    $0x1f,%eax
     f17:	66 29 c2             	sub    %eax,%edx
     f1a:	66 89 d7             	mov    %edx,%edi
     f1d:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     f22:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     f27:	66 29 c1             	sub    %eax,%ecx
     f2a:	67 66 89 4c b4 14    	mov    %ecx,0x14(%esp,%esi,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:123
                        n = n / 10;
     f30:	66 89 f9             	mov    %edi,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:124
                        len++;
     f33:	66 83 c6 01          	add    $0x1,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:121
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     f37:	66 85 c9             	test   %ecx,%ecx
     f3a:	75 c4                	jne    f00 <sprintf+0x7f>
     f3c:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     f42:	67 66 8d 46 ff       	lea    -0x1(%esi),%eax
     f47:	eb 1a                	jmp    f63 <sprintf+0xe2>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     f49:	67 66 0f b6 74 84 14 	movzbl 0x14(%esp,%eax,4),%esi
     f50:	67 66 8d 56 30       	lea    0x30(%esi),%edx
     f55:	67 88 54 1d 00       	mov    %dl,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     f5a:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     f5e:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:126 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     f63:	66 85 c0             	test   %eax,%eax
     f66:	79 e1                	jns    f49 <sprintf+0xc8>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:129
                        dest[des_index++] = num[i]+'0';
                    }
                    src_index++;
     f68:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:118
                    dest[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     f6c:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     f72:	eb 67                	jmp    fdb <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     f74:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     f79:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     f7f:	67 66 8b 74 94 78    	mov    0x78(%esp,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:134
                    u32 str_len = strlen(str);
     f85:	66 83 ec 0c          	sub    $0xc,%esp
     f89:	66 56                	push   %esi
     f8b:	66 e8 8b 06 00 00    	calll  161c <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    u32 i = 0;
                    while (i < str_len){
     f91:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:135
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
     f95:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                    while (i < str_len){
     f9b:	eb 15                	jmp    fb2 <sprintf+0x131>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:137
                        dest[des_index++] = str[i++];
     f9d:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
     fa3:	67 88 4c 1d 00       	mov    %cl,0x0(%ebp,%ebx,1)
     fa8:	67 66 8d 52 01       	lea    0x1(%edx),%edx
     fad:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:136
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
     fb2:	66 39 c2             	cmp    %eax,%edx
     fb5:	72 e6                	jb     f9d <sprintf+0x11c>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:139
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
     fb7:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     fbb:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:140
                    u32 i = 0;
                    while (i < str_len){
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
     fc1:	eb 18                	jmp    fdb <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:143
                }
                default :
                    src_index++;
     fc3:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:144
                    break;
     fc7:	eb 12                	jmp    fdb <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:147
            }
        }
        else if (format[src_index] == '\\') {
     fc9:	3c 5c                	cmp    $0x5c,%al
     fcb:	74 0e                	je     fdb <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:166
                        break;
                }
            }
        }
        else {
            dest[des_index++] = format[src_index++];
     fcd:	66 83 c7 01          	add    $0x1,%edi
     fd1:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
     fd6:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:108
void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     fdb:	67 66 8b 4c 24 74    	mov    0x74(%esp),%ecx
     fe1:	67 66 0f b6 04 39    	movzbl (%ecx,%edi,1),%eax
     fe7:	84 c0                	test   %al,%al
     fe9:	0f 85 bb fe          	jne    ea8 <sprintf+0x27>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:169
        }
        else {
            dest[des_index++] = format[src_index++];
        }
    }
    dest[des_index] = 0;
     fed:	67 c6 44 1d 00 00    	movb   $0x0,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:171
    return ;
}
     ff3:	66 83 c4 5c          	add    $0x5c,%esp
     ff7:	66 5b                	pop    %ebx
     ff9:	66 5e                	pop    %esi
     ffb:	66 5f                	pop    %edi
     ffd:	66 5d                	pop    %ebp
     fff:	66 c3                	retl   

00001001 <vprintf>:
vprintf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:174


void vprintf(char * format, va_list va){
    1001:	66 55                	push   %ebp
    1003:	66 57                	push   %edi
    1005:	66 56                	push   %esi
    1007:	66 53                	push   %ebx
    1009:	66 81 ec 5c 04 00 00 	sub    $0x45c,%esp
    1010:	67 66 8b ac 24 70 04 	mov    0x470(%esp),%ebp
    1017:	00 00 
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:178
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    1019:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:177


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    101f:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:176
}


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    1025:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    102b:	e9 4c 01             	jmp    117a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:181
        if (format[src_index] == '%'){
    102e:	3c 25                	cmp    $0x25,%al
    1030:	0f 85 34 01          	jne    1168 <vprintf+0x167>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:183
            src_index++;
            switch(format[src_index]){
    1034:	67 66 0f b6 44 3d 01 	movzbl 0x1(%ebp,%edi,1),%eax
    103b:	3c 64                	cmp    $0x64,%al
    103d:	74 30                	je     106f <vprintf+0x6e>
    103f:	3c 73                	cmp    $0x73,%al
    1041:	0f 84 c6 00          	je     110b <vprintf+0x10a>
    1045:	3c 63                	cmp    $0x63,%al
    1047:	0f 85 17 01          	jne    1162 <vprintf+0x161>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
    104b:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    1052:	00 00 
    1054:	67 66 8b 04 90       	mov    (%eax,%edx,4),%eax
    1059:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:186
                    src_index++;
    105e:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:185
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
    1062:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
    1067:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:187
                    src_index++;
                    break;
    106c:	e9 0b 01             	jmp    117a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    106f:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1074:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    107a:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    1081:	00 00 
    1083:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:191
                    int len = 0; 
    1088:	66 b9 00 00 00 00    	mov    $0x0,%ecx
    108e:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                    int num[INT_LENGTH];
                    while (n != 0){
    1094:	eb 3a                	jmp    10d0 <vprintf+0xcf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:194
                        num[len] = n % 10;
    1096:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    109c:	66 89 f0             	mov    %esi,%eax
    109f:	66 f7 ea             	imul   %edx
    10a2:	66 c1 fa 02          	sar    $0x2,%edx
    10a6:	66 89 f0             	mov    %esi,%eax
    10a9:	66 c1 f8 1f          	sar    $0x1f,%eax
    10ad:	66 29 c2             	sub    %eax,%edx
    10b0:	66 89 d7             	mov    %edx,%edi
    10b3:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
    10b8:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    10bd:	66 89 f2             	mov    %esi,%edx
    10c0:	66 29 c2             	sub    %eax,%edx
    10c3:	67 66 89 54 8c 14    	mov    %edx,0x14(%esp,%ecx,4)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:195
                        n = n / 10;
    10c9:	66 89 fe             	mov    %edi,%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:196
                        len++;
    10cc:	66 83 c1 01          	add    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:193
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
    10d0:	66 85 f6             	test   %esi,%esi
    10d3:	75 c1                	jne    1096 <vprintf+0x95>
    10d5:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    10db:	66 83 e9 01          	sub    $0x1,%ecx
    10df:	eb 19                	jmp    10fa <vprintf+0xf9>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    10e1:	67 66 0f b6 44 8c 14 	movzbl 0x14(%esp,%ecx,4),%eax
    10e8:	66 83 c0 30          	add    $0x30,%eax
    10ec:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    10f1:	66 83 e9 01          	sub    $0x1,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
    10f5:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:198 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
    10fa:	66 85 c9             	test   %ecx,%ecx
    10fd:	79 e2                	jns    10e1 <vprintf+0xe0>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:201
                        buf[des_index++] = num[i]+'0';
                    }
                    src_index++;
    10ff:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:190
                    buf[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
    1103:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
    1109:	eb 6f                	jmp    117a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    110b:	67 66 8d 42 01       	lea    0x1(%edx),%eax
    1110:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
    1116:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
    111d:	00 00 
    111f:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:206
                    u32 str_len = strlen(str);
    1124:	66 83 ec 0c          	sub    $0xc,%esp
    1128:	66 56                	push   %esi
    112a:	66 e8 ec 04 00 00    	calll  161c <strlen>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    u32 i = 0;
                    while (i < str_len){
    1130:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:207
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
    1134:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                    while (i < str_len){
    113a:	eb 15                	jmp    1151 <vprintf+0x150>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:209
                        buf[des_index++] = str[i++];
    113c:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
    1142:	67 88 4c 1c 50       	mov    %cl,0x50(%esp,%ebx,1)
    1147:	67 66 8d 52 01       	lea    0x1(%edx),%edx
    114c:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:208
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
    1151:	66 39 c2             	cmp    %eax,%edx
    1154:	72 e6                	jb     113c <vprintf+0x13b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:211
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
    1156:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
    115a:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:212
                    u32 i = 0;
                    while (i < str_len){
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
    1160:	eb 18                	jmp    117a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:215
                }
                default :
                    src_index++;
    1162:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:216
                    break;
    1166:	eb 12                	jmp    117a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:219
            }
        }
        else if (format[src_index] == '\\') {
    1168:	3c 5c                	cmp    $0x5c,%al
    116a:	74 0e                	je     117a <vprintf+0x179>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:238
                        break;
                }
            }
        }
        else {
            buf[des_index++] = format[src_index++];
    116c:	66 83 c7 01          	add    $0x1,%edi
    1170:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
    1175:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:180
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
    117a:	67 66 0f b6 44 3d 00 	movzbl 0x0(%ebp,%edi,1),%eax
    1181:	84 c0                	test   %al,%al
    1183:	0f 85 a7 fe          	jne    102e <vprintf+0x2d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:241
        }
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    1187:	67 c6 44 1c 50 00    	movb   $0x0,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242
    for (int i = 0; i < des_index; i++){
    118d:	66 be 00 00 00 00    	mov    $0x0,%esi
    1193:	eb 1b                	jmp    11b0 <vprintf+0x1af>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:243 (discriminator 3)
        putc(buf[i]);
    1195:	66 83 ec 0c          	sub    $0xc,%esp
    1199:	67 66 0f be 44 34 5c 	movsbl 0x5c(%esp,%esi,1),%eax
    11a0:	66 50                	push   %eax
    11a2:	66 e8 a3 fa ff ff    	calll  c4b <putc>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 3)
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    for (int i = 0; i < des_index; i++){
    11a8:	66 83 c6 01          	add    $0x1,%esi
    11ac:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:242 (discriminator 1)
    11b0:	66 39 f3             	cmp    %esi,%ebx
    11b3:	7f e0                	jg     1195 <vprintf+0x194>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:246
        putc(buf[i]);
    }
    return ;
}
    11b5:	66 81 c4 5c 04 00 00 	add    $0x45c,%esp
    11bc:	66 5b                	pop    %ebx
    11be:	66 5e                	pop    %esi
    11c0:	66 5f                	pop    %edi
    11c2:	66 5d                	pop    %ebp
    11c4:	66 c3                	retl   

000011c6 <printf>:
printf():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:248

void printf(char * format, ...){
    11c6:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:249
    vprintf(format, &format+1);// 其实这里由于format是个指针，是32位的，所以这里对format的地址+1，也会加4个字节。
    11ca:	67 66 8d 44 24 1c    	lea    0x1c(%esp),%eax
    11d0:	66 50                	push   %eax
    11d2:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    11d8:	66 e8 23 fe ff ff    	calll  1001 <vprintf>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:251
    return ;
}
    11de:	66 83 c4 1c          	add    $0x1c,%esp
    11e2:	66 c3                	retl   

000011e4 <isalpha>:
isalpha():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:270
//     return ;
// }



int isalpha (int ch){
    11e4:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:271
    if ('a' <= ch && ch <= 'z')
    11ea:	67 66 8d 50 9f       	lea    -0x61(%eax),%edx
    11ef:	66 83 fa 19          	cmp    $0x19,%edx
    11f3:	76 12                	jbe    1207 <isalpha+0x23>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:273
        return 1;
    if ('A' <= ch && ch <= 'Z')
    11f5:	66 83 e8 41          	sub    $0x41,%eax
    11f9:	66 83 f8 19          	cmp    $0x19,%eax
    11fd:	77 10                	ja     120f <isalpha+0x2b>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:274
        return 1;
    11ff:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1205:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:272



int isalpha (int ch){
    if ('a' <= ch && ch <= 'z')
        return 1;
    1207:	66 b8 01 00 00 00    	mov    $0x1,%eax
    120d:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:275
    if ('A' <= ch && ch <= 'Z')
        return 1;
    return 0;
    120f:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:276
}
    1215:	66 c3                	retl   

00001217 <isdigit>:
isdigit():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:278
int isdigit (int ch){
    if ('0' <= ch && ch <= '9')
    1217:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
    121d:	66 83 e8 30          	sub    $0x30,%eax
    1221:	66 83 f8 09          	cmp    $0x9,%eax
    1225:	77 08                	ja     122f <isdigit+0x18>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:279
        return 1;
    1227:	66 b8 01 00 00 00    	mov    $0x1,%eax
    122d:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:280
    return 0;
    122f:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:281
}
    1235:	66 c3                	retl   

00001237 <isalnum>:
isalnum():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:283

int isalnum (int ch){
    1237:	66 53                	push   %ebx
    1239:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284
    if ( isalpha(ch) || isdigit(ch) ){
    123f:	66 53                	push   %ebx
    1241:	66 e8 9d ff ff ff    	calll  11e4 <isalpha>
    1247:	66 83 c4 04          	add    $0x4,%esp
    124b:	66 85 c0             	test   %eax,%eax
    124e:	75 13                	jne    1263 <isalnum+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:284 (discriminator 1)
    1250:	66 53                	push   %ebx
    1252:	66 e8 bf ff ff ff    	calll  1217 <isdigit>
    1258:	66 83 c4 04          	add    $0x4,%esp
    125c:	66 85 c0             	test   %eax,%eax
    125f:	75 0a                	jne    126b <isalnum+0x34>
    1261:	eb 0e                	jmp    1271 <isalnum+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:285
        return 1;
    1263:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1269:	eb 06                	jmp    1271 <isalnum+0x3a>
    126b:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:288
    }
    return 0;
}
    1271:	66 5b                	pop    %ebx
    1273:	66 c3                	retl   

00001275 <ispunct>:
ispunct():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:289
int ispunct (int ch){
    1275:	66 83 ec 30          	sub    $0x30,%esp
    1279:	67 66 8b 4c 24 34    	mov    0x34(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:290
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    127f:	67 66 c7 44 24 0e 21 	movl   $0x24232221,0xe(%esp)
    1286:	22 23 24 
    1289:	67 66 c7 44 24 12 25 	movl   $0x28272625,0x12(%esp)
    1290:	26 27 28 
    1293:	67 66 c7 44 24 16 29 	movl   $0x2c2b2a29,0x16(%esp)
    129a:	2a 2b 2c 
    129d:	67 66 c7 44 24 1a 2d 	movl   $0x3a2f2e2d,0x1a(%esp)
    12a4:	2e 2f 3a 
    12a7:	67 66 c7 44 24 1e 3b 	movl   $0x3e3d3c3b,0x1e(%esp)
    12ae:	3c 3d 3e 
    12b1:	67 66 c7 44 24 22 3f 	movl   $0x5c5b403f,0x22(%esp)
    12b8:	40 5b 5c 
    12bb:	67 66 c7 44 24 26 5d 	movl   $0x605f5e5d,0x26(%esp)
    12c2:	5e 5f 60 
    12c5:	67 66 c7 44 24 2a 7b 	movl   $0x7e7d7c7b,0x2a(%esp)
    12cc:	7c 7d 7e 
    12cf:	67 c7 44 24 2e 00 00 	movw   $0x0,0x2e(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291
    for (int i = 0; i < 33; i++){
    12d6:	66 b8 00 00 00 00    	mov    $0x0,%eax
    12dc:	eb 10                	jmp    12ee <ispunct+0x79>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:292
        if (ch == punct[i])
    12de:	67 66 0f be 54 04 0e 	movsbl 0xe(%esp,%eax,1),%edx
    12e5:	66 39 ca             	cmp    %ecx,%edx
    12e8:	74 12                	je     12fc <ispunct+0x87>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 2)
    }
    return 0;
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
    12ea:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:291 (discriminator 1)
    12ee:	66 83 f8 20          	cmp    $0x20,%eax
    12f2:	7e ea                	jle    12de <ispunct+0x69>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:295
        if (ch == punct[i])
            return 1;
    }
    return 0;
    12f4:	66 b8 00 00 00 00    	mov    $0x0,%eax
    12fa:	eb 06                	jmp    1302 <ispunct+0x8d>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:293
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
        if (ch == punct[i])
            return 1;
    12fc:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:296
    }
    return 0;
}
    1302:	66 83 c4 30          	add    $0x30,%esp
    1306:	66 c3                	retl   

00001308 <isblank>:
isblank():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:298
int isblank (int ch){
    if (ch == ' ')
    1308:	67 66 83 7c 24 04 20 	cmpl   $0x20,0x4(%esp)
    130f:	75 08                	jne    1319 <isblank+0x11>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:299
        return 1;
    1311:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1317:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:300
    return 0;
    1319:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:301
}
    131f:	66 c3                	retl   

00001321 <isprint>:
isprint():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:302
int isprint (int ch){
    1321:	66 53                	push   %ebx
    1323:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303
    if (isalpha(ch) || isdigit(ch) || isalnum(ch) || ispunct(ch) || isblank(ch)){
    1329:	66 53                	push   %ebx
    132b:	66 e8 b3 fe ff ff    	calll  11e4 <isalpha>
    1331:	66 83 c4 04          	add    $0x4,%esp
    1335:	66 85 c0             	test   %eax,%eax
    1338:	75 46                	jne    1380 <isprint+0x5f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 1)
    133a:	66 53                	push   %ebx
    133c:	66 e8 d5 fe ff ff    	calll  1217 <isdigit>
    1342:	66 83 c4 04          	add    $0x4,%esp
    1346:	66 85 c0             	test   %eax,%eax
    1349:	75 3d                	jne    1388 <isprint+0x67>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 2)
    134b:	66 53                	push   %ebx
    134d:	66 e8 e4 fe ff ff    	calll  1237 <isalnum>
    1353:	66 83 c4 04          	add    $0x4,%esp
    1357:	66 85 c0             	test   %eax,%eax
    135a:	75 34                	jne    1390 <isprint+0x6f>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 3)
    135c:	66 53                	push   %ebx
    135e:	66 e8 11 ff ff ff    	calll  1275 <ispunct>
    1364:	66 83 c4 04          	add    $0x4,%esp
    1368:	66 85 c0             	test   %eax,%eax
    136b:	75 2b                	jne    1398 <isprint+0x77>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:303 (discriminator 4)
    136d:	66 53                	push   %ebx
    136f:	66 e8 93 ff ff ff    	calll  1308 <isblank>
    1375:	66 83 c4 04          	add    $0x4,%esp
    1379:	66 85 c0             	test   %eax,%eax
    137c:	75 22                	jne    13a0 <isprint+0x7f>
    137e:	eb 26                	jmp    13a6 <isprint+0x85>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:304
        return 1;
    1380:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1386:	eb 1e                	jmp    13a6 <isprint+0x85>
    1388:	66 b8 01 00 00 00    	mov    $0x1,%eax
    138e:	eb 16                	jmp    13a6 <isprint+0x85>
    1390:	66 b8 01 00 00 00    	mov    $0x1,%eax
    1396:	eb 0e                	jmp    13a6 <isprint+0x85>
    1398:	66 b8 01 00 00 00    	mov    $0x1,%eax
    139e:	eb 06                	jmp    13a6 <isprint+0x85>
    13a0:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:307
    }
    return 0;
}
    13a6:	66 5b                	pop    %ebx
    13a8:	66 c3                	retl   

000013aa <iscntrl>:
iscntrl():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:308
int iscntrl (int ch){
    13aa:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:310
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
    13b0:	66 83 f8 1f          	cmp    $0x1f,%eax
    13b4:	76 0e                	jbe    13c4 <iscntrl+0x1a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:312
        return 1;
    if (ch == 0x7f)
    13b6:	66 83 f8 7f          	cmp    $0x7f,%eax
    13ba:	75 10                	jne    13cc <iscntrl+0x22>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:313
        return 1;
    13bc:	66 b8 01 00 00 00    	mov    $0x1,%eax
    13c2:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:311
    return 0;
}
int iscntrl (int ch){
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
        return 1;
    13c4:	66 b8 01 00 00 00    	mov    $0x1,%eax
    13ca:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:314
    if (ch == 0x7f)
        return 1;
    return 0;
    13cc:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:315
}
    13d2:	66 c3                	retl   

000013d4 <read_n_sector>:
read_n_sector():
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:321

/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    13d4:	66 55                	push   %ebp
    13d6:	66 57                	push   %edi
    13d8:	66 56                	push   %esi
    13da:	66 53                	push   %ebx
    13dc:	66 83 ec 1c          	sub    $0x1c,%esp
    13e0:	67 66 0f b7 7c 24 30 	movzwl 0x30(%esp),%edi
    13e7:	67 66 0f b7 74 24 34 	movzwl 0x34(%esp),%esi
    13ee:	67 66 0f b7 44 24 38 	movzwl 0x38(%esp),%eax
    13f5:	67 89 44 24 0c       	mov    %ax,0xc(%esp)
    13fa:	67 66 0f b7 44 24 3c 	movzwl 0x3c(%esp),%eax
    1401:	67 89 44 24 0e       	mov    %ax,0xe(%esp)
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322
    for (int i = 0; i < number; i++){
    1406:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    140c:	eb 7d                	jmp    148b <read_n_sector+0xb7>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:323 (discriminator 3)
        int sector = (sector_code+i) % 18+1;
    140e:	66 0f b7 ef          	movzwl %di,%ebp
    1412:	66 01 dd             	add    %ebx,%ebp
    1415:	66 ba 39 8e e3 38    	mov    $0x38e38e39,%edx
    141b:	66 89 e8             	mov    %ebp,%eax
    141e:	66 f7 ea             	imul   %edx
    1421:	66 c1 fa 02          	sar    $0x2,%edx
    1425:	66 89 e8             	mov    %ebp,%eax
    1428:	66 c1 f8 1f          	sar    $0x1f,%eax
    142c:	66 29 c2             	sub    %eax,%edx
    142f:	66 89 d1             	mov    %edx,%ecx
    1432:	67 66 8d 14 d2       	lea    (%edx,%edx,8),%edx
    1437:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
    143c:	66 89 ea             	mov    %ebp,%edx
    143f:	66 29 c2             	sub    %eax,%edx
    1442:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:325 (discriminator 3)
        int mid = (sector_code+i) / 18;
        int cylinder = mid >> 1;
    1446:	66 89 cd             	mov    %ecx,%ebp
    1449:	66 d1 fd             	sar    %ebp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:327 (discriminator 3)
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    144c:	66 83 ec 0c          	sub    $0xc,%esp
    1450:	66 89 d8             	mov    %ebx,%eax
    1453:	66 c1 e0 09          	shl    $0x9,%eax
    1457:	67 03 44 24 1a       	add    0x1a(%esp),%ax
    145c:	66 0f b7 c0          	movzwl %ax,%eax
    1460:	66 50                	push   %eax
    1462:	67 66 0f b7 44 24 1c 	movzwl 0x1c(%esp),%eax
    1469:	66 50                	push   %eax
    146b:	66 0f b7 d2          	movzwl %dx,%edx
    146f:	66 52                	push   %edx
    1471:	66 0f b7 ed          	movzwl %bp,%ebp
    1475:	66 55                	push   %ebp
    1477:	66 83 e1 01          	and    $0x1,%ecx
    147b:	66 51                	push   %ecx
    147d:	66 e8 29 01 00 00    	calll  15ac <read_sector>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 3)
/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    for (int i = 0; i < number; i++){
    1483:	66 83 c3 01          	add    $0x1,%ebx
    1487:	66 83 c4 20          	add    $0x20,%esp
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:322 (discriminator 1)
    148b:	66 0f b7 c6          	movzwl %si,%eax
    148f:	66 39 c3             	cmp    %eax,%ebx
    1492:	0f 8c 78 ff          	jl     140e <read_n_sector+0x3a>
/mnt/e/code/my_operating_system/os/service/../lib/stdio.c:330
        int cylinder = mid >> 1;
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    }
    return ;
}
    1496:	66 83 c4 1c          	add    $0x1c,%esp
    149a:	66 5b                	pop    %ebx
    149c:	66 5e                	pop    %esi
    149e:	66 5f                	pop    %edi
    14a0:	66 5d                	pop    %ebp
    14a2:	66 c3                	retl   
    14a4:	66 90                	xchg   %eax,%eax
    14a6:	66 90                	xchg   %eax,%eax
    14a8:	66 90                	xchg   %eax,%eax
    14aa:	66 90                	xchg   %eax,%eax
    14ac:	66 90                	xchg   %eax,%eax
    14ae:	66 90                	xchg   %eax,%eax

000014b0 <write_port_byte>:
write_port_byte():
    14b0:	66 55                	push   %ebp
    14b2:	66 89 e5             	mov    %esp,%ebp
    14b5:	53                   	push   %bx
    14b6:	51                   	push   %cx
    14b7:	52                   	push   %dx
    14b8:	56                   	push   %si
    14b9:	57                   	push   %di
    14ba:	55                   	push   %bp
    14bb:	1e                   	push   %ds
    14bc:	06                   	push   %es
    14bd:	16                   	push   %ss
    14be:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    14c2:	67 8a 45 0c          	mov    0xc(%ebp),%al
    14c6:	cd 34                	int    $0x34
    14c8:	17                   	pop    %ss
    14c9:	07                   	pop    %es
    14ca:	1f                   	pop    %ds
    14cb:	5d                   	pop    %bp
    14cc:	5f                   	pop    %di
    14cd:	5e                   	pop    %si
    14ce:	5a                   	pop    %dx
    14cf:	59                   	pop    %cx
    14d0:	5b                   	pop    %bx
    14d1:	66 89 ec             	mov    %ebp,%esp
    14d4:	66 5d                	pop    %ebp
    14d6:	66 c3                	retl   

000014d8 <read_port_byte>:
read_port_byte():
    14d8:	66 55                	push   %ebp
    14da:	66 89 e5             	mov    %esp,%ebp
    14dd:	53                   	push   %bx
    14de:	51                   	push   %cx
    14df:	52                   	push   %dx
    14e0:	56                   	push   %si
    14e1:	57                   	push   %di
    14e2:	55                   	push   %bp
    14e3:	1e                   	push   %ds
    14e4:	06                   	push   %es
    14e5:	16                   	push   %ss
    14e6:	67 8b 45 08          	mov    0x8(%ebp),%ax
    14ea:	cd 33                	int    $0x33
    14ec:	17                   	pop    %ss
    14ed:	07                   	pop    %es
    14ee:	1f                   	pop    %ds
    14ef:	5d                   	pop    %bp
    14f0:	5f                   	pop    %di
    14f1:	5e                   	pop    %si
    14f2:	5a                   	pop    %dx
    14f3:	59                   	pop    %cx
    14f4:	5b                   	pop    %bx
    14f5:	66 89 ec             	mov    %ebp,%esp
    14f8:	66 5d                	pop    %ebp
    14fa:	66 c3                	retl   

000014fc <write_memory_byte>:
write_memory_byte():
    14fc:	66 55                	push   %ebp
    14fe:	66 89 e5             	mov    %esp,%ebp
    1501:	50                   	push   %ax
    1502:	53                   	push   %bx
    1503:	52                   	push   %dx
    1504:	1e                   	push   %ds
    1505:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1509:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    150d:	c1 e0 0c             	shl    $0xc,%ax
    1510:	67 8a 4d 0c          	mov    0xc(%ebp),%cl
    1514:	cd 36                	int    $0x36
    1516:	1f                   	pop    %ds
    1517:	5a                   	pop    %dx
    1518:	5b                   	pop    %bx
    1519:	58                   	pop    %ax
    151a:	66 89 ec             	mov    %ebp,%esp
    151d:	66 5d                	pop    %ebp
    151f:	66 c3                	retl   

00001521 <read_memory_byte>:
read_memory_byte():
    1521:	66 55                	push   %ebp
    1523:	66 89 e5             	mov    %esp,%ebp
    1526:	53                   	push   %bx
    1527:	51                   	push   %cx
    1528:	52                   	push   %dx
    1529:	56                   	push   %si
    152a:	57                   	push   %di
    152b:	55                   	push   %bp
    152c:	1e                   	push   %ds
    152d:	06                   	push   %es
    152e:	16                   	push   %ss
    152f:	67 8b 5d 08          	mov    0x8(%ebp),%bx
    1533:	67 8b 45 0a          	mov    0xa(%ebp),%ax
    1537:	c1 e0 0c             	shl    $0xc,%ax
    153a:	cd 35                	int    $0x35
    153c:	17                   	pop    %ss
    153d:	07                   	pop    %es
    153e:	1f                   	pop    %ds
    153f:	5d                   	pop    %bp
    1540:	5f                   	pop    %di
    1541:	5e                   	pop    %si
    1542:	5a                   	pop    %dx
    1543:	59                   	pop    %cx
    1544:	5b                   	pop    %bx
    1545:	66 89 ec             	mov    %ebp,%esp
    1548:	66 5d                	pop    %ebp
    154a:	66 c3                	retl   

0000154c <check_keyboard>:
check_keyboard():
    154c:	b4 01                	mov    $0x1,%ah
    154e:	cd 16                	int    $0x16
    1550:	74 05                	je     1557 <check_keyboard.have_key>
    1552:	b8 00 00             	mov    $0x0,%ax
    1555:	eb 03                	jmp    155a <check_keyboard.check_keyboard_return>

00001557 <check_keyboard.have_key>:
check_keyboard.have_key():
    1557:	b8 01 00             	mov    $0x1,%ax

0000155a <check_keyboard.check_keyboard_return>:
check_keyboard.check_keyboard_return():
    155a:	66 c3                	retl   

0000155c <get_keyboard>:
get_keyboard():
    155c:	b4 00                	mov    $0x0,%ah
    155e:	cd 16                	int    $0x16
    1560:	66 c3                	retl   

00001562 <clean_screen>:
clean_screen():
    1562:	50                   	push   %ax
    1563:	53                   	push   %bx
    1564:	51                   	push   %cx
    1565:	52                   	push   %dx
    1566:	b4 06                	mov    $0x6,%ah
    1568:	b0 00                	mov    $0x0,%al
    156a:	b5 00                	mov    $0x0,%ch
    156c:	b1 00                	mov    $0x0,%cl
    156e:	b6 17                	mov    $0x17,%dh
    1570:	b2 4f                	mov    $0x4f,%dl
    1572:	b7 1f                	mov    $0x1f,%bh
    1574:	cd 10                	int    $0x10
    1576:	5a                   	pop    %dx
    1577:	59                   	pop    %cx
    1578:	5b                   	pop    %bx
    1579:	58                   	pop    %ax
    157a:	66 c3                	retl   

0000157c <scroll_screen>:
scroll_screen():
    157c:	50                   	push   %ax
    157d:	53                   	push   %bx
    157e:	51                   	push   %cx
    157f:	52                   	push   %dx
    1580:	b4 06                	mov    $0x6,%ah
    1582:	b0 01                	mov    $0x1,%al
    1584:	b5 00                	mov    $0x0,%ch
    1586:	b1 00                	mov    $0x0,%cl
    1588:	b6 17                	mov    $0x17,%dh
    158a:	b2 4f                	mov    $0x4f,%dl
    158c:	b7 10                	mov    $0x10,%bh
    158e:	cd 10                	int    $0x10
    1590:	5a                   	pop    %dx
    1591:	59                   	pop    %cx
    1592:	5b                   	pop    %bx
    1593:	58                   	pop    %ax
    1594:	66 c3                	retl   

00001596 <get_random>:
get_random():
    1596:	53                   	push   %bx
    1597:	b8 00 00             	mov    $0x0,%ax
    159a:	e6 43                	out    %al,$0x43
    159c:	e4 40                	in     $0x40,%al
    159e:	b3 08                	mov    $0x8,%bl
    15a0:	f6 f3                	div    %bl
    15a2:	88 e0                	mov    %ah,%al
    15a4:	b4 00                	mov    $0x0,%ah
    15a6:	83 c0 72             	add    $0x72,%ax
    15a9:	5b                   	pop    %bx
    15aa:	66 c3                	retl   

000015ac <read_sector>:
read_sector():
    15ac:	66 55                	push   %ebp
    15ae:	66 89 e5             	mov    %esp,%ebp
    15b1:	50                   	push   %ax
    15b2:	53                   	push   %bx
    15b3:	51                   	push   %cx
    15b4:	52                   	push   %dx
    15b5:	06                   	push   %es
    15b6:	67 8b 45 14          	mov    0x14(%ebp),%ax
    15ba:	8e c0                	mov    %ax,%es
    15bc:	67 8b 5d 18          	mov    0x18(%ebp),%bx
    15c0:	b4 02                	mov    $0x2,%ah
    15c2:	b0 01                	mov    $0x1,%al
    15c4:	b2 00                	mov    $0x0,%dl
    15c6:	67 8a 75 08          	mov    0x8(%ebp),%dh
    15ca:	67 8a 6d 0c          	mov    0xc(%ebp),%ch
    15ce:	67 8a 4d 10          	mov    0x10(%ebp),%cl
    15d2:	cd 13                	int    $0x13
    15d4:	07                   	pop    %es
    15d5:	5a                   	pop    %dx
    15d6:	59                   	pop    %cx
    15d7:	5b                   	pop    %bx
    15d8:	58                   	pop    %ax
    15d9:	66 89 ec             	mov    %ebp,%esp
    15dc:	66 5d                	pop    %ebp
    15de:	66 c3                	retl   

000015e0 <print_my_name>:
print_my_name():
    15e0:	50                   	push   %ax
    15e1:	53                   	push   %bx
    15e2:	51                   	push   %cx
    15e3:	52                   	push   %dx
    15e4:	1e                   	push   %ds
    15e5:	06                   	push   %es
    15e6:	55                   	push   %bp
    15e7:	b8 00 10             	mov    $0x1000,%ax
    15ea:	8e c0                	mov    %ax,%es
    15ec:	b8 a4 20             	mov    $0x20a4,%ax
    15ef:	89 c5                	mov    %ax,%bp
    15f1:	b4 13                	mov    $0x13,%ah
    15f3:	b0 00                	mov    $0x0,%al
    15f5:	b7 00                	mov    $0x0,%bh
    15f7:	b3 0f                	mov    $0xf,%bl
    15f9:	b9 19 00             	mov    $0x19,%cx
    15fc:	b6 18                	mov    $0x18,%dh
    15fe:	b2 01                	mov    $0x1,%dl
    1600:	cd 10                	int    $0x10
    1602:	5d                   	pop    %bp
    1603:	07                   	pop    %es
    1604:	1f                   	pop    %ds
    1605:	5a                   	pop    %dx
    1606:	59                   	pop    %cx
    1607:	5b                   	pop    %bx
    1608:	58                   	pop    %ax
    1609:	c3                   	ret    

0000160a <reboot>:
reboot():
    160a:	b4 06                	mov    $0x6,%ah
    160c:	b0 00                	mov    $0x0,%al
    160e:	b5 00                	mov    $0x0,%ch
    1610:	b1 00                	mov    $0x0,%cl
    1612:	b6 18                	mov    $0x18,%dh
    1614:	b2 4f                	mov    $0x4f,%dl
    1616:	b7 1f                	mov    $0x1f,%bh
    1618:	cd 10                	int    $0x10
    161a:	cd 19                	int    $0x19

0000161c <strlen>:
strlen():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:3
#include "../include/type.h"

size_t strlen(char * str){
    161c:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:4
    u32 len = 0;
    1622:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
    while (str[len] != 0){
    1628:	eb 04                	jmp    162e <strlen+0x12>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:6
        len++;
    162a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:5
#include "../include/type.h"

size_t strlen(char * str){
    u32 len = 0;
    while (str[len] != 0){
    162e:	67 80 3c 02 00       	cmpb   $0x0,(%edx,%eax,1)
    1633:	75 f5                	jne    162a <strlen+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:9
        len++;
    }
    return len;
}
    1635:	66 f3 c3             	repz retl 

00001638 <strncpy>:
strncpy():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:11

void strncpy(char * dest, char * src, u32 size){
    1638:	66 56                	push   %esi
    163a:	66 53                	push   %ebx
    163c:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    1642:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    1648:	67 66 8b 4c 24 14    	mov    0x14(%esp),%ecx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12
    for (int i = 0; i < size; i++){
    164e:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1654:	eb 0e                	jmp    1664 <strncpy+0x2c>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:13 (discriminator 3)
        dest[i] = src[i];
    1656:	67 66 0f b6 14 06    	movzbl (%esi,%eax,1),%edx
    165c:	67 88 14 03          	mov    %dl,(%ebx,%eax,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 3)
    }
    return len;
}

void strncpy(char * dest, char * src, u32 size){
    for (int i = 0; i < size; i++){
    1660:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:12 (discriminator 1)
    1664:	66 39 c8             	cmp    %ecx,%eax
    1667:	72 ed                	jb     1656 <strncpy+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:15
        dest[i] = src[i];
    }
    dest[size] = '\0';
    1669:	67 c6 04 0b 00       	movb   $0x0,(%ebx,%ecx,1)
/mnt/e/code/my_operating_system/os/service/../lib/string.c:16
}
    166e:	66 5b                	pop    %ebx
    1670:	66 5e                	pop    %esi
    1672:	66 c3                	retl   

00001674 <strcmp>:
strcmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:18

int strcmp(char * lhs, char * rhs){
    1674:	66 57                	push   %edi
    1676:	66 56                	push   %esi
    1678:	66 53                	push   %ebx
    167a:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
    1680:	67 66 8b 7c 24 14    	mov    0x14(%esp),%edi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:19
    int lhs_len = strlen(lhs);
    1686:	66 56                	push   %esi
    1688:	66 e8 8e ff ff ff    	calll  161c <strlen>
    168e:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/service/../lib/string.c:20
    int rhs_len = strlen(rhs);
    1691:	67 66 89 3c 24       	mov    %edi,(%esp)
    1696:	66 e8 80 ff ff ff    	calll  161c <strlen>
    169c:	66 83 c4 04          	add    $0x4,%esp
/mnt/e/code/my_operating_system/os/service/../lib/string.c:21
    if (lhs_len != rhs_len){
    16a0:	66 39 c3             	cmp    %eax,%ebx
    16a3:	75 25                	jne    16ca <strcmp+0x56>
    16a5:	66 b8 00 00 00 00    	mov    $0x0,%eax
    16ab:	eb 10                	jmp    16bd <strcmp+0x49>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:25
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
    16ad:	67 66 0f b6 14 07    	movzbl (%edi,%eax,1),%edx
    16b3:	67 38 14 06          	cmp    %dl,(%esi,%eax,1)
    16b7:	75 19                	jne    16d2 <strcmp+0x5e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 2)
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
    16b9:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:24 (discriminator 1)
    16bd:	66 39 d8             	cmp    %ebx,%eax
    16c0:	7c eb                	jl     16ad <strcmp+0x39>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:28
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    16c2:	66 b8 00 00 00 00    	mov    $0x0,%eax
    16c8:	eb 0e                	jmp    16d8 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:22

int strcmp(char * lhs, char * rhs){
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    16ca:	66 b8 01 00 00 00    	mov    $0x1,%eax
    16d0:	eb 06                	jmp    16d8 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:26
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
            return 1;
    16d2:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:29
    }
    return 0;
}
    16d8:	66 5b                	pop    %ebx
    16da:	66 5e                	pop    %esi
    16dc:	66 5f                	pop    %edi
    16de:	66 c3                	retl   

000016e0 <strncmp>:
strncmp():
/mnt/e/code/my_operating_system/os/service/../lib/string.c:31

int strncmp(char * lhs, char * rhs, int size){
    16e0:	66 56                	push   %esi
    16e2:	66 53                	push   %ebx
    16e4:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
    16ea:	67 66 8b 4c 24 10    	mov    0x10(%esp),%ecx
    16f0:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32
    for (int i = 0; i < size; i++){
    16f6:	66 b8 00 00 00 00    	mov    $0x0,%eax
    16fc:	eb 10                	jmp    170e <strncmp+0x2e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:33
        if (lhs[i] != rhs[i])
    16fe:	67 66 0f b6 14 01    	movzbl (%ecx,%eax,1),%edx
    1704:	67 38 14 03          	cmp    %dl,(%ebx,%eax,1)
    1708:	75 11                	jne    171b <strncmp+0x3b>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 2)
    }
    return 0;
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
    170a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:32 (discriminator 1)
    170e:	66 39 f0             	cmp    %esi,%eax
    1711:	7c eb                	jl     16fe <strncmp+0x1e>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:36
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
    1713:	66 b8 00 00 00 00    	mov    $0x0,%eax
    1719:	eb 06                	jmp    1721 <strncmp+0x41>
/mnt/e/code/my_operating_system/os/service/../lib/string.c:34
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
        if (lhs[i] != rhs[i])
            return 1;
    171b:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/string.c:37
    }
    return 0;
    1721:	66 5b                	pop    %ebx
    1723:	66 5e                	pop    %esi
    1725:	66 c3                	retl   

00001727 <move_name>:
move_name():
/mnt/e/code/my_operating_system/os/service/../lib/style.c:9

void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    1727:	66 0f b7 0e 9e 0f    	movzwl 0xf9e,%ecx
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10
    for (int i =78; i >= 0; i--){
    172d:	66 b8 4e 00 00 00    	mov    $0x4e,%eax
    1733:	eb 16                	jmp    174b <move_name+0x24>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:11 (discriminator 3)
        text_line[i+1] = text_line[i];
    1735:	67 66 0f b7 94 00 00 	movzwl 0xf00(%eax,%eax,1),%edx
    173c:	0f 00 00 
    173f:	67 89 94 00 02 0f 00 	mov    %dx,0xf02(%eax,%eax,1)
    1746:	00 
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 3)
void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    for (int i =78; i >= 0; i--){
    1747:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/service/../lib/style.c:10 (discriminator 1)
    174b:	66 85 c0             	test   %eax,%eax
    174e:	79 e5                	jns    1735 <move_name+0xe>
/mnt/e/code/my_operating_system/os/service/../lib/style.c:13
        text_line[i+1] = text_line[i];
    }
    text_line[0] = last_char;
    1750:	89 0e 00 0f          	mov    %cx,0xf00
    1754:	66 c3                	retl   
