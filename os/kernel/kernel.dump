
kernel.debug:     file format elf32-i386


Disassembly of section .text:

00000000 <_start>:
_start():
       0:	e8 74 00             	call   77 <install_int8>
       3:	e8 c7 00             	call   cd <install_int33>
       6:	e8 fd 00             	call   106 <install_int34>
       9:	e8 37 01             	call   143 <install_int35>
       c:	e8 6f 01             	call   17e <install_int36>
       f:	e8 14 00             	call   26 <install_int40>
      12:	66 e8 ea 0d 00 00    	calll  e02 <cstart>

00000018 <start_tty>:
start_tty():
      18:	b4 02                	mov    $0x2,%ah
      1a:	cd 40                	int    $0x40
      1c:	66 e8 51 11 00 00    	calll  1173 <tty>
      22:	eb fe                	jmp    22 <start_tty+0xa>
      24:	eb fe                	jmp    24 <start_tty+0xc>

00000026 <install_int40>:
install_int40():
      26:	53                   	push   %bx
      27:	51                   	push   %cx
      28:	52                   	push   %dx
      29:	56                   	push   %si
      2a:	57                   	push   %di
      2b:	55                   	push   %bp
      2c:	1e                   	push   %ds
      2d:	06                   	push   %es
      2e:	16                   	push   %ss
      2f:	b8 00 00             	mov    $0x0,%ax
      32:	8e d8                	mov    %ax,%ds
      34:	8c c8                	mov    %cs,%ax
      36:	c7 06 00 01 49 00    	movw   $0x49,0x100
      3c:	a3 02 01             	mov    %ax,0x102
      3f:	17                   	pop    %ss
      40:	07                   	pop    %es
      41:	1f                   	pop    %ds
      42:	5d                   	pop    %bp
      43:	5f                   	pop    %di
      44:	5e                   	pop    %si
      45:	5a                   	pop    %dx
      46:	59                   	pop    %cx
      47:	5b                   	pop    %bx
      48:	c3                   	ret    

00000049 <new_int40>:
new_int40():
      49:	80 fc 4c             	cmp    $0x4c,%ah
      4c:	74 11                	je     5f <new_int40.return_kernel>
      4e:	88 e3                	mov    %ah,%bl
      50:	31 c0                	xor    %ax,%ax
      52:	b0 02                	mov    $0x2,%al
      54:	f6 e3                	mul    %bl
      56:	89 c6                	mov    %ax,%si
      58:	bb 40 2c             	mov    $0x2c40,%bx
      5b:	66 ff 10             	calll  *(%bx,%si)
      5e:	cf                   	iret   

0000005f <new_int40.return_kernel>:
new_int40.return_kernel():
      5f:	59                   	pop    %cx
      60:	59                   	pop    %cx
      61:	59                   	pop    %cx
      62:	b8 00 10             	mov    $0x1000,%ax
      65:	8e d8                	mov    %ax,%ds
      67:	8e c0                	mov    %ax,%es
      69:	8e d0                	mov    %ax,%ss
      6b:	bc 00 50             	mov    $0x5000,%sp
      6e:	51                   	push   %cx
      6f:	68 00 10             	push   $0x1000
      72:	68 18 00             	push   $0x18
      75:	fb                   	sti    
      76:	cf                   	iret   

00000077 <install_int8>:
install_int8():
      77:	53                   	push   %bx
      78:	51                   	push   %cx
      79:	52                   	push   %dx
      7a:	56                   	push   %si
      7b:	57                   	push   %di
      7c:	55                   	push   %bp
      7d:	1e                   	push   %ds
      7e:	06                   	push   %es
      7f:	16                   	push   %ss
      80:	b0 34                	mov    $0x34,%al
      82:	e6 43                	out    %al,$0x43
      84:	b8 ff ff             	mov    $0xffff,%ax
      87:	e6 40                	out    %al,$0x40
      89:	88 e0                	mov    %ah,%al
      8b:	e6 40                	out    %al,$0x40
      8d:	b8 00 00             	mov    $0x0,%ax
      90:	8e d8                	mov    %ax,%ds
      92:	8c c8                	mov    %cs,%ax
      94:	a3 22 00             	mov    %ax,0x22
      97:	c7 06 20 00 a7 00    	movw   $0xa7,0x20
      9d:	17                   	pop    %ss
      9e:	07                   	pop    %es
      9f:	1f                   	pop    %ds
      a0:	5d                   	pop    %bp
      a1:	5f                   	pop    %di
      a2:	5e                   	pop    %si
      a3:	5a                   	pop    %dx
      a4:	59                   	pop    %cx
      a5:	5b                   	pop    %bx
      a6:	c3                   	ret    

000000a7 <new_int8>:
new_int8():
      a7:	50                   	push   %ax
      a8:	53                   	push   %bx
      a9:	51                   	push   %cx
      aa:	52                   	push   %dx
      ab:	56                   	push   %si
      ac:	57                   	push   %di
      ad:	55                   	push   %bp
      ae:	1e                   	push   %ds
      af:	06                   	push   %es
      b0:	16                   	push   %ss
      b1:	b8 00 b8             	mov    $0xb800,%ax
      b4:	8e d8                	mov    %ax,%ds
      b6:	66 e8 cc 15 00 00    	calll  1688 <move_name>
      bc:	b0 20                	mov    $0x20,%al
      be:	e6 20                	out    %al,$0x20
      c0:	e6 a0                	out    %al,$0xa0
      c2:	17                   	pop    %ss
      c3:	07                   	pop    %es
      c4:	1f                   	pop    %ds
      c5:	5d                   	pop    %bp
      c6:	5f                   	pop    %di
      c7:	5e                   	pop    %si
      c8:	5a                   	pop    %dx
      c9:	59                   	pop    %cx
      ca:	5b                   	pop    %bx
      cb:	58                   	pop    %ax
      cc:	cf                   	iret   

000000cd <install_int33>:
install_int33():
      cd:	53                   	push   %bx
      ce:	51                   	push   %cx
      cf:	52                   	push   %dx
      d0:	56                   	push   %si
      d1:	57                   	push   %di
      d2:	55                   	push   %bp
      d3:	1e                   	push   %ds
      d4:	06                   	push   %es
      d5:	16                   	push   %ss
      d6:	b8 00 00             	mov    $0x0,%ax
      d9:	8e d8                	mov    %ax,%ds
      db:	8c c8                	mov    %cs,%ax
      dd:	c7 06 cc 00 f0 00    	movw   $0xf0,0xcc
      e3:	a3 ce 00             	mov    %ax,0xce
      e6:	17                   	pop    %ss
      e7:	07                   	pop    %es
      e8:	1f                   	pop    %ds
      e9:	5d                   	pop    %bp
      ea:	5f                   	pop    %di
      eb:	5e                   	pop    %si
      ec:	5a                   	pop    %dx
      ed:	59                   	pop    %cx
      ee:	5b                   	pop    %bx
      ef:	c3                   	ret    

000000f0 <new_int33>:
new_int33():
      f0:	53                   	push   %bx
      f1:	51                   	push   %cx
      f2:	52                   	push   %dx
      f3:	56                   	push   %si
      f4:	57                   	push   %di
      f5:	55                   	push   %bp
      f6:	1e                   	push   %ds
      f7:	06                   	push   %es
      f8:	16                   	push   %ss
      f9:	89 c2                	mov    %ax,%dx
      fb:	ec                   	in     (%dx),%al
      fc:	17                   	pop    %ss
      fd:	07                   	pop    %es
      fe:	1f                   	pop    %ds
      ff:	5d                   	pop    %bp
     100:	5f                   	pop    %di
     101:	5e                   	pop    %si
     102:	5a                   	pop    %dx
     103:	59                   	pop    %cx
     104:	5b                   	pop    %bx
     105:	cf                   	iret   

00000106 <install_int34>:
install_int34():
     106:	53                   	push   %bx
     107:	51                   	push   %cx
     108:	52                   	push   %dx
     109:	56                   	push   %si
     10a:	57                   	push   %di
     10b:	55                   	push   %bp
     10c:	1e                   	push   %ds
     10d:	06                   	push   %es
     10e:	16                   	push   %ss
     10f:	b8 00 00             	mov    $0x0,%ax
     112:	8e d8                	mov    %ax,%ds
     114:	8c c8                	mov    %cs,%ax
     116:	c7 06 d0 00 29 01    	movw   $0x129,0xd0
     11c:	a3 d2 00             	mov    %ax,0xd2
     11f:	17                   	pop    %ss
     120:	07                   	pop    %es
     121:	1f                   	pop    %ds
     122:	5d                   	pop    %bp
     123:	5f                   	pop    %di
     124:	5e                   	pop    %si
     125:	5a                   	pop    %dx
     126:	59                   	pop    %cx
     127:	5b                   	pop    %bx
     128:	c3                   	ret    

00000129 <new_int34>:
new_int34():
     129:	50                   	push   %ax
     12a:	53                   	push   %bx
     12b:	51                   	push   %cx
     12c:	52                   	push   %dx
     12d:	56                   	push   %si
     12e:	57                   	push   %di
     12f:	55                   	push   %bp
     130:	1e                   	push   %ds
     131:	06                   	push   %es
     132:	16                   	push   %ss
     133:	89 da                	mov    %bx,%dx
     135:	88 c0                	mov    %al,%al
     137:	ee                   	out    %al,(%dx)
     138:	17                   	pop    %ss
     139:	07                   	pop    %es
     13a:	1f                   	pop    %ds
     13b:	5d                   	pop    %bp
     13c:	5f                   	pop    %di
     13d:	5e                   	pop    %si
     13e:	5a                   	pop    %dx
     13f:	59                   	pop    %cx
     140:	5b                   	pop    %bx
     141:	58                   	pop    %ax
     142:	cf                   	iret   

00000143 <install_int35>:
install_int35():
     143:	53                   	push   %bx
     144:	51                   	push   %cx
     145:	52                   	push   %dx
     146:	56                   	push   %si
     147:	57                   	push   %di
     148:	55                   	push   %bp
     149:	1e                   	push   %ds
     14a:	06                   	push   %es
     14b:	16                   	push   %ss
     14c:	b8 00 00             	mov    $0x0,%ax
     14f:	8e d8                	mov    %ax,%ds
     151:	8c c8                	mov    %cs,%ax
     153:	c7 06 d4 00 66 01    	movw   $0x166,0xd4
     159:	a3 d6 00             	mov    %ax,0xd6
     15c:	17                   	pop    %ss
     15d:	07                   	pop    %es
     15e:	1f                   	pop    %ds
     15f:	5d                   	pop    %bp
     160:	5f                   	pop    %di
     161:	5e                   	pop    %si
     162:	5a                   	pop    %dx
     163:	59                   	pop    %cx
     164:	5b                   	pop    %bx
     165:	c3                   	ret    

00000166 <new_int35>:
new_int35():
     166:	53                   	push   %bx
     167:	51                   	push   %cx
     168:	52                   	push   %dx
     169:	56                   	push   %si
     16a:	57                   	push   %di
     16b:	55                   	push   %bp
     16c:	1e                   	push   %ds
     16d:	06                   	push   %es
     16e:	16                   	push   %ss
     16f:	8e c0                	mov    %ax,%es
     171:	26 8a 07             	mov    %es:(%bx),%al
     174:	17                   	pop    %ss
     175:	07                   	pop    %es
     176:	1f                   	pop    %ds
     177:	5d                   	pop    %bp
     178:	5f                   	pop    %di
     179:	5e                   	pop    %si
     17a:	5a                   	pop    %dx
     17b:	59                   	pop    %cx
     17c:	5b                   	pop    %bx
     17d:	cf                   	iret   

0000017e <install_int36>:
install_int36():
     17e:	53                   	push   %bx
     17f:	51                   	push   %cx
     180:	52                   	push   %dx
     181:	56                   	push   %si
     182:	57                   	push   %di
     183:	55                   	push   %bp
     184:	1e                   	push   %ds
     185:	06                   	push   %es
     186:	16                   	push   %ss
     187:	b8 00 00             	mov    $0x0,%ax
     18a:	8e d8                	mov    %ax,%ds
     18c:	8c c8                	mov    %cs,%ax
     18e:	c7 06 d8 00 a1 01    	movw   $0x1a1,0xd8
     194:	a3 da 00             	mov    %ax,0xda
     197:	17                   	pop    %ss
     198:	07                   	pop    %es
     199:	1f                   	pop    %ds
     19a:	5d                   	pop    %bp
     19b:	5f                   	pop    %di
     19c:	5e                   	pop    %si
     19d:	5a                   	pop    %dx
     19e:	59                   	pop    %cx
     19f:	5b                   	pop    %bx
     1a0:	c3                   	ret    

000001a1 <new_int36>:
new_int36():
     1a1:	50                   	push   %ax
     1a2:	53                   	push   %bx
     1a3:	51                   	push   %cx
     1a4:	52                   	push   %dx
     1a5:	56                   	push   %si
     1a6:	57                   	push   %di
     1a7:	55                   	push   %bp
     1a8:	1e                   	push   %ds
     1a9:	06                   	push   %es
     1aa:	16                   	push   %ss
     1ab:	8e c0                	mov    %ax,%es
     1ad:	26 88 0f             	mov    %cl,%es:(%bx)
     1b0:	17                   	pop    %ss
     1b1:	07                   	pop    %es
     1b2:	1f                   	pop    %ds
     1b3:	5d                   	pop    %bp
     1b4:	5f                   	pop    %di
     1b5:	5e                   	pop    %si
     1b6:	5a                   	pop    %dx
     1b7:	59                   	pop    %cx
     1b8:	5b                   	pop    %bx
     1b9:	58                   	pop    %ax
     1ba:	cf                   	iret   

000001bb <_put_char>:
_put_char():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:5
#include "../include/basic.h"
#include "../include/type.h"
#include "../include/string.h"

void _put_char(char c, u16 cursor_index){
     1bb:	66 53                	push   %ebx
     1bd:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:7
    int _address = 0xb8000;
    int _offset = cursor_index * 2;
     1c1:	67 66 0f b7 5c 24 1c 	movzwl 0x1c(%esp),%ebx
     1c8:	66 01 db             	add    %ebx,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:8
    write_memory_byte(_address+_offset, c);
     1cb:	67 66 8d 83 00 80 0b 	lea    0xb8000(%ebx),%eax
     1d2:	00 
     1d3:	67 66 0f b6 54 24 18 	movzbl 0x18(%esp),%edx
     1da:	66 52                	push   %edx
     1dc:	66 50                	push   %eax
     1de:	66 e8 98 09 00 00    	calll  b7c <write_memory_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:9
    write_memory_byte(_address+_offset+1, 0x1f);
     1e4:	66 81 c3 01 80 0b 00 	add    $0xb8001,%ebx
     1eb:	66 83 c4 08          	add    $0x8,%esp
     1ef:	66 6a 1f             	pushl  $0x1f
     1f2:	66 53                	push   %ebx
     1f4:	66 e8 82 09 00 00    	calll  b7c <write_memory_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:11
    return ;
}
     1fa:	66 83 c4 18          	add    $0x18,%esp
     1fe:	66 5b                	pop    %ebx
     200:	66 c3                	retl   

00000202 <set_cursor>:
set_cursor():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:13

void set_cursor(u16 cursor_index){
     202:	66 56                	push   %esi
     204:	66 53                	push   %ebx
     206:	66 83 ec 0c          	sub    $0xc,%esp
     20a:	67 66 8b 5c 24 18    	mov    0x18(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:16
    // short cursor_index = 80 * row + column;     // 计算光标寄存器的值
    u8 low_eight = cursor_index; // 取低八位，高位被截断
    u8 high_eight = cursor_index >> 8; // 取高八位
     210:	66 89 d8             	mov    %ebx,%eax
     213:	c1 e8 08             	shr    $0x8,%ax
     216:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:17
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     219:	66 6a 0e             	pushl  $0xe
     21c:	66 68 d4 03 00 00    	pushl  $0x3d4
     222:	66 e8 08 09 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:18
    write_port_byte(0x3d5, high_eight);// 将光标索引高八位写入端口
     228:	66 83 c4 08          	add    $0x8,%esp
     22c:	66 89 f0             	mov    %esi,%eax
     22f:	66 0f b6 f0          	movzbl %al,%esi
     233:	66 56                	push   %esi
     235:	66 68 d5 03 00 00    	pushl  $0x3d5
     23b:	66 e8 ef 08 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:19
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     241:	66 83 c4 08          	add    $0x8,%esp
     245:	66 6a 0f             	pushl  $0xf
     248:	66 68 d4 03 00 00    	pushl  $0x3d4
     24e:	66 e8 dc 08 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:20
    write_port_byte(0x3d5, low_eight);// 将光标索引低八位写入端口
     254:	66 83 c4 08          	add    $0x8,%esp
     258:	66 0f b6 db          	movzbl %bl,%ebx
     25c:	66 53                	push   %ebx
     25e:	66 68 d5 03 00 00    	pushl  $0x3d5
     264:	66 e8 c6 08 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:22
    return ;
}
     26a:	66 83 c4 14          	add    $0x14,%esp
     26e:	66 5b                	pop    %ebx
     270:	66 5e                	pop    %esi
     272:	66 c3                	retl   

00000274 <get_cursor>:
get_cursor():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:24

u16 get_cursor(){
     274:	66 53                	push   %ebx
     276:	66 83 ec 10          	sub    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:27
    u8 low_eight = 0, high_eight = 0;
    u16 cursor_index = 0;
    write_port_byte(0x3d4,0x0e);// 指定索引寄存器为光标寄存器的高八位
     27a:	66 6a 0e             	pushl  $0xe
     27d:	66 68 d4 03 00 00    	pushl  $0x3d4
     283:	66 e8 a7 08 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:28
    high_eight = read_port_byte(0x3d5);// 将光标索引高八位写入端口
     289:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     290:	00 00 
     292:	66 e8 c0 08 00 00    	calll  b58 <read_port_byte>
     298:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:29
    write_port_byte(0x3d4,0x0f);// 指定索引寄存器为光标寄存器的低八位
     29b:	66 83 c4 08          	add    $0x8,%esp
     29f:	66 6a 0f             	pushl  $0xf
     2a2:	66 68 d4 03 00 00    	pushl  $0x3d4
     2a8:	66 e8 82 08 00 00    	calll  b30 <write_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:30
    low_eight = read_port_byte(0x3d5);// 将光标索引低八位写入端口
     2ae:	67 66 c7 04 24 d5 03 	movl   $0x3d5,(%esp)
     2b5:	00 00 
     2b7:	66 e8 9b 08 00 00    	calll  b58 <read_port_byte>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:32
    cursor_index = high_eight;
    cursor_index = (cursor_index << 8) + low_eight;
     2bd:	66 c1 e3 08          	shl    $0x8,%ebx
     2c1:	66 0f b6 c0          	movzbl %al,%eax
     2c5:	66 01 d8             	add    %ebx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:34
    return cursor_index;
}
     2c8:	66 83 c4 18          	add    $0x18,%esp
     2cc:	66 5b                	pop    %ebx
     2ce:	66 c3                	retl   

000002d0 <putc>:
putc():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:36

void putc(char c){
     2d0:	66 57                	push   %edi
     2d2:	66 56                	push   %esi
     2d4:	66 53                	push   %ebx
     2d6:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:37
    u16 cursor_index = get_cursor();
     2dc:	66 e8 92 ff ff ff    	calll  274 <get_cursor>
     2e2:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:38
    u16 row = cursor_index / 80;
     2e5:	66 0f b7 d8          	movzwl %ax,%ebx
     2e9:	66 69 db cd cc 00 00 	imul   $0xcccd,%ebx,%ebx
     2f0:	66 c1 eb 10          	shr    $0x10,%ebx
     2f4:	c1 eb 06             	shr    $0x6,%bx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:40
    u16 col = cursor_index % 80;
    if (cursor_index >= 1920){
     2f7:	3d 7f 07             	cmp    $0x77f,%ax
     2fa:	76 0c                	jbe    308 <putc+0x38>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:41
        scroll_screen();
     2fc:	66 e8 fa 08 00 00    	calll  bfc <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:42
        cursor_index = 1840;
     302:	66 be 30 07 00 00    	mov    $0x730,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:44
    }
    switch (c) {
     308:	66 89 f8             	mov    %edi,%eax
     30b:	3c 0a                	cmp    $0xa,%al
     30d:	74 06                	je     315 <putc+0x45>
     30f:	3c 0d                	cmp    $0xd,%al
     311:	74 25                	je     338 <putc+0x68>
     313:	eb 45                	jmp    35a <putc+0x8a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:46
        case '\n':
            set_cursor((row+1)*80); // 回车，移到下一行
     315:	66 83 ec 0c          	sub    $0xc,%esp
     319:	67 66 8d 5c 9b 05    	lea    0x5(%ebx,%ebx,4),%ebx
     31f:	66 89 d8             	mov    %ebx,%eax
     322:	66 c1 e0 04          	shl    $0x4,%eax
     326:	66 0f b7 c0          	movzwl %ax,%eax
     32a:	66 50                	push   %eax
     32c:	66 e8 d0 fe ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:47
            break;
     332:	66 83 c4 10          	add    $0x10,%esp
     336:	eb 52                	jmp    38a <putc+0xba>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:49
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     338:	66 83 ec 0c          	sub    $0xc,%esp
     33c:	67 66 8d 1c 9b       	lea    (%ebx,%ebx,4),%ebx
     341:	66 89 d8             	mov    %ebx,%eax
     344:	66 c1 e0 04          	shl    $0x4,%eax
     348:	66 0f b7 c0          	movzwl %ax,%eax
     34c:	66 50                	push   %eax
     34e:	66 e8 ae fe ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:50
            break;
     354:	66 83 c4 10          	add    $0x10,%esp
     358:	eb 30                	jmp    38a <putc+0xba>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:52
        default:
            _put_char(c, cursor_index);
     35a:	66 83 ec 08          	sub    $0x8,%esp
     35e:	66 0f b7 c6          	movzwl %si,%eax
     362:	66 50                	push   %eax
     364:	66 89 f8             	mov    %edi,%eax
     367:	66 0f be f8          	movsbl %al,%edi
     36b:	66 57                	push   %edi
     36d:	66 e8 48 fe ff ff    	calll  1bb <_put_char>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:53
            set_cursor(cursor_index+1);
     373:	66 83 c6 01          	add    $0x1,%esi
     377:	66 0f b7 f6          	movzwl %si,%esi
     37b:	67 66 89 34 24       	mov    %esi,(%esp)
     380:	66 e8 7c fe ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:54
            break;
     386:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:57
    }
    return ;
}
     38a:	66 5b                	pop    %ebx
     38c:	66 5e                	pop    %esi
     38e:	66 5f                	pop    %edi
     390:	66 c3                	retl   

00000392 <_putc>:
_putc():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:59

void _putc(char c){
     392:	66 56                	push   %esi
     394:	66 53                	push   %ebx
     396:	66 83 ec 04          	sub    $0x4,%esp
     39a:	67 66 8b 5c 24 10    	mov    0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:60
    u16 cursor_index = get_cursor();
     3a0:	66 e8 ce fe ff ff    	calll  274 <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:61
    u16 row = cursor_index / 80;
     3a6:	66 0f b7 d0          	movzwl %ax,%edx
     3aa:	66 69 d2 cd cc 00 00 	imul   $0xcccd,%edx,%edx
     3b1:	66 c1 ea 10          	shr    $0x10,%edx
     3b5:	c1 ea 06             	shr    $0x6,%dx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:62
    u16 col = cursor_index % 80;
     3b8:	67 66 8d 34 92       	lea    (%edx,%edx,4),%esi
     3bd:	66 c1 e6 04          	shl    $0x4,%esi
     3c1:	66 89 f1             	mov    %esi,%ecx
     3c4:	66 89 c6             	mov    %eax,%esi
     3c7:	66 29 ce             	sub    %ecx,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:63
    switch (c) {
     3ca:	80 fb 0a             	cmp    $0xa,%bl
     3cd:	74 07                	je     3d6 <_putc+0x44>
     3cf:	80 fb 0d             	cmp    $0xd,%bl
     3d2:	74 2b                	je     3ff <_putc+0x6d>
     3d4:	eb 4b                	jmp    421 <_putc+0x8f>
     3d6:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:65
        case '\n':
            set_cursor((row+1)*80+col); // 回车，移到下一行
     3d9:	66 83 ec 0c          	sub    $0xc,%esp
     3dd:	67 66 8d 54 92 05    	lea    0x5(%edx,%edx,4),%edx
     3e3:	66 89 d0             	mov    %edx,%eax
     3e6:	66 c1 e0 04          	shl    $0x4,%eax
     3ea:	66 01 c1             	add    %eax,%ecx
     3ed:	66 0f b7 c9          	movzwl %cx,%ecx
     3f1:	66 51                	push   %ecx
     3f3:	66 e8 09 fe ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:66
            break;
     3f9:	66 83 c4 10          	add    $0x10,%esp
     3fd:	eb 3c                	jmp    43b <_putc+0xa9>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:68
        case '\r':
            set_cursor(row*80);    // 移到本行开头处
     3ff:	66 83 ec 0c          	sub    $0xc,%esp
     403:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     408:	66 89 d0             	mov    %edx,%eax
     40b:	66 c1 e0 04          	shl    $0x4,%eax
     40f:	66 0f b7 c0          	movzwl %ax,%eax
     413:	66 50                	push   %eax
     415:	66 e8 e7 fd ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:69
            break;
     41b:	66 83 c4 10          	add    $0x10,%esp
     41f:	eb 1a                	jmp    43b <_putc+0xa9>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:71
        default:
            _put_char(c, cursor_index);
     421:	66 83 ec 08          	sub    $0x8,%esp
     425:	66 0f b7 c0          	movzwl %ax,%eax
     429:	66 50                	push   %eax
     42b:	66 0f be db          	movsbl %bl,%ebx
     42f:	66 53                	push   %ebx
     431:	66 e8 84 fd ff ff    	calll  1bb <_put_char>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:73
            // set_cursor(cursor_index+1);
            break;
     437:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:76
    }
    return ;
}
     43b:	66 83 c4 04          	add    $0x4,%esp
     43f:	66 5b                	pop    %ebx
     441:	66 5e                	pop    %esi
     443:	66 c3                	retl   

00000445 <puti>:
puti():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:78

void puti(u32 n){
     445:	66 56                	push   %esi
     447:	66 53                	push   %ebx
     449:	66 83 ec 44          	sub    $0x44,%esp
     44d:	67 66 8b 4c 24 50    	mov    0x50(%esp),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:79
    int len = 0;
     453:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:81
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     459:	eb 2d                	jmp    488 <puti+0x43>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:82
        num[len] = n % 10;
     45b:	66 ba cd cc cc cc    	mov    $0xcccccccd,%edx
     461:	66 89 c8             	mov    %ecx,%eax
     464:	66 f7 e2             	mul    %edx
     467:	66 c1 ea 03          	shr    $0x3,%edx
     46b:	66 89 d6             	mov    %edx,%esi
     46e:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     473:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     478:	66 29 c1             	sub    %eax,%ecx
     47b:	67 66 89 4c 9c 04    	mov    %ecx,0x4(%esp,%ebx,4)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:83
        n = n / 10;
     481:	66 89 f1             	mov    %esi,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:84
        len++;
     484:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:81
}

void puti(u32 n){
    int len = 0;
    int num[INT_LENGTH];  // 临时存放各位数，从低位放到高位，之后倒序输出即可
    while (n != 0){
     488:	66 85 c9             	test   %ecx,%ecx
     48b:	75 ce                	jne    45b <puti+0x16>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:86
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     48d:	66 83 eb 01          	sub    $0x1,%ebx
     491:	eb 23                	jmp    4b6 <puti+0x71>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:87 (discriminator 3)
        putc(num[i]+'0');
     493:	66 83 ec 0c          	sub    $0xc,%esp
     497:	67 66 0f b6 44 9c 10 	movzbl 0x10(%esp,%ebx,4),%eax
     49e:	66 83 c0 30          	add    $0x30,%eax
     4a2:	66 0f be c0          	movsbl %al,%eax
     4a6:	66 50                	push   %eax
     4a8:	66 e8 22 fe ff ff    	calll  2d0 <putc>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:86 (discriminator 3)
    while (n != 0){
        num[len] = n % 10;
        n = n / 10;
        len++;
    }
    for (int i = len-1; i >= 0; i--){
     4ae:	66 83 eb 01          	sub    $0x1,%ebx
     4b2:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:86 (discriminator 1)
     4b6:	66 85 db             	test   %ebx,%ebx
     4b9:	79 d8                	jns    493 <puti+0x4e>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:90
        putc(num[i]+'0');
    }
    return ;
}
     4bb:	66 83 c4 44          	add    $0x44,%esp
     4bf:	66 5b                	pop    %ebx
     4c1:	66 5e                	pop    %esi
     4c3:	66 c3                	retl   

000004c5 <puts>:
puts():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:92

void puts(char * str, int size){
     4c5:	66 57                	push   %edi
     4c7:	66 56                	push   %esi
     4c9:	66 53                	push   %ebx
     4cb:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
     4d1:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:93
    int i = 0;
     4d7:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:94
    while (i < size){
     4dd:	eb 1a                	jmp    4f9 <puts+0x34>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:95
        putc(str[i]);
     4df:	66 83 ec 0c          	sub    $0xc,%esp
     4e3:	67 66 0f be 04 1f    	movsbl (%edi,%ebx,1),%eax
     4e9:	66 50                	push   %eax
     4eb:	66 e8 df fd ff ff    	calll  2d0 <putc>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:96
        i++;
     4f1:	66 83 c3 01          	add    $0x1,%ebx
     4f5:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:94
    return ;
}

void puts(char * str, int size){
    int i = 0;
    while (i < size){
     4f9:	66 39 f3             	cmp    %esi,%ebx
     4fc:	7c e1                	jl     4df <puts+0x1a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:99
        putc(str[i]);
        i++;
    }
    return ;
}
     4fe:	66 5b                	pop    %ebx
     500:	66 5e                	pop    %esi
     502:	66 5f                	pop    %edi
     504:	66 c3                	retl   

00000506 <sprintf>:
sprintf():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:103



void sprintf(char * dest , char * format, ...){
     506:	66 55                	push   %ebp
     508:	66 57                	push   %edi
     50a:	66 56                	push   %esi
     50c:	66 53                	push   %ebx
     50e:	66 83 ec 5c          	sub    $0x5c,%esp
     512:	67 66 8b 6c 24 70    	mov    0x70(%esp),%ebp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:106
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     518:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:105



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     51e:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:104
}



void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
     524:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:108
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     52a:	e9 33 01             	jmp    660 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:109
        if (format[src_index] == '%'){
     52d:	3c 25                	cmp    $0x25,%al
     52f:	0f 85 1b 01          	jne    64e <sprintf+0x148>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:111
            src_index++;
            switch(format[src_index]){
     533:	67 66 0f b6 44 39 01 	movzbl 0x1(%ecx,%edi,1),%eax
     53a:	3c 64                	cmp    $0x64,%al
     53c:	74 28                	je     566 <sprintf+0x60>
     53e:	3c 73                	cmp    $0x73,%al
     540:	0f 84 b5 00          	je     5f9 <sprintf+0xf3>
     544:	3c 63                	cmp    $0x63,%al
     546:	0f 85 fe 00          	jne    648 <sprintf+0x142>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:113
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     54a:	67 66 8b 44 94 78    	mov    0x78(%esp,%edx,4),%eax
     550:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:114
                    src_index++;
     555:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:113
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    dest[des_index++] =*(arg_addr + arg_num++);
     559:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     55e:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:115
                    src_index++;
                    break;
     563:	e9 fa 00             	jmp    660 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:118
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     566:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     56b:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     571:	67 66 8b 4c 94 78    	mov    0x78(%esp,%edx,4),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:119
                    int len = 0; 
     577:	66 be 00 00 00 00    	mov    $0x0,%esi
     57d:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:121
                    int num[INT_LENGTH];
                    while (n != 0){
     583:	eb 37                	jmp    5bc <sprintf+0xb6>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:122
                        num[len] = n % 10;
     585:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     58b:	66 89 c8             	mov    %ecx,%eax
     58e:	66 f7 ea             	imul   %edx
     591:	66 c1 fa 02          	sar    $0x2,%edx
     595:	66 89 c8             	mov    %ecx,%eax
     598:	66 c1 f8 1f          	sar    $0x1f,%eax
     59c:	66 29 c2             	sub    %eax,%edx
     59f:	66 89 d7             	mov    %edx,%edi
     5a2:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     5a7:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     5ac:	66 29 c1             	sub    %eax,%ecx
     5af:	67 66 89 4c b4 14    	mov    %ecx,0x14(%esp,%esi,4)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:123
                        n = n / 10;
     5b5:	66 89 f9             	mov    %edi,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:124
                        len++;
     5b8:	66 83 c6 01          	add    $0x1,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:121
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     5bc:	66 85 c9             	test   %ecx,%ecx
     5bf:	75 c4                	jne    585 <sprintf+0x7f>
     5c1:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:126
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     5c7:	67 66 8d 46 ff       	lea    -0x1(%esi),%eax
     5cc:	eb 1a                	jmp    5e8 <sprintf+0xe2>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     5ce:	67 66 0f b6 74 84 14 	movzbl 0x14(%esp,%eax,4),%esi
     5d5:	67 66 8d 56 30       	lea    0x30(%esi),%edx
     5da:	67 88 54 1d 00       	mov    %dl,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:126 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     5df:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:127 (discriminator 3)
                        dest[des_index++] = num[i]+'0';
     5e3:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:126 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     5e8:	66 85 c0             	test   %eax,%eax
     5eb:	79 e1                	jns    5ce <sprintf+0xc8>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:129
                        dest[des_index++] = num[i]+'0';
                    }
                    src_index++;
     5ed:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:118
                    dest[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     5f1:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     5f7:	eb 67                	jmp    660 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     5f9:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     5fe:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     604:	67 66 8b 74 94 78    	mov    0x78(%esp,%edx,4),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:134
                    u32 str_len = strlen(str);
     60a:	66 83 ec 0c          	sub    $0xc,%esp
     60e:	66 56                	push   %esi
     610:	66 e8 86 06 00 00    	calll  c9c <strlen>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:136
                    u32 i = 0;
                    while (i < str_len){
     616:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:135
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
     61a:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:136
                    while (i < str_len){
     620:	eb 15                	jmp    637 <sprintf+0x131>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:137
                        dest[des_index++] = str[i++];
     622:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
     628:	67 88 4c 1d 00       	mov    %cl,0x0(%ebp,%ebx,1)
     62d:	67 66 8d 52 01       	lea    0x1(%edx),%edx
     632:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:136
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
     637:	66 39 c2             	cmp    %eax,%edx
     63a:	72 e6                	jb     622 <sprintf+0x11c>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:139
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
     63c:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:133
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     640:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:140
                    u32 i = 0;
                    while (i < str_len){
                        dest[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
     646:	eb 18                	jmp    660 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:143
                }
                default :
                    src_index++;
     648:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:144
                    break;
     64c:	eb 12                	jmp    660 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:147
            }
        }
        else if (format[src_index] == '\\') {
     64e:	3c 5c                	cmp    $0x5c,%al
     650:	74 0e                	je     660 <sprintf+0x15a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:166
                        break;
                }
            }
        }
        else {
            dest[des_index++] = format[src_index++];
     652:	66 83 c7 01          	add    $0x1,%edi
     656:	67 88 44 1d 00       	mov    %al,0x0(%ebp,%ebx,1)
     65b:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:108
void sprintf(char * dest , char * format, ...){
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = &format+1; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     660:	67 66 8b 4c 24 74    	mov    0x74(%esp),%ecx
     666:	67 66 0f b6 04 39    	movzbl (%ecx,%edi,1),%eax
     66c:	84 c0                	test   %al,%al
     66e:	0f 85 bb fe          	jne    52d <sprintf+0x27>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:169
        }
        else {
            dest[des_index++] = format[src_index++];
        }
    }
    dest[des_index] = 0;
     672:	67 c6 44 1d 00 00    	movb   $0x0,0x0(%ebp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:171
    return ;
}
     678:	66 83 c4 5c          	add    $0x5c,%esp
     67c:	66 5b                	pop    %ebx
     67e:	66 5e                	pop    %esi
     680:	66 5f                	pop    %edi
     682:	66 5d                	pop    %ebp
     684:	66 c3                	retl   

00000686 <vprintf>:
vprintf():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:174


void vprintf(char * format, va_list va){
     686:	66 55                	push   %ebp
     688:	66 57                	push   %edi
     68a:	66 56                	push   %esi
     68c:	66 53                	push   %ebx
     68e:	66 81 ec 5c 04 00 00 	sub    $0x45c,%esp
     695:	67 66 8b ac 24 70 04 	mov    0x470(%esp),%ebp
     69c:	00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:178
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
     69e:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:177


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
     6a4:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:176
}


void vprintf(char * format, va_list va){
    char buf[BUF_LENGTH];
    int arg_num = 0;
     6aa:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:180
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     6b0:	e9 4c 01             	jmp    7ff <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:181
        if (format[src_index] == '%'){
     6b3:	3c 25                	cmp    $0x25,%al
     6b5:	0f 85 34 01          	jne    7ed <vprintf+0x167>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:183
            src_index++;
            switch(format[src_index]){
     6b9:	67 66 0f b6 44 3d 01 	movzbl 0x1(%ebp,%edi,1),%eax
     6c0:	3c 64                	cmp    $0x64,%al
     6c2:	74 30                	je     6f4 <vprintf+0x6e>
     6c4:	3c 73                	cmp    $0x73,%al
     6c6:	0f 84 c6 00          	je     790 <vprintf+0x10a>
     6ca:	3c 63                	cmp    $0x63,%al
     6cc:	0f 85 17 01          	jne    7e7 <vprintf+0x161>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:185
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
     6d0:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     6d7:	00 00 
     6d9:	67 66 8b 04 90       	mov    (%eax,%edx,4),%eax
     6de:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:186
                    src_index++;
     6e3:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:185
    while (format[src_index] != 0){
        if (format[src_index] == '%'){
            src_index++;
            switch(format[src_index]){
                case 'c':{
                    buf[des_index++] =*(arg_addr + arg_num++);
     6e7:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
     6ec:	67 66 8d 52 01       	lea    0x1(%edx),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:187
                    src_index++;
                    break;
     6f1:	e9 0b 01             	jmp    7ff <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:190
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     6f4:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     6f9:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     6ff:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     706:	00 00 
     708:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:191
                    int len = 0; 
     70d:	66 b9 00 00 00 00    	mov    $0x0,%ecx
     713:	67 66 89 7c 24 0c    	mov    %edi,0xc(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:193
                    int num[INT_LENGTH];
                    while (n != 0){
     719:	eb 3a                	jmp    755 <vprintf+0xcf>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:194
                        num[len] = n % 10;
     71b:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
     721:	66 89 f0             	mov    %esi,%eax
     724:	66 f7 ea             	imul   %edx
     727:	66 c1 fa 02          	sar    $0x2,%edx
     72b:	66 89 f0             	mov    %esi,%eax
     72e:	66 c1 f8 1f          	sar    $0x1f,%eax
     732:	66 29 c2             	sub    %eax,%edx
     735:	66 89 d7             	mov    %edx,%edi
     738:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
     73d:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     742:	66 89 f2             	mov    %esi,%edx
     745:	66 29 c2             	sub    %eax,%edx
     748:	67 66 89 54 8c 14    	mov    %edx,0x14(%esp,%ecx,4)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:195
                        n = n / 10;
     74e:	66 89 fe             	mov    %edi,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:196
                        len++;
     751:	66 83 c1 01          	add    $0x1,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:193
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
                    int len = 0; 
                    int num[INT_LENGTH];
                    while (n != 0){
     755:	66 85 f6             	test   %esi,%esi
     758:	75 c1                	jne    71b <vprintf+0x95>
     75a:	67 66 8b 7c 24 0c    	mov    0xc(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:198
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     760:	66 83 e9 01          	sub    $0x1,%ecx
     764:	eb 19                	jmp    77f <vprintf+0xf9>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
     766:	67 66 0f b6 44 8c 14 	movzbl 0x14(%esp,%ecx,4),%eax
     76d:	66 83 c0 30          	add    $0x30,%eax
     771:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:198 (discriminator 3)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     776:	66 83 e9 01          	sub    $0x1,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:199 (discriminator 3)
                        buf[des_index++] = num[i]+'0';
     77a:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:198 (discriminator 1)
                    while (n != 0){
                        num[len] = n % 10;
                        n = n / 10;
                        len++;
                    }
                    for (int i = len-1; i >= 0; i--){
     77f:	66 85 c9             	test   %ecx,%ecx
     782:	79 e2                	jns    766 <vprintf+0xe0>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:201
                        buf[des_index++] = num[i]+'0';
                    }
                    src_index++;
     784:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:190
                    buf[des_index++] =*(arg_addr + arg_num++);
                    src_index++;
                    break;
                }
                case 'd':{
                    int n = *(arg_addr + arg_num++);
     788:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     78e:	eb 6f                	jmp    7ff <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     790:	67 66 8d 42 01       	lea    0x1(%edx),%eax
     795:	67 66 89 44 24 08    	mov    %eax,0x8(%esp)
     79b:	67 66 8b 84 24 74 04 	mov    0x474(%esp),%eax
     7a2:	00 00 
     7a4:	67 66 8b 34 90       	mov    (%eax,%edx,4),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:206
                    u32 str_len = strlen(str);
     7a9:	66 83 ec 0c          	sub    $0xc,%esp
     7ad:	66 56                	push   %esi
     7af:	66 e8 e7 04 00 00    	calll  c9c <strlen>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:208
                    u32 i = 0;
                    while (i < str_len){
     7b5:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:207
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
     7b9:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:208
                    while (i < str_len){
     7bf:	eb 15                	jmp    7d6 <vprintf+0x150>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:209
                        buf[des_index++] = str[i++];
     7c1:	67 66 0f b6 0c 16    	movzbl (%esi,%edx,1),%ecx
     7c7:	67 88 4c 1c 50       	mov    %cl,0x50(%esp,%ebx,1)
     7cc:	67 66 8d 52 01       	lea    0x1(%edx),%edx
     7d1:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:208
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
                    u32 str_len = strlen(str);
                    u32 i = 0;
                    while (i < str_len){
     7d6:	66 39 c2             	cmp    %eax,%edx
     7d9:	72 e6                	jb     7c1 <vprintf+0x13b>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:211
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
     7db:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:205
                    }
                    src_index++;
                    break;
                }
                case 's':{
                    char * str = *(arg_addr + arg_num++);
     7df:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:212
                    u32 i = 0;
                    while (i < str_len){
                        buf[des_index++] = str[i++];
                    }
                    src_index++;
                    break;
     7e5:	eb 18                	jmp    7ff <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:215
                }
                default :
                    src_index++;
     7e7:	66 83 c7 02          	add    $0x2,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:216
                    break;
     7eb:	eb 12                	jmp    7ff <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:219
            }
        }
        else if (format[src_index] == '\\') {
     7ed:	3c 5c                	cmp    $0x5c,%al
     7ef:	74 0e                	je     7ff <vprintf+0x179>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:238
                        break;
                }
            }
        }
        else {
            buf[des_index++] = format[src_index++];
     7f1:	66 83 c7 01          	add    $0x1,%edi
     7f5:	67 88 44 1c 50       	mov    %al,0x50(%esp,%ebx,1)
     7fa:	67 66 8d 5b 01       	lea    0x1(%ebx),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:180
    char buf[BUF_LENGTH];
    int arg_num = 0;
    int src_index = 0;   // 源字符串索引，总是指向未读的一位
    int des_index = 0;   // 目标字符串索引，总是指向未写的一位。
    int* arg_addr = va; // 边长参数第一个参数的地址。
    while (format[src_index] != 0){
     7ff:	67 66 0f b6 44 3d 00 	movzbl 0x0(%ebp,%edi,1),%eax
     806:	84 c0                	test   %al,%al
     808:	0f 85 a7 fe          	jne    6b3 <vprintf+0x2d>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:241
        }
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
     80c:	67 c6 44 1c 50 00    	movb   $0x0,0x50(%esp,%ebx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:242
    for (int i = 0; i < des_index; i++){
     812:	66 be 00 00 00 00    	mov    $0x0,%esi
     818:	eb 1b                	jmp    835 <loader_code_segment+0x35>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:243 (discriminator 3)
        putc(buf[i]);
     81a:	66 83 ec 0c          	sub    $0xc,%esp
     81e:	67 66 0f be 44 34 5c 	movsbl 0x5c(%esp,%esi,1),%eax
     825:	66 50                	push   %eax
     827:	66 e8 a3 fa ff ff    	calll  2d0 <putc>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:242 (discriminator 3)
        else {
            buf[des_index++] = format[src_index++];
        }
    }
    buf[des_index] = 0;
    for (int i = 0; i < des_index; i++){
     82d:	66 83 c6 01          	add    $0x1,%esi
     831:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:242 (discriminator 1)
     835:	66 39 f3             	cmp    %esi,%ebx
     838:	7f e0                	jg     81a <loader_code_segment+0x1a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:246
        putc(buf[i]);
    }
    return ;
}
     83a:	66 81 c4 5c 04 00 00 	add    $0x45c,%esp
     841:	66 5b                	pop    %ebx
     843:	66 5e                	pop    %esi
     845:	66 5f                	pop    %edi
     847:	66 5d                	pop    %ebp
     849:	66 c3                	retl   

0000084b <printf>:
printf():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:248

void printf(char * format, ...){
     84b:	66 83 ec 14          	sub    $0x14,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:249
    vprintf(format, &format+1);// 其实这里由于format是个指针，是32位的，所以这里对format的地址+1，也会加4个字节。
     84f:	67 66 8d 44 24 1c    	lea    0x1c(%esp),%eax
     855:	66 50                	push   %eax
     857:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
     85d:	66 e8 23 fe ff ff    	calll  686 <vprintf>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:251
    return ;
}
     863:	66 83 c4 1c          	add    $0x1c,%esp
     867:	66 c3                	retl   

00000869 <isalpha>:
isalpha():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:270
//     return ;
// }



int isalpha (int ch){
     869:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:271
    if ('a' <= ch && ch <= 'z')
     86f:	67 66 8d 50 9f       	lea    -0x61(%eax),%edx
     874:	66 83 fa 19          	cmp    $0x19,%edx
     878:	76 12                	jbe    88c <isalpha+0x23>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:273
        return 1;
    if ('A' <= ch && ch <= 'Z')
     87a:	66 83 e8 41          	sub    $0x41,%eax
     87e:	66 83 f8 19          	cmp    $0x19,%eax
     882:	77 10                	ja     894 <isalpha+0x2b>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:274
        return 1;
     884:	66 b8 01 00 00 00    	mov    $0x1,%eax
     88a:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:272



int isalpha (int ch){
    if ('a' <= ch && ch <= 'z')
        return 1;
     88c:	66 b8 01 00 00 00    	mov    $0x1,%eax
     892:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:275
    if ('A' <= ch && ch <= 'Z')
        return 1;
    return 0;
     894:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:276
}
     89a:	66 c3                	retl   

0000089c <isdigit>:
isdigit():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:278
int isdigit (int ch){
    if ('0' <= ch && ch <= '9')
     89c:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
     8a2:	66 83 e8 30          	sub    $0x30,%eax
     8a6:	66 83 f8 09          	cmp    $0x9,%eax
     8aa:	77 08                	ja     8b4 <isdigit+0x18>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:279
        return 1;
     8ac:	66 b8 01 00 00 00    	mov    $0x1,%eax
     8b2:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:280
    return 0;
     8b4:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:281
}
     8ba:	66 c3                	retl   

000008bc <isalnum>:
isalnum():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:283

int isalnum (int ch){
     8bc:	66 53                	push   %ebx
     8be:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:284
    if ( isalpha(ch) || isdigit(ch) ){
     8c4:	66 53                	push   %ebx
     8c6:	66 e8 9d ff ff ff    	calll  869 <isalpha>
     8cc:	66 83 c4 04          	add    $0x4,%esp
     8d0:	66 85 c0             	test   %eax,%eax
     8d3:	75 13                	jne    8e8 <isalnum+0x2c>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:284 (discriminator 1)
     8d5:	66 53                	push   %ebx
     8d7:	66 e8 bf ff ff ff    	calll  89c <isdigit>
     8dd:	66 83 c4 04          	add    $0x4,%esp
     8e1:	66 85 c0             	test   %eax,%eax
     8e4:	75 0a                	jne    8f0 <isalnum+0x34>
     8e6:	eb 0e                	jmp    8f6 <isalnum+0x3a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:285
        return 1;
     8e8:	66 b8 01 00 00 00    	mov    $0x1,%eax
     8ee:	eb 06                	jmp    8f6 <isalnum+0x3a>
     8f0:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:288
    }
    return 0;
}
     8f6:	66 5b                	pop    %ebx
     8f8:	66 c3                	retl   

000008fa <ispunct>:
ispunct():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:289
int ispunct (int ch){
     8fa:	66 83 ec 30          	sub    $0x30,%esp
     8fe:	67 66 8b 4c 24 34    	mov    0x34(%esp),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:290
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
     904:	67 66 c7 44 24 0e 21 	movl   $0x24232221,0xe(%esp)
     90b:	22 23 24 
     90e:	67 66 c7 44 24 12 25 	movl   $0x28272625,0x12(%esp)
     915:	26 27 28 
     918:	67 66 c7 44 24 16 29 	movl   $0x2c2b2a29,0x16(%esp)
     91f:	2a 2b 2c 
     922:	67 66 c7 44 24 1a 2d 	movl   $0x3a2f2e2d,0x1a(%esp)
     929:	2e 2f 3a 
     92c:	67 66 c7 44 24 1e 3b 	movl   $0x3e3d3c3b,0x1e(%esp)
     933:	3c 3d 3e 
     936:	67 66 c7 44 24 22 3f 	movl   $0x5c5b403f,0x22(%esp)
     93d:	40 5b 5c 
     940:	67 66 c7 44 24 26 5d 	movl   $0x605f5e5d,0x26(%esp)
     947:	5e 5f 60 
     94a:	67 66 c7 44 24 2a 7b 	movl   $0x7e7d7c7b,0x2a(%esp)
     951:	7c 7d 7e 
     954:	67 c7 44 24 2e 00 00 	movw   $0x0,0x2e(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:291
    for (int i = 0; i < 33; i++){
     95b:	66 b8 00 00 00 00    	mov    $0x0,%eax
     961:	eb 10                	jmp    973 <ispunct+0x79>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:292
        if (ch == punct[i])
     963:	67 66 0f be 54 04 0e 	movsbl 0xe(%esp,%eax,1),%edx
     96a:	66 39 ca             	cmp    %ecx,%edx
     96d:	74 12                	je     981 <ispunct+0x87>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:291 (discriminator 2)
    }
    return 0;
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
     96f:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:291 (discriminator 1)
     973:	66 83 f8 20          	cmp    $0x20,%eax
     977:	7e ea                	jle    963 <ispunct+0x69>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:295
        if (ch == punct[i])
            return 1;
    }
    return 0;
     979:	66 b8 00 00 00 00    	mov    $0x0,%eax
     97f:	eb 06                	jmp    987 <ispunct+0x8d>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:293
}
int ispunct (int ch){
    char punct[34] =  "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    for (int i = 0; i < 33; i++){
        if (ch == punct[i])
            return 1;
     981:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:296
    }
    return 0;
}
     987:	66 83 c4 30          	add    $0x30,%esp
     98b:	66 c3                	retl   

0000098d <isblank>:
isblank():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:298
int isblank (int ch){
    if (ch == ' ')
     98d:	67 66 83 7c 24 04 20 	cmpl   $0x20,0x4(%esp)
     994:	75 08                	jne    99e <isblank+0x11>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:299
        return 1;
     996:	66 b8 01 00 00 00    	mov    $0x1,%eax
     99c:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:300
    return 0;
     99e:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:301
}
     9a4:	66 c3                	retl   

000009a6 <isprint>:
isprint():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:302
int isprint (int ch){
     9a6:	66 53                	push   %ebx
     9a8:	67 66 8b 5c 24 08    	mov    0x8(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303
    if (isalpha(ch) || isdigit(ch) || isalnum(ch) || ispunct(ch) || isblank(ch)){
     9ae:	66 53                	push   %ebx
     9b0:	66 e8 b3 fe ff ff    	calll  869 <isalpha>
     9b6:	66 83 c4 04          	add    $0x4,%esp
     9ba:	66 85 c0             	test   %eax,%eax
     9bd:	75 46                	jne    a05 <isprint+0x5f>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 1)
     9bf:	66 53                	push   %ebx
     9c1:	66 e8 d5 fe ff ff    	calll  89c <isdigit>
     9c7:	66 83 c4 04          	add    $0x4,%esp
     9cb:	66 85 c0             	test   %eax,%eax
     9ce:	75 3d                	jne    a0d <isprint+0x67>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 2)
     9d0:	66 53                	push   %ebx
     9d2:	66 e8 e4 fe ff ff    	calll  8bc <isalnum>
     9d8:	66 83 c4 04          	add    $0x4,%esp
     9dc:	66 85 c0             	test   %eax,%eax
     9df:	75 34                	jne    a15 <isprint+0x6f>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 3)
     9e1:	66 53                	push   %ebx
     9e3:	66 e8 11 ff ff ff    	calll  8fa <ispunct>
     9e9:	66 83 c4 04          	add    $0x4,%esp
     9ed:	66 85 c0             	test   %eax,%eax
     9f0:	75 2b                	jne    a1d <isprint+0x77>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:303 (discriminator 4)
     9f2:	66 53                	push   %ebx
     9f4:	66 e8 93 ff ff ff    	calll  98d <isblank>
     9fa:	66 83 c4 04          	add    $0x4,%esp
     9fe:	66 85 c0             	test   %eax,%eax
     a01:	75 22                	jne    a25 <isprint+0x7f>
     a03:	eb 26                	jmp    a2b <isprint+0x85>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:304
        return 1;
     a05:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a0b:	eb 1e                	jmp    a2b <isprint+0x85>
     a0d:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a13:	eb 16                	jmp    a2b <isprint+0x85>
     a15:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a1b:	eb 0e                	jmp    a2b <isprint+0x85>
     a1d:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a23:	eb 06                	jmp    a2b <isprint+0x85>
     a25:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:307
    }
    return 0;
}
     a2b:	66 5b                	pop    %ebx
     a2d:	66 c3                	retl   

00000a2f <iscntrl>:
iscntrl():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:308
int iscntrl (int ch){
     a2f:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:310
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
     a35:	66 83 f8 1f          	cmp    $0x1f,%eax
     a39:	76 0e                	jbe    a49 <iscntrl+0x1a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:312
        return 1;
    if (ch == 0x7f)
     a3b:	66 83 f8 7f          	cmp    $0x7f,%eax
     a3f:	75 10                	jne    a51 <iscntrl+0x22>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:313
        return 1;
     a41:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a47:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:311
    return 0;
}
int iscntrl (int ch){
    //he control characters are the characters with the codes 0x00-0x1F and 0x7F.
    if (0 <= ch && ch <= 0x1f)
        return 1;
     a49:	66 b8 01 00 00 00    	mov    $0x1,%eax
     a4f:	66 c3                	retl   
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:314
    if (ch == 0x7f)
        return 1;
    return 0;
     a51:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:315
}
     a57:	66 c3                	retl   

00000a59 <read_n_sector>:
read_n_sector():
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:321

/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
     a59:	66 55                	push   %ebp
     a5b:	66 57                	push   %edi
     a5d:	66 56                	push   %esi
     a5f:	66 53                	push   %ebx
     a61:	66 83 ec 1c          	sub    $0x1c,%esp
     a65:	67 66 0f b7 7c 24 30 	movzwl 0x30(%esp),%edi
     a6c:	67 66 0f b7 74 24 34 	movzwl 0x34(%esp),%esi
     a73:	67 66 0f b7 44 24 38 	movzwl 0x38(%esp),%eax
     a7a:	67 89 44 24 0c       	mov    %ax,0xc(%esp)
     a7f:	67 66 0f b7 44 24 3c 	movzwl 0x3c(%esp),%eax
     a86:	67 89 44 24 0e       	mov    %ax,0xe(%esp)
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:322
    for (int i = 0; i < number; i++){
     a8b:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     a91:	eb 7d                	jmp    b10 <read_n_sector+0xb7>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:323 (discriminator 3)
        int sector = (sector_code+i) % 18+1;
     a93:	66 0f b7 ef          	movzwl %di,%ebp
     a97:	66 01 dd             	add    %ebx,%ebp
     a9a:	66 ba 39 8e e3 38    	mov    $0x38e38e39,%edx
     aa0:	66 89 e8             	mov    %ebp,%eax
     aa3:	66 f7 ea             	imul   %edx
     aa6:	66 c1 fa 02          	sar    $0x2,%edx
     aaa:	66 89 e8             	mov    %ebp,%eax
     aad:	66 c1 f8 1f          	sar    $0x1f,%eax
     ab1:	66 29 c2             	sub    %eax,%edx
     ab4:	66 89 d1             	mov    %edx,%ecx
     ab7:	67 66 8d 14 d2       	lea    (%edx,%edx,8),%edx
     abc:	67 66 8d 04 12       	lea    (%edx,%edx,1),%eax
     ac1:	66 89 ea             	mov    %ebp,%edx
     ac4:	66 29 c2             	sub    %eax,%edx
     ac7:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:325 (discriminator 3)
        int mid = (sector_code+i) / 18;
        int cylinder = mid >> 1;
     acb:	66 89 cd             	mov    %ecx,%ebp
     ace:	66 d1 fd             	sar    %ebp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:327 (discriminator 3)
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
     ad1:	66 83 ec 0c          	sub    $0xc,%esp
     ad5:	66 89 d8             	mov    %ebx,%eax
     ad8:	66 c1 e0 09          	shl    $0x9,%eax
     adc:	67 03 44 24 1a       	add    0x1a(%esp),%ax
     ae1:	66 0f b7 c0          	movzwl %ax,%eax
     ae5:	66 50                	push   %eax
     ae7:	67 66 0f b7 44 24 1c 	movzwl 0x1c(%esp),%eax
     aee:	66 50                	push   %eax
     af0:	66 0f b7 d2          	movzwl %dx,%edx
     af4:	66 52                	push   %edx
     af6:	66 0f b7 ed          	movzwl %bp,%ebp
     afa:	66 55                	push   %ebp
     afc:	66 83 e1 01          	and    $0x1,%ecx
     b00:	66 51                	push   %ecx
     b02:	66 e8 24 01 00 00    	calll  c2c <read_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:322 (discriminator 3)
/* tested
读取指定逻辑扇区号的扇区到指定内存地址处
注意一次最多写一个段，也就是64k 最多读128个扇区。
够用了够用了 */
void read_n_sector(u16 sector_code, u16 number,  u16 segment, u16 offset){
    for (int i = 0; i < number; i++){
     b08:	66 83 c3 01          	add    $0x1,%ebx
     b0c:	66 83 c4 20          	add    $0x20,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:322 (discriminator 1)
     b10:	66 0f b7 c6          	movzwl %si,%eax
     b14:	66 39 c3             	cmp    %eax,%ebx
     b17:	0f 8c 78 ff          	jl     a93 <read_n_sector+0x3a>
/mnt/e/code/my_operating_system/os/kernel/../lib/stdio.c:330
        int cylinder = mid >> 1;
        int head = mid & 1;
        read_sector(head, cylinder,sector,segment, offset + i*512);
    }
    return ;
}
     b1b:	66 83 c4 1c          	add    $0x1c,%esp
     b1f:	66 5b                	pop    %ebx
     b21:	66 5e                	pop    %esi
     b23:	66 5f                	pop    %edi
     b25:	66 5d                	pop    %ebp
     b27:	66 c3                	retl   
     b29:	66 90                	xchg   %eax,%eax
     b2b:	66 90                	xchg   %eax,%eax
     b2d:	66 90                	xchg   %eax,%eax
     b2f:	90                   	nop

00000b30 <write_port_byte>:
write_port_byte():
     b30:	66 55                	push   %ebp
     b32:	66 89 e5             	mov    %esp,%ebp
     b35:	53                   	push   %bx
     b36:	51                   	push   %cx
     b37:	52                   	push   %dx
     b38:	56                   	push   %si
     b39:	57                   	push   %di
     b3a:	55                   	push   %bp
     b3b:	1e                   	push   %ds
     b3c:	06                   	push   %es
     b3d:	16                   	push   %ss
     b3e:	67 8b 5d 08          	mov    0x8(%ebp),%bx
     b42:	67 8a 45 0c          	mov    0xc(%ebp),%al
     b46:	cd 34                	int    $0x34
     b48:	17                   	pop    %ss
     b49:	07                   	pop    %es
     b4a:	1f                   	pop    %ds
     b4b:	5d                   	pop    %bp
     b4c:	5f                   	pop    %di
     b4d:	5e                   	pop    %si
     b4e:	5a                   	pop    %dx
     b4f:	59                   	pop    %cx
     b50:	5b                   	pop    %bx
     b51:	66 89 ec             	mov    %ebp,%esp
     b54:	66 5d                	pop    %ebp
     b56:	66 c3                	retl   

00000b58 <read_port_byte>:
read_port_byte():
     b58:	66 55                	push   %ebp
     b5a:	66 89 e5             	mov    %esp,%ebp
     b5d:	53                   	push   %bx
     b5e:	51                   	push   %cx
     b5f:	52                   	push   %dx
     b60:	56                   	push   %si
     b61:	57                   	push   %di
     b62:	55                   	push   %bp
     b63:	1e                   	push   %ds
     b64:	06                   	push   %es
     b65:	16                   	push   %ss
     b66:	67 8b 45 08          	mov    0x8(%ebp),%ax
     b6a:	cd 33                	int    $0x33
     b6c:	17                   	pop    %ss
     b6d:	07                   	pop    %es
     b6e:	1f                   	pop    %ds
     b6f:	5d                   	pop    %bp
     b70:	5f                   	pop    %di
     b71:	5e                   	pop    %si
     b72:	5a                   	pop    %dx
     b73:	59                   	pop    %cx
     b74:	5b                   	pop    %bx
     b75:	66 89 ec             	mov    %ebp,%esp
     b78:	66 5d                	pop    %ebp
     b7a:	66 c3                	retl   

00000b7c <write_memory_byte>:
write_memory_byte():
     b7c:	66 55                	push   %ebp
     b7e:	66 89 e5             	mov    %esp,%ebp
     b81:	50                   	push   %ax
     b82:	53                   	push   %bx
     b83:	52                   	push   %dx
     b84:	1e                   	push   %ds
     b85:	67 8b 5d 08          	mov    0x8(%ebp),%bx
     b89:	67 8b 45 0a          	mov    0xa(%ebp),%ax
     b8d:	c1 e0 0c             	shl    $0xc,%ax
     b90:	67 8a 4d 0c          	mov    0xc(%ebp),%cl
     b94:	cd 36                	int    $0x36
     b96:	1f                   	pop    %ds
     b97:	5a                   	pop    %dx
     b98:	5b                   	pop    %bx
     b99:	58                   	pop    %ax
     b9a:	66 89 ec             	mov    %ebp,%esp
     b9d:	66 5d                	pop    %ebp
     b9f:	66 c3                	retl   

00000ba1 <read_memory_byte>:
read_memory_byte():
     ba1:	66 55                	push   %ebp
     ba3:	66 89 e5             	mov    %esp,%ebp
     ba6:	53                   	push   %bx
     ba7:	51                   	push   %cx
     ba8:	52                   	push   %dx
     ba9:	56                   	push   %si
     baa:	57                   	push   %di
     bab:	55                   	push   %bp
     bac:	1e                   	push   %ds
     bad:	06                   	push   %es
     bae:	16                   	push   %ss
     baf:	67 8b 5d 08          	mov    0x8(%ebp),%bx
     bb3:	67 8b 45 0a          	mov    0xa(%ebp),%ax
     bb7:	c1 e0 0c             	shl    $0xc,%ax
     bba:	cd 35                	int    $0x35
     bbc:	17                   	pop    %ss
     bbd:	07                   	pop    %es
     bbe:	1f                   	pop    %ds
     bbf:	5d                   	pop    %bp
     bc0:	5f                   	pop    %di
     bc1:	5e                   	pop    %si
     bc2:	5a                   	pop    %dx
     bc3:	59                   	pop    %cx
     bc4:	5b                   	pop    %bx
     bc5:	66 89 ec             	mov    %ebp,%esp
     bc8:	66 5d                	pop    %ebp
     bca:	66 c3                	retl   

00000bcc <check_keyboard>:
check_keyboard():
     bcc:	b4 01                	mov    $0x1,%ah
     bce:	cd 16                	int    $0x16
     bd0:	74 05                	je     bd7 <check_keyboard.have_key>
     bd2:	b8 00 00             	mov    $0x0,%ax
     bd5:	eb 03                	jmp    bda <check_keyboard.check_keyboard_return>

00000bd7 <check_keyboard.have_key>:
check_keyboard.have_key():
     bd7:	b8 01 00             	mov    $0x1,%ax

00000bda <check_keyboard.check_keyboard_return>:
check_keyboard.check_keyboard_return():
     bda:	66 c3                	retl   

00000bdc <get_keyboard>:
get_keyboard():
     bdc:	b4 00                	mov    $0x0,%ah
     bde:	cd 16                	int    $0x16
     be0:	66 c3                	retl   

00000be2 <clean_screen>:
clean_screen():
     be2:	50                   	push   %ax
     be3:	53                   	push   %bx
     be4:	51                   	push   %cx
     be5:	52                   	push   %dx
     be6:	b4 06                	mov    $0x6,%ah
     be8:	b0 00                	mov    $0x0,%al
     bea:	b5 00                	mov    $0x0,%ch
     bec:	b1 00                	mov    $0x0,%cl
     bee:	b6 17                	mov    $0x17,%dh
     bf0:	b2 4f                	mov    $0x4f,%dl
     bf2:	b7 1f                	mov    $0x1f,%bh
     bf4:	cd 10                	int    $0x10
     bf6:	5a                   	pop    %dx
     bf7:	59                   	pop    %cx
     bf8:	5b                   	pop    %bx
     bf9:	58                   	pop    %ax
     bfa:	66 c3                	retl   

00000bfc <scroll_screen>:
scroll_screen():
     bfc:	50                   	push   %ax
     bfd:	53                   	push   %bx
     bfe:	51                   	push   %cx
     bff:	52                   	push   %dx
     c00:	b4 06                	mov    $0x6,%ah
     c02:	b0 01                	mov    $0x1,%al
     c04:	b5 00                	mov    $0x0,%ch
     c06:	b1 00                	mov    $0x0,%cl
     c08:	b6 17                	mov    $0x17,%dh
     c0a:	b2 4f                	mov    $0x4f,%dl
     c0c:	b7 10                	mov    $0x10,%bh
     c0e:	cd 10                	int    $0x10
     c10:	5a                   	pop    %dx
     c11:	59                   	pop    %cx
     c12:	5b                   	pop    %bx
     c13:	58                   	pop    %ax
     c14:	66 c3                	retl   

00000c16 <get_random>:
get_random():
     c16:	53                   	push   %bx
     c17:	b8 00 00             	mov    $0x0,%ax
     c1a:	e6 43                	out    %al,$0x43
     c1c:	e4 40                	in     $0x40,%al
     c1e:	b3 08                	mov    $0x8,%bl
     c20:	f6 f3                	div    %bl
     c22:	88 e0                	mov    %ah,%al
     c24:	b4 00                	mov    $0x0,%ah
     c26:	83 c0 72             	add    $0x72,%ax
     c29:	5b                   	pop    %bx
     c2a:	66 c3                	retl   

00000c2c <read_sector>:
read_sector():
     c2c:	66 55                	push   %ebp
     c2e:	66 89 e5             	mov    %esp,%ebp
     c31:	50                   	push   %ax
     c32:	53                   	push   %bx
     c33:	51                   	push   %cx
     c34:	52                   	push   %dx
     c35:	06                   	push   %es
     c36:	67 8b 45 14          	mov    0x14(%ebp),%ax
     c3a:	8e c0                	mov    %ax,%es
     c3c:	67 8b 5d 18          	mov    0x18(%ebp),%bx
     c40:	b4 02                	mov    $0x2,%ah
     c42:	b0 01                	mov    $0x1,%al
     c44:	b2 00                	mov    $0x0,%dl
     c46:	67 8a 75 08          	mov    0x8(%ebp),%dh
     c4a:	67 8a 6d 0c          	mov    0xc(%ebp),%ch
     c4e:	67 8a 4d 10          	mov    0x10(%ebp),%cl
     c52:	cd 13                	int    $0x13
     c54:	07                   	pop    %es
     c55:	5a                   	pop    %dx
     c56:	59                   	pop    %cx
     c57:	5b                   	pop    %bx
     c58:	58                   	pop    %ax
     c59:	66 89 ec             	mov    %ebp,%esp
     c5c:	66 5d                	pop    %ebp
     c5e:	66 c3                	retl   

00000c60 <print_my_name>:
print_my_name():
     c60:	50                   	push   %ax
     c61:	53                   	push   %bx
     c62:	51                   	push   %cx
     c63:	52                   	push   %dx
     c64:	1e                   	push   %ds
     c65:	06                   	push   %es
     c66:	55                   	push   %bp
     c67:	b8 00 10             	mov    $0x1000,%ax
     c6a:	8e c0                	mov    %ax,%es
     c6c:	b8 40 20             	mov    $0x2040,%ax
     c6f:	89 c5                	mov    %ax,%bp
     c71:	b4 13                	mov    $0x13,%ah
     c73:	b0 00                	mov    $0x0,%al
     c75:	b7 00                	mov    $0x0,%bh
     c77:	b3 0f                	mov    $0xf,%bl
     c79:	b9 19 00             	mov    $0x19,%cx
     c7c:	b6 18                	mov    $0x18,%dh
     c7e:	b2 01                	mov    $0x1,%dl
     c80:	cd 10                	int    $0x10
     c82:	5d                   	pop    %bp
     c83:	07                   	pop    %es
     c84:	1f                   	pop    %ds
     c85:	5a                   	pop    %dx
     c86:	59                   	pop    %cx
     c87:	5b                   	pop    %bx
     c88:	58                   	pop    %ax
     c89:	c3                   	ret    

00000c8a <reboot>:
reboot():
     c8a:	b4 06                	mov    $0x6,%ah
     c8c:	b0 00                	mov    $0x0,%al
     c8e:	b5 00                	mov    $0x0,%ch
     c90:	b1 00                	mov    $0x0,%cl
     c92:	b6 18                	mov    $0x18,%dh
     c94:	b2 4f                	mov    $0x4f,%dl
     c96:	b7 1f                	mov    $0x1f,%bh
     c98:	cd 10                	int    $0x10
     c9a:	cd 19                	int    $0x19

00000c9c <strlen>:
strlen():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:3
#include "../include/type.h"

size_t strlen(char * str){
     c9c:	67 66 8b 54 24 04    	mov    0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:4
    u32 len = 0;
     ca2:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:5
    while (str[len] != 0){
     ca8:	eb 04                	jmp    cae <strlen+0x12>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:6
        len++;
     caa:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:5
#include "../include/type.h"

size_t strlen(char * str){
    u32 len = 0;
    while (str[len] != 0){
     cae:	67 80 3c 02 00       	cmpb   $0x0,(%edx,%eax,1)
     cb3:	75 f5                	jne    caa <strlen+0xe>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:9
        len++;
    }
    return len;
}
     cb5:	66 f3 c3             	repz retl 

00000cb8 <strncpy>:
strncpy():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:11

void strncpy(char * dest, char * src, u32 size){
     cb8:	66 56                	push   %esi
     cba:	66 53                	push   %ebx
     cbc:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
     cc2:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
     cc8:	67 66 8b 4c 24 14    	mov    0x14(%esp),%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:12
    for (int i = 0; i < size; i++){
     cce:	66 b8 00 00 00 00    	mov    $0x0,%eax
     cd4:	eb 0e                	jmp    ce4 <strncpy+0x2c>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:13 (discriminator 3)
        dest[i] = src[i];
     cd6:	67 66 0f b6 14 06    	movzbl (%esi,%eax,1),%edx
     cdc:	67 88 14 03          	mov    %dl,(%ebx,%eax,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:12 (discriminator 3)
    }
    return len;
}

void strncpy(char * dest, char * src, u32 size){
    for (int i = 0; i < size; i++){
     ce0:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:12 (discriminator 1)
     ce4:	66 39 c8             	cmp    %ecx,%eax
     ce7:	72 ed                	jb     cd6 <strncpy+0x1e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:15
        dest[i] = src[i];
    }
    dest[size] = '\0';
     ce9:	67 c6 04 0b 00       	movb   $0x0,(%ebx,%ecx,1)
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:16
}
     cee:	66 5b                	pop    %ebx
     cf0:	66 5e                	pop    %esi
     cf2:	66 c3                	retl   

00000cf4 <strcmp>:
strcmp():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:18

int strcmp(char * lhs, char * rhs){
     cf4:	66 57                	push   %edi
     cf6:	66 56                	push   %esi
     cf8:	66 53                	push   %ebx
     cfa:	67 66 8b 74 24 10    	mov    0x10(%esp),%esi
     d00:	67 66 8b 7c 24 14    	mov    0x14(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:19
    int lhs_len = strlen(lhs);
     d06:	66 56                	push   %esi
     d08:	66 e8 8e ff ff ff    	calll  c9c <strlen>
     d0e:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:20
    int rhs_len = strlen(rhs);
     d11:	67 66 89 3c 24       	mov    %edi,(%esp)
     d16:	66 e8 80 ff ff ff    	calll  c9c <strlen>
     d1c:	66 83 c4 04          	add    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:21
    if (lhs_len != rhs_len){
     d20:	66 39 c3             	cmp    %eax,%ebx
     d23:	75 25                	jne    d4a <strcmp+0x56>
     d25:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d2b:	eb 10                	jmp    d3d <strcmp+0x49>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:25
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
     d2d:	67 66 0f b6 14 07    	movzbl (%edi,%eax,1),%edx
     d33:	67 38 14 06          	cmp    %dl,(%esi,%eax,1)
     d37:	75 19                	jne    d52 <strcmp+0x5e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:24 (discriminator 2)
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
    }
    for (int i = 0; i < lhs_len; i++){
     d39:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:24 (discriminator 1)
     d3d:	66 39 d8             	cmp    %ebx,%eax
     d40:	7c eb                	jl     d2d <strcmp+0x39>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:28
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
     d42:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d48:	eb 0e                	jmp    d58 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:22

int strcmp(char * lhs, char * rhs){
    int lhs_len = strlen(lhs);
    int rhs_len = strlen(rhs);
    if (lhs_len != rhs_len){
        return 1;
     d4a:	66 b8 01 00 00 00    	mov    $0x1,%eax
     d50:	eb 06                	jmp    d58 <strcmp+0x64>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:26
    }
    for (int i = 0; i < lhs_len; i++){
        if (lhs[i] != rhs[i])
            return 1;
     d52:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:29
    }
    return 0;
}
     d58:	66 5b                	pop    %ebx
     d5a:	66 5e                	pop    %esi
     d5c:	66 5f                	pop    %edi
     d5e:	66 c3                	retl   

00000d60 <strncmp>:
strncmp():
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:31

int strncmp(char * lhs, char * rhs, int size){
     d60:	66 56                	push   %esi
     d62:	66 53                	push   %ebx
     d64:	67 66 8b 5c 24 0c    	mov    0xc(%esp),%ebx
     d6a:	67 66 8b 4c 24 10    	mov    0x10(%esp),%ecx
     d70:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:32
    for (int i = 0; i < size; i++){
     d76:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d7c:	eb 10                	jmp    d8e <strncmp+0x2e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:33
        if (lhs[i] != rhs[i])
     d7e:	67 66 0f b6 14 01    	movzbl (%ecx,%eax,1),%edx
     d84:	67 38 14 03          	cmp    %dl,(%ebx,%eax,1)
     d88:	75 11                	jne    d9b <strncmp+0x3b>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:32 (discriminator 2)
    }
    return 0;
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
     d8a:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:32 (discriminator 1)
     d8e:	66 39 f0             	cmp    %esi,%eax
     d91:	7c eb                	jl     d7e <strncmp+0x1e>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:36
        if (lhs[i] != rhs[i])
            return 1;
    }
    return 0;
     d93:	66 b8 00 00 00 00    	mov    $0x0,%eax
     d99:	eb 06                	jmp    da1 <strncmp+0x41>
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:34
}

int strncmp(char * lhs, char * rhs, int size){
    for (int i = 0; i < size; i++){
        if (lhs[i] != rhs[i])
            return 1;
     d9b:	66 b8 01 00 00 00    	mov    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/string.c:37
    }
    return 0;
     da1:	66 5b                	pop    %ebx
     da3:	66 5e                	pop    %esi
     da5:	66 c3                	retl   

00000da7 <install_system_call>:
install_system_call():
/mnt/e/code/my_operating_system/os/kernel/../lib/system_call.c:6
#include "../include/type.h"
#include "../include/stdio.h"
#include "../include/global.h"

void install_system_call(int system_call_number, void (*function)() ){
    system_call[system_call_number] = (u16) function;
     da7:	67 66 8b 54 24 08    	mov    0x8(%esp),%edx
     dad:	67 66 8b 44 24 04    	mov    0x4(%esp),%eax
     db3:	67 89 94 00 40 2c 00 	mov    %dx,0x2c40(%eax,%eax,1)
     dba:	00 
     dbb:	66 c3                	retl   

00000dbd <test_system_call>:
test_system_call():
/mnt/e/code/my_operating_system/os/kernel/start.c:21
    // install_system_call(2, test_system_call);
    // while (1){}
    return 0;
}

void test_system_call(){
     dbd:	66 53                	push   %ebx
     dbf:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:22
    int origin = get_cursor();
     dc3:	66 e8 ab f4 ff ff    	calll  274 <get_cursor>
     dc9:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/start.c:23
    set_cursor(1800);
     dcc:	66 83 ec 0c          	sub    $0xc,%esp
     dd0:	66 68 08 07 00 00    	pushl  $0x708
     dd6:	66 e8 26 f4 ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:24
    printf("test custom system call!!! ");
     ddc:	67 66 c7 04 24 a8 1e 	movl   $0x1ea8,(%esp)
     de3:	00 00 
     de5:	66 e8 60 fa ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/start.c:25
    set_cursor(origin);
     deb:	66 0f b7 db          	movzwl %bx,%ebx
     def:	67 66 89 1c 24       	mov    %ebx,(%esp)
     df4:	66 e8 08 f4 ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:26
}
     dfa:	66 83 c4 18          	add    $0x18,%esp
     dfe:	66 5b                	pop    %ebx
     e00:	66 c3                	retl   

00000e02 <cstart>:
cstart():
/mnt/e/code/my_operating_system/os/kernel/start.c:12
#include "../include/fsystem.h"

void (**my_program)();
void test_system_call();
int a;
int cstart(){
     e02:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/start.c:13
    init_fsystem();
     e06:	66 e8 2c 05 00 00    	calll  1338 <init_fsystem>
/mnt/e/code/my_operating_system/os/kernel/start.c:14
    clean_screen();
     e0c:	66 e8 d0 fd ff ff    	calll  be2 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/start.c:15
    set_cursor(0);
     e12:	66 83 ec 0c          	sub    $0xc,%esp
     e16:	66 6a 00             	pushl  $0x0
     e19:	66 e8 e3 f3 ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/start.c:16
    // install_system_call(2, test_system_call);
     e1f:	66 83 c4 08          	add    $0x8,%esp
     e23:	66 68 bd 0d 00 00    	pushl  $0xdbd
     e29:	66 6a 02             	pushl  $0x2
     e2c:	66 e8 75 ff ff ff    	calll  da7 <install_system_call>
/mnt/e/code/my_operating_system/os/kernel/start.c:19
    // while (1){}
    return 0;
}
     e32:	66 b8 00 00 00 00    	mov    $0x0,%eax
     e38:	66 83 c4 1c          	add    $0x1c,%esp
     e3c:	66 c3                	retl   

00000e3e <parser>:
parser():
/mnt/e/code/my_operating_system/os/kernel/tty.c:89
    }
    return ;
}


void parser(){
     e3e:	66 56                	push   %esi
     e40:	66 53                	push   %ebx
     e42:	66 83 ec 74          	sub    $0x74,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:93
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
     e46:	66 be 00 00 00 00    	mov    $0x0,%esi
/mnt/e/code/my_operating_system/os/kernel/tty.c:92


void parser(){
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
     e4c:	66 bb 00 00 00 00    	mov    $0x0,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:91
}


void parser(){
    char arguments[10][10];
    int input_start = 0;
     e52:	66 ba 00 00 00 00    	mov    $0x0,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     e58:	eb 64                	jmp    ebe <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:96
        if(input_buf[input_end] == ' ' || input_buf[input_end] == '\0'){
     e5a:	67 66 0f b6 83 80 20 	movzbl 0x2080(%ebx),%eax
     e61:	00 00 
     e63:	3c 20                	cmp    $0x20,%al
     e65:	0f 94 c1             	sete   %cl
     e68:	84 c0                	test   %al,%al
     e6a:	0f 94 c0             	sete   %al
     e6d:	08 c1                	or     %al,%cl
     e6f:	74 49                	je     eba <parser+0x7c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:97
            if (input_start == input_end){ // 如果并没有参数，那么继续
     e71:	66 39 da             	cmp    %ebx,%edx
     e74:	75 0a                	jne    e80 <parser+0x42>
/mnt/e/code/my_operating_system/os/kernel/tty.c:98
                input_start++;
     e76:	66 83 c2 01          	add    $0x1,%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:99
                input_end++;
     e7a:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:100
                continue;
     e7e:	eb 3e                	jmp    ebe <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:103
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
     e80:	66 89 d9             	mov    %ebx,%ecx
     e83:	66 29 d1             	sub    %edx,%ecx
     e86:	67 66 8d 04 b6       	lea    (%esi,%esi,4),%eax
     e8b:	67 66 8d 44 44 0c    	lea    0xc(%esp,%eax,2),%eax
     e91:	66 83 ec 04          	sub    $0x4,%esp
     e95:	66 51                	push   %ecx
     e97:	66 81 c2 80 20 00 00 	add    $0x2080,%edx
     e9e:	66 52                	push   %edx
     ea0:	66 50                	push   %eax
     ea2:	66 e8 10 fe ff ff    	calll  cb8 <strncpy>
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
     ea8:	67 66 8d 53 01       	lea    0x1(%ebx),%edx
/mnt/e/code/my_operating_system/os/kernel/tty.c:106
                input_start = input_end;
                arguments_num++;
     ead:	66 83 c6 01          	add    $0x1,%esi
     eb1:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:104
                input_end++;
                continue;
            }
            else {// 如果有参数，并且已经读到末尾了，那就复制到相应的区域
                strncpy(arguments[arguments_num], input_buf+input_start, input_end-input_start);
                input_end++;
     eb5:	66 89 d3             	mov    %edx,%ebx
     eb8:	eb 04                	jmp    ebe <parser+0x80>
/mnt/e/code/my_operating_system/os/kernel/tty.c:110
                input_start = input_end;
                arguments_num++;
            }
        }
        else {// 有参数，还没有读到末尾
            input_end++;
     eba:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:95
    char arguments[10][10];
    int input_start = 0;
    int input_end = 0;
    int arguments_num = 0;
    // 使用空格作为分隔符，将输入缓冲区的内容分割成几个参数分别存进arguments数组中
    while (input_end <= command_line_cursor){
     ebe:	66 3b 1e 60 20       	cmp    0x2060,%ebx
     ec3:	7e 95                	jle    e5a <parser+0x1c>
/mnt/e/code/my_operating_system/os/kernel/tty.c:117
        }
    }

    // 完成分词，开始进行解析。

    if(!strcmp(arguments[0],"run")){// 如果返回0，就是相等了
     ec5:	66 83 ec 08          	sub    $0x8,%esp
     ec9:	66 68 c4 1e 00 00    	pushl  $0x1ec4
     ecf:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     ed5:	66 50                	push   %eax
     ed7:	66 e8 17 fe ff ff    	calll  cf4 <strcmp>
     edd:	66 83 c4 10          	add    $0x10,%esp
     ee1:	66 85 c0             	test   %eax,%eax
     ee4:	75 31                	jne    f17 <parser+0xd9>
/mnt/e/code/my_operating_system/os/kernel/tty.c:122
        // 运行一个用户程序。
        // 先从软盘中加载一个指定程序到内存处，然后开始执行。
        // 考虑维护一个空闲空间的指针，然后每加载一个程序，如果可行的话。
        void (**my_program)();
        *my_program = 0x4000;
     ee6:	66 bb 00 00 00 00    	mov    $0x0,%ebx
     eec:	67 66 c7 03 00 40 00 	movl   $0x4000,(%ebx)
     ef3:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:123
        fs_load_by_name(arguments[1],*my_program);
     ef4:	66 83 ec 08          	sub    $0x8,%esp
     ef8:	66 68 00 40 00 00    	pushl  $0x4000
     efe:	67 66 8d 44 24 22    	lea    0x22(%esp),%eax
     f04:	66 50                	push   %eax
     f06:	66 e8 89 06 00 00    	calll  1595 <fs_load_by_name>
/mnt/e/code/my_operating_system/os/kernel/tty.c:124
        (*my_program)();
     f0c:	67 66 ff 13          	calll  *(%ebx)
     f10:	66 83 c4 10          	add    $0x10,%esp
     f14:	e9 1b 01             	jmp    1032 <core_header_data_segment+0x32>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     f17:	66 83 ec 08          	sub    $0x8,%esp
     f1b:	66 68 c8 1e 00 00    	pushl  $0x1ec8
     f21:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     f27:	66 50                	push   %eax
     f29:	66 e8 c5 fd ff ff    	calll  cf4 <strcmp>
     f2f:	66 83 c4 10          	add    $0x10,%esp
     f33:	66 85 c0             	test   %eax,%eax
     f36:	75 23                	jne    f5b <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126 (discriminator 1)
     f38:	66 83 fe 01          	cmp    $0x1,%esi
     f3c:	75 1d                	jne    f5b <parser+0x11d>
/mnt/e/code/my_operating_system/os/kernel/tty.c:127
        printf("\n\n");
     f3e:	66 83 ec 0c          	sub    $0xc,%esp
     f42:	66 68 cb 1e 00 00    	pushl  $0x1ecb
     f48:	66 e8 fd f8 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:128
        fs_show_root_file_table();
     f4e:	66 e8 a7 06 00 00    	calll  15fb <fs_show_root_file_table>
/mnt/e/code/my_operating_system/os/kernel/tty.c:126
        void (**my_program)();
        *my_program = 0x4000;
        fs_load_by_name(arguments[1],*my_program);
        (*my_program)();
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
     f54:	66 83 c4 10          	add    $0x10,%esp
     f58:	e9 d7 00             	jmp    1032 <core_header_data_segment+0x32>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     f5b:	66 83 ec 08          	sub    $0x8,%esp
     f5f:	66 68 ce 1e 00 00    	pushl  $0x1ece
     f65:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     f6b:	66 50                	push   %eax
     f6d:	66 e8 81 fd ff ff    	calll  cf4 <strcmp>
     f73:	66 83 c4 10          	add    $0x10,%esp
     f77:	66 85 c0             	test   %eax,%eax
     f7a:	75 23                	jne    f9f <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130 (discriminator 1)
     f7c:	66 83 fe 01          	cmp    $0x1,%esi
     f80:	75 1d                	jne    f9f <parser+0x161>
/mnt/e/code/my_operating_system/os/kernel/tty.c:131
        printf("\n\n");
     f82:	66 83 ec 0c          	sub    $0xc,%esp
     f86:	66 68 cb 1e 00 00    	pushl  $0x1ecb
     f8c:	66 e8 b9 f8 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:132
        reboot();
     f92:	66 e8 f2 fc ff ff    	calll  c8a <reboot>
/mnt/e/code/my_operating_system/os/kernel/tty.c:130
    }
    else if(!strcmp(arguments[0],"ls") && arguments_num == 1){
        printf("\n\n");
        fs_show_root_file_table();
    }
    else if(!strcmp(arguments[0],"reboot") && arguments_num == 1){
     f98:	66 83 c4 10          	add    $0x10,%esp
     f9c:	e9 93 00             	jmp    1032 <core_header_data_segment+0x32>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134
        printf("\n\n");
        reboot();
    }
    else if(!strcmp(arguments[0],"help") && arguments_num == 1){
     f9f:	66 83 ec 08          	sub    $0x8,%esp
     fa3:	66 68 d5 1e 00 00    	pushl  $0x1ed5
     fa9:	67 66 8d 44 24 18    	lea    0x18(%esp),%eax
     faf:	66 50                	push   %eax
     fb1:	66 e8 3d fd ff ff    	calll  cf4 <strcmp>
     fb7:	66 83 c4 10          	add    $0x10,%esp
     fbb:	66 85 c0             	test   %eax,%eax
     fbe:	75 58                	jne    1018 <core_header_data_segment+0x18>
/mnt/e/code/my_operating_system/os/kernel/tty.c:134 (discriminator 1)
     fc0:	66 83 fe 01          	cmp    $0x1,%esi
     fc4:	75 52                	jne    1018 <core_header_data_segment+0x18>
/mnt/e/code/my_operating_system/os/kernel/tty.c:135
        printf("\n\n");
     fc6:	66 83 ec 0c          	sub    $0xc,%esp
     fca:	66 68 cb 1e 00 00    	pushl  $0x1ecb
     fd0:	66 e8 75 f8 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:136
        printf("ls        : show the file in the root folder.\n");
     fd6:	67 66 c7 04 24 48 1f 	movl   $0x1f48,(%esp)
     fdd:	00 00 
     fdf:	66 e8 66 f8 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:137
        printf("run [name]: run the file in the root folder.\n");
     fe5:	67 66 c7 04 24 78 1f 	movl   $0x1f78,(%esp)
     fec:	00 00 
     fee:	66 e8 57 f8 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:138
        printf("help      : show the help message.\n");
     ff4:	67 66 c7 04 24 a8 1f 	movl   $0x1fa8,(%esp)
     ffb:	00 00 
     ffd:	66 e8 48 f8 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:139
        printf("reboot    : reboot the machine.\n");
    1003:	67 66 c7 04 24 cc 1f 	movl   $0x1fcc,(%esp)
    100a:	00 00 
    100c:	66 e8 39 f8 ff ff    	calll  84b <printf>
    1012:	66 83 c4 10          	add    $0x10,%esp
    1016:	eb 1a                	jmp    1032 <core_header_data_segment+0x32>
/mnt/e/code/my_operating_system/os/kernel/tty.c:142
    }
    else {
        printf("\n%s : command not found! \n", input_buf);
    1018:	66 83 ec 08          	sub    $0x8,%esp
    101c:	66 68 80 20 00 00    	pushl  $0x2080
    1022:	66 68 da 1e 00 00    	pushl  $0x1eda
    1028:	66 e8 1d f8 ff ff    	calll  84b <printf>
    102e:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:144
    }
    int current_cursor = get_cursor();
    1032:	66 e8 3c f2 ff ff    	calll  274 <get_cursor>
    1038:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:145
    command_line_row = (current_cursor / 80);
    103c:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    1042:	66 f7 ea             	imul   %edx
    1045:	66 c1 fa 05          	sar    $0x5,%edx
    1049:	66 89 16 3c 20       	mov    %edx,0x203c
/mnt/e/code/my_operating_system/os/kernel/tty.c:148
    // printf("arguments: %d|%s|%s|",arguments_num, arguments[0],arguments[1]);
    return ;
}
    104e:	66 83 c4 74          	add    $0x74,%esp
    1052:	66 5b                	pop    %ebx
    1054:	66 5e                	pop    %esi
    1056:	66 c3                	retl   

00001058 <create_a_line>:
create_a_line():
/mnt/e/code/my_operating_system/os/kernel/tty.c:151

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    1058:	66 83 ec 2c          	sub    $0x2c,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:152
    char message[30] = "walker@walker-pc ~ $ \0";
    105c:	66 a1 18 20          	mov    0x2018,%eax
    1060:	67 66 89 44 24 02    	mov    %eax,0x2(%esp)
    1066:	66 a1 1c 20          	mov    0x201c,%eax
    106a:	67 66 89 44 24 06    	mov    %eax,0x6(%esp)
    1070:	66 a1 20 20          	mov    0x2020,%eax
    1074:	67 66 89 44 24 0a    	mov    %eax,0xa(%esp)
    107a:	66 a1 24 20          	mov    0x2024,%eax
    107e:	67 66 89 44 24 0e    	mov    %eax,0xe(%esp)
    1084:	66 a1 28 20          	mov    0x2028,%eax
    1088:	67 66 89 44 24 12    	mov    %eax,0x12(%esp)
    108e:	66 0f b7 06 2c 20    	movzwl 0x202c,%eax
    1094:	67 89 44 24 16       	mov    %ax,0x16(%esp)
    1099:	66 0f b6 06 2e 20    	movzbl 0x202e,%eax
    109f:	67 88 44 24 18       	mov    %al,0x18(%esp)
    10a4:	67 66 c7 44 24 19 00 	movl   $0x0,0x19(%esp)
    10ab:	00 00 00 
    10ae:	67 c7 44 24 1d 00 00 	movw   $0x0,0x1d(%esp)
    10b5:	67 c6 44 24 1f 00    	movb   $0x0,0x1f(%esp)
/mnt/e/code/my_operating_system/os/kernel/tty.c:153
    for (int i = 0; i < MAX_BUF; i++){
    10bb:	66 b8 00 00 00 00    	mov    $0x0,%eax
    10c1:	eb 0c                	jmp    10cf <create_a_line+0x77>
/mnt/e/code/my_operating_system/os/kernel/tty.c:154 (discriminator 3)
        input_buf[i] = 0;
    10c3:	67 c6 80 80 20 00 00 	movb   $0x0,0x2080(%eax)
    10ca:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 3)
}

// 转移光标到命令行下一行,更新缓冲区，并且打印信息
void create_a_line(){
    char message[30] = "walker@walker-pc ~ $ \0";
    for (int i = 0; i < MAX_BUF; i++){
    10cb:	66 83 c0 01          	add    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/tty.c:153 (discriminator 1)
    10cf:	66 83 f8 63          	cmp    $0x63,%eax
    10d3:	7e ee                	jle    10c3 <create_a_line+0x6b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:156
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    10d5:	66 83 ec 0c          	sub    $0xc,%esp
    10d9:	67 66 8d 44 24 0e    	lea    0xe(%esp),%eax
    10df:	66 50                	push   %eax
    10e1:	66 e8 b5 fb ff ff    	calll  c9c <strlen>
    10e7:	66 a3 64 20          	mov    %eax,0x2064
/mnt/e/code/my_operating_system/os/kernel/tty.c:157
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    10eb:	66 03 06 60 20       	add    0x2060,%eax
    10f0:	66 89 c1             	mov    %eax,%ecx
    10f3:	66 ba 67 66 66 66    	mov    $0x66666667,%edx
    10f9:	66 f7 ea             	imul   %edx
    10fc:	66 c1 fa 05          	sar    $0x5,%edx
    1100:	66 c1 f9 1f          	sar    $0x1f,%ecx
    1104:	66 29 ca             	sub    %ecx,%edx
    1107:	66 89 d0             	mov    %edx,%eax
    110a:	66 03 06 3c 20       	add    0x203c,%eax
    110f:	66 83 c0 01          	add    $0x1,%eax
    1113:	66 a3 3c 20          	mov    %eax,0x203c
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    while(command_line_row > 23){
    1117:	66 83 c4 10          	add    $0x10,%esp
    111b:	eb 0c                	jmp    1129 <create_a_line+0xd1>
/mnt/e/code/my_operating_system/os/kernel/tty.c:159
        scroll_screen();
    111d:	66 e8 d9 fa ff ff    	calll  bfc <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:160
        command_line_row--;
    1123:	66 83 2e 3c 20 01    	subl   $0x1,0x203c
/mnt/e/code/my_operating_system/os/kernel/tty.c:158
    for (int i = 0; i < MAX_BUF; i++){
        input_buf[i] = 0;
    }
    message_length = strlen(message);
    command_line_row = command_line_row + (command_line_cursor + message_length)/80 + 1;
    while(command_line_row > 23){
    1129:	66 a1 3c 20          	mov    0x203c,%eax
    112d:	66 83 f8 17          	cmp    $0x17,%eax
    1131:	7f ea                	jg     111d <create_a_line+0xc5>
/mnt/e/code/my_operating_system/os/kernel/tty.c:162
        scroll_screen();
        command_line_row--;
    }
    command_line_cursor = 0;
    1133:	66 c7 06 60 20 00 00 	movl   $0x0,0x2060
    113a:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:163
    set_cursor(command_line_row * 80);
    113c:	66 83 ec 0c          	sub    $0xc,%esp
    1140:	67 66 8d 04 80       	lea    (%eax,%eax,4),%eax
    1145:	66 c1 e0 04          	shl    $0x4,%eax
    1149:	66 0f b7 d0          	movzwl %ax,%edx
    114d:	66 52                	push   %edx
    114f:	66 e8 ad f0 ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:165
    // printf("%d", command_line_row);
    printf("%s", message);
    1155:	66 83 c4 08          	add    $0x8,%esp
    1159:	67 66 8d 44 24 0a    	lea    0xa(%esp),%eax
    115f:	66 50                	push   %eax
    1161:	66 68 f5 1e 00 00    	pushl  $0x1ef5
    1167:	66 e8 de f6 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/tty.c:166
}
    116d:	66 83 c4 3c          	add    $0x3c,%esp
    1171:	66 c3                	retl   

00001173 <tty>:
tty():
/mnt/e/code/my_operating_system/os/kernel/tty.c:19
int message_length = 0;
int command_line_cursor = 0; // 光标在输入区的偏移量
char input_buf[MAX_BUF]; // 输入缓存区


void tty(){
    1173:	66 56                	push   %esi
    1175:	66 53                	push   %ebx
    1177:	66 83 ec 04          	sub    $0x4,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:21
    int keyboard_flag = 0;
    new_line_flag = 1;
    117b:	66 c7 06 38 20 01 00 	movl   $0x1,0x2038
    1182:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:22
    command_line_row = -1;
    1184:	66 c7 06 3c 20 ff ff 	movl   $0xffffffff,0x203c
    118b:	ff ff 
/mnt/e/code/my_operating_system/os/kernel/tty.c:23
    clean_screen();
    118d:	66 e8 4f fa ff ff    	calll  be2 <clean_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:24
    set_cursor(1974);
    1193:	66 83 ec 0c          	sub    $0xc,%esp
    1197:	66 68 b6 07 00 00    	pushl  $0x7b6
    119d:	66 e8 5f f0 ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:25
    set_cursor(0);
    11a3:	67 66 c7 04 24 00 00 	movl   $0x0,(%esp)
    11aa:	00 00 
    11ac:	66 e8 50 f0 ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:26
    print_my_name();
    11b2:	66 e8 a8 fa ff ff    	calll  c60 <print_my_name>
    11b8:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:29
    while (1){
        // 使用缓冲区数据更新
        if (new_line_flag){
    11bc:	66 83 3e 38 20 00    	cmpl   $0x0,0x2038
    11c2:	74 0f                	je     11d3 <tty+0x60>
/mnt/e/code/my_operating_system/os/kernel/tty.c:30
            create_a_line();
    11c4:	66 e8 8e fe ff ff    	calll  1058 <create_a_line>
/mnt/e/code/my_operating_system/os/kernel/tty.c:31
            new_line_flag = 0;
    11ca:	66 c7 06 38 20 00 00 	movl   $0x0,0x2038
    11d1:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:34
        }

        if(command_line_row == 23 && message_length + command_line_cursor > 80){
    11d3:	66 83 3e 3c 20 17    	cmpl   $0x17,0x203c
    11d9:	75 2f                	jne    120a <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:34 (discriminator 1)
    11db:	66 a1 60 20          	mov    0x2060,%eax
    11df:	66 03 06 64 20       	add    0x2064,%eax
    11e4:	66 83 f8 50          	cmp    $0x50,%eax
    11e8:	7e 20                	jle    120a <tty+0x97>
/mnt/e/code/my_operating_system/os/kernel/tty.c:35
            scroll_screen();
    11ea:	66 e8 0c fa ff ff    	calll  bfc <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:36
            command_line_row--;
    11f0:	66 83 2e 3c 20 01    	subl   $0x1,0x203c
/mnt/e/code/my_operating_system/os/kernel/tty.c:37
            set_cursor(1840);
    11f6:	66 83 ec 0c          	sub    $0xc,%esp
    11fa:	66 68 30 07 00 00    	pushl  $0x730
    1200:	66 e8 fc ef ff ff    	calll  202 <set_cursor>
    1206:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:39
        }
        putc(' ');// 用来删除光标处的文字，与输入退格的时候光标-1配合使用
    120a:	66 83 ec 0c          	sub    $0xc,%esp
    120e:	66 6a 20             	pushl  $0x20
    1211:	66 e8 b9 f0 ff ff    	calll  2d0 <putc>
/mnt/e/code/my_operating_system/os/kernel/tty.c:42

        // command_line_row = get_cursor() / 80;
        set_cursor(80*command_line_row + message_length);
    1217:	66 8b 16 3c 20       	mov    0x203c,%edx
    121c:	67 66 8d 14 92       	lea    (%edx,%edx,4),%edx
    1221:	66 89 d0             	mov    %edx,%eax
    1224:	66 c1 e0 04          	shl    $0x4,%eax
    1228:	03 06 64 20          	add    0x2064,%ax
    122c:	66 0f b7 c0          	movzwl %ax,%eax
    1230:	67 66 89 04 24       	mov    %eax,(%esp)
    1235:	66 e8 c7 ef ff ff    	calll  202 <set_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:43
        puts(input_buf, command_line_cursor);
    123b:	66 83 c4 08          	add    $0x8,%esp
    123f:	66 ff 36 60 20       	pushl  0x2060
    1244:	66 68 80 20 00 00    	pushl  $0x2080
    124a:	66 e8 75 f2 ff ff    	calll  4c5 <puts>
/mnt/e/code/my_operating_system/os/kernel/tty.c:46

        // 更新完了 检测键盘
        keyboard_flag = check_keyboard();
    1250:	66 e8 76 f9 ff ff    	calll  bcc <check_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:49

        // 如果返回1，则有输入，处理输入信息，否则继续循环。
        if (keyboard_flag){
    1256:	66 83 c4 10          	add    $0x10,%esp
    125a:	85 c0                	test   %ax,%ax
    125c:	0f 84 5c ff          	je     11bc <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:51
            // 处理键盘事件
            u16 keyboard_code =  get_keyboard();
    1260:	66 e8 76 f9 ff ff    	calll  bdc <get_keyboard>
/mnt/e/code/my_operating_system/os/kernel/tty.c:52
            u8 ascii_code = keyboard_code;
    1266:	66 89 c3             	mov    %eax,%ebx
/mnt/e/code/my_operating_system/os/kernel/tty.c:54
            u8 scan_code = keyboard_code >> 8;
            if (isprint(ascii_code)){
    1269:	66 83 ec 0c          	sub    $0xc,%esp
    126d:	66 0f b6 c0          	movzbl %al,%eax
    1271:	66 50                	push   %eax
    1273:	66 e8 2d f7 ff ff    	calll  9a6 <isprint>
    1279:	66 83 c4 10          	add    $0x10,%esp
    127d:	66 85 c0             	test   %eax,%eax
    1280:	74 20                	je     12a2 <tty+0x12f>
/mnt/e/code/my_operating_system/os/kernel/tty.c:55
                if (command_line_cursor <= MAX_BUF){
    1282:	66 a1 60 20          	mov    0x2060,%eax
    1286:	66 83 f8 64          	cmp    $0x64,%eax
    128a:	0f 8f 2e ff          	jg     11bc <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:56
                    input_buf[command_line_cursor++] = ascii_code;
    128e:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    1293:	66 89 16 60 20       	mov    %edx,0x2060
    1298:	67 88 98 80 20 00 00 	mov    %bl,0x2080(%eax)
    129f:	e9 1a ff             	jmp    11bc <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:59
                }
            }
            else if (ascii_code == 13){
    12a2:	80 fb 0d             	cmp    $0xd,%bl
    12a5:	75 1e                	jne    12c5 <tty+0x152>
/mnt/e/code/my_operating_system/os/kernel/tty.c:60
                new_line_flag = 1;
    12a7:	66 c7 06 38 20 01 00 	movl   $0x1,0x2038
    12ae:	00 00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:61
                input_buf[command_line_cursor] = '\0';
    12b0:	66 a1 60 20          	mov    0x2060,%eax
    12b4:	67 c6 80 80 20 00 00 	movb   $0x0,0x2080(%eax)
    12bb:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:62
                parser();
    12bc:	66 e8 7c fb ff ff    	calll  e3e <parser>
    12c2:	e9 f7 fe             	jmp    11bc <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:64
            }
            else if (ascii_code == 8){
    12c5:	80 fb 08             	cmp    $0x8,%bl
    12c8:	75 3e                	jne    1308 <tty+0x195>
/mnt/e/code/my_operating_system/os/kernel/tty.c:65
                if(command_line_cursor){
    12ca:	66 a1 60 20          	mov    0x2060,%eax
    12ce:	66 85 c0             	test   %eax,%eax
    12d1:	0f 84 e7 fe          	je     11bc <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:66
                    input_buf[--command_line_cursor] = 0;
    12d5:	67 66 8d 50 ff       	lea    -0x1(%eax),%edx
    12da:	66 89 16 60 20       	mov    %edx,0x2060
    12df:	67 c6 80 7f 20 00 00 	movb   $0x0,0x207f(%eax)
    12e6:	00 
/mnt/e/code/my_operating_system/os/kernel/tty.c:68
                    // 将光标设置为前一个位置，方便删除
                    int cur_cursor = get_cursor();
    12e7:	66 e8 87 ef ff ff    	calll  274 <get_cursor>
/mnt/e/code/my_operating_system/os/kernel/tty.c:69
                    set_cursor(cur_cursor-1);
    12ed:	66 83 ec 0c          	sub    $0xc,%esp
    12f1:	66 83 e8 01          	sub    $0x1,%eax
    12f5:	66 0f b7 c0          	movzwl %ax,%eax
    12f9:	66 50                	push   %eax
    12fb:	66 e8 01 ef ff ff    	calll  202 <set_cursor>
    1301:	66 83 c4 10          	add    $0x10,%esp
    1305:	e9 b4 fe             	jmp    11bc <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:72
                }
            }
            else if (ascii_code == 27){
    1308:	80 fb 1b             	cmp    $0x1b,%bl
    130b:	0f 85 ad fe          	jne    11bc <tty+0x49>
/mnt/e/code/my_operating_system/os/kernel/tty.c:73
                __asm__("mov $0x4c00, %ax");
    130f:	b8 00 4c             	mov    $0x4c00,%ax
/mnt/e/code/my_operating_system/os/kernel/tty.c:74
                __asm__("int $0x40");
    1312:	cd 40                	int    $0x40
    1314:	e9 a5 fe             	jmp    11bc <tty+0x49>

00001317 <tty_scroll_screen>:
tty_scroll_screen():
/mnt/e/code/my_operating_system/os/kernel/tty.c:169
    // printf("%d", command_line_row);
    printf("%s", message);
}


void tty_scroll_screen(){
    1317:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/tty.c:170
    if (get_cursor()/80 > 24){
    131b:	66 e8 53 ef ff ff    	calll  274 <get_cursor>
    1321:	3d cf 07             	cmp    $0x7cf,%ax
    1324:	76 0c                	jbe    1332 <tty_scroll_screen+0x1b>
/mnt/e/code/my_operating_system/os/kernel/tty.c:171
        scroll_screen();
    1326:	66 e8 d0 f8 ff ff    	calll  bfc <scroll_screen>
/mnt/e/code/my_operating_system/os/kernel/tty.c:172
        command_line_row--;
    132c:	66 83 2e 3c 20 01    	subl   $0x1,0x203c
/mnt/e/code/my_operating_system/os/kernel/tty.c:175
    }
    return ;
    1332:	66 83 c4 0c          	add    $0xc,%esp
    1336:	66 c3                	retl   

00001338 <init_fsystem>:
init_fsystem():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:14
FileDescriptor root[56];
u16 root_sector;
u16 first_cluster_by_sector;
u16 cluster2sector;

void init_fsystem(){
    1338:	66 83 ec 0c          	sub    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:15
    cluster2sector = 1;
    133c:	c7 06 20 2c 01 00    	movw   $0x1,0x2c20
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:16
    root_sector = 37;
    1342:	c7 06 00 21 25 00    	movw   $0x25,0x2100
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:17
    first_cluster_by_sector = root_sector + 1;  
    1348:	c7 06 22 2c 26 00    	movw   $0x26,0x2c22
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:18
    read_n_sector(root_sector,1, 0x1000, root);
    134e:	66 b8 20 25 00 00    	mov    $0x2520,%eax
    1354:	66 0f b7 c0          	movzwl %ax,%eax
    1358:	66 50                	push   %eax
    135a:	66 68 00 10 00 00    	pushl  $0x1000
    1360:	66 6a 01             	pushl  $0x1
    1363:	66 6a 25             	pushl  $0x25
    1366:	66 e8 ed f6 ff ff    	calll  a59 <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:19
    read_n_sector(1,2,0x1000, FAT_table);// 这个会覆盖掉root吗？
    136c:	66 b8 20 21 00 00    	mov    $0x2120,%eax
    1372:	66 0f b7 c0          	movzwl %ax,%eax
    1376:	66 50                	push   %eax
    1378:	66 68 00 10 00 00    	pushl  $0x1000
    137e:	66 6a 02             	pushl  $0x2
    1381:	66 6a 01             	pushl  $0x1
    1384:	66 e8 cf f6 ff ff    	calll  a59 <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:27
    // puti(FAT_table[0]);
    // puti(root[0].cluster_number);
    // puts(&root[0], 10);
    // puts(&root[1], 10);
    // puts(&root[2], 10);
}
    138a:	66 83 c4 2c          	add    $0x2c,%esp
    138e:	66 c3                	retl   

00001390 <_fs_find_descriptor_number_by_name>:
_fs_find_descriptor_number_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:29

u16 _fs_find_descriptor_number_by_name(char * file_name){
    1390:	66 57                	push   %edi
    1392:	66 56                	push   %esi
    1394:	66 53                	push   %ebx
    1396:	67 66 8b 7c 24 10    	mov    0x10(%esp),%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:30
    int file_name_length = strlen(file_name);
    139c:	66 83 ec 0c          	sub    $0xc,%esp
    13a0:	66 57                	push   %edi
    13a2:	66 e8 f4 f8 ff ff    	calll  c9c <strlen>
    13a8:	66 89 c6             	mov    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:31
    if (file_name_length >= 11) file_name_length = 11;
    13ab:	66 83 c4 10          	add    $0x10,%esp
    13af:	66 83 f8 0a          	cmp    $0xa,%eax
    13b3:	7e 06                	jle    13bb <_fs_find_descriptor_number_by_name+0x2b>
    13b5:	66 be 0b 00 00 00    	mov    $0xb,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
    13bb:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    13c1:	eb 2f                	jmp    13f2 <_fs_find_descriptor_number_by_name+0x62>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:34
        if (!strncmp(&root[i], file_name, file_name_length)){
    13c3:	66 89 d8             	mov    %ebx,%eax
    13c6:	66 c1 e0 05          	shl    $0x5,%eax
    13ca:	66 05 20 25 00 00    	add    $0x2520,%eax
    13d0:	66 83 ec 04          	sub    $0x4,%esp
    13d4:	66 56                	push   %esi
    13d6:	66 57                	push   %edi
    13d8:	66 50                	push   %eax
    13da:	66 e8 80 f9 ff ff    	calll  d60 <strncmp>
    13e0:	66 83 c4 10          	add    $0x10,%esp
    13e4:	66 85 c0             	test   %eax,%eax
    13e7:	75 05                	jne    13ee <_fs_find_descriptor_number_by_name+0x5e>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:35
            return i;
    13e9:	66 89 d8             	mov    %ebx,%eax
    13ec:	eb 10                	jmp    13fe <_fs_find_descriptor_number_by_name+0x6e>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33 (discriminator 2)

u16 _fs_find_descriptor_number_by_name(char * file_name){
    int file_name_length = strlen(file_name);
    if (file_name_length >= 11) file_name_length = 11;
    // TODO:这里的10是文件数，需要使用常量代替
    for (int i = 0; i < 10; i++){
    13ee:	66 83 c3 01          	add    $0x1,%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:33 (discriminator 1)
    13f2:	66 83 fb 09          	cmp    $0x9,%ebx
    13f6:	7e cb                	jle    13c3 <_fs_find_descriptor_number_by_name+0x33>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:38
        if (!strncmp(&root[i], file_name, file_name_length)){
            return i;
        }
    }
    return -1;
    13f8:	66 b8 ff ff ff ff    	mov    $0xffffffff,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:39
}
    13fe:	66 5b                	pop    %ebx
    1400:	66 5e                	pop    %esi
    1402:	66 5f                	pop    %edi
    1404:	66 c3                	retl   

00001406 <_fs_find_cluster_code_by_name>:
_fs_find_cluster_code_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:41

u16 _fs_find_cluster_code_by_name(char * file_name){
    1406:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:42
    int index = _fs_find_descriptor_number_by_name(file_name);
    140a:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    1410:	66 e8 7a ff ff ff    	calll  1390 <_fs_find_descriptor_number_by_name>
    1416:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:44
    if (index != -1)
        return root[index].cluster_code;
    141a:	66 c1 e0 05          	shl    $0x5,%eax
    141e:	67 66 0f b7 80 3a 25 	movzwl 0x253a(%eax),%eax
    1425:	00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:46
    return 0;
}
    1427:	66 83 c4 1c          	add    $0x1c,%esp
    142b:	66 c3                	retl   

0000142d <_fs_get_file_size_by_cluster_code>:
_fs_get_file_size_by_cluster_code():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:48

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    142d:	67 66 0f b7 54 24 04 	movzwl 0x4(%esp),%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:49
    int size = 0;
    1434:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:50
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    143a:	eb 1b                	jmp    1457 <_fs_get_file_size_by_cluster_code+0x2a>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:51
        size += 512*cluster2sector;
    143c:	66 0f b7 0e 20 2c    	movzwl 0x2c20,%ecx
    1442:	66 c1 e1 09          	shl    $0x9,%ecx
    1446:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:52
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
    1449:	66 0f b7 d2          	movzwl %dx,%edx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:53
        cluster_code = FAT_table[cluster_code];
    144d:	67 66 0f b7 94 12 20 	movzwl 0x2120(%edx,%edx,1),%edx
    1454:	21 00 00 
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:50
    return 0;
}

u16 _fs_get_file_size_by_cluster_code(u16 cluster_code){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    1457:	67 66 8d 4a fe       	lea    -0x2(%edx),%ecx
    145c:	83 f9 ed             	cmp    $0xffed,%cx
    145f:	76 db                	jbe    143c <_fs_get_file_size_by_cluster_code+0xf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:56
        size += 512*cluster2sector;
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
    1461:	66 f3 c3             	repz retl 

00001464 <_fs_show_file_by_descriptor_number>:
_fs_show_file_by_descriptor_number():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:58

void _fs_show_file_by_descriptor_number(u16 index){
    1464:	66 56                	push   %esi
    1466:	66 53                	push   %ebx
    1468:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:59
    int cluster_code = root[index].cluster_code;
    146c:	67 66 0f b7 44 24 14 	movzwl 0x14(%esp),%eax
    1473:	66 89 c6             	mov    %eax,%esi
    1476:	66 c1 e6 05          	shl    $0x5,%esi
    147a:	67 66 0f b7 9e 3a 25 	movzwl 0x253a(%esi),%ebx
    1481:	00 00 
    1483:	66 81 c6 20 25 00 00 	add    $0x2520,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:60
    printf("%d, %d\n" , index,cluster_code);
    148a:	66 53                	push   %ebx
    148c:	66 50                	push   %eax
    148e:	66 68 f8 1e 00 00    	pushl  $0x1ef8
    1494:	66 e8 b1 f3 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:62
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    149a:	67 66 89 1c 24       	mov    %ebx,(%esp)
    149f:	66 e8 88 ff ff ff    	calll  142d <_fs_get_file_size_by_cluster_code>
    14a5:	66 83 c4 0c          	add    $0xc,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:61
}

void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
    14a9:	66 0f b7 c0          	movzwl %ax,%eax
    14ad:	66 50                	push   %eax
    14af:	66 56                	push   %esi
    14b1:	66 68 00 1f 00 00    	pushl  $0x1f00
    14b7:	66 e8 8e f3 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:63
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    14bd:	66 83 c4 10          	add    $0x10,%esp
    14c1:	eb 20                	jmp    14e3 <_fs_show_file_by_descriptor_number+0x7f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:64
        printf("-%d", cluster_code);
    14c3:	66 83 ec 08          	sub    $0x8,%esp
    14c7:	66 53                	push   %ebx
    14c9:	66 68 11 1f 00 00    	pushl  $0x1f11
    14cf:	66 e8 76 f3 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:65
        cluster_code = FAT_table[cluster_code];
    14d5:	67 66 0f b7 9c 1b 20 	movzwl 0x2120(%ebx,%ebx,1),%ebx
    14dc:	21 00 00 
    14df:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:63
void _fs_show_file_by_descriptor_number(u16 index){
    int cluster_code = root[index].cluster_code;
    printf("%d, %d\n" , index,cluster_code);
    printf("%s   | %d byte |", (char *)&root[index],
                             _fs_get_file_size_by_cluster_code(cluster_code));
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    14e3:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
    14e8:	66 3d ed ff 00 00    	cmp    $0xffed,%eax
    14ee:	76 d3                	jbe    14c3 <_fs_show_file_by_descriptor_number+0x5f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:67
        printf("-%d", cluster_code);
        cluster_code = FAT_table[cluster_code];
    }
    printf("-|\n");
    14f0:	66 83 ec 0c          	sub    $0xc,%esp
    14f4:	66 68 15 1f 00 00    	pushl  $0x1f15
    14fa:	66 e8 4b f3 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:69
    return ;
}
    1500:	66 83 c4 14          	add    $0x14,%esp
    1504:	66 5b                	pop    %ebx
    1506:	66 5e                	pop    %esi
    1508:	66 c3                	retl   

0000150a <_fs_load_by_cluster_code>:
_fs_load_by_cluster_code():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:71

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
    150a:	66 57                	push   %edi
    150c:	66 56                	push   %esi
    150e:	66 53                	push   %ebx
    1510:	67 66 8b 74 24 14    	mov    0x14(%esp),%esi
    1516:	67 66 0f b7 5c 24 10 	movzwl 0x10(%esp),%ebx
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:72
    int size = 0;
    151d:	66 bf 00 00 00 00    	mov    $0x0,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:73
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    1523:	eb 5b                	jmp    1580 <_fs_load_by_cluster_code+0x76>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:74
        size += 512*cluster2sector;
    1525:	66 0f b7 16 20 2c    	movzwl 0x2c20,%edx
    152b:	66 89 d0             	mov    %edx,%eax
    152e:	66 c1 e0 09          	shl    $0x9,%eax
    1532:	66 01 c7             	add    %eax,%edi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:75
        int sector_number = first_cluster_by_sector + (cluster_code-2)*cluster2sector;
    1535:	66 0f b7 0e 22 2c    	movzwl 0x2c22,%ecx
    153b:	66 0f b7 db          	movzwl %bx,%ebx
    153f:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
    1544:	66 0f af c2          	imul   %edx,%eax
    1548:	66 01 c8             	add    %ecx,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:76
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
    154b:	66 0f b7 ce          	movzwl %si,%ecx
    154f:	66 51                	push   %ecx
    1551:	66 68 00 10 00 00    	pushl  $0x1000
    1557:	66 52                	push   %edx
    1559:	66 0f b7 c0          	movzwl %ax,%eax
    155d:	66 50                	push   %eax
    155f:	66 e8 f4 f4 ff ff    	calll  a59 <read_n_sector>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:77
        program = program+cluster2sector*512;
    1565:	66 0f b7 06 20 2c    	movzwl 0x2c20,%eax
    156b:	66 c1 e0 09          	shl    $0x9,%eax
    156f:	66 01 c6             	add    %eax,%esi
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:78
        cluster_code = FAT_table[cluster_code];
    1572:	67 66 0f b7 9c 1b 20 	movzwl 0x2120(%ebx,%ebx,1),%ebx
    1579:	21 00 00 
    157c:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:73
    return ;
}

u16 _fs_load_by_cluster_code(u16 cluster_code, void(*program)()){
    int size = 0;
    while (0x0002 <= cluster_code && cluster_code <= 0xFFEF){
    1580:	67 66 8d 43 fe       	lea    -0x2(%ebx),%eax
    1585:	83 f8 ed             	cmp    $0xffed,%ax
    1588:	76 9b                	jbe    1525 <_fs_load_by_cluster_code+0x1b>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:81
        read_n_sector(sector_number, cluster2sector, 0x1000, program);
        program = program+cluster2sector*512;
        cluster_code = FAT_table[cluster_code];
    }
    return size;
}
    158a:	66 89 f8             	mov    %edi,%eax
    158d:	66 5b                	pop    %ebx
    158f:	66 5e                	pop    %esi
    1591:	66 5f                	pop    %edi
    1593:	66 c3                	retl   

00001595 <fs_load_by_name>:
fs_load_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:84


u16 fs_load_by_name(char * file_name, void (*program)()){
    1595:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:85
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
    1599:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    159f:	66 e8 61 fe ff ff    	calll  1406 <_fs_find_cluster_code_by_name>
    15a5:	66 0f b7 c0          	movzwl %ax,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:86
    if (cluster_code){
    15a9:	66 83 c4 10          	add    $0x10,%esp
    15ad:	66 85 c0             	test   %eax,%eax
    15b0:	74 18                	je     15ca <fs_load_by_name+0x35>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:87
        return _fs_load_by_cluster_code(cluster_code, program);
    15b2:	66 83 ec 08          	sub    $0x8,%esp
    15b6:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    15bc:	66 50                	push   %eax
    15be:	66 e8 46 ff ff ff    	calll  150a <_fs_load_by_cluster_code>
    15c4:	66 83 c4 10          	add    $0x10,%esp
    15c8:	eb 06                	jmp    15d0 <fs_load_by_name+0x3b>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:90
    }
    else {
        return 0;
    15ca:	66 b8 00 00 00 00    	mov    $0x0,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:92
    }
}
    15d0:	66 83 c4 0c          	add    $0xc,%esp
    15d4:	66 c3                	retl   

000015d6 <fs_get_file_size>:
fs_get_file_size():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:95


u16 fs_get_file_size(char * file_name){
    15d6:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:96
    int cluster_code = _fs_find_cluster_code_by_name(file_name);
    15da:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    15e0:	66 e8 20 fe ff ff    	calll  1406 <_fs_find_cluster_code_by_name>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:97
    return _fs_get_file_size_by_cluster_code(cluster_code);
    15e6:	66 0f b7 c0          	movzwl %ax,%eax
    15ea:	67 66 89 04 24       	mov    %eax,(%esp)
    15ef:	66 e8 38 fe ff ff    	calll  142d <_fs_get_file_size_by_cluster_code>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:98
}
    15f5:	66 83 c4 1c          	add    $0x1c,%esp
    15f9:	66 c3                	retl   

000015fb <fs_show_root_file_table>:
fs_show_root_file_table():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:100

void fs_show_root_file_table(){
    15fb:	66 53                	push   %ebx
    15fd:	66 83 ec 08          	sub    $0x8,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:101
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    1601:	66 68 19 1f 00 00    	pushl  $0x1f19
    1607:	66 68 21 1f 00 00    	pushl  $0x1f21
    160d:	66 68 2b 1f 00 00    	pushl  $0x1f2b
    1613:	66 68 36 1f 00 00    	pushl  $0x1f36
    1619:	66 e8 2c f2 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:102
    printf("------------------------------------\n\r");
    161f:	67 66 c7 04 24 f0 1f 	movl   $0x1ff0,(%esp)
    1626:	00 00 
    1628:	66 e8 1d f2 ff ff    	calll  84b <printf>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104
    int file_number = 7;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
    162e:	66 83 c4 10          	add    $0x10,%esp
    1632:	66 bb 00 00 00 00    	mov    $0x0,%ebx
    1638:	eb 18                	jmp    1652 <fs_show_root_file_table+0x57>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:105 (discriminator 3)
        _fs_show_file_by_descriptor_number(i);
    163a:	66 83 ec 0c          	sub    $0xc,%esp
    163e:	66 0f b7 c3          	movzwl %bx,%eax
    1642:	66 50                	push   %eax
    1644:	66 e8 1a fe ff ff    	calll  1464 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104 (discriminator 3)

void fs_show_root_file_table(){
    printf("%s   | %s | %s\n", "file name ", "file size", "cluster");
    printf("------------------------------------\n\r");
    int file_number = 7;// TODO:文件数量需要设置！
    for(int i = 0; i < file_number; i++){
    164a:	66 83 c3 01          	add    $0x1,%ebx
    164e:	66 83 c4 10          	add    $0x10,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:104 (discriminator 1)
    1652:	66 83 fb 06          	cmp    $0x6,%ebx
    1656:	7e e2                	jle    163a <fs_show_root_file_table+0x3f>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:108
        _fs_show_file_by_descriptor_number(i);
    }
    return ;
}
    1658:	66 83 c4 08          	add    $0x8,%esp
    165c:	66 5b                	pop    %ebx
    165e:	66 c3                	retl   

00001660 <fs_show_file_by_name>:
fs_show_file_by_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:110

void fs_show_file_by_name(char * file_name){
    1660:	66 83 ec 18          	sub    $0x18,%esp
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:111
    int descriptor_index = _fs_find_descriptor_number_by_name(file_name);
    1664:	67 66 ff 74 24 1c    	pushl  0x1c(%esp)
    166a:	66 e8 20 fd ff ff    	calll  1390 <_fs_find_descriptor_number_by_name>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:112
    _fs_show_file_by_descriptor_number(descriptor_index);
    1670:	66 0f b7 c0          	movzwl %ax,%eax
    1674:	67 66 89 04 24       	mov    %eax,(%esp)
    1679:	66 e8 e5 fd ff ff    	calll  1464 <_fs_show_file_by_descriptor_number>
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:114
    return ;
}
    167f:	66 83 c4 1c          	add    $0x1c,%esp
    1683:	66 c3                	retl   

00001685 <fs_show_floppy_infomation>:
fs_show_floppy_infomation():
/mnt/e/code/my_operating_system/os/kernel/../lib/fsystem.c:117


void fs_show_floppy_infomation(){
    1685:	66 f3 c3             	repz retl 

00001688 <move_name>:
move_name():
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:9

void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    1688:	66 0f b7 0e 9e 0f    	movzwl 0xf9e,%ecx
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10
    for (int i =78; i >= 0; i--){
    168e:	66 b8 4e 00 00 00    	mov    $0x4e,%eax
    1694:	eb 16                	jmp    16ac <move_name+0x24>
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:11 (discriminator 3)
        text_line[i+1] = text_line[i];
    1696:	67 66 0f b7 94 00 00 	movzwl 0xf00(%eax,%eax,1),%edx
    169d:	0f 00 00 
    16a0:	67 89 94 00 02 0f 00 	mov    %dx,0xf02(%eax,%eax,1)
    16a7:	00 
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10 (discriminator 3)
void move_name(){
    u16 *text_line = 1920*2;
    // text_line 0-79
    // text_line[80]
    u16 last_char = text_line[79];
    for (int i =78; i >= 0; i--){
    16a8:	66 83 e8 01          	sub    $0x1,%eax
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:10 (discriminator 1)
    16ac:	66 85 c0             	test   %eax,%eax
    16af:	79 e5                	jns    1696 <move_name+0xe>
/mnt/e/code/my_operating_system/os/kernel/../lib/style.c:13
        text_line[i+1] = text_line[i];
    }
    text_line[0] = last_char;
    16b1:	89 0e 00 0f          	mov    %cx,0xf00
    16b5:	66 c3                	retl   
