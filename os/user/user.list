     1                                  %include "../include/macro.inc"
     2                              <1> loader_code_segment equ 0800h
     3                              <1> loader_code_entry equ 0000h
     4                              <1> kernel_code_segment equ 1000h
     5                              <1> kernel_code_entry equ 0000h
     6                              <1> 
     7                              <1> core_header_data_segment equ 1000h
     8                              <1> 
     9                              <1> core_code_entry_header_offset equ 0x2A
    10                              <1> core_code_segment_header_offset equ 0x2C
    11                              <1> core_data_segment_header_offset equ 0x2E
    12                              <1> core_stack_segment_header_offset equ 0x30
    13                              <1> 
    14                              <1> core_stack_length equ 256
    15                              <1> core_entry_header_offset equ 0x32
    16                              <1> 
    17                              <1> user1_program_address equ 0x2000
    18                              <1> user2_program_address equ 0x3000
    19                              <1> user3_program_address equ 0x4000
    20                              <1> user4_program_address equ 0x5000
    21                              <1> 
    22                              <1> user1_bound_x_up equ 1 
    23                              <1> user1_bound_x_down equ 12
    24                              <1> user1_bound_y_left equ 1
    25                              <1> user1_bound_y_right equ 39 
    26                              <1> 
    27                              <1> user2_bound_x_up equ 1 
    28                              <1> user2_bound_x_down equ 12
    29                              <1> user2_bound_y_left equ 40
    30                              <1> user2_bound_y_right equ 78 
    31                              <1> 
    32                              <1> user3_bound_x_up equ 13 
    33                              <1> user3_bound_x_down equ 23
    34                              <1> user3_bound_y_left equ 1
    35                              <1> user3_bound_y_right equ 39
    36                              <1> 
    37                              <1> user4_bound_x_up equ 13 
    38                              <1> user4_bound_x_down equ 23
    39                              <1> user4_bound_y_left equ 40
    40                              <1> user4_bound_y_right equ 78 
    41                              <1> 
    42                              <1> %macro retl 0
    43                              <1>     db 66h
    44                              <1>     ret
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> %macro calll 1
    48                              <1>     db 66h
    49                              <1>     call %1
    50                              <1> %endmacro
    51                                  section my_user2_program_header vstart=0x50000
    52                                      delay equ 50000					; 计时器延迟计数,用于控制画框的速度
    53                                      ddelay equ 5					; 计时器延迟计数,用于控制画框的速度
    54                                  start:
    55                                  	;xor ax,ax					; AX = 0   程序加载到0000：100h才能正确执行
    56 00000000 8CC8                        mov ax,cs
    57 00000002 8ED8                    	mov ds,ax					; DS = CS
    58 00000004 8EC0                    	mov es,ax					; ES = CS
    59 00000006 B800B8                  	mov ax,0B800h				; 文本窗口显存起始地址
    60 00000009 8EE8                    	mov gs,ax					; GS = B800h
    61 0000000B E81501                  	call clean_screen
    62                                  
    63 0000000E B80113                  	mov ax, 1301h		 ; AH = 13h（功能号）、AL = 01h（光标置于串尾）
    64 00000011 BB0700                  	mov bx, 0007h		 ; 页号为0(BH = 0) 黑底白字(BL = 07h)
    65 00000014 B228                    	mov dl, 40 		 ; 列号=0
    66 00000016 B617                    	mov dh, 23		       ; 行号=0
    67 00000018 B94F00                  	mov cx, user2_MessageLength  ; CX = 串长（=9）
    68 0000001B BD[2000]                	mov bp, user2_Message		 ; es:BP=当前串的偏移地址
    69 0000001E CD10                    	int 10h			 ; BIOS的10h功能：显示一行字符
    70                                  
    71                                  user2_Message:
    72 00000020 456E74657220712074-         db 'Enter q to return system menu!                                                 '
    73 00000029 6F2072657475726E20-
    74 00000032 73797374656D206D65-
    75 0000003B 6E7521202020202020-
    76 00000044 202020202020202020-
    77 0000004D 202020202020202020-
    78 00000056 202020202020202020-
    79 0000005F 202020202020202020-
    80 00000068 20202020202020     
    81                                  user2_MessageLength equ ($-user2_Message)
    82                                  
    83                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    84                                  loop1:
    85 0000006F FF0E[5101]              	dec word[count]			; 递减计数变量
    86 00000073 75FA                    	jnz loop1					; >0：跳转;
    87 00000075 C706[5101]50C3          	mov word[count],delay
    88 0000007B FF0E[5301]              	dec word[dcount]			; 递减计数变量
    89 0000007F 75EE                          jnz loop1
    90 00000081 C706[5101]50C3          	mov word[count],delay
    91 00000087 C706[5301]0500          	mov word[dcount],ddelay
    92                                  
    93                                  check_keyboard:
    94 0000008D B401                        mov ah, 01h
    95 0000008F CD16                        int 16h
    96                                      ; 不断查询键盘缓冲区的状况
    97                                      ; 若有按键，则zf为0，若无按键，则zf为1，跳回去继续查询
    98 00000091 740A                        jz clean_current_char
    99                                      ; 有字符输入,从al中读取键盘输入
   100 00000093 B400                        mov ah, 00h
   101 00000095 CD16                        int 16h
   102                                  
   103 00000097 3C71                        cmp al, 'q' ; 如果键入q则退出
   104 00000099 75F2                        jnz check_keyboard
   105 0000009B CD40                    	int 40h
   106                                  clean_current_char: ; 清除当前字母所占显存位置,准备画下一个字母显存
   107 0000009D 31C0                          xor ax,ax                 ; 计算显存地址
   108 0000009F A1[5501]                      mov ax,word[x]
   109 000000A2 BB5000                  	mov bx,80
   110 000000A5 F7E3                    	mul bx
   111 000000A7 0306[5901]              	add ax,word[y]
   112 000000AB BB0200                  	mov bx,2
   113 000000AE F7E3                    	mul bx
   114 000000B0 89C3                    	mov bx,ax
   115 000000B2 B407                    	mov ah,07h				
   116 000000B4 B020                    	mov al,20h		
   117 000000B6 658907                  	mov [gs:bx],ax  		;  显示字符的ASCII码值
   118                                  
   119                                  check_x:
   120 000000B9 B80100                      mov ax, user2_bound_x_up
   121 000000BC 3906[5501]                  cmp word [x], ax
   122 000000C0 740B                        jz toggle_x_direct
   123 000000C2 B80C00                      mov ax, user2_bound_x_down
   124 000000C5 3906[5501]                  cmp word [x], ax
   125 000000C9 7402                        jz toggle_x_direct
   126 000000CB EB0A                        jmp check_y
   127                                  toggle_x_direct:
   128 000000CD B80000                      mov ax, 0
   129 000000D0 2B06[5701]                  sub ax, word [x_direct]
   130 000000D4 A3[5701]                    mov word [x_direct], ax
   131                                  check_y:
   132 000000D7 B82800                      mov ax, user2_bound_y_left
   133 000000DA 3906[5901]                  cmp word [y], ax
   134 000000DE 740B                        jz toggle_y_direct
   135 000000E0 B84E00                      mov ax, user2_bound_y_right
   136 000000E3 3906[5901]                  cmp word [y], ax
   137 000000E7 7402                        jz toggle_y_direct
   138 000000E9 EB0A                        jmp char_move
   139                                  toggle_y_direct:    
   140 000000EB B80000                      mov ax, 0
   141 000000EE 2B06[5B01]                  sub ax, word [y_direct]
   142 000000F2 A3[5B01]                    mov word [y_direct], ax
   143                                  
   144                                  char_move:
   145 000000F5 A1[5701]                    mov ax, word [x_direct]
   146 000000F8 0106[5501]                  add word [x], ax
   147 000000FC A1[5B01]                    mov ax, word [y_direct]
   148 000000FF 0106[5901]                  add word [y], ax
   149                                  show:	
   150 00000103 31C0                        xor ax,ax                 ; 计算显存地址
   151 00000105 A1[5501]                    mov ax,word[x]
   152 00000108 BB5000                  	mov bx,80
   153 0000010B F7E3                    	mul bx
   154 0000010D 0306[5901]              	add ax,word[y]
   155 00000111 BB0200                  	mov bx,2
   156 00000114 F7E3                    	mul bx
   157 00000116 89C3                    	mov bx,ax
   158 00000118 88FC                    	mov ah,bh				;  0000：黑底、1111：亮白字（默认值为07h）
   159 0000011A A0[5D01]                	mov al,byte[char]			;  AL = 显示字符值（默认值为20h=空格符）
   160 0000011D 658907                  	mov [gs:bx],ax  		;  显示字符的ASCII码值
   161 00000120 E94CFF                  	jmp loop1
   162                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   163                                  ; 清屏函数
   164                                  ; 被调用函数不保存任何寄存器,需要改进	
   165                                  clean_screen:
   166                                  	; 存放寄存器
   167 00000123 50                      	push ax
   168 00000124 51                      	push cx
   169 00000125 56                      	push si
   170 00000126 06                      	push es
   171                                  	; 设置段寄存器
   172 00000127 B800B8                  	mov ax, 0xB800
   173 0000012A 8EC0                    	mov es, ax
   174 0000012C B9D007                  	mov cx, 2000
   175 0000012F BE0000                  	mov si, 0
   176                                  clean_screen_loop:
   177 00000132 26C60420                	mov byte [es:si], 20h
   178 00000136 46                      	inc si
   179 00000137 26C60407                	mov byte [es:si], 07h
   180 0000013B 46                      	inc si
   181 0000013C E2F4                    	loop clean_screen_loop
   182                                  clean_screen_exit:
   183                                  
   184 0000013E B800B8                      mov ax, 0b800h
   185 00000141 8EC0                        mov es, ax
   186 00000143 B80207                      mov ax, 0702h
   187 00000146 26A30000                    mov [es:0x00], ax
   188                                  
   189 0000014A 07                      	pop es
   190 0000014B 5E                      	pop si
   191 0000014C 59                      	pop cx
   192 0000014D 58                      	pop ax
   193 0000014E C3                      	ret
   194                                  
   195                                  end:
   196 0000014F EBFE                        jmp $                   ; 停止画框，无限循环 
   197                                  
   198                                  datadef:	
   199 00000151 50C3                        count dw delay
   200 00000153 0500                        dcount dw ddelay
   201 00000155 0200                        x    dw user2_bound_x_up+1
   202 00000157 0100                        x_direct dw 1
   203 00000159 2900                        y    dw user2_bound_y_left+1
   204 0000015B 0100                        y_direct dw 1
   205 0000015D 02                          char db 2
   206                                  
