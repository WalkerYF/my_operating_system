     1                                  ; 程序源代码（stone.asm）
     2                                  ; 本程序在文本方式显示器上从左边射出一个*号,以45度向右下运动，撞到边框后反射,如此类推.
     3                                  ;  凌应标 2014/3
     4                                  ;   MASM汇编格式
     5                                       Dn_Rt equ 1                  ;D-Down,U-Up,R-right,L-Left
     6                                       Up_Rt equ 2                  ;
     7                                       Up_Lt equ 3                  ;
     8                                       Dn_Lt equ 4                  ;
     9                                       delay equ 50000					; 计时器延迟计数,用于控制画框的速度
    10                                       ddelay equ 5					; 计时器延迟计数,用于控制画框的速度
    11                                       ;.386
    12                                       ;org 100h					; 程序加载到100h，可用于生成COM
    13                                      BOOTSEG     equ 0x07c0 
    14                                      DISPLAYSEG  equ 0xb800  
    15                                    
    16                                  _start:  
    17                                    
    18                                      ;初始化数据段，使其指向段基址0X7C0处，即Boot代码被加载的地方  
    19 00000000 B8C007                      mov     ax, BOOTSEG  
    20 00000003 8ED8                        mov     ds, ax  
    21                                    
    22                                      ;将文本显示内存段基址 放在ES中，供后面显示字符使用  
    23 00000005 B800B8                      mov     ax, DISPLAYSEG  
    24 00000008 8EC0                        mov     es, ax  
    25                                    
    26 0000000A 8B0E[B701]                  mov     cx, [msglen]  
    27 0000000E BE[A501]                    mov     si, message  
    28 00000011 31FF                        xor     di, di 
    29                                   
    30                                  print_str:  
    31 00000013 8A04                        mov     al, [si]  
    32 00000015 268805                      mov     [es:di], al  
    33 00000018 46                          inc   si  
    34 00000019 47                          inc     di  
    35 0000001A 26C6056C                    mov byte    [es:di], 0x6c  
    36 0000001E 47                          inc     di  
    37 0000001F E2F2                        loop    print_str  
    38                                    
    39                                      ;jmp near $      ;死循环，程序在此处终止  
    40                                  	
    41                                  start:
    42 00000021 31C0                    	xor ax,ax					; AX = 0   程序加载到0000：100h才能正确执行
    43 00000023 8CC8                        mov ax,cs
    44 00000025 8EC0                    	mov es,ax					; ES = 0
    45 00000027 8ED8                    	mov ds,ax					; DS = CS
    46 00000029 8EC0                    	mov es,ax					; ES = CS
    47 0000002B B800B8                  	mov ax,0B800h				; 文本窗口显存起始地址
    48 0000002E 8EC0                    	mov es,ax					; GS = B800h
    49 00000030 C606[BD01]01            	mov byte[rdul],1
    50 00000035 C706[BE01]0800          	mov word[x],8
    51 0000003B C706[C001]0000          	mov word[y],0
    52 00000041 C706[B901]50C3          	mov word[count],delay
    53 00000047 C706[BB01]0500          	mov word[dcount],ddelay
    54 0000004D C606[C201]41                mov byte[char],'A'
    55                                  loop1:
    56 00000052 FF0E[B901]              	dec word[count]				; 递减计数变量
    57 00000056 75FA                    	jnz loop1					; >0：跳转;
    58 00000058 C706[B901]50C3          	mov word[count],delay
    59 0000005E FF0E[BB01]              	dec word[dcount]				; 递减计数变量
    60 00000062 75EE                          jnz loop1
    61 00000064 C706[B901]50C3          	mov word[count],delay
    62 0000006A C706[BB01]0500          	mov word[dcount],ddelay
    63                                  
    64 00000070 B001                          mov al,1
    65 00000072 3A06[BD01]                    cmp al,byte[rdul]
    66 00000076 741E                    	jz  DnRt
    67 00000078 B002                          mov al,2
    68 0000007A 3A06[BD01]                    cmp al,byte[rdul]
    69 0000007E 7453                    	jz  UpRt
    70 00000080 B003                          mov al,3
    71 00000082 3A06[BD01]                    cmp al,byte[rdul]
    72 00000086 0F848500                	jz  UpLt
    73 0000008A B004                          mov al,4
    74 0000008C 3A06[BD01]                    cmp al,byte[rdul]
    75 00000090 0F84B500                	jz  DnLt
    76 00000094 EBFE                          jmp $	
    77                                  
    78                                  DnRt:
    79 00000096 FF06[BE01]              	inc word[x]
    80 0000009A FF06[C001]              	inc word[y]
    81 0000009E 8B1E[BE01]              	mov bx,word[x]
    82 000000A2 B81900                  	mov ax,25
    83 000000A5 29D8                    	sub ax,bx
    84 000000A7 740E                          jz  dr2ur
    85 000000A9 8B1E[C001]              	mov bx,word[y]
    86 000000AD B85000                  	mov ax,80
    87 000000B0 29D8                    	sub ax,bx
    88 000000B2 7411                          jz  dr2dl
    89 000000B4 E9CC00                  	jmp show
    90                                  dr2ur:
    91 000000B7 C706[BE01]1700                mov word[x],23
    92 000000BD C606[BD01]02                  mov byte[rdul],Up_Rt	
    93 000000C2 E9BE00                        jmp show
    94                                  dr2dl:
    95 000000C5 C706[C001]4E00                mov word[y],78
    96 000000CB C606[BD01]04                  mov byte[rdul],Dn_Lt	
    97 000000D0 E9B000                        jmp show
    98                                  
    99                                  UpRt:
   100 000000D3 FF0E[BE01]              	dec word[x]
   101 000000D7 FF06[C001]              	inc word[y]
   102 000000DB 8B1E[C001]              	mov bx,word[y]
   103 000000DF B85000                  	mov ax,80
   104 000000E2 29D8                    	sub ax,bx
   105 000000E4 740E                          jz  ur2ul
   106 000000E6 8B1E[BE01]              	mov bx,word[x]
   107 000000EA B8FFFF                  	mov ax,-1
   108 000000ED 29D8                    	sub ax,bx
   109 000000EF 7411                          jz  ur2dr
   110 000000F1 E98F00                  	jmp show
   111                                  ur2ul:
   112 000000F4 C706[C001]4E00                mov word[y],78
   113 000000FA C606[BD01]03                  mov byte[rdul],Up_Lt	
   114 000000FF E98100                        jmp show
   115                                  ur2dr:
   116 00000102 C706[BE01]0100                mov word[x],1
   117 00000108 C606[BD01]01                  mov byte[rdul],Dn_Rt	
   118 0000010D EB74                          jmp show
   119                                  
   120                                  	
   121                                  	
   122                                  UpLt:
   123 0000010F FF0E[BE01]              	dec word[x]
   124 00000113 FF0E[C001]              	dec word[y]
   125 00000117 8B1E[BE01]              	mov bx,word[x]
   126 0000011B B8FFFF                  	mov ax,-1
   127 0000011E 29D8                    	sub ax,bx
   128 00000120 740D                          jz  ul2dl
   129 00000122 8B1E[C001]              	mov bx,word[y]
   130 00000126 B8FFFF                  	mov ax,-1
   131 00000129 29D8                    	sub ax,bx
   132 0000012B 740F                          jz  ul2ur
   133 0000012D EB54                    	jmp show
   134                                  
   135                                  ul2dl:
   136 0000012F C706[BE01]0100                mov word[x],1
   137 00000135 C606[BD01]04                  mov byte[rdul],Dn_Lt	
   138 0000013A EB47                          jmp show
   139                                  ul2ur:
   140 0000013C C706[C001]0100                mov word[y],1
   141 00000142 C606[BD01]02                  mov byte[rdul],Up_Rt	
   142 00000147 EB3A                          jmp show
   143                                  
   144                                  	
   145                                  	
   146                                  DnLt:
   147 00000149 FF06[BE01]              	inc word[x]
   148 0000014D FF0E[C001]              	dec word[y]
   149 00000151 8B1E[C001]              	mov bx,word[y]
   150 00000155 B8FFFF                  	mov ax,-1
   151 00000158 29D8                    	sub ax,bx
   152 0000015A 740D                          jz  dl2dr
   153 0000015C 8B1E[BE01]              	mov bx,word[x]
   154 00000160 B81900                  	mov ax,25
   155 00000163 29D8                    	sub ax,bx
   156 00000165 740F                          jz  dl2ul
   157 00000167 EB1A                    	jmp show
   158                                  
   159                                  dl2dr:
   160 00000169 C706[C001]0100                mov word[y],1
   161 0000016F C606[BD01]01                  mov byte[rdul],Dn_Rt	
   162 00000174 EB0D                          jmp show
   163                                  	
   164                                  dl2ul:
   165 00000176 C706[BE01]1700                mov word[x],23
   166 0000017C C606[BD01]03                  mov byte[rdul],Up_Lt	
   167 00000181 EB00                          jmp show
   168                                  	
   169                                  show:	
   170 00000183 31C0                          xor ax,ax                 ; 计算显存地址
   171 00000185 A1[BE01]                      mov ax,word[x]
   172 00000188 BB5000                  	mov bx,80
   173 0000018B F7E3                    	mul bx
   174 0000018D 0306[C001]              	add ax,word[y]
   175 00000191 BB0200                  	mov bx,2
   176 00000194 F7E3                    	mul bx
   177 00000196 89C3                    	mov bx,ax
   178 00000198 B40F                    	mov ah,0Fh				;  0000：黑底、1111：亮白字（默认值为07h）
   179 0000019A A0[C201]                	mov al,byte[char]			;  AL = 显示字符值（默认值为20h=空格符）
   180 0000019D 268907                  	mov [es:bx],ax  		;  显示字符的ASCII码值
   181 000001A0 E9AFFE                  	jmp loop1
   182                                  	
   183                                  end:
   184 000001A3 EBFE                        jmp $                   ; 停止画框，无限循环 
   185                                  	
   186 000001A5 313633333732363620-     	message     db "16337266 xu yuan", 13, 10  
   186 000001AE 7875207975616E0D0A 
   187 000001B7 1200                        msglen      dw $ - message 
   188 000001B9 50C3                        count dw delay
   189 000001BB 0500                        dcount dw ddelay
   190 000001BD 01                          rdul db Dn_Rt         ; 向右下运动
   191 000001BE 0700                        x    dw 7
   192 000001C0 0000                        y    dw 0
   193 000001C2 41                          char db 'A'
   194 000001C3 00<rept>                	times 510-($-$$) db 0  
   195 000001FE 55AA                        dw  0xaa55 
   196                                  
