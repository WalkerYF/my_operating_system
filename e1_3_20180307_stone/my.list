     1                                  ; 程序源代码（stone.asm）
     2                                  ; 本程序在文本方式显示器上从左边射出一个*号,以45度向右下运动，撞到边框后反射,如此类推.
     3                                  ;  凌应标 2014/3
     4                                      Dn_Rt equ 1                  ;D-Down,U-Up,R-right,L-Left
     5                                      Up_Rt equ 2                  ;
     6                                      Up_Lt equ 3                  ;
     7                                      Dn_Lt equ 4                  ;
     8                                      delay equ 50000					; 计时器延迟计数,用于控制画框的速度
     9                                      ddelay equ 5					; 计时器延迟计数,用于控制画框的速度
    10                                      color equ 10
    11                                      org 7c00h	; 给相对偏移加上7c00h这一个偏移量
    12                                  start:
    13 00000000 B800B8                  	mov ax,0B800h				; 文本窗口显存起始地址
    14 00000003 8EE8                    	mov gs,ax					; GS = B800h
    15 00000005 E83201                      call clean_screen
    16 00000008 BE0700                      mov si, 7
    17 0000000B BF0000                      mov di, 0
    18                                  
    19                                  check_keyboard:
    20 0000000E E81A00                      call loop1
    21 00000011 E85901                  	call display_infomation
    22 00000014 B401                    	mov ah, 01h
    23 00000016 CD16                    	int 16h
    24                                  	; 如果没有按， zf为0
    25                                  	; 如果有按，往下执行
    26 00000018 74F4                    	jz check_keyboard
    27                                  
    28                                  	; 从键盘读入字符,扫描码读进ah,ascII码读进al
    29 0000001A B400                    	mov ah, 00h
    30 0000001C CD16                    	int 16h
    31                                  
    32                                  	; 判断字符
    33 0000001E 3C63                    	cmp al, 'c'
    34 00000020 C706[B701]2007          	mov word [status], 0720h
    35 00000026 E81101                  	call clean_screen
    36                                  	; cmp al, 'h'
    37                                  	; mov word [status], 0f65h
    38                                  	; je clean_screen
    39 00000029 EBE3                    	jmp check_keyboard
    40                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                                  ; si:x
    42                                  ; di:y
    43                                  loop1:
    44 0000002B FF0E[9B01]              	dec word[count]			; 递减计数变量
    45 0000002F 75FA                    	jnz loop1					; >0：跳转;
    46 00000031 C706[9B01]50C3          	mov word[count],delay
    47 00000037 FF0E[9D01]              	dec word[dcount]			; 递减计数变量
    48 0000003B 75EE                          jnz loop1
    49 0000003D C706[9B01]50C3          	mov word[count],delay
    50 00000043 C706[9D01]0500          	mov word[dcount],ddelay
    51                                  
    52                                  
    53 00000049 B120                        mov cl, 20h
    54 0000004B E8D400                      call show
    55                                  ; clean_current_char: ; 清除当前字母所占显存位置,准备画下一个字母显存
    56                                  ;       xor ax,ax                 ; 计算显存地址
    57                                  ;       mov ax,si
    58                                  ; 	mov bx,80
    59                                  ; 	mul bx
    60                                  ; 	add ax,di
    61                                  ; 	mov bx,2
    62                                  ; 	mul bx
    63                                  ; 	mov bx,ax
    64                                  ; 	mov ah,07h				
    65                                  ; 	mov al,20h		
    66                                  ; 	mov [gs:bx],ax  		
    67                                  
    68 0000004E B001                          mov al,1
    69 00000050 3A06[9F01]                    cmp al,byte[rdul]
    70 00000054 741C                    	jz  DnRt
    71 00000056 B002                          mov al,2
    72 00000058 3A06[9F01]                    cmp al,byte[rdul]
    73 0000005C 7440                    	jz  UpRt
    74 0000005E B003                          mov al,3
    75 00000060 3A06[9F01]                    cmp al,byte[rdul]
    76 00000064 7462                    	jz  UpLt
    77 00000066 B004                          mov al,4
    78 00000068 3A06[9F01]                    cmp al,byte[rdul]
    79 0000006C 0F848200                	jz  DnLt
    80 00000070 EBFE                          jmp $	
    81                                  ;------------------------字母移动部分---------------------------------
    82                                  DnRt:
    83 00000072 46                      	inc si 
    84 00000073 47                      	inc di
    85 00000074 89F3                    	mov bx,si
    86 00000076 B81900                  	mov ax,25
    87 00000079 29D8                    	sub ax,bx
    88 0000007B 740C                          jz  dr2ur
    89 0000007D 89FB                    	mov bx,di
    90 0000007F B85000                  	mov ax,80
    91 00000082 29D8                    	sub ax,bx
    92 00000084 740E                          jz  dr2dl
    93 00000086 E99300                  	jmp move_and_exit
    94                                  dr2ur:
    95 00000089 BE1700                        mov si,23
    96 0000008C C606[9F01]02                  mov byte[rdul],Up_Rt	
    97 00000091 E98800                        jmp move_and_exit
    98                                  dr2dl:
    99 00000094 BF4E00                        mov di,78
   100 00000097 C606[9F01]04                  mov byte[rdul],Dn_Lt	
   101 0000009C EB7E                          jmp move_and_exit
   102                                  
   103                                  UpRt:
   104 0000009E 4E                      	dec si
   105 0000009F 47                      	inc di
   106 000000A0 89FB                    	mov bx,di
   107 000000A2 B85000                  	mov ax,80
   108 000000A5 29D8                    	sub ax,bx
   109 000000A7 740B                          jz  ur2ul
   110 000000A9 89F3                    	mov bx,si
   111 000000AB B8FFFF                  	mov ax,-1
   112 000000AE 29D8                    	sub ax,bx
   113 000000B0 740C                          jz  ur2dr
   114 000000B2 EB68                    	jmp move_and_exit
   115                                  ur2ul:
   116 000000B4 BF4E00                        mov di,78
   117 000000B7 C606[9F01]03                  mov byte[rdul],Up_Lt	
   118 000000BC EB5E                          jmp move_and_exit
   119                                  ur2dr:
   120 000000BE BE0100                        mov si,1
   121 000000C1 C606[9F01]01                  mov byte[rdul],Dn_Rt	
   122 000000C6 EB54                          jmp move_and_exit
   123                                  UpLt:
   124 000000C8 4E                      	dec si
   125 000000C9 4F                      	dec di
   126 000000CA 89F3                    	mov bx,si
   127 000000CC B8FFFF                  	mov ax,-1
   128 000000CF 29D8                    	sub ax,bx
   129 000000D1 740B                          jz  ul2dl
   130 000000D3 89FB                    	mov bx,di
   131 000000D5 B8FFFF                  	mov ax,-1
   132 000000D8 29D8                    	sub ax,bx
   133 000000DA 740C                          jz  ul2ur
   134 000000DC EB3E                    	jmp move_and_exit
   135                                  
   136                                  
   137                                  ul2dl:
   138 000000DE BE0100                        mov si,1
   139 000000E1 C606[9F01]04                  mov byte[rdul],Dn_Lt	
   140 000000E6 EB34                          jmp move_and_exit
   141                                  ul2ur:
   142 000000E8 BF0100                        mov di,1
   143 000000EB C606[9F01]02                  mov byte[rdul],Up_Rt	
   144 000000F0 EB2A                          jmp move_and_exit
   145                                  DnLt:
   146 000000F2 46                      	inc si
   147 000000F3 4F                      	dec di
   148 000000F4 89FB                    	mov bx,di
   149 000000F6 B8FFFF                  	mov ax,-1
   150 000000F9 29D8                    	sub ax,bx
   151 000000FB 740B                          jz  dl2dr
   152 000000FD 89F3                    	mov bx,si
   153 000000FF B81900                  	mov ax,25
   154 00000102 29D8                    	sub ax,bx
   155 00000104 740C                          jz  dl2ul
   156 00000106 EB14                    	jmp move_and_exit
   157                                  
   158                                  dl2dr:
   159 00000108 BF0100                      mov di,1
   160 0000010B C606[9F01]01                mov byte[rdul],Dn_Rt	
   161 00000110 EB0A                        jmp move_and_exit
   162                                  	
   163                                  dl2ul:
   164 00000112 BE1700                      mov si,23
   165 00000115 C606[9F01]03                mov byte[rdul],Up_Lt	
   166 0000011A EB00                        jmp move_and_exit
   167                                  
   168                                  move_and_exit:
   169 0000011C B102                        mov cl, 02h 
   170 0000011E E80100                      call show
   171 00000121 C3                          ret
   172                                  
   173                                  ;----------------------------字母移动部分----------------------------
   174                                  ; 显示字母函数
   175                                  ; 对外接口为cl, 控制显示字母
   176                                  show:	                ; 计算显存地址
   177 00000122 89F0                        mov ax, si
   178 00000124 BB5000                  	mov bx,80
   179 00000127 F7E3                    	mul bx
   180 00000129 01F8                    	add ax, di
   181 0000012B BB0200                  	mov bx,2
   182 0000012E F7E3                    	mul bx
   183 00000130 89C3                    	mov bx,ax
   184 00000132 B40F                    	mov ah,0Fh				;  0000：黑底、1111：亮白字（默认值为07h）
   185 00000134 88C8                    	mov al,cl			;  AL = 显示字符值（默认值为20h=空格符）
   186 00000136 658907                  	mov [gs:bx],ax  		;  显示字符的ASCII码值
   187 00000139 C3                      	ret
   188                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   189                                  ; 清屏函数
   190                                  ; 被调用函数不保存任何寄存器,需要改进	
   191                                  clean_screen:
   192 0000013A 31C9                    	xor cx, cx
   193                                  clean_screen_x_loop:
   194 0000013C 89CA                    	mov dx, cx
   195 0000013E 51                      	push cx
   196 0000013F 31C9                    	xor cx, cx
   197                                  clean_screen_y_loop:
   198 00000141 31C0                    	xor ax, ax
   199 00000143 5A                      	pop dx      ; 为了能够在内循环里有一个与外循环相关联的量,并且不被内循环的add语句打乱,每次用到这个量的时候都从栈中拿出来
   200 00000144 52                      	push dx
   201 00000145 89D0                    	mov ax, dx  ; x
   202 00000147 BB5000                  	mov bx, 80
   203 0000014A F7E3                    	mul bx
   204 0000014C 01C8                    	add ax, cx  ; y ; 会修改dx
   205 0000014E BB0200                  	mov bx, 2
   206 00000151 F7E3                    	mul bx
   207 00000153 89C3                    	mov bx, ax
   208                                  	; mov ah, 07h ; 与默认相同
   209                                  	; mov al, 20h ; 显示空格,即将该格显示的内容清除
   210 00000155 A1[B701]                	mov ax, word [status]
   211 00000158 658907                  	mov [gs:bx], ax
   212 0000015B 41                      	inc cx      
   213 0000015C 83F950                  	cmp cx, 80 ; 若y等于80,则该行清空完成,转到下一行
   214 0000015F 7402                    	jz clean_screen_next_x
   215 00000161 EBDE                    	jmp clean_screen_y_loop
   216                                  clean_screen_next_x:
   217 00000163 59                      	pop cx
   218 00000164 41                      	inc cx
   219 00000165 83F919                  	cmp cx, 25 ; 若x等于25,则所有列清空完成
   220 00000168 7402                    	jz clean_screen_exit
   221 0000016A EBD0                    	jmp clean_screen_x_loop
   222                                  clean_screen_exit:
   223 0000016C C3                          ret
   224                                  
   225                                  display_infomation:
   226 0000016D 31C9                    	xor cx, cx                ; 计数器清零
   227 0000016F 31C0                          xor ax,ax                 ; 计算显存地址
   228 00000171 B81800                        mov ax, 24
   229 00000174 BB5000                  	mov bx,80
   230 00000177 F7E3                    	mul bx
   231 00000179 83C039                  	add ax,57
   232 0000017C BB0200                  	mov bx,2
   233 0000017F F7E3                    	mul bx
   234 00000181 89C3                    	mov bx,ax
   235 00000183 56                          push si
   236                                  display_infomation_loop:
   237 00000184 B40F                    	mov ah,0Fh				;  0000：黑底、1111：亮白字（默认值为07h）
   238 00000186 BD[A001]                	mov bp,name		;  AL = 显示字符值（默认值为20h=空格符）
   239 00000189 89CE                    	mov si, cx
   240 0000018B 8A02                    	mov al, byte [bp+si]
   241 0000018D 658907                  	mov [gs:bx],ax 
   242 00000190 83C302                  	add bx, 2  		;  显示字符的ASCII码值
   243 00000193 41                      	inc cx
   244 00000194 83F917                  	cmp cx, 23  ; 个人信息长度
   245 00000197 75EB                    	jnz display_infomation_loop
   246 00000199 5E                          pop si
   247 0000019A C3                      	ret
   248                                  
   249                                  datadef:	
   250 0000019B 50C3                        count dw delay
   251 0000019D 0500                        dcount dw ddelay
   252 0000019F 01                          rdul db Dn_Rt         ; 向右下运动
   253                                      ; x    db 7
   254                                      ; y    db 0
   255                                      ; char db 2
   256 000001A0 313633333732333720-         name db '16337237 wang yong feng'
   256 000001A9 77616E6720796F6E67-
   256 000001B2 2066656E67         
   257 000001B7 2007                        status dw 0720h
   258                                  ;     number db '16337237'
   259                                  
   260                                  
   261 000001B9 00<rept>                times 510-($-$$) db 0
   262 000001FE 55AA                    dw 0xaa55
   263                                  
   264                                  
