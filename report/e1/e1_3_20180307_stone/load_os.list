     1                                  ;NASM 汇编
     2                                  ;nasm this.asm -o hello_os
     3                                      Dn_Rt equ 1                  ;D-Down,U-Up,R-right,L-Left
     4                                      Up_Rt equ 2                  ;
     5                                      Up_Lt equ 3                  ;
     6                                      Dn_Lt equ 4                  ;
     7                                      delay equ 50000					; 计时器延迟计数,用于控制画框的速度
     8                                      ddelay equ 500					; 计时器延迟计数,用于控制画框的速度
     9                                      color equ 10
    10                                  	org 07c00h
    11 00000000 8CC8                        mov ax, cs
    12 00000002 8ED8                        mov ds, ax
    13 00000004 E80600                  call welcome_words
    14 00000007 E81700                  call load_os
    15 0000000A E9F301                  jmp os
    16                                  welcome_words:
    17 0000000D B8[3300]                	mov ax,boot_message
    18 00000010 89C5                    	mov bp,ax                             ;bp存储需要显示的字符串的起始地址
    19 00000012 B91F00                  	mov cx,boot_message_length            ;cx存储要显示的字符串的长度
    20 00000015 B80113                  	mov ax,01301h                         ;ah=13h,是int 10h中断的参数之一,al=01h,标识输出方式
    21 00000018 BB0A00                  	mov bx,000ah                          ;bh为页码,bl为颜色
    22 0000001B BA000D                  	mov dx,0d00h                          ;dx为显示位置坐标,0d行,0列
    23 0000001E CD10                    	int 10h
    24 00000020 C3                      	ret
    25                                  load_os:
    26 00000021 B402                    	mov ah,02h                            ;读磁盘扇区
    27 00000023 B007                    	mov al,07h                            ;读取7个扇区
    28 00000025 B500                    	mov ch,00h                            ;起始磁道
    29 00000027 B102                    	mov cl,02h                            ;起始扇区
    30 00000029 B600                    	mov dh,00h                            ;磁头号
    31 0000002B B200                    	mov dl,00h                            ;驱动器号
    32 0000002D BB[0002]                	mov bx,os                             ;os为标签，地址为第二扇区的第一个字节
    33 00000030 CD13                    	int 13h
    34 00000032 C3                      	ret
    35                                  boot_message:
    36 00000033 5B426F6F745D6D6F64-     	db "[Boot]modu os"
    36 0000003C 75206F73           
    37 00000040 0D0A                    	db 0dh,0ah                            ;换行
    38 00000042 5B426F6F745D6C6F61-     	db "[Boot]loading..."
    38 0000004B 64696E672E2E2E     
    39                                  boot_message_length equ $-boot_message    ;计算字符串长度
    40 00000052 00<rept>                times 510-($-$$) db 0                     ;填充至510byte
    41 000001FE 55AA                    dw 0xaa55                                 ;引导扇区标识,至此文件大小为512byte
    42                                  
    43                                  os:
    44                                  ; 	call os_say_hello
    45                                  ; 	jmp $
    46                                  ; os_say_hello:
    47                                  ; 	mov ax,os_message
    48                                  ; 	mov bp,ax
    49                                  ; 	mov cx,os_message_length
    50                                  ; 	mov ax,01301h
    51                                  ; 	mov bx,000eh
    52                                  ; 	mov dx,1000h
    53                                  ; 	int 10h
    54                                  ; 	ret
    55                                  ; os_message:
    56                                  ; 	db "[OS]os loaded"
    57                                  ; 	db 0dh,0ah
    58                                  ; 	db "[OS]happy using"
    59                                  ; os_message_length equ $-os_message
    60                                  ; times 1022-($-$$) db 0
    61                                  
    62                                  
    63                                  start:
    64 00000200 B800B8                  	mov ax,0B800h				; 文本窗口显存起始地址
    65 00000203 8EE8                    	mov gs,ax					; GS = B800h
    66 00000205 E84301                      call clean_screen
    67 00000208 BE0700                      mov si, 7
    68 0000020B BF0000                      mov di, 0
    69                                  
    70                                  check_keyboard:
    71 0000020E E82D00                      call loop1
    72 00000211 E86A01                  	call display_infomation
    73 00000214 E89501                  	call display_message
    74 00000217 B401                    	mov ah, 01
    75 00000219 CD16                    	int 16h
    76                                  	; 如果没有按， zf为0
    77                                  	; 如果有按，往下执行
    78 0000021B 74F1                    	jz check_keyboard
    79                                  
    80                                  	; 从键盘读入字符,扫描码读进ah,ascII码读进al
    81 0000021D B400                    	mov ah, 00h
    82 0000021F CD16                    	int 16h
    83                                  
    84                                  	; 判断字符
    85 00000221 3C63                    	cmp al, 'c'
    86 00000223 C706[9804]2007          	mov word [status], 0720h
    87 00000229 7505                    	jnz check_keyboard_d 
    88 0000022B E81D01                  	call clean_screen
    89 0000022E EBDE                    	jmp check_keyboard
    90                                  check_keyboard_d:
    91 00000230 3C64                    	cmp al, 'd'
    92 00000232 7508                    	jnz check_keyboard_h
    93 00000234 E81401                  	call clean_screen
    94 00000237 E8A001                  	call display_chinese_name
    95 0000023A EBD2                    	jmp check_keyboard
    96                                  check_keyboard_h:
    97                                  	; mov word [status], 0f65h
    98                                  	; je clean_screen
    99 0000023C EBD0                    	jmp check_keyboard
   100                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   101                                  ; si:x
   102                                  ; di:y
   103                                  loop1:
   104 0000023E FF0E[2204]              	dec word[count]			; 递减计数变量
   105 00000242 75FA                    	jnz loop1					; >0：跳转;
   106 00000244 C706[2204]50C3          	mov word[count],delay
   107 0000024A FF0E[2404]              	dec word[dcount]			; 递减计数变量
   108 0000024E 75EE                          jnz loop1
   109 00000250 C706[2204]50C3          	mov word[count],delay
   110 00000256 C706[2404]F401          	mov word[dcount],ddelay
   111                                  
   112                                  
   113                                      ; mov cx, 0f20h     ; 调用函数  清除当前字母的图像,准备显示下一个字母
   114                                      ; call show
   115                                  ; clean_current_char: ; 清除当前字母所占显存位置,准备画下一个字母显存
   116                                  ;       xor ax,ax                 ; 计算显存地址
   117                                  ;       mov ax,si
   118                                  ; 	mov bx,80
   119                                  ; 	mul bx
   120                                  ; 	add ax,di
   121                                  ; 	mov bx,2
   122                                  ; 	mul bx
   123                                  ; 	mov bx,ax
   124                                  ; 	mov ah,07h				
   125                                  ; 	mov al,20h		
   126                                  ; 	mov [gs:bx],ax  		
   127                                  
   128 0000025C B001                          mov al,1
   129 0000025E 3A06[2604]                    cmp al,byte[rdul]
   130 00000262 741C                    	jz  DnRt
   131 00000264 B002                          mov al,2
   132 00000266 3A06[2604]                    cmp al,byte[rdul]
   133 0000026A 7440                    	jz  UpRt
   134 0000026C B003                          mov al,3
   135 0000026E 3A06[2604]                    cmp al,byte[rdul]
   136 00000272 7462                    	jz  UpLt
   137 00000274 B004                          mov al,4
   138 00000276 3A06[2604]                    cmp al,byte[rdul]
   139 0000027A 0F848200                	jz  DnLt
   140 0000027E EBFE                          jmp $	
   141                                  ;------------------------字母移动部分---------------------------------
   142                                  DnRt:
   143 00000280 46                      	inc si 
   144 00000281 47                      	inc di
   145 00000282 89F3                    	mov bx,si
   146 00000284 B81900                  	mov ax,25
   147 00000287 29D8                    	sub ax,bx
   148 00000289 740C                          jz  dr2ur
   149 0000028B 89FB                    	mov bx,di
   150 0000028D B85000                  	mov ax,80
   151 00000290 29D8                    	sub ax,bx
   152 00000292 740E                          jz  dr2dl
   153 00000294 E99300                  	jmp move_and_exit
   154                                  dr2ur:
   155 00000297 BE1700                        mov si,23
   156 0000029A C606[2604]02                  mov byte[rdul],Up_Rt	
   157 0000029F E98800                        jmp move_and_exit
   158                                  dr2dl:
   159 000002A2 BF4E00                        mov di,78
   160 000002A5 C606[2604]04                  mov byte[rdul],Dn_Lt	
   161 000002AA EB7E                          jmp move_and_exit
   162                                  
   163                                  UpRt:
   164 000002AC 4E                      	dec si
   165 000002AD 47                      	inc di
   166 000002AE 89FB                    	mov bx,di
   167 000002B0 B85000                  	mov ax,80
   168 000002B3 29D8                    	sub ax,bx
   169 000002B5 740B                          jz  ur2ul
   170 000002B7 89F3                    	mov bx,si
   171 000002B9 B8FFFF                  	mov ax,-1
   172 000002BC 29D8                    	sub ax,bx
   173 000002BE 740C                          jz  ur2dr
   174 000002C0 EB68                    	jmp move_and_exit
   175                                  ur2ul:
   176 000002C2 BF4E00                        mov di,78
   177 000002C5 C606[2604]03                  mov byte[rdul],Up_Lt	
   178 000002CA EB5E                          jmp move_and_exit
   179                                  ur2dr:
   180 000002CC BE0100                        mov si,1
   181 000002CF C606[2604]01                  mov byte[rdul],Dn_Rt	
   182 000002D4 EB54                          jmp move_and_exit
   183                                  UpLt:
   184 000002D6 4E                      	dec si
   185 000002D7 4F                      	dec di
   186 000002D8 89F3                    	mov bx,si
   187 000002DA B8FFFF                  	mov ax,-1
   188 000002DD 29D8                    	sub ax,bx
   189 000002DF 740B                          jz  ul2dl
   190 000002E1 89FB                    	mov bx,di
   191 000002E3 B8FFFF                  	mov ax,-1
   192 000002E6 29D8                    	sub ax,bx
   193 000002E8 740C                          jz  ul2ur
   194 000002EA EB3E                    	jmp move_and_exit
   195                                  
   196                                  
   197                                  ul2dl:
   198 000002EC BE0100                        mov si,1
   199 000002EF C606[2604]04                  mov byte[rdul],Dn_Lt	
   200 000002F4 EB34                          jmp move_and_exit
   201                                  ul2ur:
   202 000002F6 BF0100                        mov di,1
   203 000002F9 C606[2604]02                  mov byte[rdul],Up_Rt	
   204 000002FE EB2A                          jmp move_and_exit
   205                                  DnLt:
   206 00000300 46                      	inc si
   207 00000301 4F                      	dec di
   208 00000302 89FB                    	mov bx,di
   209 00000304 B8FFFF                  	mov ax,-1
   210 00000307 29D8                    	sub ax,bx
   211 00000309 740B                          jz  dl2dr
   212 0000030B 89F3                    	mov bx,si
   213 0000030D B81900                  	mov ax,25
   214 00000310 29D8                    	sub ax,bx
   215 00000312 740C                          jz  dl2ul
   216 00000314 EB14                    	jmp move_and_exit
   217                                  
   218                                  dl2dr:
   219 00000316 BF0100                      mov di,1
   220 00000319 C606[2604]01                mov byte[rdul],Dn_Rt	
   221 0000031E EB0A                        jmp move_and_exit
   222                                  	
   223                                  dl2ul:
   224 00000320 BE1700                      mov si,23
   225 00000323 C606[2604]03                mov byte[rdul],Up_Lt	
   226 00000328 EB00                        jmp move_and_exit
   227                                  
   228                                  move_and_exit:
   229 0000032A 89F1                        mov cx, si
   230 0000032C C1E108                      shl cx, 8 
   231 0000032F B102                        mov cl, 02h 
   232 00000331 E80100                      call show
   233 00000334 C3                          ret
   234                                  
   235                                  ;----------------------------字母移动部分----------------------------
   236                                  ; 显示字母函数
   237                                  ; 对外接口为ch, 控制显示格式
   238                                  ; 对外接口为cl, 控制显示字母
   239                                  show:	                ; 计算显存地址
   240 00000335 89F0                        mov ax, si
   241 00000337 BB5000                  	mov bx,80
   242 0000033A F7E3                    	mul bx
   243 0000033C 01F8                    	add ax, di
   244 0000033E BB0200                  	mov bx,2
   245 00000341 F7E3                    	mul bx
   246 00000343 89C3                    	mov bx,ax
   247 00000345 89C8                    	mov ax,cx			;  AL = 显示字符值（默认值为20h=空格符）
   248 00000347 658907                  	mov [gs:bx],ax  		;  显示字符的ASCII码值
   249 0000034A C3                      	ret
   250                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   251                                  ; 清屏函数
   252                                  ; 被调用函数不保存任何寄存器,需要改进	
   253                                  clean_screen:
   254 0000034B 31C9                    	xor cx, cx
   255                                  clean_screen_x_loop:
   256 0000034D 89CA                    	mov dx, cx
   257 0000034F 51                      	push cx
   258 00000350 31C9                    	xor cx, cx
   259                                  clean_screen_y_loop:
   260 00000352 31C0                    	xor ax, ax
   261 00000354 5A                      	pop dx      ; 为了能够在内循环里有一个与外循环相关联的量,并且不被内循环的add语句打乱,每次用到这个量的时候都从栈中拿出来
   262 00000355 52                      	push dx
   263 00000356 89D0                    	mov ax, dx  ; x
   264 00000358 BB5000                  	mov bx, 80
   265 0000035B F7E3                    	mul bx
   266 0000035D 01C8                    	add ax, cx  ; y ; 会修改dx
   267 0000035F BB0200                  	mov bx, 2
   268 00000362 F7E3                    	mul bx
   269 00000364 89C3                    	mov bx, ax
   270                                  	; mov ah, 07h ; 与默认相同
   271                                  	; mov al, 20h ; 显示空格,即将该格显示的内容清除
   272 00000366 A1[9804]                	mov ax, word [status]
   273 00000369 658907                  	mov [gs:bx], ax
   274 0000036C 41                      	inc cx      
   275 0000036D 83F950                  	cmp cx, 80 ; 若y等于80,则该行清空完成,转到下一行
   276 00000370 7402                    	jz clean_screen_next_x
   277 00000372 EBDE                    	jmp clean_screen_y_loop
   278                                  clean_screen_next_x:
   279 00000374 59                      	pop cx
   280 00000375 41                      	inc cx
   281 00000376 83F919                  	cmp cx, 25 ; 若x等于25,则所有列清空完成
   282 00000379 7402                    	jz clean_screen_exit
   283 0000037B EBD0                    	jmp clean_screen_x_loop
   284                                  clean_screen_exit:
   285 0000037D C3                          ret
   286                                  ;-------------展示名字-----------------------------
   287                                  display_infomation:
   288 0000037E 31C9                    	xor cx, cx                ; 计数器清零
   289 00000380 31C0                          xor ax,ax                 ; 计算显存地址
   290 00000382 B81800                        mov ax, 24
   291 00000385 BB5000                  	mov bx,80
   292 00000388 F7E3                    	mul bx
   293 0000038A 83C018                  	add ax,24
   294 0000038D BB0200                  	mov bx,2
   295 00000390 F7E3                    	mul bx
   296 00000392 89C3                    	mov bx,ax
   297 00000394 56                          push si
   298                                  display_infomation_loop:
   299 00000395 B4AD                    	mov ah,10101101b				;  0000：黑底、1111：亮白字（默认值为07h）TODO:
   300 00000397 BD[2904]                	mov bp,name		;  AL = 显示字符值（默认值为20h=空格符）
   301 0000039A 89CE                    	mov si, cx
   302 0000039C 8A02                    	mov al, byte [bp+si]
   303 0000039E 658907                  	mov [gs:bx],ax 
   304 000003A1 83C302                  	add bx, 2  		;  显示字符的ASCII码值
   305 000003A4 41                      	inc cx
   306 000003A5 83F937                  	cmp cx, 55  ; 个人信息长度
   307 000003A8 75EB                    	jnz display_infomation_loop
   308 000003AA 5E                          pop si
   309 000003AB C3                      	ret
   310                                  
   311                                  ;-------------打印信息-----------------------------
   312                                  display_message:
   313 000003AC 31C9                    	xor cx, cx                ; 计数器清零
   314 000003AE 31C0                          xor ax,ax                 ; 计算显存地址
   315 000003B0 B81700                        mov ax, 23
   316 000003B3 BB5000                  	mov bx,80
   317 000003B6 F7E3                    	mul bx
   318 000003B8 83C018                  	add ax,24
   319 000003BB BB0200                  	mov bx,2
   320 000003BE F7E3                    	mul bx
   321 000003C0 89C3                    	mov bx,ax
   322 000003C2 56                          push si
   323                                  display_message_loop:
   324 000003C3 B425                    	mov ah,0100101b				;  0000：黑底、1111：亮白字（默认值为07h）TODO:
   325 000003C5 BD[6004]                	mov bp,message		;  AL = 显示字符值（默认值为20h=空格符）
   326 000003C8 89CE                    	mov si, cx
   327 000003CA 8A02                    	mov al, byte [bp+si]
   328 000003CC 658907                  	mov [gs:bx],ax 
   329 000003CF 83C302                  	add bx, 2  		;  显示字符的ASCII码值
   330 000003D2 41                      	inc cx
   331 000003D3 83F925                  	cmp cx, 37 ; 个人信息长度
   332 000003D6 75EB                    	jnz display_message_loop
   333 000003D8 5E                          pop si
   334 000003D9 C3                      	ret
   335                                  
   336                                  display_chinese_name:
   337 000003DA 31C9                    	xor cx, cx
   338                                  	; mov ax, chinese_name
   339                                  	; mov ds, ax
   340                                  display_chinese_x_loop:
   341 000003DC 89CA                    	mov dx, cx
   342 000003DE 51                      	push cx
   343 000003DF 31C9                    	xor cx, cx
   344                                  display_chinese_y_loop:
   345 000003E1 31C0                    	xor ax, ax
   346 000003E3 5A                      	pop dx      ; 为了能够在内循环里有一个与外循环相关联的量,并且不被内循环的add语句打乱,每次用到这个量的时候都从栈中拿出来
   347 000003E4 52                      	push dx
   348 000003E5 89D0                    	mov ax, dx  ; x
   349 000003E7 BB5000                  	mov bx, 80
   350 000003EA F7E3                    	mul bx
   351 000003EC 01C8                    	add ax, cx  ; y ; 会修改dx
   352 000003EE A3[2704]                	mov [number_char], ax 
   353 000003F1 BB0200                  	mov bx, 2
   354 000003F4 F7E3                    	mul bx
   355 000003F6 89C3                    	mov bx, ax
   356                                  	; mov ah, 07h ; 与默认相同
   357 000003F8 56                      	push si 
   358 000003F9 55                      	push bp
   359 000003FA BD[9A04]                	mov bp, chinese_name
   360 000003FD 8B36[2704]              	mov si, [number_char]
   361                                  	; add si, 30h ;经测试,bx数字正确
   362                                  	; mov ax, si
   363 00000401 8A02                    	mov al, byte [bp+si]
   364                                  	; mov al, 42h ; 显示空格,即将该格显示的内容清除
   365 00000403 B48B                    	mov ah, 8bh
   366 00000405 5D                      	pop bp
   367 00000406 5E                      	pop si
   368 00000407 658907                  	mov [gs:bx], ax
   369 0000040A 41                      	inc cx      
   370 0000040B 83F950                  	cmp cx, 80 ; 若y等于80,则该行清空完成,转到下一行
   371 0000040E 7402                    	jz display_chinese_next_x
   372 00000410 EBCF                    	jmp display_chinese_y_loop
   373                                  display_chinese_next_x:
   374 00000412 59                      	pop cx
   375 00000413 41                      	inc cx
   376 00000414 83F919                  	cmp cx, 25 ; 若x等于25,则所有列清空完成
   377 00000417 7402                    	jz display_chinese_exit
   378 00000419 EBC1                    	jmp display_chinese_x_loop
   379                                  display_chinese_exit:
   380 0000041B EBFE                    	jmp $
   381 0000041D EBFE                    	jmp $
   382 0000041F EBFE                    	jmp $
   383 00000421 C3                      	ret
   384                                  
   385                                  datadef:	
   386 00000422 50C3                        count dw delay
   387 00000424 F401                        dcount dw ddelay
   388 00000426 01                          rdul db Dn_Rt         ; 向右下运动
   389                                      ; x    db 7
   390                                      ; y    db 0
   391                                      ; char db 2
   392 00000427 0000                    	number_char dw 0
   393 00000429 656E74657220432074-         name db 'enter C to clean the screen! By 16337237 wang yong feng'
   393 00000432 6F20636C65616E2074-
   393 0000043B 68652073637265656E-
   393 00000444 212042792031363333-
   393 0000044D 373233372077616E67-
   393 00000456 20796F6E672066656E-
   393 0000045F 67                 
   394 00000460 656E74657220442074-     	message db 'enter D to display my name in chinese in several seconds'
   394 00000469 6F20646973706C6179-
   394 00000472 206D79206E616D6520-
   394 0000047B 696E206368696E6573-
   394 00000484 6520696E2073657665-
   394 0000048D 72616C207365636F6E-
   394 00000496 6473               
   395 00000498 2007                        status dw 0720h
   396                                  ;     number db '16337237'
   397                                  
   398 0000049A 404040404040404040-     chinese_name   db '@@@@@@@@@@@@@@@@@@@                @@@@#                @@         :@@       .~#'     
   398 000004A3 404040404040404040-
   398 000004AC 402020202020202020-
   398 000004B5 202020202020202040-
   398 000004BE 404040232020202020-
   398 000004C7 202020202020202020-
   398 000004D0 202040402020202020-
   398 000004D9 202020203A40402020-
   398 000004E2 20202020202E7E23   
   399 000004EA 404040404040404040-     db '@@@@@@@@@@@@@@@@@@@                  @@@=              @@@         @@@@@@@@@@@@*'     
   399 000004F3 404040404040404040-
   399 000004FC 402020202020202020-
   399 00000505 202020202020202020-
   399 0000050E 204040403D20202020-
   399 00000517 202020202020202020-
   399 00000520 204040402020202020-
   399 00000529 202020204040404040-
   399 00000532 404040404040402A   
   400 0000053A 202020202020202020-     db '          @#                          @@               @@         @@@       @@@ '     
   400 00000543 204023202020202020-
   400 0000054C 202020202020202020-
   400 00000555 202020202020202020-
   400 0000055E 202040402020202020-
   400 00000567 202020202020202020-
   400 00000570 204040202020202020-
   400 00000579 202020404040202020-
   400 00000582 2020202040404020   
   401 0000058A 202020202020202020-     db '          @#                                          @@@@@@@@@  @@@       @@@  '     
   401 00000593 204023202020202020-
   401 0000059C 202020202020202020-
   401 000005A5 202020202020202020-
   401 000005AE 202020202020202020-
   401 000005B7 202020202020202020-
   401 000005C0 404040404040404040-
   401 000005C9 202040404020202020-
   401 000005D2 2020204040402020   
   402 000005DA 202020202020202020-     db '          @#             .           ,              =@@        @@@:  @@@ @@@    '     
   402 000005E3 204023202020202020-
   402 000005EC 202020202020202E20-
   402 000005F5 202020202020202020-
   402 000005FE 202C20202020202020-
   402 00000607 202020202020203D40-
   402 00000610 402020202020202020-
   402 00000619 4040403A2020404040-
   402 00000622 2040404020202020   
   403 0000062A 202020202020202020-     db '          @#             @@@@@@@@@@@@@             =@@;          $    @@@@@     '     
   403 00000633 204023202020202020-
   403 0000063C 202020202020204040-
   403 00000645 404040404040404040-
   403 0000064E 404020202020202020-
   403 00000657 2020202020203D4040-
   403 00000660 3B2020202020202020-
   403 00000669 202024202020204040-
   403 00000672 4040402020202020   
   404 0000067A 202020202020202020-     db '          @#             @@@@@@@@@@@@#          @ @@@@                 @@@      '     
   404 00000683 204023202020202020-
   404 0000068C 202020202020204040-
   404 00000695 404040404040404040-
   404 0000069E 402320202020202020-
   404 000006A7 202020402040404040-
   404 000006B0 202020202020202020-
   404 000006B9 202020202020202040-
   404 000006C2 4040202020202020   
   405 000006CA 202020202020202020-     db '          @#                        @@         $@@!@@                 =@@@@;    '     
   405 000006D3 204023202020202020-
   405 000006DC 202020202020202020-
   405 000006E5 202020202020202020-
   405 000006EE 404020202020202020-
   405 000006F7 202024404021404020-
   405 00000700 202020202020202020-
   405 00000709 202020202020203D40-
   405 00000712 4040403B20202020   
   406 0000071A 202020202020202020-     db '          @#                        @@        @@@@   @@@@@@@@@      .@@@@@@@@@  '     
   406 00000723 204023202020202020-
   406 0000072C 202020202020202020-
   406 00000735 202020202020202020-
   406 0000073E 404020202020202020-
   406 00000747 204040404020202040-
   406 00000750 404040404040404020-
   406 00000759 20202020202E404040-
   406 00000762 4040404040402020   
   407 0000076A 202020202020202020-     db '          @#                        @@.      @@@@    @@@@@@@@@    :@@@@.   @@@@@'    
   407 00000773 204023202020202020-
   407 0000077C 202020202020202020-
   407 00000785 202020202020202020-
   407 0000078E 40402E202020202020-
   407 00000797 404040402020202040-
   407 000007A0 404040404040404020-
   407 000007A9 2020203A404040402E-
   407 000007B2 2020204040404040   
   408 000007BA 202020202020202020-     db '          @#                        @@@     @@@:     ,  =@  .;-#@@@@@*  @@   $@@'    
   408 000007C3 204023202020202020-
   408 000007CC 202020202020202020-
   408 000007D5 202020202020202020-
   408 000007DE 404040202020202040-
   408 000007E7 40403A20202020202C-
   408 000007F0 20203D4020202E3B2D-
   408 000007F9 2340404040402A2020-
   408 00000802 4040202020244040   
   409 0000080A 202020202020202020-     db '          @#                        @@@   ,@@@          =@    :@@@@!    @$     .'     
   409 00000813 204023202020202020-
   409 0000081C 202020202020202020-
   409 00000825 202020202020202020-
   409 0000082E 4040402020202C4040-
   409 00000837 402020202020202020-
   409 00000840 20203D40202020203A-
   409 00000849 404040402120202020-
   409 00000852 402420202020202E   
   410 0000085A 404040404040404040-     db '@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@.   @@@@ #@@;           =@              @,      '     
   410 00000863 404040404040404040-
   410 0000086C 402040404040404040-
   410 00000875 40404040402E202020-
   410 0000087E 40404040202340403B-
   410 00000887 202020202020202020-
   410 00000890 20203D402020202020-
   410 00000899 202020202020202020-
   410 000008A2 402C202020202020   
   411 000008AA 404040404040404040-     db '@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@    @#@@@@@             =@              @.      '
   411 000008B3 404040404040404040-
   411 000008BC 402040404040404040-
   411 000008C5 404040404020202020-
   411 000008CE 402340404040402020-
   411 000008D7 202020202020202020-
   411 000008E0 20203D402020202020-
   411 000008E9 202020202020202020-
   411 000008F2 402E202020202020   
   412 000008FA 202020202020202020-     db '          @#                 @@=    @# @@*              =@      @@#$$$$$@#$$$$#@'     
   412 00000903 204023202020202020-
   412 0000090C 202020202020202020-
   412 00000915 202040403D20202020-
   412 0000091E 40232040402A202020-
   412 00000927 202020202020202020-
   412 00000930 20203D402020202020-
   412 00000939 204040232424242424-
   412 00000942 4023242424242340   
   413 0000094A 202020202020202020-     db '          @#                 @@     @#  @@         @@@@@@@@@@@@         @.      '     
   413 00000953 204023202020202020-
   413 0000095C 202020202020202020-
   413 00000965 202040402020202020-
   413 0000096E 402320204040202020-
   413 00000977 202020202020404040-
   413 00000980 404040404040404040-
   413 00000989 202020202020202020-
   413 00000992 402E202020202020   
   414 0000099A 202020202020202020-     db '          @#                =@@     @#  !@@        @@@@@@@@@@@@         @.      '     
   414 000009A3 204023202020202020-
   414 000009AC 202020202020202020-
   414 000009B5 203D40402020202020-
   414 000009BE 402320202140402020-
   414 000009C7 202020202020404040-
   414 000009D0 404040404040404040-
   414 000009D9 202020202020202020-
   414 000009E2 402E202020202020   
   415 000009EA 202020202020202020-     db '          @#               @@@      @#    @@@           =@       @@@@@@@@@@@@@@!'             
   415 000009F3 204023202020202020-
   415 000009FC 202020202020202020-
   415 00000A05 404040202020202020-
   415 00000A0E 402320202020404040-
   415 00000A17 202020202020202020-
   415 00000A20 20203D402020202020-
   415 00000A29 202040404040404040-
   415 00000A32 4040404040404021   
   416 00000A3A 202020202020202020-     db '          @#              @@=       @#      @@@         =@              @.      '     
   416 00000A43 204023202020202020-
   416 00000A4C 202020202020202040-
   416 00000A55 403D20202020202020-
   416 00000A5E 402320202020202040-
   416 00000A67 404020202020202020-
   416 00000A70 20203D402020202020-
   416 00000A79 202020202020202020-
   416 00000A82 402E202020202020   
   417 00000A8A 202020202020202020-     db '          @#            @@@         @#        @@@@      =@   #          @.      '     
   417 00000A93 204023202020202020-
   417 00000A9C 202020202020404040-
   417 00000AA5 202020202020202020-
   417 00000AAE 402320202020202020-
   417 00000AB7 204040404020202020-
   417 00000AC0 20203D402020202320-
   417 00000AC9 202020202020202020-
   417 00000AD2 402E202020202020   
   418 00000ADA 3B3B3B3B3B3B3B3B3B-     db ';;;;;;;;;;@@;;;;;;;  #@@@           @#          #@      =@ @@@ @@@@@@@@@@@@@@@@@'     
   418 00000AE3 3B40403B3B3B3B3B3B-
   418 00000AEC 3B2020234040402020-
   418 00000AF5 202020202020202020-
   418 00000AFE 402320202020202020-
   418 00000B07 202020234020202020-
   418 00000B10 20203D402040404020-
   418 00000B19 404040404040404040-
   418 00000B22 4040404040404040   
   419 00000B2A 404040404040404040-     db '@@@@@@@@@@@@@@@@@@@ @@@@            @#                  $@@@@           @.      '     
   419 00000B33 404040404040404040-
   419 00000B3C 402040404040202020-
   419 00000B45 202020202020202020-
   419 00000B4E 402320202020202020-
   419 00000B57 202020202020202020-
   419 00000B60 202024404040402020-
   419 00000B69 202020202020202020-
   419 00000B72 402E202020202020   
   420 00000B7A 232A21212121212121-     db '#*!!!!!!!!!!!!!!!!! @@$             @#                  @@@@            @.      '      
   420 00000B83 212121212121212121-
   420 00000B8C 212040402420202020-
   420 00000B95 202020202020202020-
   420 00000B9E 402320202020202020-
   420 00000BA7 202020202020202020-
   420 00000BB0 202040404040202020-
   420 00000BB9 202020202020202020-
   420 00000BC2 402E202020202020   
   421 00000BCA 202020202020202020-     db '                                    @@,                 @@,                     '    
   421 00000BD3 202020202020202020-
   421 00000BDC 202020202020202020-
   421 00000BE5 202020202020202020-
   421 00000BEE 40402C202020202020-
   421 00000BF7 202020202020202020-
   421 00000C00 202040402C20202020-
   421 00000C09 202020202020202020-
   421 00000C12 2020202020202020   
